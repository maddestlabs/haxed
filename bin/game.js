// Generated by Haxe 4.3.4
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe.Exception.thrown("EReg::matched");
		}
	}
	matchedPos() {
		if(this.r.m == null) {
			throw haxe.Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			let b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			let b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static strDate(s) {
		switch(s.length) {
		case 8:
			let k = s.split(":");
			let d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			let k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			let k2 = s.split(" ");
			let y = k2[0].split("-");
			let t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw haxe.Exception.thrown("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class IntIterator {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
	hasNext() {
		return this.min < this.max;
	}
	next() {
		return this.min++;
	}
}
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
Object.assign(IntIterator.prototype, {
	__class__: IntIterator
});
class Lambda {
	static array(it) {
		let a = [];
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			a.push(i1);
		}
		return a;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
}
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
var h3d = {};
h3d.IDrawable = class h3d_IDrawable {
}
$hxClasses["h3d.IDrawable"] = h3d.IDrawable;
h3d.IDrawable.__name__ = "h3d.IDrawable";
h3d.IDrawable.__isInterface__ = true;
Object.assign(h3d.IDrawable.prototype, {
	__class__: h3d.IDrawable
});
var hxd = {};
hxd.App = class hxd_App {
	constructor() {
		let engine = h3d.Engine.CURRENT;
		let _gthis = this;
		if(engine != null) {
			this.engine = engine;
			engine.onReady = $bind(this,this.setup);
			haxe.Timer.delay($bind(this,this.setup),0);
		} else {
			hxd.System.start(function() {
				engine = new h3d.Engine();
				_gthis.engine = engine;
				engine.onReady = $bind(_gthis,_gthis.setup);
				engine.init();
			});
		}
	}
	onResize() {
	}
	setScene(scene,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		let new2D = ((scene) instanceof h2d.Scene) ? scene : null;
		let new3D = ((scene) instanceof h3d.scene.Scene) ? scene : null;
		if(new2D != null) {
			this.sevents.removeScene(this.s2d);
			this.sevents.addScene(scene,0);
		} else {
			if(new3D != null) {
				this.sevents.removeScene(this.s3d);
			}
			this.sevents.addScene(scene);
		}
		if(disposePrevious) {
			if(new2D != null) {
				this.s2d.dispose();
			} else if(new3D != null) {
				this.s3d.dispose();
			} else {
				throw haxe.Exception.thrown("Can't dispose previous scene");
			}
		}
		if(new2D != null) {
			this.s2d = new2D;
		}
		if(new3D != null) {
			this.s3d = new3D;
		}
	}
	setCurrent() {
		this.engine = h3d.Engine.CURRENT;
		this.isDisposed = false;
		this.engine.onReady = hxd.App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		let _gthis = this;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			_gthis.onResize();
		};
		hxd.System.setLoop($bind(this,this.mainLoop));
	}
	onContextLost() {
		if(this.s3d != null) {
			this.s3d.onContextLost();
		}
	}
	setScene2D(s2d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s2d);
		this.sevents.addScene(s2d,0);
		if(disposePrevious) {
			this.s2d.dispose();
		}
		this.s2d = s2d;
	}
	setScene3D(s3d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s3d);
		this.sevents.addScene(s3d);
		if(disposePrevious) {
			this.s3d.dispose();
		}
		this.s3d = s3d;
	}
	render(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	setup() {
		let initDone = false;
		this.engine.onReady = hxd.App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		let _gthis = this;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d.scene.Scene();
		this.s2d = new h2d.Scene();
		this.sevents = new hxd.SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd.Timer.skip();
			_gthis.mainLoop();
			hxd.System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd.Key.initialize();
		});
	}
	dispose() {
		this.engine.onResized = hxd.App.staticHandler;
		this.engine.onContextLost = hxd.App.staticHandler;
		this.isDisposed = true;
		if(this.s2d != null) {
			this.s2d.dispose();
		}
		if(this.s3d != null) {
			this.s3d.dispose();
		}
		if(this.sevents != null) {
			this.sevents.dispose();
		}
	}
	loadAssets(onLoaded) {
		onLoaded();
	}
	init() {
	}
	mainLoop() {
		hxd.Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd.Timer.dt);
		if(this.isDisposed) {
			return;
		}
		let dt = hxd.Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	update(dt) {
	}
	static staticHandler() {
	}
}
$hxClasses["hxd.App"] = hxd.App;
hxd.App.__name__ = "hxd.App";
hxd.App.__interfaces__ = [h3d.IDrawable];
Object.assign(hxd.App.prototype, {
	__class__: hxd.App
});
class Main extends hxd.App {
	constructor() {
		super();
	}
	init() {
		this.scene = this.s2d;
		this.parser = new hscript.Parser();
		this.interpreter = new hscript.Interp();
		this.interpreter.variables.h["Scene"] = h2d.Scene;
		this.interpreter.variables.h["Text"] = h2d.Text;
		this.interpreter.variables.h["scene"] = this.scene;
		this.loadUserScript();
	}
	loadUserScript() {
		let request = new haxe.http.HttpJs("index.hx");
		let _gthis = this;
		request.onData = function(data) {
			try {
				let program = _gthis.parser.parseString(data);
				_gthis.interpreter.execute(program);
			} catch( _g ) {
				let e = haxe.Exception.caught(_g).unwrap();
				let errorText = new h2d.Text(_gthis.getFont(),_gthis.scene);
				errorText.set_text("Error executing script: " + Std.string(e));
				errorText.set_textColor(16711680);
			}
		};
		request.onError = function(error) {
			let errorText = new h2d.Text(_gthis.getFont(),_gthis.scene);
			errorText.set_text("Error loading script: " + error);
			errorText.set_textColor(16711680);
		};
		request.request();
	}
	getFont() {
		return hxd.res.DefaultFont.get();
	}
	static main() {
		new Main();
	}
}
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = hxd.App;
Object.assign(Main.prototype, {
	__class__: Main
});
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		let t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
	static makeVarArgs(f) {
		return function() {
			let a = Array.prototype.slice;
			let a1 = arguments;
			let a2 = a.call(a1);
			return f(a2);
		};
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static string(s) {
		return js.Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		let v = parseInt(x);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		let s = "";
		let hexChars = "0123456789ABCDEF";
		do {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
		} while(n > 0);
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
class Type {
	static createInstance(cl,args) {
		let ctor = Function.prototype.bind.apply(cl,[null].concat(args));
		return new (ctor);
	}
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe.Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe.Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe.Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		let c;
		let _g = e.__constructs__[index];
		if(_g == null) {
			c = null;
		} else {
			let ctor = _g;
			c = ctor._hx_name;
		}
		if(c == null) {
			throw haxe.Exception.thrown(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			let e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			let enm = $hxEnums[e];
			let params = enm.__constructs__[a._hx_index].__params__;
			let _g = 0;
			while(_g < params.length) {
				let f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( _g ) {
			return false;
		}
		return true;
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let params = enm.__constructs__[e._hx_index].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class XmlType {
	static toString(this1) {
		switch(this1) {
		case 0:
			return "Element";
		case 1:
			return "PCData";
		case 2:
			return "CData";
		case 3:
			return "Comment";
		case 4:
			return "DocType";
		case 5:
			return "ProcessingInstruction";
		case 6:
			return "Document";
		}
	}
}
class Xml {
	constructor(nodeType) {
		this.nodeType = nodeType;
		this.children = [];
		this.attributeMap = new haxe.ds.StringMap();
	}
	get(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	set(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	exists(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	attributes() {
		if(this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe.ds._StringMap.StringMapKeyIterator(this.attributeMap.h);
	}
	elements() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.children;
		while(_g1 < _g2.length) {
			let child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		let ret = _g;
		return new haxe.iterators.ArrayIterator(ret);
	}
	elementsNamed(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.children;
		while(_g1 < _g2.length) {
			let child = _g2[_g1];
			++_g1;
			let tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		let ret = _g;
		return new haxe.iterators.ArrayIterator(ret);
	}
	firstElement() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	addChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	removeChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	toString() {
		return haxe.xml.Printer.print(this);
	}
	static parse(str) {
		return haxe.xml.Parser.parse(str);
	}
	static createElement(name) {
		let xml = new Xml(Xml.Element);
		if(xml.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeName = name;
		return xml;
	}
	static createPCData(data) {
		let xml = new Xml(Xml.PCData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createCData(data) {
		let xml = new Xml(Xml.CData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createComment(data) {
		let xml = new Xml(Xml.Comment);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocType(data) {
		let xml = new Xml(Xml.DocType);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createProcessingInstruction(data) {
		let xml = new Xml(Xml.ProcessingInstruction);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocument() {
		return new Xml(Xml.Document);
	}
}
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Object.assign(Xml.prototype, {
	__class__: Xml
});
var format = {};
format.gif = {};
format.gif.Block = $hxEnums["format.gif.Block"] = { __ename__:true,__constructs__:null
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BFrame",$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BExtension",$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_name:"BEOF",_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format.gif.Block.__constructs__ = [format.gif.Block.BFrame,format.gif.Block.BExtension,format.gif.Block.BEOF];
format.gif.Block.__empty_constructs__ = [format.gif.Block.BEOF];
format.gif.Extension = $hxEnums["format.gif.Extension"] = { __ename__:true,__constructs__:null
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EGraphicControl",$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EComment",$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EText",$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EApplicationExtension",$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EUnknown",$_.__params__ = ["id","data"],$_)
};
format.gif.Extension.__constructs__ = [format.gif.Extension.EGraphicControl,format.gif.Extension.EComment,format.gif.Extension.EText,format.gif.Extension.EApplicationExtension,format.gif.Extension.EUnknown];
format.gif.Extension.__empty_constructs__ = [];
format.gif.ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__:true,__constructs__:null
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AENetscapeLooping",$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AEUnknown",$_.__params__ = ["name","version","data"],$_)
};
format.gif.ApplicationExtension.__constructs__ = [format.gif.ApplicationExtension.AENetscapeLooping,format.gif.ApplicationExtension.AEUnknown];
format.gif.ApplicationExtension.__empty_constructs__ = [];
format.gif.Version = $hxEnums["format.gif.Version"] = { __ename__:true,__constructs__:null
	,GIF87a: {_hx_name:"GIF87a",_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_name:"GIF89a",_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["version"],$_)
};
format.gif.Version.__constructs__ = [format.gif.Version.GIF87a,format.gif.Version.GIF89a,format.gif.Version.Unknown];
format.gif.Version.__empty_constructs__ = [format.gif.Version.GIF87a,format.gif.Version.GIF89a];
format.gif.DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__:true,__constructs__:null
	,UNSPECIFIED: {_hx_name:"UNSPECIFIED",_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_name:"NO_ACTION",_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_name:"FILL_BACKGROUND",_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_name:"RENDER_PREVIOUS",_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_._hx_name="UNDEFINED",$_.__params__ = ["index"],$_)
};
format.gif.DisposalMethod.__constructs__ = [format.gif.DisposalMethod.UNSPECIFIED,format.gif.DisposalMethod.NO_ACTION,format.gif.DisposalMethod.FILL_BACKGROUND,format.gif.DisposalMethod.RENDER_PREVIOUS,format.gif.DisposalMethod.UNDEFINED];
format.gif.DisposalMethod.__empty_constructs__ = [format.gif.DisposalMethod.UNSPECIFIED,format.gif.DisposalMethod.NO_ACTION,format.gif.DisposalMethod.FILL_BACKGROUND,format.gif.DisposalMethod.RENDER_PREVIOUS];
format.gif.Reader = class format_gif_Reader {
	constructor(i) {
		this.i = i;
		i.set_bigEndian(false);
	}
	read() {
		let b = 71;
		if(this.i.readByte() != b) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b1 = 73;
		if(this.i.readByte() != b1) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b2 = 70;
		if(this.i.readByte() != b2) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let gifVer = this.i.readString(3);
		let version = format.gif.Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format.gif.Version.GIF87a;
			break;
		case "89a":
			version = format.gif.Version.GIF89a;
			break;
		default:
			version = format.gif.Version.Unknown(gifVer);
		}
		let width = this.i.readUInt16();
		let height = this.i.readUInt16();
		let packedField = this.i.readByte();
		let bgIndex = this.i.readByte();
		let pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		let lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		let gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		let blocks = new haxe.ds.List();
		while(true) {
			let b = this.readBlock();
			blocks.add(b);
			if(b == format.gif.Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	readBlock() {
		let blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format.gif.Block.BEOF;
		}
		return format.gif.Block.BEOF;
	}
	readImage() {
		let x = this.i.readUInt16();
		let y = this.i.readUInt16();
		let width = this.i.readUInt16();
		let height = this.i.readUInt16();
		let packed = this.i.readByte();
		let localColorTable = (packed & 128) == 128;
		let interlaced = (packed & 64) == 64;
		let sorted = (packed & 32) == 32;
		let localColorTableSize = 2 << (packed & 7);
		let lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format.gif.Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	readPixels(width,height,interlaced) {
		let input = this.i;
		let pixelsCount = width * height;
		let pixels = new haxe.io.Bytes(new ArrayBuffer(pixelsCount));
		let minCodeSize = input.readByte();
		let blockSize = input.readByte() - 1;
		let bits = input.readByte();
		let bitsCount = 8;
		let clearCode = 1 << minCodeSize;
		let eoiCode = clearCode + 1;
		let codeSize = minCodeSize + 1;
		let codeSizeLimit = 1 << codeSize;
		let codeMask = codeSizeLimit - 1;
		let baseDict = [];
		let _g = 0;
		let _g1 = clearCode;
		while(_g < _g1) {
			let i = _g++;
			baseDict[i] = [i];
		}
		let dict = [];
		let dictLen = clearCode + 2;
		let newRecord;
		let i = 0;
		let code = 0;
		let last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe.Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			let _g = 0;
			while(_g < newRecord.length) {
				let item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			let buffer = new haxe.io.Bytes(new ArrayBuffer(pixelsCount));
			let offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	deinterlace(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	readExtension() {
		let subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe.Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			let tmp = this.i.readUInt16();
			let tmp1 = this.i.readUInt16();
			let tmp2 = this.i.readUInt16();
			let tmp3 = this.i.readUInt16();
			let tmp4 = this.i.readByte();
			let tmp5 = this.i.readByte();
			let tmp6 = this.i.readByte();
			let tmp7 = this.i.readByte();
			let buffer = new haxe.io.BytesOutput();
			let bytes = new haxe.io.Bytes(new ArrayBuffer(255));
			let len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format.gif.Block.BExtension(format.gif.Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe.Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			let packed = this.i.readByte();
			let disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format.gif.DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format.gif.DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format.gif.DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format.gif.DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format.gif.DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			let b = format.gif.Block.BExtension(format.gif.Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			let buffer1 = new haxe.io.BytesOutput();
			let bytes1 = new haxe.io.Bytes(new ArrayBuffer(255));
			let len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format.gif.Block.BExtension(format.gif.Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			let buffer2 = new haxe.io.BytesOutput();
			let bytes2 = new haxe.io.Bytes(new ArrayBuffer(255));
			let len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format.gif.Block.BExtension(format.gif.Extension.EUnknown(subId,bytes2));
		}
	}
	readApplicationExtension() {
		if(this.i.readByte() != 11) {
			throw haxe.Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		let name = this.i.readString(8);
		let version = this.i.readString(3);
		let buffer = new haxe.io.BytesOutput();
		let bytes = new haxe.io.Bytes(new ArrayBuffer(255));
		let len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		let data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format.gif.Block.BExtension(format.gif.Extension.EApplicationExtension(format.gif.ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format.gif.Block.BExtension(format.gif.Extension.EApplicationExtension(format.gif.ApplicationExtension.AEUnknown(name,version,data)));
	}
	readBlocks() {
		let buffer = new haxe.io.BytesOutput();
		let bytes = new haxe.io.Bytes(new ArrayBuffer(255));
		let len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		return bytes;
	}
	readColorTable(size) {
		size *= 3;
		let output = new haxe.io.Bytes(new ArrayBuffer(size));
		let c = 0;
		while(c < size) {
			let v = this.i.readByte();
			output.b[c] = v;
			let v1 = this.i.readByte();
			output.b[c + 1] = v1;
			let v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
}
$hxClasses["format.gif.Reader"] = format.gif.Reader;
format.gif.Reader.__name__ = "format.gif.Reader";
Object.assign(format.gif.Reader.prototype, {
	__class__: format.gif.Reader
});
format.gif.Tools = class format_gif_Tools {
	static framesCount(data) {
		let frames = 0;
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			if(block._hx_index == 0) {
				let _g = block.frame;
				++frames;
			}
		}
		return frames;
	}
	static frame(data,frameIndex) {
		let counter = 0;
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			if(block._hx_index == 0) {
				let frame = block.frame;
				if(counter == frameIndex) {
					return frame;
				}
				++counter;
			}
		}
		return null;
	}
	static graphicControl(data,frameIndex) {
		let counter = 0;
		let gce = null;
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			switch(block._hx_index) {
			case 0:
				let frame = block.frame;
				if(counter == frameIndex) {
					return gce;
				}
				gce = null;
				++counter;
				break;
			case 1:
				let _g = block.extension;
				if(_g._hx_index == 0) {
					let g = _g.gce;
					gce = g;
				}
				break;
			default:
			}
		}
		return null;
	}
	static extractBGRA(data,frameIndex) {
		let gce = null;
		let frameCaret = 0;
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			switch(block._hx_index) {
			case 0:
				let frame = block.frame;
				if(frameCaret == frameIndex) {
					let bytes = new haxe.io.Bytes(new ArrayBuffer(frame.width * frame.height * 4));
					let ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
					if(ct == null) {
						throw haxe.Exception.thrown("Frame does not have a color table!");
					}
					let transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
					let writeCaret = 0;
					let _g = 0;
					let _g1 = frame.pixels.length;
					while(_g < _g1) {
						let i = _g++;
						let index = frame.pixels.b[i] * 3;
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						if(transparentIndex == index) {
							bytes.b[writeCaret + 3] = 0;
						} else {
							bytes.b[writeCaret + 3] = 255;
						}
						writeCaret += 4;
					}
					return bytes;
				}
				++frameCaret;
				gce = null;
				break;
			case 1:
				let ext = block.extension;
				if(ext._hx_index == 0) {
					let g = ext.gce;
					gce = g;
				}
				break;
			default:
			}
		}
		return null;
	}
	static extractRGBA(data,frameIndex) {
		let gce = null;
		let frameCaret = 0;
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			switch(block._hx_index) {
			case 0:
				let frame = block.frame;
				if(frameCaret == frameIndex) {
					let bytes = new haxe.io.Bytes(new ArrayBuffer(frame.width * frame.height * 4));
					let ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
					if(ct == null) {
						throw haxe.Exception.thrown("Frame does not have a color table!");
					}
					let transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
					let writeCaret = 0;
					let _g = 0;
					let _g1 = frame.pixels.length;
					while(_g < _g1) {
						let i = _g++;
						let index = frame.pixels.b[i] * 3;
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						if(transparentIndex == index) {
							bytes.b[writeCaret + 3] = 0;
						} else {
							bytes.b[writeCaret + 3] = 255;
						}
						writeCaret += 4;
					}
					return bytes;
				}
				++frameCaret;
				gce = null;
				break;
			case 1:
				let ext = block.extension;
				if(ext._hx_index == 0) {
					let g = ext.gce;
					gce = g;
				}
				break;
			default:
			}
		}
		return null;
	}
	static extractFullBGRA(data,frameIndex) {
		let gce = null;
		let frameCaret = 0;
		let bytes = new haxe.io.Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			switch(block._hx_index) {
			case 0:
				let frame = block.frame;
				let ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe.Exception.thrown("Frame does not have a color table!");
				}
				let transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				let pixels = frame.pixels;
				let x = 0;
				let writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
				let lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
				let disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format.gif.DisposalMethod.NO_ACTION;
				switch(disposalMethod._hx_index) {
				case 2:
					let _g = 0;
					let _g1 = pixels.length;
					while(_g < _g1) {
						let i = _g++;
						bytes.b[writeCaret] = 0;
						bytes.b[writeCaret + 1] = 0;
						bytes.b[writeCaret + 2] = 0;
						bytes.b[writeCaret + 3] = 0;
						if(++x == frame.width) {
							x = 0;
							writeCaret += lineSkip;
						} else {
							writeCaret += 4;
						}
					}
					break;
				case 3:
					break;
				default:
					let _g2 = 0;
					let _g3 = pixels.length;
					while(_g2 < _g3) {
						let i = _g2++;
						let index = pixels.b[i] * 3;
						if(transparentIndex != index) {
							bytes.b[writeCaret] = ct.b[index + 2];
							bytes.b[writeCaret + 1] = ct.b[index + 1];
							bytes.b[writeCaret + 2] = ct.b[index];
							bytes.b[writeCaret + 3] = 255;
						}
						if(++x == frame.width) {
							x = 0;
							writeCaret += lineSkip;
						} else {
							writeCaret += 4;
						}
					}
				}
				if(frameCaret == frameIndex) {
					return bytes;
				}
				++frameCaret;
				gce = null;
				break;
			case 1:
				let ext = block.extension;
				if(ext._hx_index == 0) {
					let g = ext.gce;
					gce = g;
				}
				break;
			default:
			}
		}
		return bytes;
	}
	static extractFullRGBA(data,frameIndex) {
		let gce = null;
		let frameCaret = 0;
		let bytes = new haxe.io.Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			switch(block._hx_index) {
			case 0:
				let frame = block.frame;
				let ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe.Exception.thrown("Frame does not have a color table!");
				}
				let transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				let pixels = frame.pixels;
				let x = 0;
				let writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
				let lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
				let disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format.gif.DisposalMethod.NO_ACTION;
				switch(disposalMethod._hx_index) {
				case 2:
					let _g = 0;
					let _g1 = pixels.length;
					while(_g < _g1) {
						let i = _g++;
						bytes.b[writeCaret] = 0;
						bytes.b[writeCaret + 1] = 0;
						bytes.b[writeCaret + 2] = 0;
						bytes.b[writeCaret + 3] = 0;
						if(++x == frame.width) {
							x = 0;
							writeCaret += lineSkip;
						} else {
							writeCaret += 4;
						}
					}
					break;
				case 3:
					break;
				default:
					let _g2 = 0;
					let _g3 = pixels.length;
					while(_g2 < _g3) {
						let i = _g2++;
						let index = pixels.b[i] * 3;
						if(transparentIndex != index) {
							bytes.b[writeCaret] = ct.b[index];
							bytes.b[writeCaret + 1] = ct.b[index + 1];
							bytes.b[writeCaret + 2] = ct.b[index + 2];
							bytes.b[writeCaret + 3] = 255;
						}
						if(++x == frame.width) {
							x = 0;
							writeCaret += lineSkip;
						} else {
							writeCaret += 4;
						}
					}
				}
				if(frameCaret == frameIndex) {
					return bytes;
				}
				++frameCaret;
				gce = null;
				break;
			case 1:
				let ext = block.extension;
				if(ext._hx_index == 0) {
					let g = ext.gce;
					gce = g;
				}
				break;
			default:
			}
		}
		return bytes;
	}
	static loopCount(data) {
		let _g_head = data.blocks.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let block = val;
			if(block._hx_index == 1) {
				let _g = block.extension;
				if(_g._hx_index == 3) {
					let _g1 = _g.ext;
					if(_g1._hx_index == 0) {
						let loops = _g1.loops;
						return loops;
					}
				}
			}
		}
		return 1;
	}
	static log2(val) {
		return Math.log(val) / format.gif.Tools.LN2;
	}
}
$hxClasses["format.gif.Tools"] = format.gif.Tools;
format.gif.Tools.__name__ = "format.gif.Tools";
format.mp3 = {};
format.mp3.SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__:true,__constructs__:null
	,SR_8000: {_hx_name:"SR_8000",_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_name:"SR_11025",_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_name:"SR_12000",_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_name:"SR_22050",_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_name:"SR_24000",_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_name:"SR_32000",_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_name:"SR_44100",_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_name:"SR_48000",_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_name:"SR_Bad",_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format.mp3.SamplingRate.__constructs__ = [format.mp3.SamplingRate.SR_8000,format.mp3.SamplingRate.SR_11025,format.mp3.SamplingRate.SR_12000,format.mp3.SamplingRate.SR_22050,format.mp3.SamplingRate.SR_24000,format.mp3.SamplingRate.SR_32000,format.mp3.SamplingRate.SR_44100,format.mp3.SamplingRate.SR_48000,format.mp3.SamplingRate.SR_Bad];
format.mp3.SamplingRate.__empty_constructs__ = [format.mp3.SamplingRate.SR_8000,format.mp3.SamplingRate.SR_11025,format.mp3.SamplingRate.SR_12000,format.mp3.SamplingRate.SR_22050,format.mp3.SamplingRate.SR_24000,format.mp3.SamplingRate.SR_32000,format.mp3.SamplingRate.SR_44100,format.mp3.SamplingRate.SR_48000,format.mp3.SamplingRate.SR_Bad];
format.mp3.Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__:true,__constructs__:null
	,BR_8: {_hx_name:"BR_8",_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_name:"BR_16",_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_name:"BR_24",_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_name:"BR_32",_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_name:"BR_40",_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_name:"BR_48",_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_name:"BR_56",_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_name:"BR_64",_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_name:"BR_80",_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_name:"BR_96",_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_name:"BR_112",_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_name:"BR_128",_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_name:"BR_144",_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_name:"BR_160",_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_name:"BR_176",_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_name:"BR_192",_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_name:"BR_224",_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_name:"BR_256",_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_name:"BR_288",_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_name:"BR_320",_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_name:"BR_352",_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_name:"BR_384",_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_name:"BR_416",_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_name:"BR_448",_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_name:"BR_Free",_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_name:"BR_Bad",_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format.mp3.Bitrate.__constructs__ = [format.mp3.Bitrate.BR_8,format.mp3.Bitrate.BR_16,format.mp3.Bitrate.BR_24,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_40,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_144,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_176,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_288,format.mp3.Bitrate.BR_320,format.mp3.Bitrate.BR_352,format.mp3.Bitrate.BR_384,format.mp3.Bitrate.BR_416,format.mp3.Bitrate.BR_448,format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_Bad];
format.mp3.Bitrate.__empty_constructs__ = [format.mp3.Bitrate.BR_8,format.mp3.Bitrate.BR_16,format.mp3.Bitrate.BR_24,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_40,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_144,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_176,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_288,format.mp3.Bitrate.BR_320,format.mp3.Bitrate.BR_352,format.mp3.Bitrate.BR_384,format.mp3.Bitrate.BR_416,format.mp3.Bitrate.BR_448,format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_Bad];
format.mp3.MPEG = class format_mp3_MPEG {
	static enum2Num(m) {
		switch(m._hx_index) {
		case 0:
			return 3;
		case 1:
			return 2;
		case 2:
			return 0;
		case 3:
			return format.mp3.MPEG.Reserved;
		}
	}
	static num2Enum(m) {
		switch(m) {
		case 0:
			return format.mp3.MPEGVersion.MPEG_V25;
		case 2:
			return format.mp3.MPEGVersion.MPEG_V2;
		case 3:
			return format.mp3.MPEGVersion.MPEG_V1;
		default:
			return format.mp3.MPEGVersion.MPEG_Reserved;
		}
	}
	static srNum2Enum(sr) {
		switch(sr) {
		case 8000:
			return format.mp3.SamplingRate.SR_8000;
		case 11025:
			return format.mp3.SamplingRate.SR_11025;
		case 12000:
			return format.mp3.SamplingRate.SR_12000;
		case 22050:
			return format.mp3.SamplingRate.SR_22050;
		case 24000:
			return format.mp3.SamplingRate.SR_24000;
		case 32000:
			return format.mp3.SamplingRate.SR_32000;
		case 44100:
			return format.mp3.SamplingRate.SR_44100;
		case 48000:
			return format.mp3.SamplingRate.SR_48000;
		default:
			return format.mp3.SamplingRate.SR_Bad;
		}
	}
	static srEnum2Num(sr) {
		switch(sr._hx_index) {
		case 0:
			return 8000;
		case 1:
			return 11025;
		case 2:
			return 12000;
		case 3:
			return 22050;
		case 4:
			return 24000;
		case 5:
			return 32000;
		case 6:
			return 44100;
		case 7:
			return 48000;
		case 8:
			return -1;
		}
	}
	static getBitrateIdx(br,mpeg,layer) {
		let arr = (mpeg == format.mp3.MPEGVersion.MPEG_V1 ? format.mp3.MPEG.V1_Bitrates : format.mp3.MPEG.V2_Bitrates)[format.mp3.CLayer.enum2Num(layer)];
		if(arr[0] == br) {
			return 0;
		}
		if(arr[1] == br) {
			return 1;
		}
		if(arr[2] == br) {
			return 2;
		}
		if(arr[3] == br) {
			return 3;
		}
		if(arr[4] == br) {
			return 4;
		}
		if(arr[5] == br) {
			return 5;
		}
		if(arr[6] == br) {
			return 6;
		}
		if(arr[7] == br) {
			return 7;
		}
		if(arr[8] == br) {
			return 8;
		}
		if(arr[9] == br) {
			return 9;
		}
		if(arr[10] == br) {
			return 10;
		}
		if(arr[11] == br) {
			return 11;
		}
		if(arr[12] == br) {
			return 12;
		}
		if(arr[13] == br) {
			return 13;
		}
		if(arr[14] == br) {
			return 14;
		}
		if(arr[15] == br) {
			return 15;
		}
		throw haxe.Exception.thrown("Bitrate index not found");
	}
	static getSamplingRateIdx(sr,mpeg) {
		let arr = format.mp3.MPEG.SamplingRates[format.mp3.MPEG.enum2Num(mpeg)];
		if(arr[0] == sr) {
			return 0;
		}
		if(arr[1] == sr) {
			return 1;
		}
		if(arr[2] == sr) {
			return 2;
		}
		if(arr[3] == sr) {
			return 3;
		}
		throw haxe.Exception.thrown("Sampling rate index not found");
	}
	static bitrateEnum2Num(br) {
		switch(br._hx_index) {
		case 0:
			return 8;
		case 1:
			return 16;
		case 2:
			return 24;
		case 3:
			return 32;
		case 4:
			return 40;
		case 5:
			return 48;
		case 6:
			return 56;
		case 7:
			return 64;
		case 8:
			return 80;
		case 9:
			return 96;
		case 10:
			return 112;
		case 11:
			return 128;
		case 12:
			return 144;
		case 13:
			return 160;
		case 14:
			return 176;
		case 15:
			return 192;
		case 16:
			return 224;
		case 17:
			return 256;
		case 18:
			return 288;
		case 19:
			return 320;
		case 20:
			return 352;
		case 21:
			return 384;
		case 22:
			return 416;
		case 23:
			return 448;
		case 24:
			return 0;
		case 25:
			return -1;
		}
	}
	static bitrateNum2Enum(br) {
		switch(br) {
		case 0:
			return format.mp3.Bitrate.BR_Free;
		case 8:
			return format.mp3.Bitrate.BR_8;
		case 16:
			return format.mp3.Bitrate.BR_16;
		case 24:
			return format.mp3.Bitrate.BR_24;
		case 32:
			return format.mp3.Bitrate.BR_32;
		case 40:
			return format.mp3.Bitrate.BR_40;
		case 48:
			return format.mp3.Bitrate.BR_48;
		case 56:
			return format.mp3.Bitrate.BR_56;
		case 64:
			return format.mp3.Bitrate.BR_64;
		case 80:
			return format.mp3.Bitrate.BR_80;
		case 96:
			return format.mp3.Bitrate.BR_96;
		case 112:
			return format.mp3.Bitrate.BR_112;
		case 128:
			return format.mp3.Bitrate.BR_128;
		case 144:
			return format.mp3.Bitrate.BR_144;
		case 160:
			return format.mp3.Bitrate.BR_160;
		case 176:
			return format.mp3.Bitrate.BR_176;
		case 192:
			return format.mp3.Bitrate.BR_192;
		case 224:
			return format.mp3.Bitrate.BR_224;
		case 256:
			return format.mp3.Bitrate.BR_256;
		case 288:
			return format.mp3.Bitrate.BR_288;
		case 320:
			return format.mp3.Bitrate.BR_320;
		case 352:
			return format.mp3.Bitrate.BR_352;
		case 384:
			return format.mp3.Bitrate.BR_384;
		case 416:
			return format.mp3.Bitrate.BR_416;
		case 448:
			return format.mp3.Bitrate.BR_448;
		default:
			return format.mp3.Bitrate.BR_Bad;
		}
	}
}
$hxClasses["format.mp3.MPEG"] = format.mp3.MPEG;
format.mp3.MPEG.__name__ = "format.mp3.MPEG";
format.mp3.CLayer = class format_mp3_CLayer {
	static enum2Num(l) {
		switch(l._hx_index) {
		case 0:
			return format.mp3.CLayer.LReserved;
		case 1:
			return format.mp3.CLayer.LLayer3;
		case 2:
			return format.mp3.CLayer.LLayer2;
		case 3:
			return format.mp3.CLayer.LLayer1;
		}
	}
	static num2Enum(l) {
		switch(l) {
		case 1:
			return format.mp3.Layer.Layer3;
		case 2:
			return format.mp3.Layer.Layer2;
		case 3:
			return format.mp3.Layer.Layer1;
		default:
			return format.mp3.Layer.LayerReserved;
		}
	}
}
$hxClasses["format.mp3.CLayer"] = format.mp3.CLayer;
format.mp3.CLayer.__name__ = "format.mp3.CLayer";
format.mp3.CChannelMode = class format_mp3_CChannelMode {
	static enum2Num(c) {
		switch(c._hx_index) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		}
	}
	static num2Enum(c) {
		switch(c) {
		case 0:
			return format.mp3.ChannelMode.Stereo;
		case 1:
			return format.mp3.ChannelMode.JointStereo;
		case 2:
			return format.mp3.ChannelMode.DualChannel;
		case 3:
			return format.mp3.ChannelMode.Mono;
		default:
			throw haxe.Exception.thrown("assert");
		}
	}
}
$hxClasses["format.mp3.CChannelMode"] = format.mp3.CChannelMode;
format.mp3.CChannelMode.__name__ = "format.mp3.CChannelMode";
format.mp3.CEmphasis = class format_mp3_CEmphasis {
	static enum2Num(c) {
		switch(c._hx_index) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 3;
		case 3:
			return 2;
		}
	}
	static num2Enum(c) {
		switch(c) {
		case 0:
			return format.mp3.Emphasis.NoEmphasis;
		case 1:
			return format.mp3.Emphasis.Ms50_15;
		case 2:
			return format.mp3.Emphasis.InvalidEmphasis;
		case 3:
			return format.mp3.Emphasis.CCIT_J17;
		default:
			throw haxe.Exception.thrown("assert");
		}
	}
}
$hxClasses["format.mp3.CEmphasis"] = format.mp3.CEmphasis;
format.mp3.CEmphasis.__name__ = "format.mp3.CEmphasis";
format.mp3.MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__:true,__constructs__:null
	,MPEG_V1: {_hx_name:"MPEG_V1",_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_name:"MPEG_V2",_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_name:"MPEG_V25",_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_name:"MPEG_Reserved",_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format.mp3.MPEGVersion.__constructs__ = [format.mp3.MPEGVersion.MPEG_V1,format.mp3.MPEGVersion.MPEG_V2,format.mp3.MPEGVersion.MPEG_V25,format.mp3.MPEGVersion.MPEG_Reserved];
format.mp3.MPEGVersion.__empty_constructs__ = [format.mp3.MPEGVersion.MPEG_V1,format.mp3.MPEGVersion.MPEG_V2,format.mp3.MPEGVersion.MPEG_V25,format.mp3.MPEGVersion.MPEG_Reserved];
format.mp3.Layer = $hxEnums["format.mp3.Layer"] = { __ename__:true,__constructs__:null
	,LayerReserved: {_hx_name:"LayerReserved",_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_name:"Layer3",_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_name:"Layer2",_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_name:"Layer1",_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format.mp3.Layer.__constructs__ = [format.mp3.Layer.LayerReserved,format.mp3.Layer.Layer3,format.mp3.Layer.Layer2,format.mp3.Layer.Layer1];
format.mp3.Layer.__empty_constructs__ = [format.mp3.Layer.LayerReserved,format.mp3.Layer.Layer3,format.mp3.Layer.Layer2,format.mp3.Layer.Layer1];
format.mp3.ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__:true,__constructs__:null
	,Stereo: {_hx_name:"Stereo",_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_name:"JointStereo",_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_name:"DualChannel",_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_name:"Mono",_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format.mp3.ChannelMode.__constructs__ = [format.mp3.ChannelMode.Stereo,format.mp3.ChannelMode.JointStereo,format.mp3.ChannelMode.DualChannel,format.mp3.ChannelMode.Mono];
format.mp3.ChannelMode.__empty_constructs__ = [format.mp3.ChannelMode.Stereo,format.mp3.ChannelMode.JointStereo,format.mp3.ChannelMode.DualChannel,format.mp3.ChannelMode.Mono];
format.mp3.Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__:true,__constructs__:null
	,NoEmphasis: {_hx_name:"NoEmphasis",_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_name:"Ms50_15",_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_name:"CCIT_J17",_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_name:"InvalidEmphasis",_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format.mp3.Emphasis.__constructs__ = [format.mp3.Emphasis.NoEmphasis,format.mp3.Emphasis.Ms50_15,format.mp3.Emphasis.CCIT_J17,format.mp3.Emphasis.InvalidEmphasis];
format.mp3.Emphasis.__empty_constructs__ = [format.mp3.Emphasis.NoEmphasis,format.mp3.Emphasis.Ms50_15,format.mp3.Emphasis.CCIT_J17,format.mp3.Emphasis.InvalidEmphasis];
format.mp3.FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__:true,__constructs__:null
	,FT_MP3: {_hx_name:"FT_MP3",_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_name:"FT_NONE",_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format.mp3.FrameType.__constructs__ = [format.mp3.FrameType.FT_MP3,format.mp3.FrameType.FT_NONE];
format.mp3.FrameType.__empty_constructs__ = [format.mp3.FrameType.FT_MP3,format.mp3.FrameType.FT_NONE];
format.mp3.Reader = class format_mp3_Reader {
	constructor(i) {
		this.i = i;
		i.set_bigEndian(true);
		this.bits = new format.tools.BitsInput(i);
		this.samples = 0;
		this.sampleSize = 0;
		this.any_read = false;
	}
	skipID3v2() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		let size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	seekFrame() {
		let found = false;
		try {
			let b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format.mp3.FrameType.FT_MP3;
					}
				}
			}
		} catch( _g ) {
			if(((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				return format.mp3.FrameType.FT_NONE;
			} else {
				throw _g;
			}
		}
	}
	readFrames() {
		let frames = [];
		let ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format.mp3.FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				let f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	readFrameHeader() {
		let version = this.bits.readBits(2);
		let layer = this.bits.readBits(2);
		let hasCrc = !this.bits.readBit();
		if(version == format.mp3.MPEG.Reserved || layer == format.mp3.CLayer.LReserved) {
			return null;
		}
		let bitrateIdx = this.bits.readBits(4);
		let bitrate = format.mp3.Tools.getBitrate(version,layer,bitrateIdx);
		let samplingRateIdx = this.bits.readBits(2);
		let samplingRate = format.mp3.Tools.getSamplingRate(version,samplingRateIdx);
		let isPadded = this.bits.readBit();
		let privateBit = this.bits.readBit();
		if(bitrate == format.mp3.Bitrate.BR_Bad || bitrate == format.mp3.Bitrate.BR_Free || samplingRate == format.mp3.SamplingRate.SR_Bad) {
			return null;
		}
		let channelMode = this.bits.readBits(2);
		let isIntensityStereo = this.bits.readBit();
		let isMSStereo = this.bits.readBit();
		let isCopyrighted = this.bits.readBit();
		let isOriginal = this.bits.readBit();
		let emphasis = this.bits.readBits(2);
		let crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format.mp3.MPEG.num2Enum(version), layer : format.mp3.CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format.mp3.CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format.mp3.CEmphasis.num2Enum(emphasis)};
	}
	readFrame() {
		let header = this.readFrameHeader();
		if(header == null || format.mp3.Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			let data = this.i.read(format.mp3.Tools.getSampleDataSizeHdr(header));
			this.samples += format.mp3.Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( _g ) {
			if(((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				return null;
			} else {
				throw _g;
			}
		}
	}
	read() {
		let fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
}
$hxClasses["format.mp3.Reader"] = format.mp3.Reader;
format.mp3.Reader.__name__ = "format.mp3.Reader";
Object.assign(format.mp3.Reader.prototype, {
	__class__: format.mp3.Reader
});
format.mp3.Tools = class format_mp3_Tools {
	static getBitrate(mpegVersion,layerIdx,bitrateIdx) {
		if(mpegVersion == format.mp3.MPEG.Reserved || layerIdx == format.mp3.CLayer.LReserved) {
			return format.mp3.Bitrate.BR_Bad;
		}
		return (mpegVersion == 3 ? format.mp3.MPEG.V1_Bitrates : format.mp3.MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
	}
	static getSamplingRate(mpegVersion,samplingRateIdx) {
		return format.mp3.MPEG.SamplingRates[mpegVersion][samplingRateIdx];
	}
	static isInvalidFrameHeader(hdr) {
		if(!(hdr.version == format.mp3.MPEGVersion.MPEG_Reserved || hdr.layer == format.mp3.Layer.LayerReserved || hdr.bitrate == format.mp3.Bitrate.BR_Bad || hdr.bitrate == format.mp3.Bitrate.BR_Free)) {
			return hdr.samplingRate == format.mp3.SamplingRate.SR_Bad;
		} else {
			return true;
		}
	}
	static getSampleDataSize(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
		return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
	}
	static getSampleDataSizeHdr(hdr) {
		return format.mp3.Tools.getSampleDataSize(format.mp3.MPEG.enum2Num(hdr.version),format.mp3.MPEG.bitrateEnum2Num(hdr.bitrate),format.mp3.MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
	}
	static getSampleCount(mpegVersion) {
		if(mpegVersion == 3) {
			return 1152;
		} else {
			return 576;
		}
	}
	static getSampleCountHdr(hdr) {
		return format.mp3.Tools.getSampleCount(format.mp3.MPEG.enum2Num(hdr.version));
	}
	static getFrameInfo(fr) {
		return Std.string(fr.header.version) + ", " + Std.string(fr.header.layer) + ", " + Std.string(fr.header.channelMode) + ", " + Std.string(fr.header.samplingRate) + " Hz, " + Std.string(fr.header.bitrate) + " kbps " + "Emphasis: " + Std.string(fr.header.emphasis) + ", " + (fr.header.hasCrc ? "(CRC) " : "") + (fr.header.isPadded ? "(Padded) " : "") + (fr.header.isIntensityStereo ? "(Intensity Stereo) " : "") + (fr.header.isMSStereo ? "(MS Stereo) " : "") + (fr.header.isCopyrighted ? "(Copyrighted) " : "") + (fr.header.isOriginal ? "(Original) " : "");
	}
}
$hxClasses["format.mp3.Tools"] = format.mp3.Tools;
format.mp3.Tools.__name__ = "format.mp3.Tools";
format.png = {};
format.png.Color = $hxEnums["format.png.Color"] = { __ename__:true,__constructs__:null
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColGrey",$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColTrue",$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_name:"ColIndexed",_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format.png.Color.__constructs__ = [format.png.Color.ColGrey,format.png.Color.ColTrue,format.png.Color.ColIndexed];
format.png.Color.__empty_constructs__ = [format.png.Color.ColIndexed];
format.png.Chunk = $hxEnums["format.png.Chunk"] = { __ename__:true,__constructs__:null
	,CEnd: {_hx_name:"CEnd",_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CHeader",$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CData",$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CPalette",$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CUnknown",$_.__params__ = ["id","data"],$_)
};
format.png.Chunk.__constructs__ = [format.png.Chunk.CEnd,format.png.Chunk.CHeader,format.png.Chunk.CData,format.png.Chunk.CPalette,format.png.Chunk.CUnknown];
format.png.Chunk.__empty_constructs__ = [format.png.Chunk.CEnd];
format.png.Reader = class format_png_Reader {
	constructor(i) {
		this.i = i;
		i.set_bigEndian(true);
		this.checkCRC = true;
	}
	read() {
		let b = 137;
		if(this.i.readByte() != b) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b1 = 80;
		if(this.i.readByte() != b1) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b2 = 78;
		if(this.i.readByte() != b2) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b3 = 71;
		if(this.i.readByte() != b3) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b4 = 13;
		if(this.i.readByte() != b4) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b5 = 10;
		if(this.i.readByte() != b5) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b6 = 26;
		if(this.i.readByte() != b6) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let b7 = 10;
		if(this.i.readByte() != b7) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let l = new haxe.ds.List();
		while(true) {
			let c = this.readChunk();
			l.add(c);
			if(c == format.png.Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	readHeader(i) {
		i.set_bigEndian(true);
		let width = i.readInt32();
		let height = i.readInt32();
		let colbits = i.readByte();
		let color = i.readByte();
		let color1;
		switch(color) {
		case 0:
			color1 = format.png.Color.ColGrey(false);
			break;
		case 2:
			color1 = format.png.Color.ColTrue(false);
			break;
		case 3:
			color1 = format.png.Color.ColIndexed;
			break;
		case 4:
			color1 = format.png.Color.ColGrey(true);
			break;
		case 6:
			color1 = format.png.Color.ColTrue(true);
			break;
		default:
			throw haxe.Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		let compress = i.readByte();
		let filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe.Exception.thrown("Invalid header");
		}
		let interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe.Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	readChunk() {
		let dataLen = this.i.readInt32();
		let id = this.i.readString(4);
		let data = this.i.read(dataLen);
		let crc = this.i.readInt32();
		if(this.checkCRC) {
			let c_crc = -1;
			let tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			let tmp1 = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp1;
			let tmp2 = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp2;
			let tmp3 = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp3;
			let b = data.b.bufferValue;
			let _g = 0;
			let _g1 = data.length;
			while(_g < _g1) {
				let i = _g++;
				let tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe.Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format.png.Chunk.CData(data);
		case "IEND":
			return format.png.Chunk.CEnd;
		case "IHDR":
			return format.png.Chunk.CHeader(this.readHeader(new haxe.io.BytesInput(data)));
		case "PLTE":
			return format.png.Chunk.CPalette(data);
		default:
			return format.png.Chunk.CUnknown(id,data);
		}
	}
}
$hxClasses["format.png.Reader"] = format.png.Reader;
format.png.Reader.__name__ = "format.png.Reader";
Object.assign(format.png.Reader.prototype, {
	__class__: format.png.Reader
});
format.png.Tools = class format_png_Tools {
	static getHeader(d) {
		let _g_head = d.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			if(c._hx_index == 1) {
				let h = c.h;
				return h;
			}
		}
		throw haxe.Exception.thrown("Header not found");
	}
	static getPalette(d) {
		let _g_head = d.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			if(c._hx_index == 3) {
				let b = c.b;
				return b;
			}
		}
		return null;
	}
	static filter(data,x,y,stride,prev,p,numChannels) {
		if(numChannels == null) {
			numChannels = 4;
		}
		let b = y == 0 ? 0 : data.b[p - stride];
		let c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
		let k = prev + b - c;
		let pa = k - prev;
		if(pa < 0) {
			pa = -pa;
		}
		let pb = k - b;
		if(pb < 0) {
			pb = -pb;
		}
		let pc = k - c;
		if(pc < 0) {
			pc = -pc;
		}
		if(pa <= pb && pa <= pc) {
			return prev;
		} else if(pb <= pc) {
			return b;
		} else {
			return c;
		}
	}
	static reverseBytes(b) {
		let p = 0;
		let _g = 0;
		let _g1 = b.length >> 2;
		while(_g < _g1) {
			let i = _g++;
			let b1 = b.b[p];
			let g = b.b[p + 1];
			let r = b.b[p + 2];
			let a = b.b[p + 3];
			b.b[p++] = a;
			b.b[p++] = r;
			b.b[p++] = g;
			b.b[p++] = b1;
		}
	}
	static extractGrey(d) {
		let h = format.png.Tools.getHeader(d);
		let grey = new haxe.io.Bytes(new ArrayBuffer(h.width * h.height));
		let data = null;
		let fullData = null;
		let _g_head = d.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			if(c._hx_index == 2) {
				let b = c.b;
				if(fullData != null) {
					fullData.add(b);
				} else if(data == null) {
					data = b;
				} else {
					fullData = new haxe.io.BytesBuffer();
					fullData.add(data);
					fullData.add(b);
					data = null;
				}
			}
		}
		if(fullData != null) {
			data = fullData.getBytes();
		}
		if(data == null) {
			throw haxe.Exception.thrown("Data not found");
		}
		data = format.tools.Inflate.run(data);
		let r = 0;
		let w = 0;
		let _g = h.color;
		if(_g._hx_index == 0) {
			let alpha = _g.alpha;
			if(h.colbits != 8) {
				throw haxe.Exception.thrown("Unsupported color mode");
			}
			let width = h.width;
			let stride = (alpha ? 2 : 1) * width + 1;
			if(data.length < h.height * stride) {
				throw haxe.Exception.thrown("Not enough data");
			}
			let rinc = alpha ? 2 : 1;
			let _g1 = 0;
			let _g2 = h.height;
			while(_g1 < _g2) {
				let y = _g1++;
				let f = data.b[r++];
				switch(f) {
				case 0:
					let _g = 0;
					let _g2 = width;
					while(_g < _g2) {
						let x = _g++;
						let v = data.b[r];
						r += rinc;
						grey.b[w++] = v;
					}
					break;
				case 1:
					let cv = 0;
					let _g3 = 0;
					let _g4 = width;
					while(_g3 < _g4) {
						let x = _g3++;
						cv += data.b[r];
						r += rinc;
						grey.b[w++] = cv;
					}
					break;
				case 2:
					let stride = y == 0 ? 0 : width;
					let _g5 = 0;
					let _g6 = width;
					while(_g5 < _g6) {
						let x = _g5++;
						let v = data.b[r] + grey.b[w - stride];
						r += rinc;
						grey.b[w++] = v;
					}
					break;
				case 3:
					let cv1 = 0;
					let stride1 = y == 0 ? 0 : width;
					let _g7 = 0;
					let _g8 = width;
					while(_g7 < _g8) {
						let x = _g7++;
						cv1 = data.b[r] + (cv1 + grey.b[w - stride1] >> 1) & 255;
						r += rinc;
						grey.b[w++] = cv1;
					}
					break;
				case 4:
					let stride2 = width;
					let cv2 = 0;
					let _g9 = 0;
					let _g10 = width;
					while(_g9 < _g10) {
						let x = _g9++;
						let numChannels = 1;
						if(numChannels == null) {
							numChannels = 4;
						}
						let b = y == 0 ? 0 : grey.b[w - stride2];
						let c = x == 0 || y == 0 ? 0 : grey.b[w - stride2 - numChannels];
						let k = cv2 + b - c;
						let pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						let pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						let pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[r] & 255;
						r += rinc;
						grey.b[w++] = cv2;
					}
					break;
				default:
					throw haxe.Exception.thrown("Invalid filter " + f);
				}
			}
		} else {
			throw haxe.Exception.thrown("Unsupported color mode");
		}
		return grey;
	}
	static extract32(d,bytes,flipY) {
		let h = format.png.Tools.getHeader(d);
		let bgra = bytes == null ? new haxe.io.Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
		let data = null;
		let fullData = null;
		let _g_head = d.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			if(c._hx_index == 2) {
				let b = c.b;
				if(fullData != null) {
					fullData.add(b);
				} else if(data == null) {
					data = b;
				} else {
					fullData = new haxe.io.BytesBuffer();
					fullData.add(data);
					fullData.add(b);
					data = null;
				}
			}
		}
		if(fullData != null) {
			data = fullData.getBytes();
		}
		if(data == null) {
			throw haxe.Exception.thrown("Data not found");
		}
		data = format.tools.Inflate.run(data);
		let r = 0;
		let w = 0;
		let lineDelta = 0;
		if(flipY) {
			lineDelta = -h.width * 8;
			w = (h.height - 1) * (h.width * 4);
		}
		let flipY1 = flipY ? -1 : 1;
		let _g = h.color;
		switch(_g._hx_index) {
		case 0:
			let alpha = _g.alpha;
			if(h.colbits != 8) {
				throw haxe.Exception.thrown("Unsupported color mode");
			}
			let width = h.width;
			let stride = (alpha ? 2 : 1) * width + 1;
			if(data.length < h.height * stride) {
				throw haxe.Exception.thrown("Not enough data");
			}
			let alphvaIdx = -1;
			if(!alpha) {
				let _g_head = d.h;
				while(_g_head != null) {
					let val = _g_head.item;
					_g_head = _g_head.next;
					let t = val;
					if(t._hx_index == 4) {
						if(t.id == "tRNS") {
							let data = t.data;
							if(data.length >= 2) {
								alphvaIdx = data.b[1];
							}
							break;
						}
					}
				}
			}
			let _g1 = 0;
			let _g2 = h.height;
			while(_g1 < _g2) {
				let y = _g1++;
				let f = data.b[r++];
				switch(f) {
				case 0:
					if(alpha) {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let v = data.b[r++];
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = data.b[r++];
						}
					} else {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let v = data.b[r++];
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v == alphvaIdx ? 0 : 255;
						}
					}
					break;
				case 1:
					let cv = 0;
					let ca = 0;
					if(alpha) {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							cv += data.b[r++];
							bgra.b[w++] = cv;
							bgra.b[w++] = cv;
							bgra.b[w++] = cv;
							ca += data.b[r++];
							bgra.b[w++] = ca;
						}
					} else {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							cv += data.b[r++];
							bgra.b[w++] = cv;
							bgra.b[w++] = cv;
							bgra.b[w++] = cv;
							bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
						}
					}
					break;
				case 2:
					let stride = y == 0 ? 0 : width * 4 * flipY1;
					if(alpha) {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let v = data.b[r++] + bgra.b[w - stride];
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							let va = data.b[r++] + bgra.b[w - stride];
							bgra.b[w++] = va;
						}
					} else {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let v = data.b[r++] + bgra.b[w - stride];
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v;
							bgra.b[w++] = v == alphvaIdx ? 0 : 255;
						}
					}
					break;
				case 3:
					let cv1 = 0;
					let ca1 = 0;
					let stride1 = y == 0 ? 0 : width * 4 * flipY1;
					if(alpha) {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cv1;
							bgra.b[w++] = cv1;
							bgra.b[w++] = cv1;
							ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = ca1;
						}
					} else {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cv1;
							bgra.b[w++] = cv1;
							bgra.b[w++] = cv1;
							bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
						}
					}
					break;
				case 4:
					let stride2 = width * 4 * flipY1;
					let cv2 = 0;
					let ca2 = 0;
					if(alpha) {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let b = y == 0 ? 0 : bgra.b[w - stride2];
							let c = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k = cv2 + b - c;
							let pa = k - cv2;
							if(pa < 0) {
								pa = -pa;
							}
							let pb = k - b;
							if(pb < 0) {
								pb = -pb;
							}
							let pc = k - c;
							if(pc < 0) {
								pc = -pc;
							}
							let pos = r++;
							cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
							bgra.b[w++] = cv2;
							bgra.b[w++] = cv2;
							bgra.b[w++] = cv2;
							let b1 = y == 0 ? 0 : bgra.b[w - stride2];
							let c1 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k1 = ca2 + b1 - c1;
							let pa1 = k1 - ca2;
							if(pa1 < 0) {
								pa1 = -pa1;
							}
							let pb1 = k1 - b1;
							if(pb1 < 0) {
								pb1 = -pb1;
							}
							let pc1 = k1 - c1;
							if(pc1 < 0) {
								pc1 = -pc1;
							}
							let pos1 = r++;
							ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
							bgra.b[w++] = ca2;
						}
					} else {
						let _g = 0;
						let _g1 = width;
						while(_g < _g1) {
							let x = _g++;
							let b = y == 0 ? 0 : bgra.b[w - stride2];
							let c = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k = cv2 + b - c;
							let pa = k - cv2;
							if(pa < 0) {
								pa = -pa;
							}
							let pb = k - b;
							if(pb < 0) {
								pb = -pb;
							}
							let pc = k - c;
							if(pc < 0) {
								pc = -pc;
							}
							let pos = r++;
							cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
							bgra.b[w++] = cv2;
							bgra.b[w++] = cv2;
							bgra.b[w++] = cv2;
							bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
						}
					}
					break;
				default:
					throw haxe.Exception.thrown("Invalid filter " + f);
				}
				w += lineDelta;
			}
			break;
		case 1:
			let alpha1 = _g.alpha;
			if(h.colbits != 8) {
				throw haxe.Exception.thrown("Unsupported color mode");
			}
			let width1 = h.width;
			let stride1 = (alpha1 ? 4 : 3) * width1 + 1;
			if(data.length < h.height * stride1) {
				throw haxe.Exception.thrown("Not enough data");
			}
			let alphaRed = -1;
			let alphaGreen = -1;
			let alphaBlue = -1;
			if(!alpha1) {
				let _g_head = d.h;
				while(_g_head != null) {
					let val = _g_head.item;
					_g_head = _g_head.next;
					let t = val;
					if(t._hx_index == 4) {
						if(t.id == "tRNS") {
							let data = t.data;
							if(data.length >= 6) {
								alphaRed = data.b[1];
								alphaGreen = data.b[3];
								alphaBlue = data.b[5];
							}
							break;
						}
					}
				}
			}
			let cr = 0;
			let cg = 0;
			let cb = 0;
			let ca = 0;
			let _g3 = 0;
			let _g4 = h.height;
			while(_g3 < _g4) {
				let y = _g3++;
				let f = data.b[r++];
				switch(f) {
				case 0:
					if(alpha1) {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							bgra.b[w++] = data.b[r + 2];
							bgra.b[w++] = data.b[r + 1];
							bgra.b[w++] = data.b[r];
							bgra.b[w++] = data.b[r + 3];
							r += 4;
						}
					} else {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb = data.b[r + 2];
							bgra.b[w++] = cb;
							cg = data.b[r + 1];
							bgra.b[w++] = cg;
							cr = data.b[r];
							bgra.b[w++] = cr;
							bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
							r += 3;
						}
					}
					break;
				case 1:
					ca = 0;
					cb = ca;
					cg = cb;
					cr = cg;
					if(alpha1) {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb += data.b[r + 2];
							bgra.b[w++] = cb;
							cg += data.b[r + 1];
							bgra.b[w++] = cg;
							cr += data.b[r];
							bgra.b[w++] = cr;
							ca += data.b[r + 3];
							bgra.b[w++] = ca;
							r += 4;
						}
					} else {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb += data.b[r + 2];
							bgra.b[w++] = cb;
							cg += data.b[r + 1];
							bgra.b[w++] = cg;
							cr += data.b[r];
							bgra.b[w++] = cr;
							bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
							r += 3;
						}
					}
					break;
				case 2:
					let stride = y == 0 ? 0 : width1 * 4 * flipY1;
					if(alpha1) {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
							++w;
							bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
							++w;
							bgra.b[w] = data.b[r] + bgra.b[w - stride];
							++w;
							bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
							++w;
							r += 4;
						}
					} else {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb = data.b[r + 2] + bgra.b[w - stride];
							bgra.b[w] = cb;
							++w;
							cg = data.b[r + 1] + bgra.b[w - stride];
							bgra.b[w] = cg;
							++w;
							cr = data.b[r] + bgra.b[w - stride];
							bgra.b[w] = cr;
							++w;
							bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
							r += 3;
						}
					}
					break;
				case 3:
					ca = 0;
					cb = ca;
					cg = cb;
					cr = cg;
					let stride1 = y == 0 ? 0 : width1 * 4 * flipY1;
					if(alpha1) {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cb;
							cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cg;
							cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cr;
							ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = ca;
							r += 4;
						}
					} else {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cb;
							cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cg;
							cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
							bgra.b[w++] = cr;
							bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
							r += 3;
						}
					}
					break;
				case 4:
					let stride2 = width1 * 4 * flipY1;
					ca = 0;
					cb = ca;
					cg = cb;
					cr = cg;
					if(alpha1) {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							let b = y == 0 ? 0 : bgra.b[w - stride2];
							let c = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k = cb + b - c;
							let pa = k - cb;
							if(pa < 0) {
								pa = -pa;
							}
							let pb = k - b;
							if(pb < 0) {
								pb = -pb;
							}
							let pc = k - c;
							if(pc < 0) {
								pc = -pc;
							}
							cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
							bgra.b[w++] = cb;
							let b1 = y == 0 ? 0 : bgra.b[w - stride2];
							let c1 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k1 = cg + b1 - c1;
							let pa1 = k1 - cg;
							if(pa1 < 0) {
								pa1 = -pa1;
							}
							let pb1 = k1 - b1;
							if(pb1 < 0) {
								pb1 = -pb1;
							}
							let pc1 = k1 - c1;
							if(pc1 < 0) {
								pc1 = -pc1;
							}
							cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
							bgra.b[w++] = cg;
							let b2 = y == 0 ? 0 : bgra.b[w - stride2];
							let c2 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k2 = cr + b2 - c2;
							let pa2 = k2 - cr;
							if(pa2 < 0) {
								pa2 = -pa2;
							}
							let pb2 = k2 - b2;
							if(pb2 < 0) {
								pb2 = -pb2;
							}
							let pc2 = k2 - c2;
							if(pc2 < 0) {
								pc2 = -pc2;
							}
							cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
							bgra.b[w++] = cr;
							let b3 = y == 0 ? 0 : bgra.b[w - stride2];
							let c3 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k3 = ca + b3 - c3;
							let pa3 = k3 - ca;
							if(pa3 < 0) {
								pa3 = -pa3;
							}
							let pb3 = k3 - b3;
							if(pb3 < 0) {
								pb3 = -pb3;
							}
							let pc3 = k3 - c3;
							if(pc3 < 0) {
								pc3 = -pc3;
							}
							ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
							bgra.b[w++] = ca;
							r += 4;
						}
					} else {
						let _g = 0;
						let _g1 = width1;
						while(_g < _g1) {
							let x = _g++;
							let b = y == 0 ? 0 : bgra.b[w - stride2];
							let c = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k = cb + b - c;
							let pa = k - cb;
							if(pa < 0) {
								pa = -pa;
							}
							let pb = k - b;
							if(pb < 0) {
								pb = -pb;
							}
							let pc = k - c;
							if(pc < 0) {
								pc = -pc;
							}
							cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
							bgra.b[w++] = cb;
							let b1 = y == 0 ? 0 : bgra.b[w - stride2];
							let c1 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k1 = cg + b1 - c1;
							let pa1 = k1 - cg;
							if(pa1 < 0) {
								pa1 = -pa1;
							}
							let pb1 = k1 - b1;
							if(pb1 < 0) {
								pb1 = -pb1;
							}
							let pc1 = k1 - c1;
							if(pc1 < 0) {
								pc1 = -pc1;
							}
							cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
							bgra.b[w++] = cg;
							let b2 = y == 0 ? 0 : bgra.b[w - stride2];
							let c2 = x == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
							let k2 = cr + b2 - c2;
							let pa2 = k2 - cr;
							if(pa2 < 0) {
								pa2 = -pa2;
							}
							let pb2 = k2 - b2;
							if(pb2 < 0) {
								pb2 = -pb2;
							}
							let pc2 = k2 - c2;
							if(pc2 < 0) {
								pc2 = -pc2;
							}
							cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
							bgra.b[w++] = cr;
							bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
							r += 3;
						}
					}
					break;
				default:
					throw haxe.Exception.thrown("Invalid filter " + f);
				}
				w += lineDelta;
			}
			break;
		case 2:
			let pal = format.png.Tools.getPalette(d);
			if(pal == null) {
				throw haxe.Exception.thrown("PNG Palette is missing");
			}
			let alpha2 = null;
			let _g_head1 = d.h;
			while(_g_head1 != null) {
				let val = _g_head1.item;
				_g_head1 = _g_head1.next;
				let t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						let data = t.data;
						alpha2 = data;
						break;
					}
				}
			}
			if(alpha2 != null && alpha2.length < 1 << h.colbits) {
				let alpha21 = new haxe.io.Bytes(new ArrayBuffer(1 << h.colbits));
				alpha21.blit(0,alpha2,0,alpha2.length);
				alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
				alpha2 = alpha21;
			}
			let width2 = h.width;
			let stride2 = Math.ceil(width2 * h.colbits / 8) + 1;
			if(data.length < h.height * stride2) {
				throw haxe.Exception.thrown("Not enough data");
			}
			let rline = stride2 - 1;
			let _g5 = 0;
			let _g6 = h.height;
			while(_g5 < _g6) {
				let y = _g5++;
				let f = data.b[r++];
				if(f == 0) {
					r += rline;
					continue;
				}
				switch(f) {
				case 1:
					let c = 0;
					let _g = 0;
					let _g1 = width2;
					while(_g < _g1) {
						let x = _g++;
						let v = data.b[r];
						c += v;
						data.b[r++] = c & 255;
					}
					break;
				case 2:
					let stride = y == 0 ? 0 : rline + 1;
					let _g2 = 0;
					let _g3 = width2;
					while(_g2 < _g3) {
						let x = _g2++;
						let v = data.b[r];
						data.b[r] = v + data.b[r - stride];
						++r;
					}
					break;
				case 3:
					let c1 = 0;
					let stride1 = y == 0 ? 0 : rline + 1;
					let _g4 = 0;
					let _g6 = width2;
					while(_g4 < _g6) {
						let x = _g4++;
						let v = data.b[r];
						c1 = v + (c1 + data.b[r - stride1] >> 1) & 255;
						data.b[r++] = c1;
					}
					break;
				case 4:
					let stride2 = rline + 1;
					let c2 = 0;
					let _g7 = 0;
					let _g8 = width2;
					while(_g7 < _g8) {
						let x = _g7++;
						let v = data.b[r];
						let numChannels = 1;
						if(numChannels == null) {
							numChannels = 4;
						}
						let b = y == 0 ? 0 : data.b[r - stride2];
						let c = x == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
						let k = c2 + b - c;
						let pa = k - c2;
						if(pa < 0) {
							pa = -pa;
						}
						let pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						let pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c) + v & 255;
						data.b[r++] = c2;
					}
					break;
				default:
					throw haxe.Exception.thrown("Invalid filter " + f);
				}
			}
			let r1 = 0;
			if(h.colbits == 8) {
				let _g = 0;
				let _g1 = h.height;
				while(_g < _g1) {
					let y = _g++;
					++r1;
					let _g1 = 0;
					let _g2 = h.width;
					while(_g1 < _g2) {
						let x = _g1++;
						let c = data.b[r1++];
						bgra.b[w++] = pal.b[c * 3 + 2];
						bgra.b[w++] = pal.b[c * 3 + 1];
						bgra.b[w++] = pal.b[c * 3];
						bgra.b[w++] = alpha2 != null ? alpha2.b[c] : 255;
					}
					w += lineDelta;
				}
			} else if(h.colbits < 8) {
				let req = h.colbits;
				let mask = (1 << req) - 1;
				let _g = 0;
				let _g1 = h.height;
				while(_g < _g1) {
					let y = _g++;
					++r1;
					let bits = 0;
					let nbits = 0;
					let _g1 = 0;
					let _g2 = h.width;
					while(_g1 < _g2) {
						let x = _g1++;
						if(nbits < req) {
							bits = bits << 8 | data.b[r1++];
							nbits += 8;
						}
						let c = bits >>> nbits - req & mask;
						nbits -= req;
						bgra.b[w++] = pal.b[c * 3 + 2];
						bgra.b[w++] = pal.b[c * 3 + 1];
						bgra.b[w++] = pal.b[c * 3];
						bgra.b[w++] = alpha2 != null ? alpha2.b[c] : 255;
					}
					w += lineDelta;
				}
			} else {
				throw haxe.Exception.thrown(h.colbits + " indexed bits per pixel not supported");
			}
			break;
		}
		return bgra;
	}
	static extract(d,output,expandAlpha) {
		if(expandAlpha == null) {
			expandAlpha = false;
		}
		let h = format.png.Tools.getHeader(d);
		let hasAlpha = false;
		let channels;
		let _g = h.color;
		switch(_g._hx_index) {
		case 0:
			let alpha = _g.alpha;
			hasAlpha = alpha;
			channels = alpha ? 2 : 1;
			break;
		case 1:
			let alpha1 = _g.alpha;
			hasAlpha = alpha1;
			channels = alpha1 ? 4 : 3;
			break;
		case 2:
			throw haxe.Exception.thrown("assert");
		}
		if(expandAlpha && hasAlpha) {
			expandAlpha = false;
		}
		let bpp = h.colbits >> 3;
		let outChannels = expandAlpha ? channels + 1 : channels;
		if(output == null) {
			output = new haxe.io.Bytes(new ArrayBuffer(outChannels * bpp * h.width * h.height));
		}
		let data = null;
		let fullData = null;
		let _g_head = d.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			if(c._hx_index == 2) {
				let b = c.b;
				if(fullData != null) {
					fullData.add(b);
				} else if(data == null) {
					data = b;
				} else {
					fullData = new haxe.io.BytesBuffer();
					fullData.add(data);
					fullData.add(b);
					data = null;
				}
			}
		}
		if(fullData != null) {
			data = fullData.getBytes();
		}
		if(data == null) {
			throw haxe.Exception.thrown("Data not found");
		}
		data = format.tools.Inflate.run(data);
		let r = 0;
		let w = 0;
		let width = h.width;
		let ncomps = channels * bpp;
		let upperLine = outChannels * bpp * width;
		let leftPixel = outChannels * bpp;
		if(data.length < h.height * (ncomps * width + 1)) {
			throw haxe.Exception.thrown("Not enough data");
		}
		let _g1 = [];
		let _g2 = 0;
		let _g3 = ncomps;
		while(_g2 < _g3) {
			let i = _g2++;
			_g1.push(0);
		}
		let tmp = _g1;
		let _g4 = 0;
		let _g5 = h.height;
		while(_g4 < _g5) {
			let y = _g4++;
			let f = data.b[r++];
			if(f != 0 && f != 2) {
				let _g = 0;
				let _g1 = ncomps;
				while(_g < _g1) {
					let i = _g++;
					tmp[i] = 0;
				}
			}
			switch(f) {
			case 0:
				let _g = 0;
				let _g1 = width;
				while(_g < _g1) {
					let x = _g++;
					let _g1 = 0;
					let _g2 = ncomps;
					while(_g1 < _g2) {
						let i = _g1++;
						output.b[w++] = data.b[r++];
					}
					if(expandAlpha) {
						output.b[w++] = 255;
						if(bpp == 2) {
							output.b[w++] = 255;
						}
					}
				}
				break;
			case 1:
				let _g2 = 0;
				let _g3 = width;
				while(_g2 < _g3) {
					let x = _g2++;
					let _g = 0;
					let _g1 = ncomps;
					while(_g < _g1) {
						let i = _g++;
						tmp[i] += data.b[r++];
						output.b[w++] = tmp[i];
					}
					if(expandAlpha) {
						output.b[w++] = 255;
						if(bpp == 2) {
							output.b[w++] = 255;
						}
					}
				}
				break;
			case 2:
				let stride = y == 0 ? 0 : upperLine;
				let _g5 = 0;
				let _g6 = width;
				while(_g5 < _g6) {
					let x = _g5++;
					let _g = 0;
					let _g1 = ncomps;
					while(_g < _g1) {
						let i = _g++;
						let v = data.b[r++] + output.b[w - stride];
						output.b[w++] = v;
					}
					if(expandAlpha) {
						output.b[w++] = 255;
						if(bpp == 2) {
							output.b[w++] = 255;
						}
					}
				}
				break;
			case 3:
				let stride1 = y == 0 ? 0 : upperLine;
				let _g7 = 0;
				let _g8 = width;
				while(_g7 < _g8) {
					let x = _g7++;
					let _g = 0;
					let _g1 = ncomps;
					while(_g < _g1) {
						let i = _g++;
						tmp[i] = data.b[r++] + (tmp[i] + output.b[w - stride1] >> 1) & 255;
						output.b[w++] = tmp[i];
					}
					if(expandAlpha) {
						output.b[w++] = 255;
						if(bpp == 2) {
							output.b[w++] = 255;
						}
					}
				}
				break;
			case 4:
				let _g9 = 0;
				let _g10 = width;
				while(_g9 < _g10) {
					let x = _g9++;
					let _g = 0;
					let _g1 = ncomps;
					while(_g < _g1) {
						let i = _g++;
						let prev = tmp[i];
						let b = y == 0 ? 0 : output.b[w - upperLine];
						let c = x == 0 || y == 0 ? 0 : output.b[w - upperLine - leftPixel];
						let k = prev + b - c;
						let pa = k - prev;
						if(pa < 0) {
							pa = -pa;
						}
						let pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						let pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						let pos = r++;
						tmp[i] = (pa <= pb && pa <= pc ? prev : pb <= pc ? b : c) + data.b[pos] & 255;
						output.b[w++] = tmp[i];
					}
					if(expandAlpha) {
						output.b[w++] = 255;
						if(bpp == 2) {
							output.b[w++] = 255;
						}
					}
				}
				break;
			default:
				throw haxe.Exception.thrown("Invalid filter " + f);
			}
		}
		if(h.colbits == 16) {
			let w = 0;
			let _g = 0;
			let _g1 = h.height * width * outChannels;
			while(_g < _g1) {
				let x = _g++;
				let a = output.b[w];
				let b = output.b[w + 1];
				output.b[w++] = b;
				output.b[w++] = a;
			}
		}
		return output;
	}
	static buildGrey(width,height,data,level) {
		if(level == null) {
			level = 9;
		}
		let rgb = new haxe.io.Bytes(new ArrayBuffer(width * height + height));
		let w = 0;
		let r = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let y = _g++;
			rgb.b[w++] = 0;
			let _g1 = 0;
			let _g2 = width;
			while(_g1 < _g2) {
				let x = _g1++;
				rgb.b[w++] = data.b[r++];
			}
		}
		let l = new haxe.ds.List();
		l.add(format.png.Chunk.CHeader({ width : width, height : height, colbits : 8, color : format.png.Color.ColGrey(false), interlaced : false}));
		l.add(format.png.Chunk.CData(format.tools.Deflate.run(rgb,level)));
		l.add(format.png.Chunk.CEnd);
		return l;
	}
	static buildIndexed(width,height,data,palette,level) {
		if(level == null) {
			level = 9;
		}
		let rgb = new haxe.io.Bytes(new ArrayBuffer(width * height + height));
		let w = 0;
		let r = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let y = _g++;
			rgb.b[w++] = 0;
			let _g1 = 0;
			let _g2 = width;
			while(_g1 < _g2) {
				let x = _g1++;
				rgb.b[w++] = data.b[r++];
			}
		}
		let l = new haxe.ds.List();
		l.add(format.png.Chunk.CHeader({ width : width, height : height, colbits : 8, color : format.png.Color.ColIndexed, interlaced : false}));
		l.add(format.png.Chunk.CPalette(palette));
		l.add(format.png.Chunk.CData(format.tools.Deflate.run(rgb,level)));
		l.add(format.png.Chunk.CEnd);
		return l;
	}
	static buildRGB(width,height,data,level) {
		if(level == null) {
			level = 9;
		}
		let rgb = new haxe.io.Bytes(new ArrayBuffer(width * height * 3 + height));
		let w = 0;
		let r = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let y = _g++;
			rgb.b[w++] = 0;
			let _g1 = 0;
			let _g2 = width;
			while(_g1 < _g2) {
				let x = _g1++;
				rgb.b[w++] = data.b[r + 2];
				rgb.b[w++] = data.b[r + 1];
				rgb.b[w++] = data.b[r];
				r += 3;
			}
		}
		let l = new haxe.ds.List();
		l.add(format.png.Chunk.CHeader({ width : width, height : height, colbits : 8, color : format.png.Color.ColTrue(false), interlaced : false}));
		l.add(format.png.Chunk.CData(format.tools.Deflate.run(rgb,level)));
		l.add(format.png.Chunk.CEnd);
		return l;
	}
	static build32ARGB(width,height,data,level) {
		if(level == null) {
			level = 9;
		}
		let rgba = new haxe.io.Bytes(new ArrayBuffer(width * height * 4 + height));
		let w = 0;
		let r = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let y = _g++;
			rgba.b[w++] = 0;
			let _g1 = 0;
			let _g2 = width;
			while(_g1 < _g2) {
				let x = _g1++;
				rgba.b[w++] = data.b[r + 1];
				rgba.b[w++] = data.b[r + 2];
				rgba.b[w++] = data.b[r + 3];
				rgba.b[w++] = data.b[r];
				r += 4;
			}
		}
		let l = new haxe.ds.List();
		l.add(format.png.Chunk.CHeader({ width : width, height : height, colbits : 8, color : format.png.Color.ColTrue(true), interlaced : false}));
		l.add(format.png.Chunk.CData(format.tools.Deflate.run(rgba,level)));
		l.add(format.png.Chunk.CEnd);
		return l;
	}
	static build32BGRA(width,height,data,level) {
		if(level == null) {
			level = 9;
		}
		let rgba = new haxe.io.Bytes(new ArrayBuffer(width * height * 4 + height));
		let w = 0;
		let r = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let y = _g++;
			rgba.b[w++] = 0;
			let _g1 = 0;
			let _g2 = width;
			while(_g1 < _g2) {
				let x = _g1++;
				rgba.b[w++] = data.b[r + 2];
				rgba.b[w++] = data.b[r + 1];
				rgba.b[w++] = data.b[r];
				rgba.b[w++] = data.b[r + 3];
				r += 4;
			}
		}
		let l = new haxe.ds.List();
		l.add(format.png.Chunk.CHeader({ width : width, height : height, colbits : 8, color : format.png.Color.ColTrue(true), interlaced : false}));
		l.add(format.png.Chunk.CData(format.tools.Deflate.run(rgba,level)));
		l.add(format.png.Chunk.CEnd);
		return l;
	}
}
$hxClasses["format.png.Tools"] = format.png.Tools;
format.png.Tools.__name__ = "format.png.Tools";
format.png.Writer = class format_png_Writer {
	constructor(o) {
		this.o = o;
		o.set_bigEndian(true);
	}
	write(png) {
		let b = 137;
		this.o.writeByte(b);
		let b1 = 80;
		this.o.writeByte(b1);
		let b2 = 78;
		this.o.writeByte(b2);
		let b3 = 71;
		this.o.writeByte(b3);
		let b4 = 13;
		this.o.writeByte(b4);
		let b5 = 10;
		this.o.writeByte(b5);
		let b6 = 26;
		this.o.writeByte(b6);
		let b7 = 10;
		this.o.writeByte(b7);
		let _g_head = png.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let c = val;
			switch(c._hx_index) {
			case 0:
				this.writeChunk("IEND",new haxe.io.Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				let h = c.h;
				let b = new haxe.io.BytesOutput();
				b.set_bigEndian(true);
				b.writeInt32(h.width);
				b.writeInt32(h.height);
				b.writeByte(h.colbits);
				let _g = h.color;
				let tmp;
				switch(_g._hx_index) {
				case 0:
					let alpha = _g.alpha;
					tmp = alpha ? 4 : 0;
					break;
				case 1:
					let alpha1 = _g.alpha;
					tmp = alpha1 ? 6 : 2;
					break;
				case 2:
					tmp = 3;
					break;
				}
				b.writeByte(tmp);
				b.writeByte(0);
				b.writeByte(0);
				b.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b.getBytes());
				break;
			case 2:
				let d = c.b;
				this.writeChunk("IDAT",d);
				break;
			case 3:
				let b1 = c.b;
				this.writeChunk("PLTE",b1);
				break;
			case 4:
				let id = c.id;
				let data = c.data;
				this.writeChunk(id,data);
				break;
			}
		}
	}
	writeChunk(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		let crc_crc = -1;
		let tmp = (crc_crc ^ HxOverrides.cca(id,0)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		let tmp1 = (crc_crc ^ HxOverrides.cca(id,1)) & 255;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp1;
		let tmp2 = (crc_crc ^ HxOverrides.cca(id,2)) & 255;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp2;
		let tmp3 = (crc_crc ^ HxOverrides.cca(id,3)) & 255;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp3;
		let b = data.b.bufferValue;
		let _g = 0;
		let _g1 = data.length;
		while(_g < _g1) {
			let i = _g++;
			let tmp = (crc_crc ^ b.bytes[i]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			crc_crc = crc_crc >>> 8 ^ tmp;
		}
		this.o.writeInt32(crc_crc ^ -1);
	}
}
$hxClasses["format.png.Writer"] = format.png.Writer;
format.png.Writer.__name__ = "format.png.Writer";
Object.assign(format.png.Writer.prototype, {
	__class__: format.png.Writer
});
format.tga = {};
format.tga.ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__:true,__constructs__:null
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_name:"TopLeft",_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format.tga.ImageOrigin.__constructs__ = [format.tga.ImageOrigin.BottomLeft,format.tga.ImageOrigin.BottomRight,format.tga.ImageOrigin.TopLeft,format.tga.ImageOrigin.TopRight];
format.tga.ImageOrigin.__empty_constructs__ = [format.tga.ImageOrigin.BottomLeft,format.tga.ImageOrigin.BottomRight,format.tga.ImageOrigin.TopLeft,format.tga.ImageOrigin.TopRight];
format.tga.ImageType = $hxEnums["format.tga.ImageType"] = { __ename__:true,__constructs__:null
	,NoImage: {_hx_name:"NoImage",_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_name:"UncompressedColorMapped",_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_name:"UncompressedTrueColor",_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_name:"UncompressedBlackAndWhite",_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_name:"RunLengthColorMapped",_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_name:"RunLengthTrueColor",_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_name:"RunLengthBlackAndWhite",_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["type"],$_)
};
format.tga.ImageType.__constructs__ = [format.tga.ImageType.NoImage,format.tga.ImageType.UncompressedColorMapped,format.tga.ImageType.UncompressedTrueColor,format.tga.ImageType.UncompressedBlackAndWhite,format.tga.ImageType.RunLengthColorMapped,format.tga.ImageType.RunLengthTrueColor,format.tga.ImageType.RunLengthBlackAndWhite,format.tga.ImageType.Unknown];
format.tga.ImageType.__empty_constructs__ = [format.tga.ImageType.NoImage,format.tga.ImageType.UncompressedColorMapped,format.tga.ImageType.UncompressedTrueColor,format.tga.ImageType.UncompressedBlackAndWhite,format.tga.ImageType.RunLengthColorMapped,format.tga.ImageType.RunLengthTrueColor,format.tga.ImageType.RunLengthBlackAndWhite];
format.tga.Reader = class format_tga_Reader {
	constructor(i) {
		this.i = i;
		i.set_bigEndian(false);
	}
	read() {
		let idLength = this.i.readByte();
		let header = this.readHeader();
		let id = idLength == 0 ? "" : this.i.readString(idLength);
		let colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	readHeader() {
		let colorMapType = this.i.readByte();
		let dataType;
		let dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format.tga.ImageType.NoImage;
			break;
		case 1:
			dataType = format.tga.ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format.tga.ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format.tga.ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format.tga.ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format.tga.ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format.tga.ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format.tga.ImageType.Unknown(dataId);
		}
		let colorMapOrigin = this.i.readInt16();
		let colorMapLength = this.i.readInt16();
		let colorMapDepth = this.i.readByte();
		let xOrigin = this.i.readInt16();
		let yOrigin = this.i.readInt16();
		let width = this.i.readInt16();
		let height = this.i.readInt16();
		let depth = this.i.readByte();
		let descriptor = this.i.readByte();
		let origin;
		switch(descriptor & 48) {
		case 16:
			origin = format.tga.ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format.tga.ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format.tga.ImageOrigin.TopRight;
			break;
		default:
			origin = format.tga.ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	readColorMapData(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	readImageData(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe.Exception.thrown("Unsupported image data type!");
		}
	}
	readPixels(bitsPerPixel,amount,alphaChannelBits,rle) {
		let list = new Array(amount);
		let alpha = alphaChannelBits != 0;
		let bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		let parsePixel;
		let readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe.Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			let rleChunk;
			let i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					let pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			let _g = 0;
			let _g1 = amount;
			while(_g < _g1) {
				let i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	readMono(bitsPerPixel,amount,alphaChannelBits,rle) {
		let list = new Array(amount);
		let alpha = alphaChannelBits != 0;
		let parsePixel;
		let readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe.Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			let rleChunk;
			let i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					let pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			let _g = 0;
			let _g1 = amount;
			while(_g < _g1) {
				let i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	readIndexes(bitsPerPixel,amount,colorMap,offset,rle) {
		let list = new Array(amount);
		let readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe.Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			let i = 0;
			let rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					let pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			let _g = 0;
			let _g1 = amount;
			while(_g < _g1) {
				let i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	parsePixel1(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	parsePixelGreyAlpha(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	parsePixel2(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	parsePixel3(value,alpha) {
		return value;
	}
	parsePixel4(value,alpha) {
		return value;
	}
}
$hxClasses["format.tga.Reader"] = format.tga.Reader;
format.tga.Reader.__name__ = "format.tga.Reader";
Object.assign(format.tga.Reader.prototype, {
	__class__: format.tga.Reader
});
format.tools = {};
format.tools.BitsInput = class format_tools_BitsInput {
	constructor(i) {
		this.i = i;
		this.nbits = 0;
		this.bits = 0;
	}
	readBits(n) {
		if(this.nbits >= n) {
			let c = this.nbits - n;
			let k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		let k = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw haxe.Exception.thrown("Bits error");
			}
			let c = 8 + this.nbits - n;
			let d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c | k << c;
			this.bits = k;
			this.nbits = c;
			return d;
		}
		this.bits = this.bits << 8 | k;
		this.nbits += 8;
		return this.readBits(n);
	}
	readBit() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	reset() {
		this.nbits = 0;
	}
}
$hxClasses["format.tools.BitsInput"] = format.tools.BitsInput;
format.tools.BitsInput.__name__ = "format.tools.BitsInput";
Object.assign(format.tools.BitsInput.prototype, {
	__class__: format.tools.BitsInput
});
format.tools.Deflate = class format_tools_Deflate {
	static run(b,level) {
		if(level == null) {
			level = 9;
		}
		return haxe.zip.Compress.run(b,level);
	}
}
$hxClasses["format.tools.Deflate"] = format.tools.Deflate;
format.tools.Deflate.__name__ = "format.tools.Deflate";
format.tools.Inflate = class format_tools_Inflate {
	static run(bytes) {
		return haxe.zip.Uncompress.run(bytes);
	}
}
$hxClasses["format.tools.Inflate"] = format.tools.Inflate;
format.tools.Inflate.__name__ = "format.tools.Inflate";
format.wav = {};
format.wav.WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__:true,__constructs__:null
	,WF_PCM: {_hx_name:"WF_PCM",_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format.wav.WAVEFormat.__constructs__ = [format.wav.WAVEFormat.WF_PCM];
format.wav.WAVEFormat.__empty_constructs__ = [format.wav.WAVEFormat.WF_PCM];
format.wav.Reader = class format_wav_Reader {
	constructor(i) {
		this.i = i;
		i.set_bigEndian(false);
	}
	readInt() {
		return this.i.readInt32();
	}
	read() {
		if(this.i.readString(4) != "RIFF") {
			throw haxe.Exception.thrown("RIFF header expected");
		}
		let len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw haxe.Exception.thrown("WAVE signature not found");
		}
		let fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			let junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			let bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw haxe.Exception.thrown("unsupported wave chunk " + fmt);
		}
		let fmtlen = this.i.readInt32();
		let format1;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format1 = format.wav.WAVEFormat.WF_PCM;
			break;
		default:
			throw haxe.Exception.thrown("only PCM (uncompressed) WAV files are supported");
		}
		let channels = this.i.readUInt16();
		let samplingRate = this.i.readInt32();
		let byteRate = this.i.readInt32();
		let blockAlign = this.i.readUInt16();
		let bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		let nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw haxe.Exception.thrown("expected data subchunk");
		}
		let datalen = this.i.readInt32();
		let data;
		try {
			data = this.i.read(datalen);
		} catch( _g ) {
			if(((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				throw haxe.Exception.thrown("Invalid chunk data length");
			} else {
				throw _g;
			}
		}
		let cuePoints = [];
		try {
			while(true) {
				let nextChunk = this.i.readString(4);
				if(nextChunk == "cue ") {
					this.i.readInt32();
					let nbCuePoints = this.i.readInt32();
					let _g = 0;
					let _g1 = nbCuePoints;
					while(_g < _g1) {
						let _ = _g++;
						let cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						let cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					let n = this.i.readInt32();
					if(n < 0) {
						break;
					}
					this.i.read(n);
				}
			}
		} catch( _g ) {
			if(!((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				throw _g;
			}
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
}
$hxClasses["format.wav.Reader"] = format.wav.Reader;
format.wav.Reader.__name__ = "format.wav.Reader";
Object.assign(format.wav.Reader.prototype, {
	__class__: format.wav.Reader
});
var h2d = {};
h2d.col = {};
h2d.col.PointImpl = class h2d_col_PointImpl {
	constructor(x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
	}
	distanceSq(p) {
		let dx = this.x - p.x;
		let dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	distance(p) {
		let dx = this.x - p.x;
		let dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	toString() {
		return "{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "}";
	}
	sub(p) {
		let x = this.x - p.x;
		let y = this.y - p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	add(p) {
		let x = this.x + p.x;
		let y = this.y + p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	scaled(v) {
		let x = this.x * v;
		let y = this.y * v;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	equals(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	dot(p) {
		return this.x * p.x + this.y * p.y;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	normalize() {
		let k = this.x * this.x + this.y * this.y;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
	}
	normalized() {
		let k = this.x * this.x + this.y * this.y;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		let x = this.x * k;
		let y = this.y * k;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	set(x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
	}
	load(p) {
		this.x = p.x;
		this.y = p.y;
	}
	scale(f) {
		this.x *= f;
		this.y *= f;
	}
	clone() {
		let x = this.x;
		let y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	cross(p) {
		return this.x * p.y - this.y * p.x;
	}
	lerp(a,b,k) {
		let a1 = a.x;
		this.x = a1 + k * (b.x - a1);
		let a2 = a.y;
		this.y = a2 + k * (b.y - a2);
	}
	transform(m) {
		let mx = m.a * this.x + m.c * this.y + m.x;
		let my = m.b * this.x + m.d * this.y + m.y;
		this.x = mx;
		this.y = my;
	}
	transformed(m) {
		let mx = m.a * this.x + m.c * this.y + m.x;
		let my = m.b * this.x + m.d * this.y + m.y;
		let x = mx;
		let y = my;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	transform2x2(m) {
		let mx = m.a * this.x + m.c * this.y;
		let my = m.b * this.x + m.d * this.y;
		this.x = mx;
		this.y = my;
	}
	transformed2x2(m) {
		let mx = m.a * this.x + m.c * this.y;
		let my = m.b * this.x + m.d * this.y;
		let x = mx;
		let y = my;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	toIPoint(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d.col.IPoint(Math.round(this.x * scale),Math.round(this.y * scale));
	}
	rotate(angle) {
		let c = Math.cos(angle);
		let s = Math.sin(angle);
		let x2 = this.x * c - this.y * s;
		let y2 = this.x * s + this.y * c;
		this.x = x2;
		this.y = y2;
	}
}
$hxClasses["h2d.col.PointImpl"] = h2d.col.PointImpl;
h2d.col.PointImpl.__name__ = "h2d.col.PointImpl";
Object.assign(h2d.col.PointImpl.prototype, {
	__class__: h2d.col.PointImpl
});
h2d.Object = class h2d_Object {
	constructor(parent) {
		if(h2d.Object._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.blendMode = h2d.BlendMode.Alpha;
		this.alpha = 1.;
		this.visible = true;
		this.rotation = 0;
		this.scaleY = 1;
		this.scaleX = 1;
		this.y = 0;
		this.x = 0;
		this.matA = 1;
		this.matB = 0;
		this.matC = 0;
		this.matD = 1;
		this.absX = 0;
		this.absY = 0;
		this.posChanged = parent != null;
		this.children = [];
		if(parent != null) {
			parent.addChild(this);
		}
	}
	getBounds(relativeTo,out) {
		if(out == null) {
			out = new h2d.col.Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	getSize(out) {
		if(out == null) {
			out = new h2d.col.Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		let dx = -this.x;
		let dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	getAbsPos() {
		this.syncPos();
		let m = new h2d.col.Matrix();
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
		return m;
	}
	contains(o) {
		while(o != null) {
			o = o.parent;
			if(o == this) {
				return true;
			}
		}
		return false;
	}
	find(f) {
		let v = f(this);
		if(v != null) {
			return v;
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			let v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	findAll(f,arr) {
		if(arr == null) {
			arr = [];
		}
		let v = f(this);
		if(v != null) {
			arr.push(v);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	set_filter(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	getBoundsRec(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		let n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			let c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		let xmin = Infinity;
		let ymin = Infinity;
		let xmax = -Infinity;
		let ymax = -Infinity;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	addBounds(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			let x = dx * this.matA + dy * this.matC + this.absX;
			let y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			let x1 = (dx + width) * this.matA + dy * this.matC + this.absX;
			let y1 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			let x2 = dx * this.matA + (dy + height) * this.matC + this.absX;
			let y2 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			let x3 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			let y3 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		let r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		let det = 1 / r;
		let rA = relativeTo.matD * det;
		let rB = -relativeTo.matB * det;
		let rC = -relativeTo.matC * det;
		let rD = relativeTo.matA * det;
		let rX = this.absX - relativeTo.absX;
		let rY = this.absY - relativeTo.absY;
		let x = dx * this.matA + dy * this.matC + rX;
		let y = dx * this.matB + dy * this.matD + rY;
		let x1 = x * rA + y * rC;
		let y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		let x2 = x * rA + y * rC;
		let y2 = x * rB + y * rD;
		if(x2 < out.xMin) {
			out.xMin = x2;
		}
		if(x2 > out.xMax) {
			out.xMax = x2;
		}
		if(y2 < out.yMin) {
			out.yMin = y2;
		}
		if(y2 > out.yMax) {
			out.yMax = y2;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		let x3 = x * rA + y * rC;
		let y3 = x * rB + y * rD;
		if(x3 < out.xMin) {
			out.xMin = x3;
		}
		if(x3 > out.xMax) {
			out.xMax = x3;
		}
		if(y3 < out.yMin) {
			out.yMin = y3;
		}
		if(y3 > out.yMax) {
			out.yMax = y3;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		let x4 = x * rA + y * rC;
		let y4 = x * rB + y * rD;
		if(x4 < out.xMin) {
			out.xMin = x4;
		}
		if(x4 > out.xMax) {
			out.xMax = x4;
		}
		if(y4 < out.yMin) {
			out.yMin = y4;
		}
		if(y4 > out.yMax) {
			out.yMax = y4;
		}
	}
	getObjectsCount() {
		let k = 0;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	localToGlobal(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d.col.PointImpl(0.,0.);
		}
		let px = pt.x * this.matA + pt.y * this.matC + this.absX;
		let py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	globalToLocal(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		let invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		let px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		let py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	getScene() {
		let p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d.Scene)) {
			return p;
		} else {
			return null;
		}
	}
	set_visible(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	addChild(s) {
		this.addChildAt(s,this.children.length);
	}
	addChildAt(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		let p = this;
		while(p != null) {
			if(p == s) {
				throw haxe.Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			let old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	onContentChanged() {
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	onHierarchyMoved(parentChanged) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	onAdd() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	onRemove() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		let i = this.children.length - 1;
		while(i >= 0) {
			let c = this.children[i--];
			if(c != null) {
				c.onRemove();
			}
		}
	}
	getMatrix(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	removeChild(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	setParentContainer(c) {
		this.parentContainer = c;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	removeChildren() {
		while(this.children.length > 0) this.removeChild(this.getChildAt(0));
	}
	remove() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	drawTo(t) {
		let s = this.getScene();
		let needDispose = s == null;
		if(s == null) {
			s = new h2d.Scene();
		}
		s.drawImplTo(this,[t]);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	drawToTextures(texs,outputs) {
		let s = this.getScene();
		let needDispose = s == null;
		if(s == null) {
			s = new h2d.Scene();
		}
		s.drawImplTo(this,texs,outputs);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	draw(ctx) {
	}
	sync(ctx) {
		let changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		let p = 0;
		let len = this.children.length;
		while(p < len) {
			let c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	syncPos() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	calcAbsPos() {
		if(this.parent == null) {
			let cr;
			let sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				let cr = Math.cos(this.rotation);
				let sr = Math.sin(this.rotation);
				let tmpA = this.scaleX * cr;
				let tmpB = this.scaleX * sr;
				let tmpC = this.scaleY * -sr;
				let tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	emitTile(ctx,tile) {
		if(h2d.Object.nullDrawable == null) {
			h2d.Object.nullDrawable = new h2d.Drawable(null);
		}
		h2d.Object.nullDrawable.smooth = this.filter != null && this.filter.smooth ? true : null;
		h2d.Object.nullDrawable.absX = this.absX;
		h2d.Object.nullDrawable.absY = this.absY;
		h2d.Object.nullDrawable.matA = this.matA;
		h2d.Object.nullDrawable.matB = this.matB;
		h2d.Object.nullDrawable.matC = this.matC;
		h2d.Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d.Object.nullDrawable,tile);
	}
	clipBounds(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		let view = ctx.tmpBounds;
		let matA;
		let matB;
		let matC;
		let matD;
		let absX;
		let absY;
		if(ctx.inFilter != null) {
			let f1 = ctx.baseShader.filterMatrixA__;
			let f2 = ctx.baseShader.filterMatrixB__;
			let tmpA = this.matA * f1.x + this.matB * f1.y;
			let tmpB = this.matA * f2.x + this.matB * f2.y;
			let tmpC = this.matC * f1.x + this.matD * f1.y;
			let tmpD = this.matC * f2.x + this.matD * f2.y;
			let tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			let tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		let x = bounds.xMin;
		let y = bounds.yMin;
		let x1 = x * matA + y * matC + absX;
		let y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		let x2 = bounds.xMax;
		let y2 = bounds.yMin;
		let x3 = x2 * matA + y2 * matC + absX;
		let y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		let x4 = bounds.xMin;
		let y4 = bounds.yMax;
		let x5 = x4 * matA + y4 * matC + absX;
		let y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		let x6 = bounds.xMax;
		let y6 = bounds.yMax;
		let x7 = x6 * matA + y6 * matC + absX;
		let y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		let invDet = 1 / (matA * matD - matB * matC);
		let sxMin = view.xMin;
		let syMin = view.yMin;
		let sxMax = view.xMax;
		let syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		let x8 = sxMin;
		let y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		let x9 = (x8 * matD - y8 * matC) * invDet;
		let y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		let x10 = sxMax;
		let y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		let x11 = (x10 * matD - y10 * matC) * invDet;
		let y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		let x12 = sxMin;
		let y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		let x13 = (x12 * matD - y12 * matC) * invDet;
		let y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		let x14 = sxMax;
		let y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		let x15 = (x14 * matD - y14 * matC) * invDet;
		let y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		let a = bounds.xMin;
		let b = view.xMin;
		bounds.xMin = a < b ? b : a;
		let a1 = bounds.yMin;
		let b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		let a2 = bounds.xMax;
		let b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		let a3 = bounds.yMax;
		let b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	drawFilters(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		let bounds = ctx.tmpBounds;
		let total = new h2d.col.Bounds();
		this.filter.sync(ctx,this);
		let scaleX;
		let scaleY;
		if(this.filter.useScreenResolution) {
			let s = ctx.scene;
			scaleX = s.viewportScaleX * this.filter.resolutionScale;
			scaleY = s.viewportScaleY * this.filter.resolutionScale;
		} else {
			scaleX = this.filter.resolutionScale;
			scaleY = this.filter.resolutionScale;
		}
		if(this.filter.autoBounds) {
			let maxExtent = this.filter.boundsExtend;
			if(maxExtent >= 0) {
				this.getBounds(this,bounds);
				bounds.xMin = bounds.xMin * scaleX - maxExtent;
				bounds.yMin = bounds.yMin * scaleY - maxExtent;
				bounds.xMax = bounds.xMax * scaleX + maxExtent;
				bounds.yMax = bounds.yMax * scaleY + maxExtent;
				if(bounds.xMin < total.xMin) {
					total.xMin = bounds.xMin;
				}
				if(bounds.xMax > total.xMax) {
					total.xMax = bounds.xMax;
				}
				if(bounds.yMin < total.yMin) {
					total.yMin = bounds.yMin;
				}
				if(bounds.yMax > total.yMax) {
					total.yMax = bounds.yMax;
				}
			}
		} else {
			let scale = h2d.Object.tmpPoint;
			let _this = scale;
			let x = scaleX;
			let y = scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			this.filter.getBounds(this,bounds,scale);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
			scaleX = scale.x;
			scaleY = scale.y;
		}
		ctx.setFilterScale(scaleX,scaleY);
		this.clipBounds(ctx,total,scaleX,scaleY);
		let xMin = Math.floor(total.xMin + 1e-10);
		let yMin = Math.floor(total.yMin + 1e-10);
		let width = Math.ceil(total.xMax - xMin - 1e-10);
		let height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		let t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		let oldAlpha = ctx.globalAlpha;
		let shader = ctx.baseShader;
		let _this = shader.filterMatrixA__;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let oldA_x = x1;
		let oldA_y = y1;
		let oldA_z = z1;
		let _this1 = shader.filterMatrixB__;
		let x2 = _this1.x;
		let y2 = _this1.y;
		let z2 = _this1.z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let oldB_x = x3;
		let oldB_y = y3;
		let oldB_z = z3;
		let invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		let invA = this.matD * invDet * scaleX;
		let invB = -this.matB * invDet * scaleY;
		let invC = -this.matC * invDet * scaleX;
		let invD = this.matA * invDet * scaleY;
		let invX = -(this.absX * invA + this.absY * invC);
		let invY = -(this.absX * invB + this.absY * invD);
		let _this2 = shader.filterMatrixA__;
		let x4 = invA;
		let y4 = invC;
		let z4 = invX;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this2.x = x4;
		_this2.y = y4;
		_this2.z = z4;
		let _this3 = shader.filterMatrixB__;
		let x5 = invB;
		let y5 = invD;
		let z5 = invY;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this3.x = x5;
		_this3.y = y5;
		_this3.z = z5;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		let finalTile = h2d.Tile.fromTexture(t);
		finalTile.dx = xMin / scaleX;
		finalTile.dy = yMin / scaleY;
		let prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != null) {
			if(finalTile != prev) {
				finalTile.dx = (finalTile.dx + xMin) / scaleX;
				finalTile.dy = (finalTile.dy + yMin) / scaleY;
			}
			finalTile.width /= scaleX;
			finalTile.height /= scaleY;
		}
		let _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		let _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	drawFiltered(ctx,tile) {
		let oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	drawRec(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			let old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	drawContent(ctx) {
		if(ctx.front2back) {
			let i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	set_x(v) {
		this.posChanged = true;
		return this.x = v;
	}
	set_y(v) {
		this.posChanged = true;
		return this.y = v;
	}
	set_scaleX(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	set_scaleY(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	set_rotation(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	move(dx,dy) {
		let v = this.x + dx * Math.cos(this.rotation);
		this.posChanged = true;
		this.x = v;
		let v1 = this.y + dy * Math.sin(this.rotation);
		this.posChanged = true;
		this.y = v1;
	}
	setPosition(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	rotate(v) {
		this.posChanged = true;
		this.rotation += v;
	}
	scale(v) {
		this.posChanged = true;
		this.scaleX *= v;
		this.posChanged = true;
		this.scaleY *= v;
	}
	setScale(v) {
		this.posChanged = true;
		this.scaleX = v;
		this.posChanged = true;
		this.scaleY = v;
	}
	getChildAt(n) {
		return this.children[n];
	}
	getChildIndex(o) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	getObjectByName(name) {
		if(this.name == name) {
			return this;
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	get_numChildren() {
		return this.children.length;
	}
	iterator() {
		return new hxd.impl.ArrayIterator_h2d_Object(this.children);
	}
	toString() {
		let c = js.Boot.getClass(this);
		let c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	contentChanged(s) {
	}
	constraintSize(maxWidth,maxHeight) {
	}
}
$hxClasses["h2d.Object"] = h2d.Object;
h2d.Object.__name__ = "h2d.Object";
Object.assign(h2d.Object.prototype, {
	__class__: h2d.Object
	,__properties__: {set_filter: "set_filter",set_visible: "set_visible",set_rotation: "set_rotation",set_scaleY: "set_scaleY",set_scaleX: "set_scaleX",set_y: "set_y",set_x: "set_x",get_numChildren: "get_numChildren"}
});
h2d.Drawable = class h2d_Drawable extends h2d.Object {
	_hx_constructor(parent) {
		super._hx_constructor(parent);
		let x = 1;
		let y = 1;
		let z = 1;
		let w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.color = new h3d.Vector4Impl(x,y,z,w);
	}
	set_tileWrap(b) {
		return this.tileWrap = b;
	}
	get_colorAdd() {
		let s = this.getShader(h3d.shader.ColorAdd);
		if(s == null) {
			return null;
		} else {
			return s.color__;
		}
	}
	set_colorAdd(c) {
		let s = this.getShader(h3d.shader.ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d.shader.ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	drawFiltered(ctx,tile) {
		let old = this.shaders;
		this.shaders = null;
		super.drawFiltered(ctx,tile);
		this.shaders = old;
	}
	set_colorKey(v) {
		let s = this.getShader(h3d.shader.ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d.shader.ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			let _this = s.colorKey__;
			let c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	adjustColor(col) {
		if(col == null) {
			this.set_colorMatrix(null);
		} else {
			let m = this.get_colorMatrix();
			if(m == null) {
				m = new h3d.MatrixImpl();
				this.set_colorMatrix(m);
			}
			m.identity();
			m.adjustColor(col);
		}
	}
	get_colorMatrix() {
		let s = this.getShader(h3d.shader.ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	set_colorMatrix(m) {
		let s = this.getShader(h3d.shader.ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d.shader.ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	getShader(stype) {
		if(this.shaders != null) {
			let _g_l = this.shaders;
			let _g_last = null;
			while(_g_l != _g_last) {
				let s = _g_l.s;
				_g_l = _g_l.next;
				let s1 = s;
				let s2 = js.Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	getShaders() {
		return new hxsl._ShaderList.ShaderIterator(this.shaders,null);
	}
	addShader(s) {
		if(s == null) {
			throw haxe.Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl.ShaderList.addSort(s,this.shaders);
		return s;
	}
	removeShader(s) {
		let prev = null;
		let cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	emitTile(ctx,tile) {
		if(tile == null) {
			tile = new h2d.Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
}
$hxClasses["h2d.Drawable"] = h2d.Drawable;
h2d.Drawable.__name__ = "h2d.Drawable";
h2d.Drawable.__super__ = h2d.Object;
Object.assign(h2d.Drawable.prototype, {
	__class__: h2d.Drawable
	,__properties__: Object.assign({}, h2d.Object.prototype.__properties__, {set_colorAdd: "set_colorAdd",get_colorAdd: "get_colorAdd",set_colorMatrix: "set_colorMatrix",get_colorMatrix: "get_colorMatrix",set_colorKey: "set_colorKey",set_tileWrap: "set_tileWrap"})
});
h2d.Bitmap = class h2d_Bitmap extends h2d.Drawable {
	constructor(tile,parent) {
		super(parent);
		this.set_tile(tile);
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	set_width(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return w;
	}
	set_height(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return h;
	}
	set_tile(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	draw(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d.Tile.fromColor(16711935));
		}
		let ow = this.tile.width;
		let oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
}
$hxClasses["h2d.Bitmap"] = h2d.Bitmap;
h2d.Bitmap.__name__ = "h2d.Bitmap";
h2d.Bitmap.__super__ = h2d.Drawable;
Object.assign(h2d.Bitmap.prototype, {
	__class__: h2d.Bitmap
	,__properties__: Object.assign({}, h2d.Drawable.prototype.__properties__, {set_height: "set_height",set_width: "set_width",set_tile: "set_tile"})
});
h2d.BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_name:"Add",_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_name:"AlphaAdd",_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_name:"SoftAdd",_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_name:"AlphaMultiply",_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_name:"Erase",_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_name:"Screen",_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d.BlendMode.__constructs__ = [h2d.BlendMode.None,h2d.BlendMode.Alpha,h2d.BlendMode.Add,h2d.BlendMode.AlphaAdd,h2d.BlendMode.SoftAdd,h2d.BlendMode.Multiply,h2d.BlendMode.AlphaMultiply,h2d.BlendMode.Erase,h2d.BlendMode.Screen,h2d.BlendMode.Sub,h2d.BlendMode.Max,h2d.BlendMode.Min];
h2d.BlendMode.__empty_constructs__ = [h2d.BlendMode.None,h2d.BlendMode.Alpha,h2d.BlendMode.Add,h2d.BlendMode.AlphaAdd,h2d.BlendMode.SoftAdd,h2d.BlendMode.Multiply,h2d.BlendMode.AlphaMultiply,h2d.BlendMode.Erase,h2d.BlendMode.Screen,h2d.BlendMode.Sub,h2d.BlendMode.Max,h2d.BlendMode.Min];
h2d.Camera = class h2d_Camera {
	constructor(scene) {
		this.followRotation = false;
		this.posChanged = true;
		this.x = 0;
		this.posChanged = true;
		this.y = 0;
		this.posChanged = true;
		this.scaleX = 1;
		this.posChanged = true;
		this.scaleY = 1;
		this.posChanged = true;
		this.rotation = 0;
		this.posChanged = true;
		this.anchorX = 0;
		this.posChanged = true;
		this.anchorY = 0;
		this.viewX = 0;
		this.viewY = 0;
		this.viewW = 1;
		this.viewH = 1;
		this.visible = true;
		if(scene != null) {
			scene.addCamera(this);
		}
	}
	remove() {
		if(this.scene != null) {
			this.scene.removeCamera(this);
		}
	}
	layerVisible(layer) {
		return true;
	}
	enter(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			let old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	exit(ctx) {
		if(this.clipViewport) {
			let old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	sync(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				let cr = Math.cos(this.rotation);
				let sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	setScale(x,y) {
		this.posChanged = true;
		this.scaleX = x;
		this.posChanged = true;
		this.scaleY = y;
	}
	scale(x,y) {
		this.posChanged = true;
		this.scaleX *= x;
		this.posChanged = true;
		this.scaleY *= y;
	}
	setPosition(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	move(dx,dy) {
		this.posChanged = true;
		this.x += dx;
		this.posChanged = true;
		this.y += dy;
	}
	rotate(angle) {
		this.posChanged = true;
		this.rotation += angle;
	}
	setAnchor(x,y) {
		this.posChanged = true;
		this.anchorX = x;
		this.posChanged = true;
		this.anchorY = y;
	}
	setViewport(x,y,w,h) {
		if(h == null) {
			h = 0;
		}
		if(w == null) {
			w = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewX = Math.floor(x) / this.scene.width;
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewY = Math.floor(y) / this.scene.height;
		let v = w == 0 ? this.scene.width : w;
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewW = Math.ceil(v) / this.scene.width;
		let v1 = h == 0 ? this.scene.height : h;
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewH = Math.ceil(v1) / this.scene.height;
	}
	setRawViewport(x,y,w,h) {
		if(h == null) {
			h = 1;
		}
		if(w == null) {
			w = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.viewX = x;
		this.viewY = y;
		this.viewW = w;
		this.viewH = h;
		this.posChanged = true;
	}
	screenXToCamera(mx,my) {
		return (((mx - this.scene.offsetX) / this.scene.viewportScaleX - this.absX) * this.matD - ((my - this.scene.offsetY) / this.scene.viewportScaleY - this.absY) * this.matC) * this.invDet;
	}
	screenYToCamera(mx,my) {
		return (-((mx - this.scene.offsetX) / this.scene.viewportScaleX - this.absX) * this.matB + ((my - this.scene.offsetY) / this.scene.viewportScaleY - this.absY) * this.matA) * this.invDet;
	}
	cameraXToScreen(mx,my) {
		return (mx * this.matA + my * this.matC + this.absX) * this.scene.viewportScaleX + this.scene.offsetX;
	}
	cameraYToScreen(mx,my) {
		return (mx * this.matB + my * this.matD + this.absY) * this.scene.viewportScaleY + this.scene.offsetY;
	}
	sceneXToCamera(mx,my) {
		return ((mx - this.absX) * this.matD - (my - this.absY) * this.matC) * this.invDet;
	}
	sceneYToCamera(mx,my) {
		return (-(mx - this.absX) * this.matB + (my - this.absY) * this.matA) * this.invDet;
	}
	cameraXToScene(mx,my) {
		return mx * this.matA + my * this.matC + this.absX;
	}
	cameraYToScene(mx,my) {
		return mx * this.matB + my * this.matD + this.absY;
	}
	eventToCamera(e) {
		let x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		let y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	screenToCamera(pt) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		let x = (pt.x - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		let y = (pt.y - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		pt.x = (x * this.matD - y * this.matC) * this.invDet;
		pt.y = (-x * this.matB + y * this.matA) * this.invDet;
	}
	cameraToScreen(pt) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		let x = pt.x;
		let y = pt.y;
		pt.x = (x * this.matA + y * this.matC + this.absX) * this.scene.viewportScaleX + this.scene.offsetX;
		pt.y = (x * this.matB + y * this.matD + this.absY) * this.scene.viewportScaleY + this.scene.offsetY;
	}
	sceneToCamera(pt) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		let x = pt.x - this.absX;
		let y = pt.y - this.absY;
		pt.x = (x * this.matD - y * this.matC) * this.invDet;
		pt.y = (-x * this.matB + y * this.matA) * this.invDet;
	}
	cameraToScene(pt) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		let x = pt.x;
		let y = pt.y;
		pt.x = x * this.matA + y * this.matC + this.absX;
		pt.y = x * this.matB + y * this.matD + this.absY;
	}
	checkScene() {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
	}
	set_x(v) {
		this.posChanged = true;
		return this.x = v;
	}
	set_y(v) {
		this.posChanged = true;
		return this.y = v;
	}
	set_scaleX(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	set_scaleY(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	set_rotation(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	get_viewportX() {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewX * this.scene.width;
	}
	set_viewportX(v) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewX = Math.floor(v) / this.scene.width;
		return v;
	}
	get_viewportY() {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewY * this.scene.height;
	}
	set_viewportY(v) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewY = Math.floor(v) / this.scene.height;
		return v;
	}
	get_viewportWidth() {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewW * this.scene.width;
	}
	set_viewportWidth(v) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewW = Math.ceil(v) / this.scene.width;
		return v;
	}
	get_viewportHeight() {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewH * this.scene.height;
	}
	set_viewportHeight(v) {
		if(this.scene == null) {
			throw haxe.Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewH = Math.ceil(v) / this.scene.height;
		return v;
	}
	set_anchorX(v) {
		this.posChanged = true;
		return this.anchorX = v;
	}
	set_anchorY(v) {
		this.posChanged = true;
		return this.anchorY = v;
	}
}
$hxClasses["h2d.Camera"] = h2d.Camera;
h2d.Camera.__name__ = "h2d.Camera";
Object.assign(h2d.Camera.prototype, {
	__class__: h2d.Camera
	,__properties__: {set_anchorY: "set_anchorY",set_anchorX: "set_anchorX",set_viewportHeight: "set_viewportHeight",get_viewportHeight: "get_viewportHeight",set_viewportWidth: "set_viewportWidth",get_viewportWidth: "get_viewportWidth",set_viewportY: "set_viewportY",get_viewportY: "get_viewportY",set_viewportX: "set_viewportX",get_viewportX: "get_viewportX",set_rotation: "set_rotation",set_scaleY: "set_scaleY",set_scaleX: "set_scaleX",set_y: "set_y",set_x: "set_x"}
});
h2d.Kerning = class h2d_Kerning {
	constructor(c,o) {
		this.prevChar = c;
		this.offset = o;
	}
}
$hxClasses["h2d.Kerning"] = h2d.Kerning;
h2d.Kerning.__name__ = "h2d.Kerning";
Object.assign(h2d.Kerning.prototype, {
	__class__: h2d.Kerning
});
h2d.FontChar = class h2d_FontChar {
	constructor(t,w) {
		this.t = t;
		this.width = w;
	}
	addKerning(prevChar,offset) {
		let k = new h2d.Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	getKerningOffset(prevChar) {
		let k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	clone() {
		let c = new h2d.FontChar(this.t.clone(),this.width);
		let k = this.kerning;
		if(k != null) {
			let kc = new h2d.Kerning(k.prevChar,k.offset);
			c.kerning = kc;
			k = k.next;
			while(k != null) {
				let kn = new h2d.Kerning(k.prevChar,k.offset);
				kc = kc.next = kn;
				k = k.next;
			}
		}
		return c;
	}
}
$hxClasses["h2d.FontChar"] = h2d.FontChar;
h2d.FontChar.__name__ = "h2d.FontChar";
Object.assign(h2d.FontChar.prototype, {
	__class__: h2d.FontChar
});
h2d.FontType = $hxEnums["h2d.FontType"] = { __ename__:true,__constructs__:null
	,BitmapFont: {_hx_name:"BitmapFont",_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_._hx_name="SignedDistanceField",$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d.FontType.__constructs__ = [h2d.FontType.BitmapFont,h2d.FontType.SignedDistanceField];
h2d.FontType.__empty_constructs__ = [h2d.FontType.BitmapFont];
h2d.Font = class h2d_Font {
	constructor(name,size,type) {
		this.offsetY = 0;
		this.offsetX = 0;
		this.name = name;
		this.size = size;
		this.initSize = size;
		this.glyphs = new haxe.ds.IntMap();
		this.defaultChar = this.nullChar = new h2d.FontChar(new h2d.Tile(null,0,0,0,0),0);
		this.charset = hxd.Charset.getDefault();
		if(name != null) {
			this.tilePath = haxe.io.Path.withExtension(name,"png");
		}
		if(type == null) {
			this.type = h2d.FontType.BitmapFont;
		} else {
			this.type = type;
		}
	}
	getChar(code) {
		let c = this.glyphs.h[code];
		if(c == null) {
			c = this.charset.resolveChar(code,this.glyphs);
			if(c == null) {
				c = code == 13 || code == 10 ? this.nullChar : this.defaultChar;
			}
		}
		return c;
	}
	setOffset(x,y) {
		let dx = x - this.offsetX;
		let dy = y - this.offsetY;
		if(dx == 0 && dy == 0) {
			return;
		}
		let g = this.glyphs.iterator();
		while(g.hasNext()) {
			let g1 = g.next();
			g1.t.dx += dx;
			g1.t.dy += dy;
		}
		this.offsetX += dx;
		this.offsetY += dy;
	}
	clone() {
		let f = new h2d.Font(this.name,this.size);
		f.baseLine = this.baseLine;
		f.lineHeight = this.lineHeight;
		f.tile = this.tile.clone();
		f.charset = this.charset;
		f.defaultChar = this.defaultChar.clone();
		f.type = this.type;
		f.offsetX = this.offsetX;
		f.offsetY = this.offsetY;
		let g = this.glyphs.keys();
		while(g.hasNext()) {
			let g1 = g.next();
			let c = this.glyphs.h[g1];
			let c2 = c.clone();
			if(c == this.defaultChar) {
				f.defaultChar = c2;
			}
			f.glyphs.h[g1] = c2;
		}
		return f;
	}
	resizeTo(size) {
		let ratio = size / this.initSize;
		let c = this.glyphs.iterator();
		while(c.hasNext()) {
			let c1 = c.next();
			c1.width *= ratio;
			c1.t.scaleToSize(c1.t.width * ratio,c1.t.height * ratio);
			c1.t.dx *= ratio;
			c1.t.dy *= ratio;
			let k = c1.kerning;
			while(k != null) {
				k.offset *= ratio;
				k = k.next;
			}
		}
		this.lineHeight = Math.ceil(this.lineHeight * ratio);
		this.baseLine = Math.ceil(this.baseLine * ratio);
		this.size = size;
	}
	hasChar(code) {
		return this.glyphs.h[code] != null;
	}
	dispose() {
		this.tile.dispose();
	}
	calcBaseLine() {
		let padding = 0;
		let space = this.glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		let a = this.glyphs.h[65];
		if(a == null) {
			a = this.glyphs.h[97];
		}
		if(a == null) {
			a = this.glyphs.h[48];
		}
		if(a == null) {
			return this.lineHeight - 2 - padding;
		}
		return a.t.dy + a.t.height - padding;
	}
}
$hxClasses["h2d.Font"] = h2d.Font;
h2d.Font.__name__ = "h2d.Font";
Object.assign(h2d.Font.prototype, {
	__class__: h2d.Font
});
hxd.Interactive = class hxd_Interactive {
}
$hxClasses["hxd.Interactive"] = hxd.Interactive;
hxd.Interactive.__name__ = "hxd.Interactive";
hxd.Interactive.__isInterface__ = true;
Object.assign(hxd.Interactive.prototype, {
	__class__: hxd.Interactive
	,__properties__: {set_cursor: "set_cursor"}
});
h2d.Interactive = class h2d_Interactive extends h2d.Object {
	constructor(width,height,parent,shape) {
		h2d.Object._hx_skip_constructor = true;
		super();
		h2d.Object._hx_skip_constructor = false;
		this._hx_constructor(width,height,parent,shape);
	}
	_hx_constructor(width,height,parent,shape) {
		this.shapeY = 0;
		this.shapeX = 0;
		this.lastClickFrame = -1;
		this.mouseDownButton = -1;
		this.allowMultiClick = false;
		this.enableRightButton = false;
		this.propagateEvents = false;
		this.cancelEvents = false;
		this.cursor = hxd.Cursor.Button;
		super._hx_constructor(parent);
		this.width = width;
		this.height = height;
		this.shape = shape;
	}
	onAdd() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		super.onAdd();
	}
	draw(ctx) {
		this.maskedBounds = ctx.getCurrentRenderZone(this.maskedBounds);
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d.Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	onHierarchyMoved(parentChanged) {
		super.onHierarchyMoved(parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
	}
	onRemove() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		super.onRemove();
	}
	checkBounds(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	preventClick() {
		this.mouseDownButton = -1;
	}
	getInteractiveScene() {
		return this.scene;
	}
	handleEvent(e) {
		if(this.maskedBounds != null && this.checkBounds(e)) {
			let x = e.relX;
			let y = e.relY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let pt = new h2d.col.PointImpl(x,y);
			this.localToGlobal(pt);
			if(pt.x < this.maskedBounds.xMin || pt.y < this.maskedBounds.yMin || pt.x > this.maskedBounds.xMax || pt.y > this.maskedBounds.yMax) {
				e.cancel = true;
				return;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			let cx = this.width * 0.5;
			let cy = this.height * 0.5;
			let dx = (e.relX - cx) / cx;
			let dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				let frame = hxd.Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			e.propagate = true;
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	calcAbsPos() {
		super.calcAbsPos();
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	set_cursor(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	eventToLocal(e) {
		let i = this;
		let dx = e.relX - i.absX;
		let dy = e.relY - i.absY;
		e.relX = (dx * i.matD - dy * i.matC) * i.invDet;
		e.relY = (-dx * i.matB + dy * i.matA) * i.invDet;
	}
	startCapture(callb,onCancel,touchId) {
		let _gthis = this;
		this.scene.startCapture(function(event) {
			let x = event.relX;
			let y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel,touchId);
	}
	stopCapture() {
		this.scene.stopCapture();
	}
	startDrag(callb,onCancel) {
		this.startCapture(callb,onCancel);
	}
	stopDrag() {
		this.stopCapture();
	}
	focus() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	blur() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	isOver() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	hasFocus() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	onOver(e) {
	}
	onOut(e) {
	}
	onPush(e) {
	}
	onRelease(e) {
	}
	onReleaseOutside(e) {
	}
	onClick(e) {
	}
	onMove(e) {
	}
	onWheel(e) {
	}
	onFocus(e) {
	}
	onFocusLost(e) {
	}
	onKeyUp(e) {
	}
	onKeyDown(e) {
	}
	onCheck(e) {
	}
	onTextInput(e) {
	}
}
$hxClasses["h2d.Interactive"] = h2d.Interactive;
h2d.Interactive.__name__ = "h2d.Interactive";
h2d.Interactive.__interfaces__ = [hxd.Interactive];
h2d.Interactive.__super__ = h2d.Object;
Object.assign(h2d.Interactive.prototype, {
	__class__: h2d.Interactive
	,__properties__: Object.assign({}, h2d.Object.prototype.__properties__, {set_cursor: "set_cursor"})
});
h2d.Layers = class h2d_Layers extends h2d.Object {
	_hx_constructor(parent) {
		super._hx_constructor(parent);
		this.layersIndexes = [];
		this.layerCount = 0;
	}
	addChild(s) {
		this.add(s,-1);
	}
	add(s,layer,index) {
		if(index == null) {
			index = -1;
		}
		if(layer == null) {
			layer = -1;
		}
		if(s.parent == this) {
			let old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		if(index != -1) {
			if(layer == 0) {
				let b = this.layersIndexes[layer];
				let b1 = index > b ? b : index;
				super.addChildAt(s,0 < b1 ? b1 : 0);
			} else if(index < 0) {
				super.addChildAt(s,this.layersIndexes[layer - 1]);
			} else {
				let a = this.layersIndexes[layer - 1] + index;
				let b = this.layersIndexes[layer];
				super.addChildAt(s,a > b ? b : a);
			}
		} else {
			super.addChildAt(s,this.layersIndexes[layer]);
		}
		let _g = layer;
		let _g1 = this.layerCount;
		while(_g < _g1) {
			let i = _g++;
			this.layersIndexes[i]++;
		}
	}
	addChildAt(s,index) {
		this.add(s,-1,index);
	}
	removeChild(s) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				let k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	under(s) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == s) {
				let pos = 0;
				let _g = 0;
				let _g1 = this.layersIndexes;
				while(_g < _g1.length) {
					let l = _g1[_g];
					++_g;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				let p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	over(s) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == s) {
				let _g = 0;
				let _g1 = this.layersIndexes;
				while(_g < _g1.length) {
					let l = _g1[_g];
					++_g;
					if(l > i) {
						let _g = i;
						let _g1 = l - 1;
						while(_g < _g1) {
							let p = _g++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	getLayer(layer) {
		let a;
		if(layer >= this.layerCount) {
			a = [];
		} else {
			let start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
			let max = this.layersIndexes[layer];
			a = this.children.slice(start,max);
		}
		return new hxd.impl.ArrayIterator_h2d_Object(a);
	}
	getChildAtLayer(n,layer) {
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		if(layer >= this.layerCount || n < 0 || n >= this.layersIndexes[layer]) {
			return null;
		}
		if(layer == 0) {
			return this.children[n];
		}
		return this.children[this.layersIndexes[layer - 1] + n];
	}
	getChildLayer(s) {
		if(s.parent != this) {
			return -1;
		}
		let index = this.children.indexOf(s);
		let _g = 0;
		let _g1 = this.layerCount;
		while(_g < _g1) {
			let i = _g++;
			if(this.layersIndexes[i] > index) {
				return i;
			}
		}
		return -1;
	}
	getChildIndexInLayer(o) {
		if(o.parent != this) {
			return -1;
		}
		let index = this.children.indexOf(o);
		if(index < this.layersIndexes[0]) {
			return index;
		}
		let _g = 1;
		let _g1 = this.layerCount;
		while(_g < _g1) {
			let i = _g++;
			if(this.layersIndexes[i] > index) {
				return index - this.layersIndexes[i - 1];
			}
		}
		return -1;
	}
	drawLayer(ctx,layer) {
		if(layer >= this.layerCount) {
			return;
		}
		let old = ctx.globalAlpha;
		ctx.globalAlpha *= this.alpha;
		let start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		let max = this.layersIndexes[layer];
		if(ctx.front2back) {
			let _g = start;
			let _g1 = max;
			while(_g < _g1) {
				let i = _g++;
				this.children[max - 1 - i].drawRec(ctx);
			}
		} else {
			let _g = start;
			let _g1 = max;
			while(_g < _g1) {
				let i = _g++;
				this.children[i].drawRec(ctx);
			}
		}
		ctx.globalAlpha = old;
	}
	ysort(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		let start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		let max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		let pos = start;
		let ymax = this.children[pos++].y;
		while(pos < max) {
			let c = this.children[pos];
			if(c.y < ymax) {
				let p = pos - 1;
				while(p >= start) {
					let c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
				if(c.allocated) {
					c.onHierarchyMoved(false);
				}
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
}
$hxClasses["h2d.Layers"] = h2d.Layers;
h2d.Layers.__name__ = "h2d.Layers";
h2d.Layers.__super__ = h2d.Object;
Object.assign(h2d.Layers.prototype, {
	__class__: h2d.Layers
});
h3d.impl = {};
h3d.impl.RenderContext = class h3d_impl_RenderContext {
	constructor() {
		if(h3d.impl.RenderContext._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.engine = h3d.Engine.CURRENT;
		this.frame = 0;
		this.time = 0.;
		this.elapsedTime = 1. / hxd.System.getDefaultFrameRate();
		this.textures = new h3d.impl.TextureCache();
		this.globals = new hxsl.Globals();
	}
	setCurrent() {
		h3d.impl.RenderContext.inst = this;
	}
	clearCurrent() {
		if(h3d.impl.RenderContext.inst == this) {
			h3d.impl.RenderContext.inst = null;
		} else {
			throw haxe.Exception.thrown("Context has changed");
		}
	}
	dispose() {
		this.textures.dispose();
	}
	fillRec(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			let _g = type.size;
			let _g1 = type.t;
			if(_g == 4) {
				let v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				return 4;
			} else {
				let n = _g;
				let v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				if(n == 3) {
					out[pos++] = v1.z;
				}
				return n;
			}
			break;
		case 6:
			let m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			let m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			let m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			let vl = type.vl;
			let tot = 0;
			let _g2 = 0;
			while(_g2 < vl.length) {
				let vv = vl[_g2];
				++_g2;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			let _g3 = type.t;
			let _g4 = type.size;
			switch(_g3._hx_index) {
			case 3:
				if(_g4._hx_index == 0) {
					let len = _g4.v;
					let v1 = v;
					let size = 0;
					let count = v1.length < len ? v1.length : len;
					let _g = 0;
					let _g1 = count;
					while(_g < _g1) {
						let i = _g++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe.Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g3.size == 4) {
					if(_g3.t._hx_index == 1) {
						if(_g4._hx_index == 0) {
							let len = _g4.v;
							let v1 = v;
							let _g = 0;
							let _g1 = len;
							while(_g < _g1) {
								let i = _g++;
								let n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe.Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g4._hx_index == 0) {
						let t = _g3;
						let len = _g4.v;
						let v1 = v;
						let size = 0;
						let _g = 0;
						let _g1 = len;
						while(_g < _g1) {
							let i = _g++;
							let n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe.Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g4._hx_index == 0) {
					let t = _g3;
					let len = _g4.v;
					let v1 = v;
					let size = 0;
					let _g = 0;
					let _g1 = len;
					while(_g < _g1) {
						let i = _g++;
						let n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe.Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g4._hx_index == 0) {
					let len = _g4.v;
					let v1 = v;
					let _g = 0;
					let _g1 = len;
					while(_g < _g1) {
						let i = _g++;
						let m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe.Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g4._hx_index == 0) {
					let t = _g3;
					let len = _g4.v;
					let v1 = v;
					let size = 0;
					let _g = 0;
					let _g1 = len;
					while(_g < _g1) {
						let i = _g++;
						let n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe.Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe.Exception.thrown("assert " + Std.string(type));
		}
	}
	shaderInfo(shaders,path) {
		let name = path.split(".").pop();
		while(shaders != null) {
			let inst = shaders.s.instance;
			let _g = 0;
			let _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	getPtr(data) {
		return data;
	}
	getParamValue(p,shaders,opt) {
		if(opt == null) {
			opt = false;
		}
		if(p.perObjectGlobal != null) {
			let v = this.globals.map.h[p.perObjectGlobal.gid];
			if(v == null) {
				throw haxe.Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p.perObjectGlobal.path));
			}
			let _g = p.type;
			let tmp;
			if(_g._hx_index == 17) {
				let _g1 = _g.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return v.texture;
			}
			return v;
		}
		let si = shaders;
		let n = p.instance;
		while(--n > 0) si = si.next;
		let v = si.s.getParamValue(p.index);
		if(v == null && !opt) {
			throw haxe.Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
		}
		return v;
	}
	fillGlobals(buf,s) {
		let _gthis = this;
		let g = s.vertex.globals;
		let ptr = buf.vertex.globals;
		while(g != null) {
			let v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				throw haxe.Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		let g1 = s.fragment.globals;
		let ptr1 = buf.fragment.globals;
		while(g1 != null) {
			let v = _gthis.globals.map.h[g1.gid];
			if(v == null) {
				throw haxe.Exception.thrown("Missing global value " + g1.path);
			}
			_gthis.fillRec(v,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	fillParams(buf,s,shaders) {
		let curInstance = -1;
		let curInstanceValue = null;
		let _gthis = this;
		let buf1 = buf.vertex;
		let s1 = s.vertex;
		let p = s1.params;
		let ptr = buf1.params;
		while(p != null) {
			let v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl.Type.TFloat) {
					let index = p.instance;
					let i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						let si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				let index = p.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				let v1 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v1 == null) {
					throw haxe.Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				let _g = p.type;
				let v2;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					v2 = true;
				} else {
					v2 = false;
				}
				v = v2 ? v1.texture : v1;
			} else {
				let index = p.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				let v2 = v1.getParamValue(p.index);
				if(v2 == null) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v2;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		let tid = 0;
		let p1 = s1.textures;
		while(p1 != null) {
			let opt = !h3d.impl.RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			let t;
			if(p1.perObjectGlobal != null) {
				let v = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v == null) {
					throw haxe.Exception.thrown("Missing global value " + p1.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				let _g = p1.type;
				let t1;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				let index = p1.instance;
				let v;
				if(curInstance == index) {
					v = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v = curInstanceValue;
				}
				let v1 = v.getParamValue(p1.index);
				if(v1 == null && !opt) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p1.name);
				}
				t = v1;
			}
			if(p1.pos < 0) {
				let arr = t;
				let _g = 0;
				let _g1 = -p1.pos;
				while(_g < _g1) {
					let i = _g++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p1 = p1.next;
		}
		let p2 = s1.buffers;
		let bid = 0;
		while(p2 != null) {
			let opt = !h3d.impl.RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			let b;
			if(p2.perObjectGlobal != null) {
				let v = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v == null) {
					throw haxe.Exception.thrown("Missing global value " + p2.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				let _g = p2.type;
				let b1;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				let index = p2.instance;
				let v;
				if(curInstance == index) {
					v = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v = curInstanceValue;
				}
				let v1 = v.getParamValue(p2.index);
				if(v1 == null && !opt) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p2.name);
				}
				b = v1;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		let buf2 = buf.fragment;
		let s2 = s.fragment;
		let p3 = s2.params;
		let ptr1 = buf2.params;
		while(p3 != null) {
			let v;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl.Type.TFloat) {
					let index = p3.instance;
					let i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						let si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr1[p3.pos] = i.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				let index = p3.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p3.index);
				if(v == null) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				let v1 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v1 == null) {
					throw haxe.Exception.thrown("Missing global value " + p3.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				let _g = p3.type;
				let v2;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					v2 = true;
				} else {
					v2 = false;
				}
				v = v2 ? v1.texture : v1;
			} else {
				let index = p3.instance;
				let v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				let v2 = v1.getParamValue(p3.index);
				if(v2 == null) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p3.name);
				}
				v = v2;
			}
			_gthis.fillRec(v,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		let tid1 = 0;
		let p4 = s2.textures;
		while(p4 != null) {
			let opt = !h3d.impl.RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			let t;
			if(p4.perObjectGlobal != null) {
				let v = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v == null) {
					throw haxe.Exception.thrown("Missing global value " + p4.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				let _g = p4.type;
				let t1;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				let index = p4.instance;
				let v;
				if(curInstance == index) {
					v = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v = curInstanceValue;
				}
				let v1 = v.getParamValue(p4.index);
				if(v1 == null && !opt) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p4.name);
				}
				t = v1;
			}
			if(p4.pos < 0) {
				let arr = t;
				let _g = 0;
				let _g1 = -p4.pos;
				while(_g < _g1) {
					let i = _g++;
					buf2.tex[tid1++] = arr[i];
				}
			} else {
				buf2.tex[tid1++] = t;
			}
			p4 = p4.next;
		}
		let p5 = s2.buffers;
		let bid1 = 0;
		while(p5 != null) {
			let opt = !h3d.impl.RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			let b;
			if(p5.perObjectGlobal != null) {
				let v = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v == null) {
					throw haxe.Exception.thrown("Missing global value " + p5.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				let _g = p5.type;
				let b1;
				if(_g._hx_index == 17) {
					let _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				let index = p5.instance;
				let v;
				if(curInstance == index) {
					v = curInstanceValue;
				} else {
					let si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v = curInstanceValue;
				}
				let v1 = v.getParamValue(p5.index);
				if(v1 == null && !opt) {
					throw haxe.Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p5.name);
				}
				b = v1;
			}
			buf2.buffers[bid1++] = b;
			p5 = p5.next;
		}
	}
	static get() {
		return h3d.impl.RenderContext.inst;
	}
	static getType(cl) {
		let value = h3d.impl.RenderContext.inst;
		if(js.Boot.__downcastCheck(value,cl)) {
			return value;
		} else {
			return null;
		}
	}
}
$hxClasses["h3d.impl.RenderContext"] = h3d.impl.RenderContext;
h3d.impl.RenderContext.__name__ = "h3d.impl.RenderContext";
Object.assign(h3d.impl.RenderContext.prototype, {
	__class__: h3d.impl.RenderContext
});
h2d.RenderContext = class h2d_RenderContext extends h3d.impl.RenderContext {
	constructor(scene) {
		h3d.impl.RenderContext._hx_skip_constructor = true;
		super();
		h3d.impl.RenderContext._hx_skip_constructor = false;
		this._hx_constructor(scene);
	}
	_hx_constructor(scene) {
		this.renderZoneIndex = 0;
		this.renderZoneStack = [];
		this.tmpBounds = new h2d.col.Bounds();
		this.defaultSmooth = false;
		this.globalAlpha = 1.;
		super._hx_constructor();
		this.scene = scene;
		this.bufPos = 0;
		this.output = new h3d.pass.OutputShader();
		this.pass = new h3d.mat.Pass("",null);
		this.pass.depth(true,h3d.mat.Compare.Always);
		this.pass.set_culling(h3d.mat.Face.None);
		this.baseShader = new h3d.shader.Base2d();
		this.baseShader.setPriority(100);
		this.baseShader.zValue__ = 0.;
		this.baseShaderList = new hxsl.ShaderList(this.baseShader);
		this.targetsStack = [];
		this.targetsStackIndex = 0;
		this.cameraStack = [];
		this.cameraStackIndex = 0;
		this.filterStack = [];
		this.filterStackIndex = 0;
	}
	dispose() {
		super.dispose();
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	hasBuffering() {
		return false;
	}
	begin() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.setCurrent();
		this.targetFlipY = this.engine.driver.hasFeature(h3d.impl.Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.globals.set("time",this.time);
		this.globals.set("global.time",this.time);
		let _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		let _this1 = this.baseShader.halfPixelInverse__;
		let x = 0.5 / this.engine.width;
		let y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		let _this2 = this.baseShader.viewportA__;
		let x1 = this.scene.viewportA;
		let y1 = 0;
		let z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		let _this3 = this.baseShader.viewportB__;
		let x2 = 0;
		let y2 = this.scene.viewportD * -this.baseFlipY;
		let z1 = this.scene.viewportY * -this.baseFlipY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this3.x = x2;
		_this3.y = y2;
		_this3.z = z1;
		let _this4 = this.baseShader.filterMatrixA__;
		let x3 = 1;
		let y3 = 0;
		let z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this4.x = x3;
		_this4.y = y3;
		_this4.z = z2;
		let _this5 = this.baseShader.filterMatrixB__;
		let x4 = 0;
		let y4 = 1;
		let z3 = 0;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this5.x = x4;
		_this5.y = y4;
		_this5.z = z3;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	allocTarget(name,filter) {
		if(filter == null) {
			filter = false;
		}
		let t = this.textures.allocTarget(name,this.scene.width,this.scene.height,false);
		t.set_filter(filter ? h3d.mat.Filter.Linear : h3d.mat.Filter.Nearest);
		return t;
	}
	clear(color) {
		this.engine.clear(color);
	}
	initShaders(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.output.compileShaders(this.globals,shaders);
		if(this.buffers == null) {
			this.buffers = new h3d.shader.Buffers(this.compiledShader);
		} else {
			let _this = this.buffers;
			let s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	end() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		this.clearCurrent();
		if(this.targetsStackIndex != 0) {
			throw haxe.Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe.Exception.thrown("Missing popCamera()");
		}
	}
	pushCamera(cam) {
		let entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0};
			this.cameraStack.push(entry);
		}
		let tmpA = this.viewA;
		let tmpB = this.viewB;
		let tmpC = this.viewC;
		let tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		let flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		let _this = this.baseShader.viewportA__;
		let x = this.viewA;
		let y = this.viewC;
		let z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.baseShader.viewportB__;
		let x1 = this.viewB * flipY;
		let y1 = this.viewD * flipY;
		let z1 = this.viewY * flipY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
	}
	popCamera() {
		if(this.cameraStackIndex == 0) {
			throw haxe.Exception.thrown("Too many popCamera()");
		}
		let inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		let flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		let _this = this.baseShader.viewportA__;
		let x = this.viewA;
		let y = this.viewC;
		let z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.baseShader.viewportB__;
		let x1 = this.viewB * flipY;
		let y1 = this.viewD * flipY;
		let z1 = this.viewY * flipY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
	}
	pushFilter(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.inFilter = this.filterStack[this.filterStackIndex++];
		if(this.inFilter == null) {
			this.inFilter = { spr : null, scaleX : 1, scaleY : 1};
			this.filterStack.push(this.inFilter);
		}
		this.inFilter.spr = spr;
		this.inFilter.scaleX = 1;
		this.inFilter.scaleY = 1;
		return true;
	}
	setFilterScale(scaleX,scaleY) {
		if(this.inFilter != null) {
			this.inFilter.scaleX = scaleX;
			this.inFilter.scaleY = scaleY;
		}
	}
	getFilterScale(into) {
		if(into == null) {
			into = new h2d.col.PointImpl(0.,0.);
		}
		if(this.inFilter != null) {
			let _this = into;
			let x = this.inFilter.scaleX;
			let y = this.inFilter.scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
		} else {
			let _this = into;
			let x = 1;
			let y = 1;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
		}
		return into;
	}
	popFilter() {
		this.inFilter.spr = null;
		this.filterStackIndex--;
		if(this.filterStackIndex > 0) {
			this.inFilter = this.filterStack[this.filterStackIndex - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(this.filterStack[this.filterStackIndex].spr);
			}
		}
	}
	pushTarget(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		let entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		let _this = this.baseShader.halfPixelInverse__;
		let x = 0.5 / (t == null ? this.engine.width : t.width);
		let y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		let _this1 = this.baseShader.viewportA__;
		let x1 = this.viewA;
		let y1 = this.viewC;
		let z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		let _this2 = this.baseShader.viewportB__;
		let x2 = this.viewB * -this.targetFlipY;
		let y2 = this.viewD * -this.targetFlipY;
		let z1 = this.viewY * -this.targetFlipY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z1;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	pushTargets(texs) {
		this.pushTarget(texs[0]);
		if(texs.length > 1) {
			this.engine.popTarget();
			this.engine.pushTargets(texs);
		}
	}
	popTarget() {
		if(this.targetsStackIndex <= 0) {
			throw haxe.Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		let tinf = this.targetsStack[--this.targetsStackIndex];
		let t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		let flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		let _this = this.baseShader.halfPixelInverse__;
		let x = 0.5 / (t == null ? this.engine.width : t.width);
		let y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		let _this1 = this.baseShader.viewportA__;
		let x1 = this.viewA;
		let y1 = this.viewC;
		let z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		let _this2 = this.baseShader.viewportB__;
		let x2 = this.viewB * flipY;
		let y2 = this.viewD * flipY;
		let z1 = this.viewY * flipY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z1;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	pushRenderZone(x,y,w,h) {
		let inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	popRenderZone() {
		if(this.renderZoneIndex == 0) {
			throw haxe.Exception.thrown("Too many popRenderZone()");
		}
		let inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	getCurrentRenderZone(bounds) {
		if(!this.hasRenderZone) {
			return null;
		}
		if(bounds == null) {
			bounds = new h2d.col.Bounds();
		}
		let x = this.renderX;
		let y = this.renderY;
		bounds.xMin = x;
		bounds.yMin = y;
		bounds.xMax = x + this.renderW;
		bounds.yMax = y + this.renderH;
		return bounds;
	}
	clipRenderZone(x,y,w,h) {
		if(!this.hasRenderZone) {
			this.pushRenderZone(x,y,w,h);
			return;
		}
		let x2 = Math.min(x + w,this.renderX + this.renderW);
		let y2 = Math.min(y + h,this.renderY + this.renderH);
		x = Math.max(x,this.renderX);
		y = Math.max(y,this.renderY);
		if(x2 < x) {
			x2 = x;
		}
		if(y2 < y) {
			y2 = y;
		}
		this.pushRenderZone(x,y,x2 - x,y2 - y);
	}
	setRZ(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		let scaleX = this.scene.viewportA * this.engine.width / 2;
		let scaleY = this.scene.viewportD * this.engine.height / 2;
		if(this.inFilter != null) {
			let fa = this.baseShader.filterMatrixA__;
			let fb = this.baseShader.filterMatrixB__;
			let x2 = x + w;
			let y2 = y + h;
			let rx1 = x * fa.x + y * fa.y + fa.z;
			let ry1 = x * fb.x + y * fb.y + fb.z;
			let rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			let ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	clearRZ() {
		this.hasRenderZone = false;
		this.engine.setRenderZone();
	}
	setRenderZone(x,y,w,h) {
		this.pushRenderZone(x,y,w,h);
	}
	clearRenderZone() {
		this.popRenderZone();
	}
	drawLayer(layer) {
		this.scene.drawLayer(this,layer);
	}
	drawScene() {
		this.scene.drawRec(this);
	}
	flush() {
	}
	_flush() {
		if(this.bufPos == 0) {
			return;
		}
		this.beforeDraw();
		let nverts = this.bufPos / this.stride | 0;
		let tmp = new h3d.Buffer(nverts,hxd.BufferFormat.get_XY_UV_RGBA(),[h3d.BufferFlag.Dynamic]);
		tmp.uploadFloats(this.buffer,0,nverts);
		let _this = this.engine;
		_this.renderBuffer(tmp,_this.mem.getQuadIndexes(tmp.vertices),2,0,-1);
		tmp.dispose();
		this.bufPos = 0;
		this.texture = null;
	}
	beforeDraw() {
		if(this.texture == null) {
			this.texture = h3d.mat.Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d.mat.Filter.Linear : h3d.mat.Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d.mat.Wrap.Repeat : h3d.mat.Wrap.Clamp);
		let blend = this.currentObj.blendMode;
		if(this.inFilter != null && this.inFilter.spr == this.currentObj && blend == h2d.BlendMode.Erase) {
			blend = h2d.BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d.BlendMode.Alpha || blend == h2d.BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d.mat.Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d.mat.Blend.One);
				}
			}
		}
		this.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	setupColor(obj) {
		if(this.inFilter != null && this.inFilter.spr == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
	}
	beginDrawBatchState(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		let _this = this.baseShader.absoluteMatrixA__;
		let x = obj.matA;
		let y = obj.matC;
		let z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.baseShader.absoluteMatrixB__;
		let x1 = obj.matB;
		let y1 = obj.matD;
		let z1 = obj.absY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		return true;
	}
	swapTexture(texture) {
		this.texture = texture;
		this.beforeDraw();
	}
	beginDrawObject(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		let _this = this.baseShader.absoluteMatrixA__;
		let x = obj.matA;
		let y = obj.matC;
		let z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.baseShader.absoluteMatrixB__;
		let x1 = obj.matB;
		let y1 = obj.matD;
		let z1 = obj.absY;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		this.beforeDraw();
		return true;
	}
	beginDrawBatch(obj,texture) {
		return this.beginDraw(obj,texture,false);
	}
	drawTile(obj,tile) {
		let matA;
		let matB;
		let matC;
		let matD;
		let absX;
		let absY;
		if(this.inFilter != null) {
			let f1 = this.baseShader.filterMatrixA__;
			let f2 = this.baseShader.filterMatrixB__;
			let tmpA = obj.matA * f1.x + obj.matB * f1.y;
			let tmpB = obj.matA * f2.x + obj.matB * f2.y;
			let tmpC = obj.matC * f1.x + obj.matD * f1.y;
			let tmpD = obj.matC * f2.x + obj.matD * f2.y;
			let tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			let tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			let tx = tile.dx + tile.width * 0.5;
			let ty = tile.dy + tile.height * 0.5;
			let a = matA < 0 ? -matA : matA;
			let b = matD < 0 ? -matD : matD;
			let tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			let cx = absX + tx * matA;
			let cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			let xMin = 1e20;
			let yMin = 1e20;
			let xMax = -1e20;
			let yMax = -1e20;
			let hw = tile.width * 0.5;
			let hh = tile.height * 0.5;
			let px = tile.dx * matA + tile.dy * matC;
			let py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			let x = tile.width;
			let px1 = (x + tile.dx) * matA + tile.dy * matC;
			let py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			let y = tile.height;
			let px2 = tile.dx * matA + (y + tile.dy) * matC;
			let py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			let x1 = tile.width;
			let y1 = tile.height;
			let px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			let py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			let _this = this.baseShader.color__;
			let x = this.globalAlpha;
			let y = this.globalAlpha;
			let z = this.globalAlpha;
			let w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			let _this = this.baseShader.color__;
			let x = obj.color.x;
			let y = obj.color.y;
			let z = obj.color.z;
			let w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		let _this = this.baseShader.absoluteMatrixA__;
		let x = tile.width * obj.matA;
		let y = tile.height * obj.matC;
		let z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.baseShader.absoluteMatrixB__;
		let x1 = tile.width * obj.matB;
		let y1 = tile.height * obj.matD;
		let z1 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		let _this2 = this.baseShader.uvPos__;
		let x2 = tile.u;
		let y2 = tile.v;
		let z2 = tile.u2 - tile.u;
		let w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.vbuf == null) {
			this.fixedBuffer = new h3d.Buffer(4,hxd.BufferFormat.get_XY_UV_RGBA());
			let k = hxd._FloatBuffer.Float32Expand._new(0);
			let v = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			let v1 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v1;
			let v2 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v2;
			let v3 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v3;
			let v4 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v4;
			let v5 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v5;
			let v6 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v6;
			let v7 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v7;
			let v8 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v8;
			let v9 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v9;
			let v10 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v10;
			let v11 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v11;
			let v12 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v12;
			let v13 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v13;
			let v14 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v14;
			let v15 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v15;
			let v16 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v16;
			let v17 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v17;
			let v18 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v18;
			let v19 = 0;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v19;
			let v20 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v20;
			let v21 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v21;
			let v22 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v22;
			let v23 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v23;
			let v24 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v24;
			let v25 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v25;
			let v26 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v26;
			let v27 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v27;
			let v28 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v28;
			let v29 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v29;
			let v30 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v30;
			let v31 = 1;
			if(k.pos == k.array.length) {
				let newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadFloats(k,0,4);
		}
		let _this3 = this.engine;
		let b = this.fixedBuffer;
		_this3.renderBuffer(b,_this3.mem.getQuadIndexes(b.vertices),2,0,-1);
		return true;
	}
	beginDraw(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		let stride = 8;
		let shaderChanged = false;
		let paramsChanged = false;
		let objShaders = obj.shaders;
		let curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			let s = objShaders.s;
			let t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			let prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			let _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			let _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			let _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe.Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
}
$hxClasses["h2d.RenderContext"] = h2d.RenderContext;
h2d.RenderContext.__name__ = "h2d.RenderContext";
h2d.RenderContext.__super__ = h3d.impl.RenderContext;
Object.assign(h2d.RenderContext.prototype, {
	__class__: h2d.RenderContext
});
h2d.ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d.ScaleModeAlign.__constructs__ = [h2d.ScaleModeAlign.Left,h2d.ScaleModeAlign.Right,h2d.ScaleModeAlign.Center,h2d.ScaleModeAlign.Top,h2d.ScaleModeAlign.Bottom];
h2d.ScaleModeAlign.__empty_constructs__ = [h2d.ScaleModeAlign.Left,h2d.ScaleModeAlign.Right,h2d.ScaleModeAlign.Center,h2d.ScaleModeAlign.Top,h2d.ScaleModeAlign.Bottom];
h2d.ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__:true,__constructs__:null
	,Resize: {_hx_name:"Resize",_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Stretch",$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="LetterBox",$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Fixed",$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Zoom",$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="AutoZoom",$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d.ScaleMode.__constructs__ = [h2d.ScaleMode.Resize,h2d.ScaleMode.Stretch,h2d.ScaleMode.LetterBox,h2d.ScaleMode.Fixed,h2d.ScaleMode.Zoom,h2d.ScaleMode.AutoZoom];
h2d.ScaleMode.__empty_constructs__ = [h2d.ScaleMode.Resize];
hxd.InteractiveScene = class hxd_InteractiveScene {
}
$hxClasses["hxd.InteractiveScene"] = hxd.InteractiveScene;
hxd.InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd.InteractiveScene.__isInterface__ = true;
Object.assign(hxd.InteractiveScene.prototype, {
	__class__: hxd.InteractiveScene
});
h2d.Scene = class h2d_Scene extends h2d.Layers {
	constructor() {
		h2d.Object._hx_skip_constructor = true;
		super();
		h2d.Object._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.scaleMode = h2d.ScaleMode.Resize;
		super._hx_constructor(null);
		let e = h3d.Engine.CURRENT;
		this.ctx = new h2d.RenderContext(this);
		this._cameras = [];
		new h2d.Camera(this);
		this.set_interactiveCamera(this._cameras[0]);
		this.width = e.width;
		this.height = e.height;
		this.viewportA = 2 / e.width;
		this.viewportD = 2 / e.height;
		this.viewportX = -1;
		this.viewportY = -1;
		this.viewportScaleX = 1;
		this.viewportScaleY = 1;
		this.offsetX = 0;
		this.offsetY = 0;
		this.interactive = [];
		this.eventListeners = [];
		this.shapePoint = new h2d.col.PointImpl(0.,0.);
		this.window = hxd.Window.getInstance();
		this.posChanged = true;
	}
	get_defaultSmooth() {
		return this.ctx.defaultSmooth;
	}
	set_defaultSmooth(v) {
		return this.ctx.defaultSmooth = v;
	}
	setEvents(events) {
		this.events = events;
	}
	get_zoom() {
		let _g = this.scaleMode;
		if(_g._hx_index == 4) {
			let level = _g.level;
			return level | 0;
		} else {
			return 0;
		}
	}
	set_zoom(v) {
		this.set_scaleMode(h2d.ScaleMode.Zoom(v));
		return v;
	}
	set_scaleMode(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	get_renderer() {
		return this.ctx;
	}
	set_renderer(v) {
		this.ctx = v;
		return v;
	}
	get_camera() {
		return this._cameras[0];
	}
	get_cameras() {
		return this._cameras;
	}
	set_interactiveCamera(cam) {
		if(cam == null) {
			throw haxe.Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	addCamera(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	removeCamera(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe.Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	setFixedSize(w,h) {
		this.set_scaleMode(h2d.ScaleMode.Stretch(w,h));
	}
	checkResize() {
		let engine = h3d.Engine.CURRENT;
		if(engine == null) {
			return;
		}
		let _gthis = this;
		let _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			let w = engine.width;
			let h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			let _width = _g.width;
			let _height = _g.height;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			let _width1 = _g.width;
			let _height1 = _g.height;
			let integerScale = _g.integerScale;
			let horizontalAlign = _g.horizontalAlign;
			let verticalAlign = _g.verticalAlign;
			if(_width1 != _gthis.width || _height1 != _gthis.height) {
				_gthis.width = _width1;
				_gthis.height = _height1;
				_gthis.posChanged = true;
			}
			let a = engine.width / _width1;
			let b = engine.height / _height1;
			let zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			let horizontal = horizontalAlign;
			let vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d.ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d.ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			let _width2 = _g.width;
			let _height2 = _g.height;
			let zoom1 = _g.zoom;
			let horizontalAlign1 = _g.horizontalAlign;
			let verticalAlign1 = _g.verticalAlign;
			if(_width2 != _gthis.width || _height2 != _gthis.height) {
				_gthis.width = _width2;
				_gthis.height = _height2;
				_gthis.posChanged = true;
			}
			let horizontal1 = horizontalAlign1;
			let vertical1 = verticalAlign1;
			_gthis.viewportA = zoom1 * 2 / engine.width;
			_gthis.viewportD = zoom1 * 2 / engine.height;
			_gthis.viewportScaleX = zoom1;
			_gthis.viewportScaleY = zoom1;
			if(horizontal1 == null) {
				horizontal1 = h2d.ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom1;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom1) / (zoom1 * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom1) / 2);
			}
			if(vertical1 == null) {
				vertical1 = h2d.ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom1;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom1) / (zoom1 * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom1) / 2);
			}
			break;
		case 4:
			let level = _g.level;
			let w1 = Math.ceil(engine.width / level);
			let h1 = Math.ceil(engine.height / level);
			if(w1 != _gthis.width || h1 != _gthis.height) {
				_gthis.width = w1;
				_gthis.height = h1;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			let minWidth = _g.minWidth;
			let minHeight = _g.minHeight;
			let integerScaling = _g.integerScaling;
			let a1 = engine.width / minWidth;
			let b1 = engine.height / minHeight;
			let zoom2 = a1 > b1 ? b1 : a1;
			if(integerScaling) {
				zoom2 = zoom2 | 0;
				if(zoom2 == 0) {
					zoom2 = 1;
				}
			}
			let w2 = Math.ceil(engine.width / zoom2);
			let h2 = Math.ceil(engine.height / zoom2);
			if(w2 != _gthis.width || h2 != _gthis.height) {
				_gthis.width = w2;
				_gthis.height = h2;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom2;
			_gthis.viewportScaleY = zoom2;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	screenXToViewport(mx) {
		let _this = this.interactiveCamera;
		let mx1 = this.window.get_mouseX();
		let my = this.window.get_mouseY();
		return (((mx1 - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet;
	}
	screenYToViewport(my) {
		let _this = this.interactiveCamera;
		let mx = this.window.get_mouseX();
		let my1 = this.window.get_mouseY();
		return (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my1 - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet;
	}
	get_mouseX() {
		this.syncPos();
		let mx = this.window.get_mouseX();
		let _this = this.interactiveCamera;
		let mx1 = this.window.get_mouseX();
		let my = this.window.get_mouseY();
		let dx = (((mx1 - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		let my1 = this.window.get_mouseY();
		let _this1 = this.interactiveCamera;
		let mx2 = this.window.get_mouseX();
		let my2 = this.window.get_mouseY();
		let dy = (-((mx2 - _this1.scene.offsetX) / _this1.scene.viewportScaleX - _this1.absX) * _this1.matB + ((my2 - _this1.scene.offsetY) / _this1.scene.viewportScaleY - _this1.absY) * _this1.matA) * _this1.invDet - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	get_mouseY() {
		this.syncPos();
		let my = this.window.get_mouseY();
		let _this = this.interactiveCamera;
		let mx = this.window.get_mouseX();
		let my1 = this.window.get_mouseY();
		let dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my1 - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		let mx1 = this.window.get_mouseX();
		let _this1 = this.interactiveCamera;
		let mx2 = this.window.get_mouseX();
		let my2 = this.window.get_mouseY();
		let dx = (((mx2 - _this1.scene.offsetX) / _this1.scene.viewportScaleX - _this1.absX) * _this1.matD - ((my2 - _this1.scene.offsetY) / _this1.scene.viewportScaleY - _this1.absY) * _this1.matC) * _this1.invDet - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	dispatchListeners(event) {
		this.screenToViewport(event);
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	isInteractiveVisible(i) {
		let s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	getInteractive(x,y) {
		let pt = this.shapePoint;
		let _g = 0;
		let _g1 = this.interactive;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			if(i.posChanged) {
				i.syncPos();
			}
			let dx = x - i.absX;
			let dy = y - i.absY;
			let rx = (dx * i.matD - dy * i.matC) * i.invDet;
			let ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				let _this = pt;
				let x = rx + i.shapeX;
				let y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			let visible = true;
			let p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			return i;
		}
		return null;
	}
	screenToViewport(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	dispatchEvent(event,to) {
		let i = to;
		this.screenToViewport(event);
		let dx = event.relX - i.absX;
		let dy = event.relY - i.absY;
		let rx = (dx * i.matD - dy * i.matC) * i.invDet;
		let ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	handleEvent(event,last) {
		this.screenToViewport(event);
		let ex = event.relX;
		let ey = event.relY;
		let index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		let pt = this.shapePoint;
		let _g = index;
		let _g1 = this.interactive.length;
		while(_g < _g1) {
			let idx = _g++;
			let i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			let dx = ex - i.absX;
			let dy = ey - i.absY;
			let rx = (dx * i.matD - dy * i.matC) * i.invDet;
			let ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				let _this = pt;
				let x = rx + i.shapeX;
				let y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			let visible = true;
			let p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	addEventListener(f) {
		this.eventListeners.push(f);
	}
	removeEventListener(f) {
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			if(e == f) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	startCapture(onEvent,onCancel,touchId) {
		let _gthis = this;
		this.events.startCapture(function(e) {
			_gthis.screenToViewport(e);
			onEvent(e);
		},onCancel,touchId);
	}
	stopCapture() {
		this.events.stopCapture();
	}
	startDrag(onEvent,onCancel,refEvent) {
		this.startCapture(onEvent,onCancel,refEvent != null ? refEvent.touchId : null);
	}
	stopDrag() {
		this.stopCapture();
	}
	getFocus() {
		if(this.events == null) {
			return null;
		}
		let f = this.events.getFocus();
		if(f == null) {
			return null;
		}
		let i = ((f) instanceof h2d.Interactive) ? f : null;
		if(i == null) {
			return null;
		}
		return this.interactive[this.interactive.indexOf(i)];
	}
	addEventTarget(i) {
		let i1 = i;
		let lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		let level = lv;
		let _g = 0;
		let _g1 = this.interactive.length;
		while(_g < _g1) {
			let index = _g++;
			let i1 = i;
			let i2 = this.interactive[index];
			let lv1 = level;
			let i3 = i2;
			let lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			let lv2 = lv;
			let p1 = i1;
			let p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			let id = -1;
			let _g1 = 0;
			let _g2 = p1.children.length;
			while(_g1 < _g2) {
				let k = _g1++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			let tmp = id;
			let id1 = -1;
			let _g3 = 0;
			let _g4 = p2.children.length;
			while(_g3 < _g4) {
				let k = _g3++;
				if(p2.children[k] == i2) {
					id1 = k;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	removeEventTarget(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	dispose() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	setElapsedTime(v) {
		this.ctx.elapsedTime = v;
	}
	drawImplTo(s,texs,outputs) {
		let _g = 0;
		while(_g < texs.length) {
			let t = texs[_g];
			++_g;
			if((t.flags & 1 << h3d.mat.TextureFlags.Target._hx_index) == 0) {
				throw haxe.Exception.thrown("Can only draw to texture created with Target flag");
			}
		}
		this.ctx.engine = h3d.Engine.CURRENT;
		let oldBG = this.ctx.engine.backgroundColor;
		let inRender = this.ctx.engine.inRender;
		this.ctx.engine.backgroundColor = null;
		this.ctx.globalAlpha = this.alpha;
		let prevCtx = h3d.impl.RenderContext.get();
		if(!inRender) {
			this.ctx.engine.begin();
			this.ctx.begin();
		} else if(this.ctx.targetFlipY == 0) {
			this.ctx.begin();
		}
		this.ctx.pushTargets(texs);
		if(outputs != null) {
			this.ctx.output.setOutput(outputs);
		}
		s.drawRec(this.ctx);
		if(outputs != null) {
			this.ctx.output.setOutput();
		}
		this.ctx.popTarget();
		this.ctx.engine.backgroundColor = oldBG;
		if(!inRender) {
			this.ctx.end();
			this.ctx.engine.end();
		}
		if(prevCtx != null) {
			prevCtx.setCurrent();
		}
	}
	syncOnly(et) {
		let engine = h3d.Engine.CURRENT;
		this.setElapsedTime(et);
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
	}
	render(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	sync(ctx) {
		let forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		super.sync(ctx);
		let _g = 0;
		let _g1 = this._cameras;
		while(_g < _g1.length) {
			let cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	clipBounds(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		let matA;
		let matB;
		let matC;
		let matD;
		let absX;
		let absY;
		if(ctx.inFilter != null) {
			let f1 = ctx.baseShader.filterMatrixA__;
			let f2 = ctx.baseShader.filterMatrixB__;
			let tmpA = this.matA * f1.x + this.matB * f1.y;
			let tmpB = this.matA * f2.x + this.matB * f2.y;
			let tmpC = this.matC * f1.x + this.matD * f1.y;
			let tmpD = this.matC * f2.x + this.matD * f2.y;
			let tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			let tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		let invDet = 1 / (matA * matD - matB * matC);
		bounds.xMin = ((-1 - absX) * matD + (absY + 1) * matC) * invDet;
		bounds.yMin = ((absX + 1) * matB + (-1 - absY) * matA) * invDet;
		bounds.xMax = ((1 - absX) * matD + (absY - 1) * matC) * invDet;
		bounds.yMax = ((absX - 1) * matB + (1 - absY) * matA) * invDet;
	}
	drawContent(ctx) {
		if(ctx.front2back) {
			let _g = 0;
			let _g1 = this._cameras;
			while(_g < _g1.length) {
				let cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				let i = this.children.length;
				let l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					let top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			let _g = 0;
			let _g1 = this._cameras;
			while(_g < _g1.length) {
				let cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				let i = 0;
				let l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					let top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	onAdd() {
		this.checkResize();
		super.onAdd();
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	onRemove() {
		super.onRemove();
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	captureBitmap(target) {
		let engine = h3d.Engine.CURRENT;
		if(target == null) {
			let tex = new h3d.mat.Texture(this.width,this.height,[h3d.mat.TextureFlags.Target]);
			target = new h2d.Tile(tex,0,0,this.width,this.height);
		}
		engine.begin();
		engine.setRenderZone(target.x | 0,target.y | 0,Math.ceil(target.width),Math.ceil(target.height));
		let tex = target.innerTex;
		engine.pushTarget(tex);
		let ow = this.width;
		let oh = this.height;
		let ova = this.viewportA;
		let ovd = this.viewportD;
		let ovx = this.viewportX;
		let ovy = this.viewportY;
		this.width = tex.width;
		this.height = tex.height;
		this.viewportA = 2 / this.width;
		this.viewportD = 2 / this.height;
		this.viewportX = -1;
		this.viewportY = -1;
		this.posChanged = true;
		this.render(engine);
		engine.popTarget();
		this.width = ow;
		this.height = oh;
		this.viewportA = ova;
		this.viewportD = ovd;
		this.viewportX = ovx;
		this.viewportY = ovy;
		this.posChanged = true;
		engine.setRenderZone();
		engine.end();
		return new h2d.Bitmap(target);
	}
}
$hxClasses["h2d.Scene"] = h2d.Scene;
h2d.Scene.__name__ = "h2d.Scene";
h2d.Scene.__interfaces__ = [hxd.InteractiveScene,h3d.IDrawable];
h2d.Scene.__super__ = h2d.Layers;
Object.assign(h2d.Scene.prototype, {
	__class__: h2d.Scene
	,__properties__: Object.assign({}, h2d.Layers.prototype.__properties__, {set_renderer: "set_renderer",get_renderer: "get_renderer",set_defaultSmooth: "set_defaultSmooth",get_defaultSmooth: "get_defaultSmooth",set_interactiveCamera: "set_interactiveCamera",get_camera: "get_camera",get_cameras: "get_cameras",set_scaleMode: "set_scaleMode",set_zoom: "set_zoom",get_zoom: "get_zoom",get_mouseY: "get_mouseY",get_mouseX: "get_mouseX"})
});
h2d.Align = $hxEnums["h2d.Align"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_name:"MultilineRight",_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_name:"MultilineCenter",_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d.Align.__constructs__ = [h2d.Align.Left,h2d.Align.Right,h2d.Align.Center,h2d.Align.MultilineRight,h2d.Align.MultilineCenter];
h2d.Align.__empty_constructs__ = [h2d.Align.Left,h2d.Align.Right,h2d.Align.Center,h2d.Align.MultilineRight,h2d.Align.MultilineCenter];
h2d.Text = class h2d_Text extends h2d.Drawable {
	constructor(font,parent) {
		h2d.Object._hx_skip_constructor = true;
		super();
		h2d.Object._hx_skip_constructor = false;
		this._hx_constructor(font,parent);
	}
	_hx_constructor(font,parent) {
		this.realMaxWidth = -1;
		this.constraintWidth = -1;
		this.lineBreak = true;
		this.lineSpacing = 0;
		this.letterSpacing = 0;
		super._hx_constructor(parent);
		this.set_font(font);
		this.set_textAlign(h2d.Align.Left);
		this.set_text("");
		this.currentText = "";
		this.set_textColor(16777215);
	}
	set_font(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			let _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				let channel = _g.channel;
				let alphaCutoff = _g.alphaCutoff;
				let smoothing = _g.smoothing;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d.shader.SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				if(this.smooth == null) {
					this.smooth = true;
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				let _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				let _this1 = this.sdfShader;
				_this1.constModified = true;
				_this1.autoSmoothing__ = smoothing == -1;
				break;
			}
		}
		if(this.glyphs != null) {
			let _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d.TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	set_textAlign(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	set_letterSpacing(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	set_lineSpacing(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	set_lineBreak(b) {
		if(this.lineBreak == b) {
			return b;
		}
		this.lineBreak = b;
		this.rebuild();
		return b;
	}
	constraintSize(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	onAdd() {
		super.onAdd();
		this.rebuild();
	}
	checkText() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
	}
	sync(ctx) {
		super.sync(ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	draw(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d.Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			let oldX = this.absX;
			let oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			let oldR = this.color.x;
			let oldG = this.color.y;
			let oldB = this.color.z;
			let oldA = this.color.w;
			let _this = this.color;
			let c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			let _this1 = this.color;
			let x = oldR;
			let y = oldG;
			let z = oldB;
			let w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this1.x = x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	set_text(t) {
		let t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	validateText() {
	}
	rebuild() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	calcTextWidth(text) {
		if(this.calcDone) {
			let ow = this.calcWidth;
			let oh = this.calcHeight;
			let osh = this.calcSizeHeight;
			let ox = this.calcXMin;
			let oy = this.calcYMin;
			this.initGlyphs(text,false);
			let w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	splitText(text) {
		return this.splitRawText(text,0,0);
	}
	splitRawText(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		let maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		let lines = [];
		let restPos = 0;
		let x = leftMargin;
		let _g = 0;
		let _g1 = text.length;
		while(_g < _g1) {
			let i = _g++;
			let cc = HxOverrides.cca(text,i);
			let c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			let e = c;
			let newline = cc == 10;
			let esize = e.width + e.getKerningOffset(prevChar);
			let nc = HxOverrides.cca(text,i + 1);
			if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				let size = x + esize + this.letterSpacing;
				let k = i + 1;
				let max = text.length;
				let prevChar1 = prevChar;
				let breakFound = false;
				while(size <= maxWidth && k < max) {
					let cc = HxOverrides.cca(text,k++);
					if(this.lineBreak && (font.charset.isSpace(cc) || cc == 10)) {
						breakFound = true;
						break;
					}
					let c = font.glyphs.h[cc];
					if(c == null) {
						c = font.charset.resolveChar(cc,font.glyphs);
						if(c == null) {
							c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
						}
					}
					let e = c;
					size += e.width + this.letterSpacing + e.getKerningOffset(prevChar1);
					prevChar1 = cc;
					let nc = HxOverrides.cca(text,k + 1);
					if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
						break;
					}
				}
				if(this.lineBreak && (size > maxWidth || !breakFound && size + afterData > maxWidth)) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	getTextProgress(text,progress) {
		if(progress >= text.length) {
			return text;
		}
		return HxOverrides.substr(text,0,progress | 0);
	}
	initGlyphs(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		let x = 0.;
		let y = 0.;
		let xMax = 0.;
		let xMin = 0.;
		let yMin = 0.;
		let prevChar = -1;
		let linei = 0;
		let align = this.textAlign;
		let lines = [];
		let dl = this.font.lineHeight + this.lineSpacing;
		let t = this.splitRawText(text,0,0,null,lines);
		let _g = 0;
		while(_g < lines.length) {
			let lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			let max = align == h2d.Align.MultilineCenter || align == h2d.Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			let k = align == h2d.Align.Center || align == h2d.Align.MultilineCenter ? 0.5 : 1;
			let _g1 = 0;
			let _g2 = lines.length;
			while(_g1 < _g2) {
				let i = _g1++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		let _g3 = 0;
		let _g4 = t.length;
		while(_g3 < _g4) {
			let i = _g3++;
			let cc = HxOverrides.cca(t,i);
			let _this = this.font;
			let c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			let e = c;
			let offs = e.getKerningOffset(prevChar);
			let esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						let _this = this.glyphs;
						_this.content.add(x + offs,y,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	updateSize() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
	}
	get_textHeight() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcHeight;
	}
	get_textWidth() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcWidth;
	}
	set_maxWidth(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	updateConstraint() {
		let old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			let a = this.maxWidth;
			let b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	set_textColor(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		let a = this.color.w;
		let _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		let x;
		let y;
		let w;
		let h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
}
$hxClasses["h2d.Text"] = h2d.Text;
h2d.Text.__name__ = "h2d.Text";
h2d.Text.__super__ = h2d.Drawable;
Object.assign(h2d.Text.prototype, {
	__class__: h2d.Text
	,__properties__: Object.assign({}, h2d.Drawable.prototype.__properties__, {set_lineBreak: "set_lineBreak",set_lineSpacing: "set_lineSpacing",set_letterSpacing: "set_letterSpacing",set_textAlign: "set_textAlign",get_textHeight: "get_textHeight",get_textWidth: "get_textWidth",set_maxWidth: "set_maxWidth",set_textColor: "set_textColor",set_text: "set_text",set_font: "set_font"})
});
h2d.Tile = class h2d_Tile {
	constructor(tex,x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0;
		}
		if(dx == null) {
			dx = 0;
		}
		this.innerTex = tex;
		this.x = x;
		this.y = y;
		this.width = w;
		this.height = h;
		this.dx = dx;
		this.dy = dy;
		if(tex != null) {
			this.setTexture(tex);
		}
	}
	get_ix() {
		return Math.floor(this.x);
	}
	get_iy() {
		return Math.floor(this.y);
	}
	get_iwidth() {
		return Math.ceil(this.width + this.x) - Math.floor(this.x);
	}
	get_iheight() {
		return Math.ceil(this.height + this.y) - Math.floor(this.y);
	}
	getTexture() {
		return this.innerTex;
	}
	isDisposed() {
		if(this.innerTex != null) {
			let _this = this.innerTex;
			if(_this.isDepth()) {
				return _this.t == null;
			} else if(_this.t == null) {
				return _this.realloc == null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	setTexture(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	switchTexture(t) {
		this.setTexture(t.innerTex);
	}
	sub(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d.Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	center() {
		return this.sub(0,0,this.width,this.height,-(this.width * .5),-(this.height * .5));
	}
	setCenterRatio(px,py) {
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		this.dx = -(px * this.width);
		this.dy = -(py * this.height);
	}
	flipX() {
		let tmp = this.u;
		this.u = this.u2;
		this.u2 = tmp;
		this.dx = -this.dx - this.width;
	}
	flipY() {
		let tmp = this.v;
		this.v = this.v2;
		this.v2 = tmp;
		this.dy = -this.dy - this.height;
	}
	setPosition(x,y) {
		this.x = x;
		this.y = y;
		let tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	setSize(w,h) {
		this.width = w;
		this.height = h;
		let tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	scaleToSize(w,h) {
		this.width = w;
		this.height = h;
	}
	scrollDiscrete(dx,dy) {
		let tex = this.innerTex;
		this.u += dx / tex.width;
		this.v -= dy / tex.height;
		this.u2 += dx / tex.width;
		this.v2 -= dy / tex.height;
		this.x = this.u * tex.width;
		this.y = this.v * tex.height;
	}
	dispose() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	clone() {
		let t = new h2d.Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	get_xFlip() {
		return this.u2 < this.u;
	}
	get_yFlip() {
		return this.v2 < this.v;
	}
	set_xFlip(v) {
		if(v != this.get_xFlip()) {
			this.flipX();
		}
		return v;
	}
	set_yFlip(v) {
		if(v != this.get_yFlip()) {
			this.flipY();
		}
		return v;
	}
	split(frames,vertical,subpixel) {
		if(subpixel == null) {
			subpixel = false;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(frames == null) {
			frames = 0;
		}
		let tl = [];
		if(vertical) {
			if(frames == 0) {
				frames = this.height / this.width | 0;
			}
			let stride = subpixel ? this.height / frames : this.height / frames | 0;
			let _g = 0;
			let _g1 = frames;
			while(_g < _g1) {
				let i = _g++;
				tl.push(this.sub(0,i * stride,this.width,stride));
			}
		} else {
			if(frames == 0) {
				frames = this.width / this.height | 0;
			}
			let stride = subpixel ? this.width / frames : this.width / frames | 0;
			let _g = 0;
			let _g1 = frames;
			while(_g < _g1) {
				let i = _g++;
				tl.push(this.sub(i * stride,0,stride,this.height));
			}
		}
		return tl;
	}
	gridFlatten(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.height / size | 0;
		while(_g1 < _g2) {
			let y = _g1++;
			let _g2 = 0;
			let _g3 = this.width / size | 0;
			while(_g2 < _g3) {
				let x = _g2++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	grid(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.width / size | 0;
		while(_g1 < _g2) {
			let x = _g1++;
			let _g2 = [];
			let _g3 = 0;
			let _g4 = this.height / size | 0;
			while(_g3 < _g4) {
				let y = _g3++;
				_g2.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
			_g.push(_g2);
		}
		return _g;
	}
	toString() {
		return "Tile(" + this.x + "," + this.y + "," + this.width + "x" + this.height + (this.dx != 0 || this.dy != 0 ? "," + this.dx + ":" + this.dy : "") + ")";
	}
	upload(bmp) {
		let w = this.innerTex.width;
		let h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	static fromColor(color,width,height,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		let t = new h2d.Tile(h3d.mat.Texture.fromColor(color,alpha),0,0,1,1);
		t.width = width;
		t.height = height;
		return t;
	}
	static fromBitmap(bmp) {
		let tex = h3d.mat.Texture.fromBitmap(bmp);
		return new h2d.Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	}
	static autoCut(bmp,width,height) {
		bmp.lock();
		if(height == null) {
			height = width;
		}
		let colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
		let tl = [];
		let w = 1;
		let h = 1;
		while(w < bmp.ctx.canvas.width) w <<= 1;
		while(h < bmp.ctx.canvas.height) h <<= 1;
		let tex = new h3d.mat.Texture(w,h);
		let _g = 0;
		let _g1 = bmp.ctx.canvas.height / height | 0;
		while(_g < _g1) {
			let y = _g++;
			let a = [];
			tl[y] = a;
			let _g1 = 0;
			let _g2 = bmp.ctx.canvas.width / width | 0;
			while(_g1 < _g2) {
				let x = _g1++;
				let sz = h2d.Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
				if(sz == null) {
					break;
				}
				a.push(new h2d.Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
			}
		}
		bmp.unlock();
		let main = new h2d.Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
		main.upload(bmp);
		return { main : main, tiles : tl};
	}
	static fromTexture(t) {
		return new h2d.Tile(t,0,0,t.width,t.height);
	}
	static fromPixels(pixels) {
		let pix2 = pixels.makeSquare(true);
		let t = h3d.mat.Texture.fromPixels(pix2,h3d.mat.Texture.nativeFormat);
		if(pix2 != pixels) {
			pix2.dispose();
		}
		return new h2d.Tile(t,0,0,pixels.width,pixels.height);
	}
	static isEmpty(b,px,py,width,height,bg) {
		let empty = true;
		let xmin = width;
		let ymin = height;
		let xmax = 0;
		let ymax = 0;
		let _g = 0;
		let _g1 = width;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = height;
			while(_g1 < _g2) {
				let y = _g1++;
				let color = b.getPixel(x + px,y + py);
				if((color & -16777216) == 0) {
					if(color != 0) {
						b.setPixel(x + px,y + py,0);
					}
					continue;
				}
				if(color != bg) {
					empty = false;
					if(x < xmin) {
						xmin = x;
					}
					if(y < ymin) {
						ymin = y;
					}
					if(x > xmax) {
						xmax = x;
					}
					if(y > ymax) {
						ymax = y;
					}
				}
				if(color == bg && color != 0) {
					b.setPixel(x + px,y + py,0);
				}
			}
		}
		if(empty) {
			return null;
		} else {
			return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
		}
	}
}
$hxClasses["h2d.Tile"] = h2d.Tile;
h2d.Tile.__name__ = "h2d.Tile";
Object.assign(h2d.Tile.prototype, {
	__class__: h2d.Tile
	,__properties__: {get_iheight: "get_iheight",get_iwidth: "get_iwidth",get_iy: "get_iy",get_ix: "get_ix",set_yFlip: "set_yFlip",get_yFlip: "get_yFlip",set_xFlip: "set_xFlip",get_xFlip: "get_xFlip"}
});
h3d.prim = {};
h3d.prim.Primitive = class h3d_prim_Primitive {
	constructor() {
		if(h3d.prim.Primitive._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.refCount = 0;
	}
	triCount() {
		if(this.indexes != null) {
			return this.indexes.vertices / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.vertices / 3 | 0;
		}
	}
	vertexCount() {
		return 0;
	}
	getCollider() {
		throw haxe.Exception.thrown("not implemented for " + Std.string(this));
	}
	getBounds() {
		throw haxe.Exception.thrown("not implemented for " + Std.string(this));
	}
	incref() {
		this.refCount++;
	}
	decref() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	alloc(engine) {
		throw haxe.Exception.thrown("not implemented");
	}
	selectMaterial(material) {
	}
	getMaterialIndexes(material) {
		return { start : 0, count : this.indexes == null ? this.triCount() * 3 : this.indexes.vertices};
	}
	buildNormalsDisplay() {
		throw haxe.Exception.thrown("not implemented for " + Std.string(this));
	}
	render(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			let b = this.buffer;
			engine.renderBuffer(b,engine.mem.getTriIndexes(b.vertices),3,0,-1);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	dispose() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	toString() {
		let c = js.Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
}
$hxClasses["h3d.prim.Primitive"] = h3d.prim.Primitive;
h3d.prim.Primitive.__name__ = "h3d.prim.Primitive";
Object.assign(h3d.prim.Primitive.prototype, {
	__class__: h3d.prim.Primitive
});
h2d.TileLayerContent = class h2d_TileLayerContent extends h3d.prim.Primitive {
	constructor() {
		h3d.prim.Primitive._hx_skip_constructor = true;
		super();
		h3d.prim.Primitive._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.useAllocatorLimit = 1024;
		super._hx_constructor();
		this.state = new h2d.impl.BatchDrawState();
		this.clear();
	}
	clear() {
		this.tmp = hxd._FloatBuffer.Float32Expand._new(0);
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd.impl.Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	isEmpty() {
		return this.triCount() == 0;
	}
	triCount() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.vertices >> 1;
		}
	}
	addColor(x,y,color,t) {
		this.add(x,y,color.x,color.y,color.z,color.w,t);
	}
	add(x,y,r,g,b,a,t) {
		let sx = x + t.dx;
		let sy = y + t.dy;
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = sy;
		let this3 = this.tmp;
		let v = t.u;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = v;
		let this4 = this.tmp;
		let v1 = t.v;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = v1;
		let this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			let newSize = this5.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this5.array);
			this5.array = newArray;
		}
		this5.array[this5.pos++] = r;
		let this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			let newSize = this6.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this6.array);
			this6.array = newArray;
		}
		this6.array[this6.pos++] = g;
		let this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			let newSize = this7.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this7.array);
			this7.array = newArray;
		}
		this7.array[this7.pos++] = b;
		let this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			let newSize = this8.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this8.array);
			this8.array = newArray;
		}
		this8.array[this8.pos++] = a;
		let this9 = this.tmp;
		let v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			let newSize = this9.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this9.array);
			this9.array = newArray;
		}
		this9.array[this9.pos++] = v2;
		let this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			let newSize = this10.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this10.array);
			this10.array = newArray;
		}
		this10.array[this10.pos++] = sy;
		let this11 = this.tmp;
		let v3 = t.u2;
		if(this11.pos == this11.array.length) {
			let newSize = this11.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this11.array);
			this11.array = newArray;
		}
		this11.array[this11.pos++] = v3;
		let this12 = this.tmp;
		let v4 = t.v;
		if(this12.pos == this12.array.length) {
			let newSize = this12.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this12.array);
			this12.array = newArray;
		}
		this12.array[this12.pos++] = v4;
		let this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			let newSize = this13.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this13.array);
			this13.array = newArray;
		}
		this13.array[this13.pos++] = r;
		let this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			let newSize = this14.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this14.array);
			this14.array = newArray;
		}
		this14.array[this14.pos++] = g;
		let this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			let newSize = this15.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this15.array);
			this15.array = newArray;
		}
		this15.array[this15.pos++] = b;
		let this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			let newSize = this16.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this16.array);
			this16.array = newArray;
		}
		this16.array[this16.pos++] = a;
		let this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			let newSize = this17.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this17.array);
			this17.array = newArray;
		}
		this17.array[this17.pos++] = sx;
		let this18 = this.tmp;
		let v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			let newSize = this18.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this18.array);
			this18.array = newArray;
		}
		this18.array[this18.pos++] = v5;
		let this19 = this.tmp;
		let v6 = t.u;
		if(this19.pos == this19.array.length) {
			let newSize = this19.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this19.array);
			this19.array = newArray;
		}
		this19.array[this19.pos++] = v6;
		let this20 = this.tmp;
		let v7 = t.v2;
		if(this20.pos == this20.array.length) {
			let newSize = this20.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this20.array);
			this20.array = newArray;
		}
		this20.array[this20.pos++] = v7;
		let this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			let newSize = this21.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this21.array);
			this21.array = newArray;
		}
		this21.array[this21.pos++] = r;
		let this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			let newSize = this22.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this22.array);
			this22.array = newArray;
		}
		this22.array[this22.pos++] = g;
		let this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			let newSize = this23.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this23.array);
			this23.array = newArray;
		}
		this23.array[this23.pos++] = b;
		let this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			let newSize = this24.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this24.array);
			this24.array = newArray;
		}
		this24.array[this24.pos++] = a;
		let this25 = this.tmp;
		let v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			let newSize = this25.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this25.array);
			this25.array = newArray;
		}
		this25.array[this25.pos++] = v8;
		let this26 = this.tmp;
		let v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			let newSize = this26.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this26.array);
			this26.array = newArray;
		}
		this26.array[this26.pos++] = v9;
		let this27 = this.tmp;
		let v10 = t.u2;
		if(this27.pos == this27.array.length) {
			let newSize = this27.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this27.array);
			this27.array = newArray;
		}
		this27.array[this27.pos++] = v10;
		let this28 = this.tmp;
		let v11 = t.v2;
		if(this28.pos == this28.array.length) {
			let newSize = this28.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this28.array);
			this28.array = newArray;
		}
		this28.array[this28.pos++] = v11;
		let this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			let newSize = this29.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this29.array);
			this29.array = newArray;
		}
		this29.array[this29.pos++] = r;
		let this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			let newSize = this30.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this30.array);
			this30.array = newArray;
		}
		this30.array[this30.pos++] = g;
		let this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			let newSize = this31.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this31.array);
			this31.array = newArray;
		}
		this31.array[this31.pos++] = b;
		let this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			let newSize = this32.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this32.array);
			this32.array = newArray;
		}
		this32.array[this32.pos++] = a;
		let x1 = x + t.dx;
		let y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		let _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	addTransform(x,y,sx,sy,r,c,t) {
		let ca = Math.cos(r);
		let sa = Math.sin(r);
		let hx = t.width;
		let hy = t.height;
		let dx = t.dx * sx;
		let dy = t.dy * sy;
		let px = dx * ca - dy * sa + x;
		let py = dy * ca + dx * sa + y;
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = py;
		let this3 = this.tmp;
		let v = t.u;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = v;
		let this4 = this.tmp;
		let v1 = t.v;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = v1;
		let this5 = this.tmp;
		let v2 = c.x;
		if(this5.pos == this5.array.length) {
			let newSize = this5.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this5.array);
			this5.array = newArray;
		}
		this5.array[this5.pos++] = v2;
		let this6 = this.tmp;
		let v3 = c.y;
		if(this6.pos == this6.array.length) {
			let newSize = this6.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this6.array);
			this6.array = newArray;
		}
		this6.array[this6.pos++] = v3;
		let this7 = this.tmp;
		let v4 = c.z;
		if(this7.pos == this7.array.length) {
			let newSize = this7.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this7.array);
			this7.array = newArray;
		}
		this7.array[this7.pos++] = v4;
		let this8 = this.tmp;
		let v5 = c.w;
		if(this8.pos == this8.array.length) {
			let newSize = this8.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this8.array);
			this8.array = newArray;
		}
		this8.array[this8.pos++] = v5;
		let _gthis = this;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		let dx1 = (t.dx + hx) * sx;
		let dy1 = t.dy * sy;
		let px1 = dx1 * ca - dy1 * sa + x;
		let py1 = dy1 * ca + dx1 * sa + y;
		let this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			let newSize = this9.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this9.array);
			this9.array = newArray;
		}
		this9.array[this9.pos++] = px1;
		let this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			let newSize = this10.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this10.array);
			this10.array = newArray;
		}
		this10.array[this10.pos++] = py1;
		let this11 = this.tmp;
		let v6 = t.u2;
		if(this11.pos == this11.array.length) {
			let newSize = this11.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this11.array);
			this11.array = newArray;
		}
		this11.array[this11.pos++] = v6;
		let this12 = this.tmp;
		let v7 = t.v;
		if(this12.pos == this12.array.length) {
			let newSize = this12.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this12.array);
			this12.array = newArray;
		}
		this12.array[this12.pos++] = v7;
		let this13 = this.tmp;
		let v8 = c.x;
		if(this13.pos == this13.array.length) {
			let newSize = this13.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this13.array);
			this13.array = newArray;
		}
		this13.array[this13.pos++] = v8;
		let this14 = this.tmp;
		let v9 = c.y;
		if(this14.pos == this14.array.length) {
			let newSize = this14.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this14.array);
			this14.array = newArray;
		}
		this14.array[this14.pos++] = v9;
		let this15 = this.tmp;
		let v10 = c.z;
		if(this15.pos == this15.array.length) {
			let newSize = this15.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this15.array);
			this15.array = newArray;
		}
		this15.array[this15.pos++] = v10;
		let this16 = this.tmp;
		let v11 = c.w;
		if(this16.pos == this16.array.length) {
			let newSize = this16.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this16.array);
			this16.array = newArray;
		}
		this16.array[this16.pos++] = v11;
		if(px1 < _gthis.xMin) {
			_gthis.xMin = px1;
		}
		if(py1 < _gthis.yMin) {
			_gthis.yMin = py1;
		}
		if(px1 > _gthis.xMax) {
			_gthis.xMax = px1;
		}
		if(py1 > _gthis.yMax) {
			_gthis.yMax = py1;
		}
		let dx2 = t.dx * sx;
		let dy2 = (t.dy + hy) * sy;
		let px2 = dx2 * ca - dy2 * sa + x;
		let py2 = dy2 * ca + dx2 * sa + y;
		let this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			let newSize = this17.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this17.array);
			this17.array = newArray;
		}
		this17.array[this17.pos++] = px2;
		let this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			let newSize = this18.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this18.array);
			this18.array = newArray;
		}
		this18.array[this18.pos++] = py2;
		let this19 = this.tmp;
		let v12 = t.u;
		if(this19.pos == this19.array.length) {
			let newSize = this19.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this19.array);
			this19.array = newArray;
		}
		this19.array[this19.pos++] = v12;
		let this20 = this.tmp;
		let v13 = t.v2;
		if(this20.pos == this20.array.length) {
			let newSize = this20.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this20.array);
			this20.array = newArray;
		}
		this20.array[this20.pos++] = v13;
		let this21 = this.tmp;
		let v14 = c.x;
		if(this21.pos == this21.array.length) {
			let newSize = this21.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this21.array);
			this21.array = newArray;
		}
		this21.array[this21.pos++] = v14;
		let this22 = this.tmp;
		let v15 = c.y;
		if(this22.pos == this22.array.length) {
			let newSize = this22.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this22.array);
			this22.array = newArray;
		}
		this22.array[this22.pos++] = v15;
		let this23 = this.tmp;
		let v16 = c.z;
		if(this23.pos == this23.array.length) {
			let newSize = this23.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this23.array);
			this23.array = newArray;
		}
		this23.array[this23.pos++] = v16;
		let this24 = this.tmp;
		let v17 = c.w;
		if(this24.pos == this24.array.length) {
			let newSize = this24.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this24.array);
			this24.array = newArray;
		}
		this24.array[this24.pos++] = v17;
		if(px2 < _gthis.xMin) {
			_gthis.xMin = px2;
		}
		if(py2 < _gthis.yMin) {
			_gthis.yMin = py2;
		}
		if(px2 > _gthis.xMax) {
			_gthis.xMax = px2;
		}
		if(py2 > _gthis.yMax) {
			_gthis.yMax = py2;
		}
		let dx3 = (t.dx + hx) * sx;
		let dy3 = (t.dy + hy) * sy;
		let px3 = dx3 * ca - dy3 * sa + x;
		let py3 = dy3 * ca + dx3 * sa + y;
		let this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			let newSize = this25.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this25.array);
			this25.array = newArray;
		}
		this25.array[this25.pos++] = px3;
		let this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			let newSize = this26.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this26.array);
			this26.array = newArray;
		}
		this26.array[this26.pos++] = py3;
		let this27 = this.tmp;
		let v18 = t.u2;
		if(this27.pos == this27.array.length) {
			let newSize = this27.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this27.array);
			this27.array = newArray;
		}
		this27.array[this27.pos++] = v18;
		let this28 = this.tmp;
		let v19 = t.v2;
		if(this28.pos == this28.array.length) {
			let newSize = this28.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this28.array);
			this28.array = newArray;
		}
		this28.array[this28.pos++] = v19;
		let this29 = this.tmp;
		let v20 = c.x;
		if(this29.pos == this29.array.length) {
			let newSize = this29.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this29.array);
			this29.array = newArray;
		}
		this29.array[this29.pos++] = v20;
		let this30 = this.tmp;
		let v21 = c.y;
		if(this30.pos == this30.array.length) {
			let newSize = this30.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this30.array);
			this30.array = newArray;
		}
		this30.array[this30.pos++] = v21;
		let this31 = this.tmp;
		let v22 = c.z;
		if(this31.pos == this31.array.length) {
			let newSize = this31.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this31.array);
			this31.array = newArray;
		}
		this31.array[this31.pos++] = v22;
		let this32 = this.tmp;
		let v23 = c.w;
		if(this32.pos == this32.array.length) {
			let newSize = this32.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this32.array);
			this32.array = newArray;
		}
		this32.array[this32.pos++] = v23;
		if(px3 < _gthis.xMin) {
			_gthis.xMin = px3;
		}
		if(py3 < _gthis.yMin) {
			_gthis.yMin = py3;
		}
		if(px3 > _gthis.xMax) {
			_gthis.xMax = px3;
		}
		if(py3 > _gthis.yMax) {
			_gthis.yMax = py3;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		let _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	addPoint(x,y,color) {
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = y;
		let this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = 0;
		let this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = 0;
		let this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			let newSize = this5.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this5.array);
			this5.array = newArray;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		let this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			let newSize = this6.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this6.array);
			this6.array = newArray;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		let this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			let newSize = this7.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this7.array);
			this7.array = newArray;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		let this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			let newSize = this8.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this8.array);
			this8.array = newArray;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	insertColor(c) {
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >> 16 & 255) / 255.;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = (c >> 8 & 255) / 255.;
		let this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = (c & 255) / 255.;
		let this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = (c >>> 24) / 255.;
	}
	rectColor(x,y,w,h,color) {
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = y;
		let this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = 0;
		let this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = 0;
		let this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			let newSize = this5.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this5.array);
			this5.array = newArray;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		let this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			let newSize = this6.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this6.array);
			this6.array = newArray;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		let this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			let newSize = this7.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this7.array);
			this7.array = newArray;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		let this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			let newSize = this8.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this8.array);
			this8.array = newArray;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		let this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			let newSize = this9.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this9.array);
			this9.array = newArray;
		}
		this9.array[this9.pos++] = x + w;
		let this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			let newSize = this10.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this10.array);
			this10.array = newArray;
		}
		this10.array[this10.pos++] = y;
		let this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			let newSize = this11.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this11.array);
			this11.array = newArray;
		}
		this11.array[this11.pos++] = 1;
		let this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			let newSize = this12.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this12.array);
			this12.array = newArray;
		}
		this12.array[this12.pos++] = 0;
		let this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			let newSize = this13.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this13.array);
			this13.array = newArray;
		}
		this13.array[this13.pos++] = (color >> 16 & 255) / 255.;
		let this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			let newSize = this14.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this14.array);
			this14.array = newArray;
		}
		this14.array[this14.pos++] = (color >> 8 & 255) / 255.;
		let this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			let newSize = this15.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this15.array);
			this15.array = newArray;
		}
		this15.array[this15.pos++] = (color & 255) / 255.;
		let this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			let newSize = this16.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this16.array);
			this16.array = newArray;
		}
		this16.array[this16.pos++] = (color >>> 24) / 255.;
		let this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			let newSize = this17.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this17.array);
			this17.array = newArray;
		}
		this17.array[this17.pos++] = x;
		let this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			let newSize = this18.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this18.array);
			this18.array = newArray;
		}
		this18.array[this18.pos++] = y + h;
		let this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			let newSize = this19.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this19.array);
			this19.array = newArray;
		}
		this19.array[this19.pos++] = 0;
		let this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			let newSize = this20.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this20.array);
			this20.array = newArray;
		}
		this20.array[this20.pos++] = 1;
		let this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			let newSize = this21.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this21.array);
			this21.array = newArray;
		}
		this21.array[this21.pos++] = (color >> 16 & 255) / 255.;
		let this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			let newSize = this22.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this22.array);
			this22.array = newArray;
		}
		this22.array[this22.pos++] = (color >> 8 & 255) / 255.;
		let this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			let newSize = this23.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this23.array);
			this23.array = newArray;
		}
		this23.array[this23.pos++] = (color & 255) / 255.;
		let this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			let newSize = this24.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this24.array);
			this24.array = newArray;
		}
		this24.array[this24.pos++] = (color >>> 24) / 255.;
		let this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			let newSize = this25.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this25.array);
			this25.array = newArray;
		}
		this25.array[this25.pos++] = x + w;
		let this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			let newSize = this26.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this26.array);
			this26.array = newArray;
		}
		this26.array[this26.pos++] = y + h;
		let this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			let newSize = this27.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this27.array);
			this27.array = newArray;
		}
		this27.array[this27.pos++] = 1;
		let this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			let newSize = this28.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this28.array);
			this28.array = newArray;
		}
		this28.array[this28.pos++] = 1;
		let this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			let newSize = this29.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this29.array);
			this29.array = newArray;
		}
		this29.array[this29.pos++] = (color >> 16 & 255) / 255.;
		let this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			let newSize = this30.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this30.array);
			this30.array = newArray;
		}
		this30.array[this30.pos++] = (color >> 8 & 255) / 255.;
		let this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			let newSize = this31.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this31.array);
			this31.array = newArray;
		}
		this31.array[this31.pos++] = (color & 255) / 255.;
		let this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			let newSize = this32.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this32.array);
			this32.array = newArray;
		}
		this32.array[this32.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		let _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	rectGradient(x,y,w,h,ctl,ctr,cbl,cbr) {
		let this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		let this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			let newSize = this2.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this2.array);
			this2.array = newArray;
		}
		this2.array[this2.pos++] = y;
		let this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			let newSize = this3.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this3.array);
			this3.array = newArray;
		}
		this3.array[this3.pos++] = 0;
		let this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			let newSize = this4.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this4.array);
			this4.array = newArray;
		}
		this4.array[this4.pos++] = 0;
		let this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			let newSize = this5.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this5.array);
			this5.array = newArray;
		}
		this5.array[this5.pos++] = (ctl >> 16 & 255) / 255.;
		let this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			let newSize = this6.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this6.array);
			this6.array = newArray;
		}
		this6.array[this6.pos++] = (ctl >> 8 & 255) / 255.;
		let this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			let newSize = this7.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this7.array);
			this7.array = newArray;
		}
		this7.array[this7.pos++] = (ctl & 255) / 255.;
		let this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			let newSize = this8.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this8.array);
			this8.array = newArray;
		}
		this8.array[this8.pos++] = (ctl >>> 24) / 255.;
		let this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			let newSize = this9.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this9.array);
			this9.array = newArray;
		}
		this9.array[this9.pos++] = x + w;
		let this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			let newSize = this10.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this10.array);
			this10.array = newArray;
		}
		this10.array[this10.pos++] = y;
		let this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			let newSize = this11.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this11.array);
			this11.array = newArray;
		}
		this11.array[this11.pos++] = 1;
		let this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			let newSize = this12.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this12.array);
			this12.array = newArray;
		}
		this12.array[this12.pos++] = 0;
		let this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			let newSize = this13.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this13.array);
			this13.array = newArray;
		}
		this13.array[this13.pos++] = (ctr >> 16 & 255) / 255.;
		let this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			let newSize = this14.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this14.array);
			this14.array = newArray;
		}
		this14.array[this14.pos++] = (ctr >> 8 & 255) / 255.;
		let this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			let newSize = this15.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this15.array);
			this15.array = newArray;
		}
		this15.array[this15.pos++] = (ctr & 255) / 255.;
		let this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			let newSize = this16.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this16.array);
			this16.array = newArray;
		}
		this16.array[this16.pos++] = (ctr >>> 24) / 255.;
		let this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			let newSize = this17.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this17.array);
			this17.array = newArray;
		}
		this17.array[this17.pos++] = x;
		let this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			let newSize = this18.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this18.array);
			this18.array = newArray;
		}
		this18.array[this18.pos++] = y + h;
		let this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			let newSize = this19.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this19.array);
			this19.array = newArray;
		}
		this19.array[this19.pos++] = 0;
		let this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			let newSize = this20.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this20.array);
			this20.array = newArray;
		}
		this20.array[this20.pos++] = 1;
		let this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			let newSize = this21.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this21.array);
			this21.array = newArray;
		}
		this21.array[this21.pos++] = (cbl >> 16 & 255) / 255.;
		let this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			let newSize = this22.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this22.array);
			this22.array = newArray;
		}
		this22.array[this22.pos++] = (cbl >> 8 & 255) / 255.;
		let this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			let newSize = this23.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this23.array);
			this23.array = newArray;
		}
		this23.array[this23.pos++] = (cbl & 255) / 255.;
		let this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			let newSize = this24.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this24.array);
			this24.array = newArray;
		}
		this24.array[this24.pos++] = (cbl >>> 24) / 255.;
		let this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			let newSize = this25.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this25.array);
			this25.array = newArray;
		}
		this25.array[this25.pos++] = x + w;
		let this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			let newSize = this26.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this26.array);
			this26.array = newArray;
		}
		this26.array[this26.pos++] = y + h;
		let this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			let newSize = this27.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this27.array);
			this27.array = newArray;
		}
		this27.array[this27.pos++] = 1;
		let this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			let newSize = this28.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this28.array);
			this28.array = newArray;
		}
		this28.array[this28.pos++] = 1;
		let this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			let newSize = this29.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this29.array);
			this29.array = newArray;
		}
		this29.array[this29.pos++] = (cbr >> 16 & 255) / 255.;
		let this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			let newSize = this30.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this30.array);
			this30.array = newArray;
		}
		this30.array[this30.pos++] = (cbr >> 8 & 255) / 255.;
		let this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			let newSize = this31.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this31.array);
			this31.array = newArray;
		}
		this31.array[this31.pos++] = (cbr & 255) / 255.;
		let this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			let newSize = this32.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this32.array);
			this32.array = newArray;
		}
		this32.array[this32.pos++] = (cbr >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		let _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	fillArc(x,y,ray,c,start,end) {
		if(end <= start) {
			return;
		}
		let arcLength = end - start;
		let nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 4) {
			nsegments = 4;
		}
		let angle = arcLength / nsegments;
		let prevX = -Infinity;
		let prevY = -Infinity;
		let _x = 0.;
		let _y = 0.;
		let i = 0;
		let count = 0;
		while(i < nsegments) {
			let a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(prevX,prevY,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			++i;
		}
		let a = end;
		_x = x + Math.cos(a) * ray;
		_y = y + Math.sin(a) * ray;
		this.addPoint(x,y,c);
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(prevX,prevY,c);
		let _this = this.state;
		let count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	fillCircle(x,y,radius,c) {
		let nsegments = Math.ceil(radius * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		let angle = Math.PI * 2 / nsegments;
		let prevX = -Infinity;
		let prevY = -Infinity;
		let firstX = -Infinity;
		let firstY = -Infinity;
		let curX = 0.;
		let curY = 0.;
		let count = 0;
		let _g = 0;
		let _g1 = nsegments;
		while(_g < _g1) {
			let i = _g++;
			let a = i * angle;
			curX = x + Math.cos(a) * radius;
			curY = y + Math.sin(a) * radius;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(curX,curY,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(x,y,c);
				count += 4;
			}
			if(firstX == -Infinity) {
				firstX = curX;
				firstY = curY;
			}
			prevX = curX;
			prevY = curY;
		}
		this.addPoint(x,y,c);
		this.addPoint(curX,curY,c);
		this.addPoint(firstX,firstY,c);
		this.addPoint(x,y,c);
		let _this = this.state;
		let count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	circle(x,y,ray,size,c) {
		if(size > ray) {
			return;
		}
		let nsegments = Math.ceil(ray * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		let ray1 = ray - size;
		let angle = Math.PI * 2 / nsegments;
		let prevX = -Infinity;
		let prevY = -Infinity;
		let prevX1 = -Infinity;
		let prevY1 = -Infinity;
		let count = 0;
		let _g = 0;
		let _g1 = nsegments;
		while(_g < _g1) {
			let i = _g++;
			let a = i * angle;
			let _x = x + Math.cos(a) * ray;
			let _y = y + Math.sin(a) * ray;
			let _x1 = x + Math.cos(a) * ray1;
			let _y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		let _this = this.state;
		_this.tail.count += count;
		_this.totalCount += count;
	}
	arc(x,y,ray,size,start,end,c) {
		if(size > ray) {
			return;
		}
		if(end <= start) {
			return;
		}
		let arcLength = end - start;
		let nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 3) {
			nsegments = 3;
		}
		let ray1 = ray - size;
		let angle = arcLength / nsegments;
		let prevX = -Infinity;
		let prevY = -Infinity;
		let prevX1 = -Infinity;
		let prevY1 = -Infinity;
		let _x = 0.;
		let _y = 0.;
		let _x1 = 0.;
		let _y1 = 0.;
		let count = 0;
		let _g = 0;
		let _g1 = nsegments;
		while(_g < _g1) {
			let i = _g++;
			let a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			_x1 = x + Math.cos(a) * ray1;
			_y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		let a = end;
		_x = x + Math.cos(a) * ray;
		_y = y + Math.sin(a) * ray;
		_x1 = x + Math.cos(a) * ray1;
		_y1 = y + Math.sin(a) * ray1;
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(_x1,_y1,c);
		this.addPoint(prevX1,prevY1,c);
		let _this = this.state;
		let count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	alloc(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.tmp.pos < this.useAllocatorLimit ? hxd.impl.Allocator.get().ofFloats(this.tmp,hxd.BufferFormat.get_XY_UV_RGBA()) : h3d.Buffer.ofFloats(this.tmp,hxd.BufferFormat.get_XY_UV_RGBA());
		}
	}
	dispose() {
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd.impl.Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		super.dispose();
	}
	flush() {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d.Engine.CURRENT);
		}
	}
	doRender(ctx,min,len) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d.Engine.CURRENT);
		}
		this.state.drawQuads(ctx,this.buffer,min,len);
	}
}
$hxClasses["h2d.TileLayerContent"] = h2d.TileLayerContent;
h2d.TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d.TileLayerContent.__super__ = h3d.prim.Primitive;
Object.assign(h2d.TileLayerContent.prototype, {
	__class__: h2d.TileLayerContent
});
h2d.TileGroup = class h2d_TileGroup extends h2d.Drawable {
	constructor(t,parent) {
		super(parent);
		this.tile = t;
		this.rangeMin = this.rangeMax = -1;
		let x = 1;
		let y = 1;
		let z = 1;
		let w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.curColor = new h3d.Vector4Impl(x,y,z,w);
		this.content = new h2d.TileLayerContent();
	}
	getBoundsRec(relativeTo,out,forSize) {
		super.getBoundsRec(relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	clear() {
		this.content.clear();
	}
	invalidate() {
		this.content.dispose();
	}
	count() {
		return this.content.triCount() >> 1;
	}
	onRemove() {
		this.content.dispose();
		super.onRemove();
	}
	setDefaultColor(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	add(x,y,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,this.curColor.w,t);
	}
	addColor(x,y,r,g,b,a,t) {
		this.content.add(x,y,r,g,b,a,t);
	}
	addAlpha(x,y,a,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,a,t);
	}
	addTransform(x,y,sx,sy,r,t) {
		this.content.addTransform(x,y,sx,sy,r,this.curColor,t);
	}
	draw(ctx) {
		this.drawWith(ctx,this);
	}
	sync(ctx) {
		super.sync(ctx);
		if(this.visible) {
			let _this = this.content;
			if(_this.buffer == null || _this.buffer.vbuf == null) {
				_this.alloc(h3d.Engine.CURRENT);
			}
		}
	}
	drawWith(ctx,obj) {
		let max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		let min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		let _this = this.content;
		if(_this.buffer == null || _this.buffer.vbuf == null) {
			_this.alloc(h3d.Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
}
$hxClasses["h2d.TileGroup"] = h2d.TileGroup;
h2d.TileGroup.__name__ = "h2d.TileGroup";
h2d.TileGroup.__super__ = h2d.Drawable;
Object.assign(h2d.TileGroup.prototype, {
	__class__: h2d.TileGroup
});
h2d.col.Collider = class h2d_col_Collider {
}
$hxClasses["h2d.col.Collider"] = h2d.col.Collider;
h2d.col.Collider.__name__ = "h2d.col.Collider";
Object.assign(h2d.col.Collider.prototype, {
	__class__: h2d.col.Collider
});
h2d.col.Bounds = class h2d_col_Bounds extends h2d.col.Collider {
	constructor() {
		super();
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	toIBounds(scale) {
		if(scale == null) {
			scale = 1.;
		}
		let ix = Math.floor(this.xMin * scale);
		let iy = Math.floor(this.yMin * scale);
		let width = Math.ceil(this.xMax * scale) - ix;
		let height = Math.ceil(this.yMax * scale) - iy;
		let b = new h2d.col.IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		return b;
	}
	intersects(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	collideBounds(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	collideCircle(c) {
		if(c.x < this.xMin - c.ray) {
			return false;
		} else if(c.x > this.xMax + c.ray) {
			return false;
		} else if(c.y < this.yMin - c.ray) {
			return false;
		} else if(c.y > this.yMax + c.ray) {
			return false;
		} else {
			let tmp;
			if(c.x < this.xMin && c.y < this.yMin) {
				let dx = c.x - this.xMin;
				let dy = c.y - this.yMin;
				tmp = dx * dx + dy * dy > c.ray * c.ray;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			} else {
				let tmp;
				if(c.x > this.xMax && c.y < this.yMin) {
					let dx = c.x - this.xMax;
					let dy = c.y - this.yMin;
					tmp = dx * dx + dy * dy > c.ray * c.ray;
				} else {
					tmp = false;
				}
				if(tmp) {
					return false;
				} else {
					let tmp;
					if(c.x < this.xMin && c.y > this.yMax) {
						let dx = c.x - this.xMin;
						let dy = c.y - this.yMax;
						tmp = dx * dx + dy * dy > c.ray * c.ray;
					} else {
						tmp = false;
					}
					if(tmp) {
						return false;
					} else {
						let tmp;
						if(c.x > this.xMax && c.y > this.yMax) {
							let dx = c.x - this.xMax;
							let dy = c.y - this.yMax;
							tmp = dx * dx + dy * dy > c.ray * c.ray;
						} else {
							tmp = false;
						}
						if(tmp) {
							return false;
						} else {
							return true;
						}
					}
				}
			}
		}
	}
	contains(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	rayIntersection(r) {
		let minTx = (this.xMin - r.px) / r.lx;
		let minTy = (this.yMin - r.py) / r.ly;
		let maxTx = (this.xMax - r.px) / r.lx;
		let maxTy = (this.yMax - r.py) / r.ly;
		let realMinTx = minTx > maxTx ? maxTx : minTx;
		let realMinTy = minTy > maxTy ? maxTy : minTy;
		let realMaxTx = minTx < maxTx ? maxTx : minTx;
		let realMaxTy = minTy < maxTy ? maxTy : minTy;
		let minmax = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		let maxmin = realMinTx < realMinTy ? realMinTy : realMinTx;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	distanceSq(p) {
		let dx = p.x < this.xMin ? this.xMin - p.x : p.x > this.xMax ? p.x - this.xMax : 0.;
		let dy = p.y < this.yMin ? this.yMin - p.y : p.y > this.yMax ? p.y - this.yMax : 0.;
		return dx * dx + dy * dy;
	}
	distance(p) {
		let dx = p.x < this.xMin ? this.xMin - p.x : p.x > this.xMax ? p.x - this.xMax : 0.;
		let dy = p.y < this.yMin ? this.yMin - p.y : p.y > this.yMax ? p.y - this.yMax : 0.;
		return Math.sqrt(dx * dx + dy * dy);
	}
	addBounds(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	addPoint(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	addPos(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	set(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	setMin(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	setMax(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	doIntersect(b) {
		let a = this.xMin;
		let b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	doUnion(b) {
		let a = this.xMin;
		let b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	intersection(b) {
		let i = new h2d.col.Bounds();
		let a = this.xMin;
		let b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	union(b) {
		let i = new h2d.col.Bounds();
		let a = this.xMin;
		let b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	load(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	scalePivot(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.xMax *= v;
		this.yMax *= v;
	}
	scaleCenter(v) {
		let dx = (this.xMax - this.xMin) * 0.5 * v;
		let dy = (this.yMax - this.yMin) * 0.5 * v;
		let mx = (this.xMax + this.xMin) * 0.5;
		let my = (this.yMax + this.yMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.xMax = mx + dx;
		this.yMax = my + dy;
	}
	rotate(angle) {
		let cos = Math.cos(angle);
		let sin = Math.sin(angle);
		let x0 = this.xMin;
		let y0 = this.yMin;
		let x1 = this.xMax;
		let y1 = this.yMax;
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
		let x = x0 * cos - y0 * sin;
		let y = x0 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		let x2 = x1 * cos - y0 * sin;
		let y2 = x1 * sin + y0 * cos;
		if(x2 < this.xMin) {
			this.xMin = x2;
		}
		if(x2 > this.xMax) {
			this.xMax = x2;
		}
		if(y2 < this.yMin) {
			this.yMin = y2;
		}
		if(y2 > this.yMax) {
			this.yMax = y2;
		}
		let x3 = x0 * cos - y1 * sin;
		let y3 = x0 * sin + y1 * cos;
		if(x3 < this.xMin) {
			this.xMin = x3;
		}
		if(x3 > this.xMax) {
			this.xMax = x3;
		}
		if(y3 < this.yMin) {
			this.yMin = y3;
		}
		if(y3 > this.yMax) {
			this.yMax = y3;
		}
		let x4 = x1 * cos - y1 * sin;
		let y4 = x1 * sin + y1 * cos;
		if(x4 < this.xMin) {
			this.xMin = x4;
		}
		if(x4 > this.xMax) {
			this.xMax = x4;
		}
		if(y4 < this.yMin) {
			this.yMin = y4;
		}
		if(y4 > this.yMax) {
			this.yMax = y4;
		}
	}
	offset(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	getMin() {
		let x = this.xMin;
		let y = this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	getCenter() {
		let x = (this.xMin + this.xMax) * 0.5;
		let y = (this.yMin + this.yMax) * 0.5;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	getSize() {
		let x = this.xMax - this.xMin;
		let y = this.yMax - this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	getMax() {
		let x = this.xMax;
		let y = this.yMax;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	isEmpty() {
		if(!(this.xMax <= this.xMin)) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	empty() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	all() {
		this.xMin = -1e20;
		this.yMin = -1e20;
		this.xMax = 1e20;
		this.yMax = 1e20;
	}
	clone() {
		let b = new h2d.col.Bounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	get_x() {
		return this.xMin;
	}
	get_y() {
		return this.yMin;
	}
	set_x(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	set_y(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	get_width() {
		return this.xMax - this.xMin;
	}
	get_height() {
		return this.yMax - this.yMin;
	}
	set_width(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	set_height(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	toString() {
		let x = this.xMin;
		let y = this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let tmp = "{" + Std.string(new h2d.col.PointImpl(x,y)) + ",";
		let x1 = this.xMax - this.xMin;
		let y1 = this.yMax - this.yMin;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		return tmp + Std.string(new h2d.col.PointImpl(x1,y1)) + "}";
	}
	toCircle() {
		let dx = this.xMax - this.xMin;
		let dy = this.yMax - this.yMin;
		return new h2d.col.Circle((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,Math.sqrt(dx * dx + dy * dy) * 0.5);
	}
	static fromValues(x0,y0,width,height) {
		let b = new h2d.col.Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	static fromPoints(min,max) {
		let b = new h2d.col.Bounds();
		b.xMin = min.x;
		b.yMin = min.y;
		b.xMax = max.x;
		b.yMax = max.y;
		return b;
	}
}
$hxClasses["h2d.col.Bounds"] = h2d.col.Bounds;
h2d.col.Bounds.__name__ = "h2d.col.Bounds";
h2d.col.Bounds.__super__ = h2d.col.Collider;
Object.assign(h2d.col.Bounds.prototype, {
	__class__: h2d.col.Bounds
	,__properties__: {set_height: "set_height",get_height: "get_height",set_width: "set_width",get_width: "get_width",set_y: "set_y",get_y: "get_y",set_x: "set_x",get_x: "get_x"}
});
h2d.col.Circle = class h2d_col_Circle extends h2d.col.Collider {
	constructor(x,y,ray) {
		super();
		this.x = x;
		this.y = y;
		this.ray = ray;
	}
	distanceSq(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		let d = dx * dx + dy * dy - this.ray * this.ray;
		if(d < 0) {
			return 0;
		} else {
			return d;
		}
	}
	side(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		return this.ray * this.ray - (dx * dx + dy * dy);
	}
	collideCircle(c) {
		let dx = this.x - c.x;
		let dy = this.y - c.y;
		return dx * dx + dy * dy < (this.ray + c.ray) * (this.ray + c.ray);
	}
	collideBounds(b) {
		if(this.x < b.xMin - this.ray) {
			return false;
		}
		if(this.x > b.xMax + this.ray) {
			return false;
		}
		if(this.y < b.yMin - this.ray) {
			return false;
		}
		if(this.y > b.yMax + this.ray) {
			return false;
		}
		let tmp;
		if(this.x < b.xMin && this.y < b.yMin) {
			let dx = this.x - b.xMin;
			let dy = this.y - b.yMin;
			tmp = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		let tmp1;
		if(this.x > b.xMax && this.y < b.yMin) {
			let dx = this.x - b.xMax;
			let dy = this.y - b.yMin;
			tmp1 = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return false;
		}
		let tmp2;
		if(this.x < b.xMin && this.y > b.yMax) {
			let dx = this.x - b.xMin;
			let dy = this.y - b.yMax;
			tmp2 = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			return false;
		}
		let tmp3;
		if(this.x > b.xMax && this.y > b.yMax) {
			let dx = this.x - b.xMax;
			let dy = this.y - b.yMax;
			tmp3 = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp3 = false;
		}
		if(tmp3) {
			return false;
		}
		return true;
	}
	lineIntersect(p1,p2) {
		let dx = p2.x - p1.x;
		let dy = p2.y - p1.y;
		let a = dx * dx + dy * dy;
		if(a < 1e-8) {
			return null;
		}
		let b = 2 * (dx * (p1.x - this.x) + dy * (p1.y - this.y));
		let dx1 = p1.x - this.x;
		let dy1 = p1.y - this.y;
		let c = dx1 * dx1 + dy1 * dy1 - this.ray * this.ray;
		let d = b * b - 4 * a * c;
		if(d < 0) {
			return null;
		}
		if(d == 0) {
			let t = -b / (2 * a);
			let x = p1.x + t * dx;
			let y = p1.y + t * dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return [new h2d.col.PointImpl(x,y)];
		}
		let t1 = (-b - Math.sqrt(d)) / (2 * a);
		let t2 = (-b + Math.sqrt(d)) / (2 * a);
		let x = p1.x + t1 * dx;
		let y = p1.y + t1 * dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let this1 = new h2d.col.PointImpl(x,y);
		let x1 = p1.x + t2 * dx;
		let y1 = p1.y + t2 * dy;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		return [this1,new h2d.col.PointImpl(x1,y1)];
	}
	toString() {
		return "{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "," + hxd.Math.fmt(this.ray) + "}";
	}
	contains(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		let d = dx * dx + dy * dy - this.ray * this.ray;
		return (d < 0 ? 0 : d) == 0;
	}
}
$hxClasses["h2d.col.Circle"] = h2d.col.Circle;
h2d.col.Circle.__name__ = "h2d.col.Circle";
h2d.col.Circle.__super__ = h2d.col.Collider;
Object.assign(h2d.col.Circle.prototype, {
	__class__: h2d.col.Circle
});
h2d.col.IBounds = class h2d_col_IBounds {
	constructor() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	toBounds(scale) {
		if(scale == null) {
			scale = 1.;
		}
		let x0 = this.xMin * scale;
		let y0 = this.yMin * scale;
		let width = (this.xMax - this.xMin) * scale;
		let height = (this.yMax - this.yMin) * scale;
		let b = new h2d.col.Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	intersects(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	contains(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	addBounds(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	addPoint(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	addPos(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	set(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	setMin(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	setMax(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	doIntersect(b) {
		let a = this.xMin;
		let b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	doUnion(b) {
		let a = this.xMin;
		let b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	intersection(b) {
		let i = new h2d.col.IBounds();
		let a = this.xMin;
		let b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	union(b) {
		let i = new h2d.col.IBounds();
		let a = this.xMin;
		let b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		let a1 = this.yMin;
		let b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		let a2 = this.xMax;
		let b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		let a3 = this.yMax;
		let b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	load(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	offset(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	getMin() {
		return new h2d.col.IPoint(this.xMin,this.yMin);
	}
	getCenter() {
		return new h2d.col.IPoint(this.xMin + this.xMax >> 1,this.yMin + this.yMax >> 1);
	}
	getSize() {
		return new h2d.col.IPoint(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	getMax() {
		return new h2d.col.IPoint(this.xMax,this.yMax);
	}
	isEmpty() {
		if(this.xMax > this.xMin) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	empty() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	all() {
		this.xMin = -2147483648;
		this.yMin = -2147483648;
		this.xMax = 2147483647;
		this.yMax = 2147483647;
	}
	clone() {
		let b = new h2d.col.IBounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	get_x() {
		return this.xMin;
	}
	get_y() {
		return this.yMin;
	}
	set_x(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	set_y(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	get_width() {
		return this.xMax - this.xMin;
	}
	get_height() {
		return this.yMax - this.yMin;
	}
	set_width(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	set_height(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	toString() {
		return "{" + Std.string(new h2d.col.IPoint(this.xMin,this.yMin)) + "," + Std.string(new h2d.col.IPoint(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	static fromValues(x0,y0,width,height) {
		let b = new h2d.col.IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	static fromPoints(min,max) {
		let b = new h2d.col.IBounds();
		b.xMin = min.x;
		b.yMin = min.y;
		b.xMax = max.x;
		b.yMax = max.y;
		return b;
	}
}
$hxClasses["h2d.col.IBounds"] = h2d.col.IBounds;
h2d.col.IBounds.__name__ = "h2d.col.IBounds";
Object.assign(h2d.col.IBounds.prototype, {
	__class__: h2d.col.IBounds
	,__properties__: {set_height: "set_height",get_height: "get_height",set_width: "set_width",get_width: "get_width",set_y: "set_y",get_y: "get_y",set_x: "set_x",get_x: "get_x"}
});
h2d.col.IPoint = class h2d_col_IPoint {
	constructor(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
	}
	load(p) {
		this.x = p.x;
		this.y = p.y;
	}
	scale(v) {
		this.x *= v;
		this.y *= v;
	}
	scaled(v) {
		return new h2d.col.IPoint(this.x * v,this.y * v);
	}
	distanceSq(p) {
		let dx = this.x - p.x;
		let dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	distance(p) {
		let dx = this.x - p.x;
		let dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	toString() {
		return "{" + this.x + "," + this.y + "}";
	}
	sub(p) {
		return new h2d.col.IPoint(this.x - p.x,this.y - p.y);
	}
	add(p) {
		return new h2d.col.IPoint(this.x + p.x,this.y + p.y);
	}
	equals(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	dot(p) {
		return this.x * p.x + this.y * p.y;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	set(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
	}
	clone() {
		return new h2d.col.IPoint(this.x,this.y);
	}
	cross(p) {
		return this.x * p.y - this.y * p.x;
	}
	toPoint(scale) {
		if(scale == null) {
			scale = 1.;
		}
		let x = this.x * scale;
		let y = this.y * scale;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
}
$hxClasses["h2d.col.IPoint"] = h2d.col.IPoint;
h2d.col.IPoint.__name__ = "h2d.col.IPoint";
Object.assign(h2d.col.IPoint.prototype, {
	__class__: h2d.col.IPoint
});
h2d.col.OffsetKind = $hxEnums["h2d.col.OffsetKind"] = { __ename__:true,__constructs__:null
	,Square: {_hx_name:"Square",_hx_index:0,__enum__:"h2d.col.OffsetKind",toString:$estr}
	,Miter: {_hx_name:"Miter",_hx_index:1,__enum__:"h2d.col.OffsetKind",toString:$estr}
	,Round: ($_=function(arc) { return {_hx_index:2,arc:arc,__enum__:"h2d.col.OffsetKind",toString:$estr}; },$_._hx_name="Round",$_.__params__ = ["arc"],$_)
};
h2d.col.OffsetKind.__constructs__ = [h2d.col.OffsetKind.Square,h2d.col.OffsetKind.Miter,h2d.col.OffsetKind.Round];
h2d.col.OffsetKind.__empty_constructs__ = [h2d.col.OffsetKind.Square,h2d.col.OffsetKind.Miter];
h2d.col.IPolygon = class h2d_col_IPolygon {
	static get_length(this1) {
		return this1.length;
	}
	static get_points(this1) {
		return this1;
	}
	static _new(points) {
		return points == null ? [] : points;
	}
	static iterator(this1) {
		return new hxd.impl.ArrayIterator_h2d_col_IPoint(this1);
	}
	static toPolygon(this1,scale) {
		if(scale == null) {
			scale = 1.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			let scale1 = scale;
			if(scale1 == null) {
				scale1 = 1.;
			}
			let x = p.x * scale1;
			let y = p.y * scale1;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_g.push(new h2d.col.PointImpl(x,y));
		}
		return _g;
	}
	static getBounds(this1,b) {
		if(b == null) {
			b = new h2d.col.IBounds();
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
		}
		return b;
	}
	static union(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		let c = new hxd.clipper.Clipper();
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		c.addPolygon(this1,hxd.clipper.PolyType.Clip);
		c.addPolygon(p,hxd.clipper.PolyType.Clip);
		return c.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	static intersection(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		return h2d.col.IPolygon.clipperOp(this1,p,hxd.clipper.ClipType.Intersection,withHoles);
	}
	static subtraction(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		return h2d.col.IPolygon.clipperOp(this1,p,hxd.clipper.ClipType.Difference,withHoles);
	}
	static offset(this1,delta,kind,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		let c = new hxd.clipper.ClipperOffset();
		switch(kind._hx_index) {
		case 0:
			c.addPolygon(this1,hxd.clipper.JoinType.Square,hxd.clipper.EndType.ClosedPol);
			break;
		case 1:
			c.addPolygon(this1,hxd.clipper.JoinType.Miter,hxd.clipper.EndType.ClosedPol);
			break;
		case 2:
			let arc = kind.arc;
			c.ArcTolerance = arc;
			c.addPolygon(this1,hxd.clipper.JoinType.Round,hxd.clipper.EndType.ClosedPol);
			break;
		}
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		return c.execute(delta);
	}
	static clipperOp(this1,p,op,withHoles) {
		let c = new hxd.clipper.Clipper();
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		c.addPolygon(this1,hxd.clipper.PolyType.Subject);
		c.addPolygon(p,hxd.clipper.PolyType.Clip);
		return c.execute(op,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	static convexHull(this1) {
		let len = this1.length;
		if(len < 3) {
			throw haxe.Exception.thrown("convexHull() needs at least 3 points");
		}
		let first = 0;
		let firstX = this1[first].x;
		let _g = 1;
		let _g1 = this1.length;
		while(_g < _g1) {
			let i = _g++;
			let px = this1[i].x;
			if(px < firstX) {
				first = i;
				firstX = px;
			}
		}
		let hull = [];
		let curr = first;
		let next = 0;
		do {
			hull.push(this1[curr]);
			next = (curr + 1) % len;
			let _g = 0;
			let _g1 = len;
			while(_g < _g1) {
				let i = _g++;
				let p1 = this1[i];
				let p2 = this1[curr];
				let t = this1[next];
				if((p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x) < 0) {
					next = i;
				}
			}
			curr = next;
		} while(curr != first);
		return hull;
	}
	static isClockwise(this1) {
		let sum = 0.;
		let p1 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			sum += (p2.x - p1.x) * (p2.y + p1.y);
			p1 = p2;
		}
		return sum < 0;
	}
	static area(this1) {
		let sum = 0.;
		let p1 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			sum += p1.x * p2.y - p2.x * p1.y;
			p1 = p2;
		}
		return (sum < 0 ? -sum : sum) * 0.5;
	}
	static side(this1,p1,p2,t) {
		return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
	}
	static isConvex(this1) {
		let p1 = this1[this1.length - 2];
		let p2 = this1[this1.length - 1];
		let p3 = this1[0];
		let s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
		let _g = 1;
		let _g1 = this1.length;
		while(_g < _g1) {
			let i = _g++;
			p1 = p2;
			p2 = p3;
			p3 = this1[i];
			if((p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0 != s) {
				return false;
			}
		}
		return true;
	}
	static reverse(this1) {
		this1.reverse();
	}
	static contains(this1,p,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		if(isConvex) {
			let p1 = this1[this1.length - 1];
			let _g = 0;
			let _g1 = this1;
			while(_g < _g1.length) {
				let p2 = _g1[_g];
				++_g;
				if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
					return false;
				}
				p1 = p2;
			}
			return true;
		} else {
			let w = 0;
			let p1 = this1[this1.length - 1];
			let _g = 0;
			let _g1 = this1;
			while(_g < _g1.length) {
				let p2 = _g1[_g];
				++_g;
				if(p2.y <= p.y) {
					if(p1.y > p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) > 0) {
						++w;
					}
				} else if(p1.y <= p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) < 0) {
					--w;
				}
				p1 = p2;
			}
			return w != 0;
		}
	}
	static optimize(this1,epsilon) {
		let out = [];
		h2d.col.IPolygon.optimizeRec(this1,0,this1.length,out,epsilon);
		return out;
	}
	static optimizeRec(points,index,len,out,epsilon) {
		let dmax = 0.;
		let pfirst = points[index];
		let plast = points[len - 1];
		let _g = index + 1;
		let _g1 = len - 1;
		while(_g < _g1) {
			let i = _g++;
			let p0 = points[i];
			let A = p0.x - pfirst.x;
			let B = p0.y - pfirst.y;
			let C = plast.x - pfirst.x;
			let D = plast.y - pfirst.y;
			let dot = A * C + B * D;
			let dist = C * C + D * D;
			let param = -1.;
			if(dist != 0) {
				param = dot / dist;
			}
			let xx;
			let yy;
			if(param < 0) {
				xx = pfirst.x;
				yy = pfirst.y;
			} else if(param > 1) {
				xx = plast.x;
				yy = plast.y;
			} else {
				xx = pfirst.x + param * C;
				yy = pfirst.y + param * D;
			}
			let dx = p0.x - xx;
			let dy = p0.y - yy;
			let d = dx * dx + dy * dy;
			if(d > dmax) {
				index = i;
				dmax = d;
			}
		}
		if(dmax >= epsilon) {
			h2d.col.IPolygon.optimizeRec(points,0,index,out,epsilon);
			out.pop();
			h2d.col.IPolygon.optimizeRec(points,index,len,out,epsilon);
		} else {
			out.push(points[index]);
			out.push(points[len - 1]);
		}
	}
}
h2d.col.IPolygon.__properties__ = {get_length: "get_length",get_points: "get_points"};
h2d.col.IPolygons = class h2d_col_IPolygons {
	static get_length(this1) {
		return this1.length;
	}
	static get_polygons(this1) {
		return this1;
	}
	static _new(polygons) {
		return polygons == null ? [] : polygons;
	}
	static iterator(this1) {
		return new hxd.impl.ArrayIterator_h2d_col_IPolygon(this1);
	}
	static toPolygons(this1,scale) {
		if(scale == null) {
			scale = 1.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			_g.push(h2d.col.IPolygon.toPolygon(p,scale));
		}
		return _g;
	}
	static getBounds(this1,b) {
		if(b == null) {
			b = new h2d.col.IBounds();
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			h2d.col.IPolygon.getBounds(p,b);
		}
		return b;
	}
	static union(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		let c = new hxd.clipper.Clipper();
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		c.addPolygons(this1,hxd.clipper.PolyType.Clip);
		if(p != null) {
			c.addPolygons(p,hxd.clipper.PolyType.Clip);
		}
		return c.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	static intersection(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		return h2d.col.IPolygons.clipperOp(this1,p,hxd.clipper.ClipType.Intersection,withHoles);
	}
	static subtraction(this1,p,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		return h2d.col.IPolygons.clipperOp(this1,p,hxd.clipper.ClipType.Difference,withHoles);
	}
	static offset(this1,delta,kind,withHoles) {
		if(withHoles == null) {
			withHoles = true;
		}
		if(this1.length == 0) {
			let polygons = null;
			return polygons == null ? [] : polygons;
		}
		let c = new hxd.clipper.ClipperOffset();
		switch(kind._hx_index) {
		case 0:
			c.addPolygons(this1,hxd.clipper.JoinType.Square,hxd.clipper.EndType.ClosedPol);
			break;
		case 1:
			c.addPolygons(this1,hxd.clipper.JoinType.Miter,hxd.clipper.EndType.ClosedPol);
			break;
		case 2:
			let arc = kind.arc;
			c.ArcTolerance = arc;
			c.addPolygons(this1,hxd.clipper.JoinType.Round,hxd.clipper.EndType.ClosedPol);
			break;
		}
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		return c.execute(delta);
	}
	static clipperOp(this1,p,op,withHoles) {
		let c = new hxd.clipper.Clipper();
		if(!withHoles) {
			c.resultKind = hxd.clipper.ResultKind.NoHoles;
		}
		c.addPolygons(this1,hxd.clipper.PolyType.Subject);
		c.addPolygons(p,hxd.clipper.PolyType.Clip);
		return c.execute(op,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	static contains(this1,p,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let pl = _g1[_g];
			++_g;
			if(h2d.col.IPolygon.contains(pl,p,isConvex)) {
				return true;
			}
		}
		return false;
	}
	static optimize(this1,epsilon) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			_g.push(h2d.col.IPolygon.optimize(p,epsilon));
		}
		return _g;
	}
}
h2d.col.IPolygons.__properties__ = {get_length: "get_length",get_polygons: "get_polygons"};
h2d.col.Matrix = class h2d_col_Matrix {
	constructor() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	identity() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	initTranslate(x,y) {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = x;
		this.y = y;
	}
	initScale(sx,sy) {
		this.a = sx;
		this.b = 0;
		this.c = 0;
		this.d = sy;
		this.x = 0;
		this.y = 0;
	}
	initRotate(angle) {
		let cos = Math.cos(angle);
		let sin = Math.sin(angle);
		this.a = cos;
		this.b = sin;
		this.c = -sin;
		this.d = cos;
		this.x = 0;
		this.y = 0;
	}
	initSkew(sx,sy) {
		let tanX = Math.tan(sx);
		let tanY = Math.tan(sy);
		this.a = 1;
		this.b = tanY;
		this.c = tanX;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	invert() {
		this.inverse(this);
	}
	getDeterminant() {
		return this.a * this.d - this.b * this.c;
	}
	inverse(m) {
		let a = m.a;
		let b = m.b;
		let c = m.c;
		let d = m.d;
		let x = m.x;
		let y = m.y;
		let invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	transform(pt) {
		let x = pt.x * this.a + pt.y * this.c + this.x;
		let y = pt.x * this.b + pt.y * this.d + this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	translate(x,y) {
		this.x += x;
		this.y += y;
	}
	translateX(x) {
		this.x += x;
	}
	translateY(y) {
		this.y += y;
	}
	prependTranslate(x,y) {
		this.x += this.a * x + this.c * y;
		this.y += this.b * x + this.d * y;
	}
	prependTranslateX(x) {
		this.x += this.a * x;
	}
	prependTranslateY(y) {
		this.y += this.d * y;
	}
	multiply(a,b) {
		let aa = a.a;
		let ab = a.b;
		let ac = a.c;
		let ad = a.d;
		let ax = a.x;
		let ay = a.y;
		let ba = b.a;
		let bb = b.b;
		let bc = b.c;
		let bd = b.d;
		let bx = b.x;
		let by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	getScale() {
		let p = new h2d.col.PointImpl(0.,0.);
		p.x = Math.sqrt(this.a * this.a + this.b * this.b);
		p.y = Math.sqrt(this.c * this.c + this.d * this.d);
		if(this.a * this.d - this.b * this.c < 0) {
			p.x *= -1;
			p.y *= -1;
		}
		return p;
	}
	scale(sx,sy) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	scaleX(sx) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
	}
	scaleY(sy) {
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	rotate(angle) {
		let _this = h2d.col.Matrix.tmp;
		let cos = Math.cos(angle);
		let sin = Math.sin(angle);
		_this.a = cos;
		_this.b = sin;
		_this.c = -sin;
		_this.d = cos;
		_this.x = 0;
		_this.y = 0;
		this.multiply(this,h2d.col.Matrix.tmp);
	}
	skew(sx,sy) {
		let aa = this.a;
		let ab = this.b;
		let ac = this.c;
		let ad = this.d;
		let ax = this.x;
		let ay = this.y;
		let bb = Math.tan(sy);
		let bc = Math.tan(sx);
		this.a = aa + ab * bc;
		this.b = aa * bb + ab;
		this.c = ac + ad * bc;
		this.d = ac * bb + ad;
		this.x = ax + ay * bc;
		this.y = ax * bb + ay;
	}
	skewX(sx) {
		let bc = Math.tan(sx);
		this.a += this.b * bc;
		this.c += this.d * bc;
		this.x += this.y * bc;
	}
	skewY(sy) {
		let bb = Math.tan(sy);
		this.b = this.a * bb + this.b;
		this.d = this.c * bb + this.d;
		this.y = this.x * bb + this.y;
	}
	clone() {
		let m = new h2d.col.Matrix();
		m.a = this.a;
		m.b = this.b;
		m.c = this.c;
		m.d = this.d;
		m.x = this.x;
		m.y = this.y;
		return m;
	}
	getPosition(p) {
		if(p == null) {
			p = new h2d.col.PointImpl(0.,0.);
		}
		let _this = p;
		let x = this.x;
		let y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		return p;
	}
	toString() {
		return "MAT=[\n" + "  [ " + hxd.Math.fmt(this.a) + ", " + hxd.Math.fmt(this.b) + " ]\n" + "  [ " + hxd.Math.fmt(this.c) + ", " + hxd.Math.fmt(this.d) + " ]\n" + "  [ " + hxd.Math.fmt(this.x) + ", " + hxd.Math.fmt(this.y) + " ]\n" + "]";
	}
}
$hxClasses["h2d.col.Matrix"] = h2d.col.Matrix;
h2d.col.Matrix.__name__ = "h2d.col.Matrix";
Object.assign(h2d.col.Matrix.prototype, {
	__class__: h2d.col.Matrix
});
h2d.col.Point = class h2d_col_Point {
	static _new(x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static sub(this1,p) {
		let x = this1.x - p.x;
		let y = this1.y - p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static add(this1,p) {
		let x = this1.x + p.x;
		let y = this1.y + p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static transform(this1,m) {
		let mx = m.a * this1.x + m.c * this1.y + m.x;
		let my = m.b * this1.x + m.d * this1.y + m.y;
		this1.x = mx;
		this1.y = my;
	}
	static transformed(this1,m) {
		let mx = m.a * this1.x + m.c * this1.y + m.x;
		let my = m.b * this1.x + m.d * this1.y + m.y;
		let x = mx;
		let y = my;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static scale(this1,v) {
		this1.x *= v;
		this1.y *= v;
	}
	static scaled(this1,v) {
		let x = this1.x * v;
		let y = this1.y * v;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static scaledInv(f,p) {
		let x = p.x * f;
		let y = p.y * f;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
}
h2d.col.Polygon = class h2d_col_Polygon {
	static get_length(this1) {
		return this1.length;
	}
	static get_points(this1) {
		return this1;
	}
	static _new(points) {
		return points == null ? [] : points;
	}
	static iterator(this1) {
		return new hxd.impl.ArrayIterator_h2d_col_Point(this1);
	}
	static fastTriangulate(this1) {
		return new hxd.earcut.Earcut().triangulate_anon_y_Float_x_Float(this1);
	}
	static toSegments(this1) {
		let segments = [];
		let p1 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			let s = new h2d.col.Segment(p1,p2);
			segments.push(s);
			p1 = p2;
		}
		return segments;
	}
	static toIPolygon(this1,scale) {
		if(scale == null) {
			scale = 1.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			let _this = p;
			let scale1 = scale;
			if(scale1 == null) {
				scale1 = 1.;
			}
			_g.push(new h2d.col.IPoint(Math.round(_this.x * scale1),Math.round(_this.y * scale1)));
		}
		return _g;
	}
	static getBounds(this1,b) {
		if(b == null) {
			b = new h2d.col.Bounds();
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
		}
		return b;
	}
	static getCollider(this1,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		return new h2d.col.PolygonCollider([this1],isConvex);
	}
	static xSort(this1,a,b) {
		if(a.x == b.x) {
			if(a.y < b.y) {
				return -1;
			} else {
				return 1;
			}
		}
		if(a.x < b.x) {
			return -1;
		} else {
			return 1;
		}
	}
	static convexHull(this1) {
		let len = this1.length;
		if(this1.length < 3) {
			return this1;
		}
		this1.sort(function(a,b) {
			if(a.x == b.x) {
				if(a.y < b.y) {
					return -1;
				} else {
					return 1;
				}
			} else if(a.x < b.x) {
				return -1;
			} else {
				return 1;
			}
		});
		let hull = [];
		let k = 0;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			while(true) {
				let tmp;
				if(k >= 2) {
					let p1 = hull[k - 2];
					let p2 = hull[k - 1];
					tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				--k;
			}
			hull[k++] = p;
		}
		let i = this1.length - 2;
		let len1 = k + 1;
		while(i >= 0) {
			let p = this1[i];
			while(true) {
				let tmp;
				if(k >= len1) {
					let p1 = hull[k - 2];
					let p2 = hull[k - 1];
					tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				--k;
			}
			hull[k++] = p;
			--i;
		}
		while(hull.length >= k) hull.pop();
		return hull;
	}
	static isClockwise(this1) {
		let sum = 0.;
		let p1 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			sum += (p2.x - p1.x) * (p2.y + p1.y);
			p1 = p2;
		}
		return sum < 0;
	}
	static area(this1) {
		let sum = 0.;
		let p1 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			sum += p2.x * p1.y - p1.x * p2.y;
			p1 = p2;
		}
		return (sum < 0 ? -sum : sum) * 0.5;
	}
	static centroid(this1) {
		let A = 0.;
		let cx = 0.;
		let cy = 0.;
		let p0 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			let a = p0.x * p.y - p.x * p0.y;
			cx += (p0.x + p.x) * a;
			cy += (p0.y + p.y) * a;
			A += a;
			p0 = p;
		}
		A *= 0.5;
		cx *= 1 / (6 * A);
		cy *= 1 / (6 * A);
		let x = cx;
		let y = cy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	static side(this1,p1,p2,t) {
		return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
	}
	static isConvex(this1) {
		if(this1.length < 4) {
			return true;
		}
		let p1 = this1[this1.length - 2];
		let p2 = this1[this1.length - 1];
		let p3 = this1[0];
		let s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
		let _g = 1;
		let _g1 = this1.length;
		while(_g < _g1) {
			let i = _g++;
			p1 = p2;
			p2 = p3;
			p3 = this1[i];
			if((p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0 != s) {
				return false;
			}
		}
		return true;
	}
	static reverse(this1) {
		this1.reverse();
	}
	static transform(this1,mat) {
		let _g = 0;
		let _g1 = this1.length;
		while(_g < _g1) {
			let i = _g++;
			let pt = this1[i];
			let x = pt.x * mat.a + pt.y * mat.c + mat.x;
			let y = pt.x * mat.b + pt.y * mat.d + mat.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			this1[i] = new h2d.col.PointImpl(x,y);
		}
	}
	static contains(this1,p,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		if(isConvex) {
			let p1 = this1[this1.length - 1];
			let _g = 0;
			let _g1 = this1;
			while(_g < _g1.length) {
				let p2 = _g1[_g];
				++_g;
				if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
					return false;
				}
				p1 = p2;
			}
			return true;
		} else {
			let w = 0;
			let p1 = this1[this1.length - 1];
			let _g = 0;
			let _g1 = this1;
			while(_g < _g1.length) {
				let p2 = _g1[_g];
				++_g;
				if(p2.y <= p.y) {
					if(p1.y > p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) > 0) {
						++w;
					}
				} else if(p1.y <= p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) < 0) {
					--w;
				}
				p1 = p2;
			}
			return w != 0;
		}
	}
	static findClosestPoint(this1,pt,maxDist) {
		let closest = null;
		let minDist = maxDist * maxDist;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let cp = _g1[_g];
			++_g;
			let _this = cp;
			let dx = _this.x - pt.x;
			let dy = _this.y - pt.y;
			let sqDist = dx * dx + dy * dy;
			if(sqDist < minDist) {
				closest = cp;
				minDist = sqDist;
			}
		}
		return closest;
	}
	static projectPoint(this1,pt) {
		let p1 = this1[this1.length - 1];
		let closestProj = null;
		let minDistSq = 1e10;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			let p11 = p1;
			let p21 = p2;
			let _this_x = p11.x;
			let _this_y = p11.y;
			let _this_dx = p21.x - _this_x;
			let _this_dy = p21.y - _this_y;
			let _this_lenSq = _this_dx * _this_dx + _this_dy * _this_dy;
			let _this_invLenSq = 1 / _this_lenSq;
			let px = pt.x - _this_x;
			let py = pt.y - _this_y;
			let t = px * _this_dx + py * _this_dy;
			let proj;
			if(t < 0) {
				let x = _this_x;
				let y = _this_y;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				proj = new h2d.col.PointImpl(x,y);
			} else if(t > _this_lenSq) {
				let x = _this_x + _this_dx;
				let y = _this_y + _this_dy;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				proj = new h2d.col.PointImpl(x,y);
			} else {
				let tl2 = t * _this_invLenSq;
				let x = _this_x + tl2 * _this_dx;
				let y = _this_y + tl2 * _this_dy;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				proj = new h2d.col.PointImpl(x,y);
			}
			let _this = proj;
			let dx = _this.x - pt.x;
			let dy = _this.y - pt.y;
			let distSq = dx * dx + dy * dy;
			if(distSq < minDistSq) {
				closestProj = proj;
				minDistSq = distSq;
			}
			p1 = p2;
		}
		return closestProj;
	}
	static distance(this1,pt,outside) {
		return Math.sqrt(h2d.col.Polygon.distanceSq(this1,pt,outside));
	}
	static distanceSq(this1,pt,outside) {
		let p1 = this1[this1.length - 1];
		let minDistSq = 1e10;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p2 = _g1[_g];
			++_g;
			let p11 = p1;
			let p21 = p2;
			let s_x = p11.x;
			let s_y = p11.y;
			let s_dx = p21.x - s_x;
			let s_dy = p21.y - s_y;
			let s_lenSq = s_dx * s_dx + s_dy * s_dy;
			let s_invLenSq = 1 / s_lenSq;
			if(outside == null || s_dx * (pt.y - s_y) - s_dy * (pt.x - s_x) < 0 == outside) {
				let px = pt.x - s_x;
				let py = pt.y - s_y;
				let t = px * s_dx + py * s_dy;
				let dist;
				if(t < 0) {
					dist = px * px + py * py;
				} else if(t > s_lenSq) {
					let kx = pt.x - (s_x + s_dx);
					let ky = pt.y - (s_y + s_dy);
					dist = kx * kx + ky * ky;
				} else {
					let tl2 = t * s_invLenSq;
					let pdx = s_x + tl2 * s_dx - pt.x;
					let pdy = s_y + tl2 * s_dy - pt.y;
					dist = pdx * pdx + pdy * pdy;
				}
				if(dist < minDistSq) {
					minDistSq = dist;
				}
			}
			p1 = p2;
		}
		if(minDistSq == 1e10) {
			return 0.;
		} else {
			return minDistSq;
		}
	}
	static rayIntersection(this1,r,bestMatch,oriented) {
		if(oriented == null) {
			oriented = false;
		}
		let dmin = -1.;
		let p0 = this1[this1.length - 1];
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if((r.lx * (p0.y - r.py) - r.ly * (p0.x - r.px)) * (r.lx * (p.y - r.py) - r.ly * (p.x - r.px)) > 0) {
				p0 = p;
				continue;
			}
			let u = (r.lx * (p0.y - r.py) - r.ly * (p0.x - r.px)) / (r.ly * (p.x - p0.x) - r.lx * (p.y - p0.y));
			let x = p0.x + u * (p.x - p0.x);
			let y = p0.y + u * (p.y - p0.y);
			let x1 = x - r.px;
			let y1 = y - r.py;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let x2 = x1;
			let y2 = y1;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let v_x = x2;
			let v_y = y2;
			let tmp;
			if(!(!oriented)) {
				let x = r.lx;
				let y = r.ly;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let _this_x = x1;
				let _this_y = y1;
				tmp = _this_x * v_x + _this_y * v_y > 0;
			} else {
				tmp = true;
			}
			if(tmp) {
				let dx = v_x;
				let dy = v_y;
				let d = dx * dx + dy * dy;
				if(d < dmin || dmin < 0) {
					if(!bestMatch) {
						return Math.sqrt(d);
					}
					dmin = d;
				}
			}
			p0 = p;
		}
		if(dmin < 0) {
			return dmin;
		} else {
			return Math.sqrt(dmin);
		}
	}
	static orientation(this1,p,q,r) {
		let v = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x);
		if(v == 0) {
			return 0;
		}
		if(v > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	static onSegment(this1,p,q,r) {
		let a = p.x;
		let b = q.x;
		if(r.x > (a < b ? b : a)) {
			return false;
		}
		let a1 = p.x;
		let b1 = q.x;
		if(r.x < (a1 > b1 ? b1 : a1)) {
			return false;
		}
		let a2 = p.y;
		let b2 = q.y;
		if(r.y > (a2 < b2 ? b2 : a2)) {
			return false;
		}
		let a3 = p.y;
		let b3 = q.y;
		if(r.y < (a3 > b3 ? b3 : a3)) {
			return false;
		}
		return true;
	}
	static intersect(this1,p1,q1,p2,q2) {
		let v = (q1.x - p1.x) * (p2.y - p1.y) - (q1.y - p1.y) * (p2.x - p1.x);
		let s1 = v == 0 ? 0 : v > 0 ? 1 : -1;
		let v1 = (q1.x - p1.x) * (q2.y - p1.y) - (q1.y - p1.y) * (q2.x - p1.x);
		let s2 = v1 == 0 ? 0 : v1 > 0 ? 1 : -1;
		let v2 = (q2.x - p2.x) * (p1.y - p2.y) - (q2.y - p2.y) * (p1.x - p2.x);
		let s3 = v2 == 0 ? 0 : v2 > 0 ? 1 : -1;
		let v3 = (q2.x - p2.x) * (q1.y - p2.y) - (q2.y - p2.y) * (q1.x - p2.x);
		let s4 = v3 == 0 ? 0 : v3 > 0 ? 1 : -1;
		if(s1 != s2 && s3 != s4) {
			return true;
		}
		let tmp;
		let tmp1;
		let tmp2;
		let tmp3;
		if(s1 == 0) {
			let a = p1.x;
			let b = q1.x;
			if(p2.x > (a < b ? b : a)) {
				tmp3 = false;
			} else {
				let a = p1.x;
				let b = q1.x;
				if(p2.x < (a > b ? b : a)) {
					tmp3 = false;
				} else {
					let a = p1.y;
					let b = q1.y;
					if(p2.y > (a < b ? b : a)) {
						tmp3 = false;
					} else {
						let a = p1.y;
						let b = q1.y;
						tmp3 = p2.y < (a > b ? b : a) ? false : true;
					}
				}
			}
		} else {
			tmp3 = false;
		}
		if(!tmp3) {
			if(s2 == 0) {
				let a = p1.x;
				let b = q1.x;
				if(q2.x > (a < b ? b : a)) {
					tmp2 = false;
				} else {
					let a = p1.x;
					let b = q1.x;
					if(q2.x < (a > b ? b : a)) {
						tmp2 = false;
					} else {
						let a = p1.y;
						let b = q1.y;
						if(q2.y > (a < b ? b : a)) {
							tmp2 = false;
						} else {
							let a = p1.y;
							let b = q1.y;
							tmp2 = q2.y < (a > b ? b : a) ? false : true;
						}
					}
				}
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			if(s3 == 0) {
				let a = p2.x;
				let b = q2.x;
				if(p1.x > (a < b ? b : a)) {
					tmp1 = false;
				} else {
					let a = p2.x;
					let b = q2.x;
					if(p1.x < (a > b ? b : a)) {
						tmp1 = false;
					} else {
						let a = p2.y;
						let b = q2.y;
						if(p1.y > (a < b ? b : a)) {
							tmp1 = false;
						} else {
							let a = p2.y;
							let b = q2.y;
							tmp1 = p1.y < (a > b ? b : a) ? false : true;
						}
					}
				}
			} else {
				tmp1 = false;
			}
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			if(s4 == 0) {
				let a = p2.x;
				let b = q2.x;
				if(q1.x > (a < b ? b : a)) {
					tmp = false;
				} else {
					let a = p2.x;
					let b = q2.x;
					if(q1.x < (a > b ? b : a)) {
						tmp = false;
					} else {
						let a = p2.y;
						let b = q2.y;
						if(q1.y > (a < b ? b : a)) {
							tmp = false;
						} else {
							let a = p2.y;
							let b = q2.y;
							tmp = q1.y < (a > b ? b : a) ? false : true;
						}
					}
				}
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return true;
		}
		return false;
	}
	static selfIntersecting(this1) {
		if(this1.length < 4) {
			return false;
		}
		let _g = 0;
		let _g1 = this1.length - 2;
		while(_g < _g1) {
			let i = _g++;
			let p1 = this1[i];
			let q1 = this1[i + 1];
			let _g1 = i + 2;
			let _g2 = this1.length;
			while(_g1 < _g2) {
				let j = _g1++;
				let p2 = this1[j];
				let q2 = this1[(j + 1) % this1.length];
				if(q2 != p1 && h2d.col.Polygon.intersect(this1,p1,q1,p2,q2)) {
					return true;
				}
			}
		}
		return false;
	}
	static optimize(this1,epsilon) {
		let out = [];
		h2d.col.Polygon.optimizeRec(this1,0,this1.length - 1,out,epsilon);
		return out;
	}
	static optimizeRec(points,start,end,out,epsilon) {
		let dmax = 0.;
		let pfirst = points[start];
		let plast = points[end];
		let index = 0;
		let _g = start + 1;
		let _g1 = end;
		while(_g < _g1) {
			let i = _g++;
			let p0 = points[i];
			let A = p0.x - pfirst.x;
			let B = p0.y - pfirst.y;
			let C = plast.x - pfirst.x;
			let D = plast.y - pfirst.y;
			let dot = A * C + B * D;
			let dist = C * C + D * D;
			let param = -1.;
			if(dist != 0) {
				param = dot / dist;
			}
			let xx;
			let yy;
			if(param < 0) {
				xx = pfirst.x;
				yy = pfirst.y;
			} else if(param > 1) {
				xx = plast.x;
				yy = plast.y;
			} else {
				xx = pfirst.x + param * C;
				yy = pfirst.y + param * D;
			}
			let dx = p0.x - xx;
			let dy = p0.y - yy;
			let d = dx * dx + dy * dy;
			if(d > dmax) {
				index = i;
				dmax = d;
			}
		}
		if(dmax >= epsilon * epsilon) {
			h2d.col.Polygon.optimizeRec(points,start,index,out,epsilon);
			out.pop();
			h2d.col.Polygon.optimizeRec(points,index,end,out,epsilon);
		} else {
			out.push(points[start]);
			out.push(points[end]);
		}
	}
	static makeCircle(x,y,radius,npoints) {
		if(npoints == null) {
			npoints = 0;
		}
		if(npoints == 0) {
			let f = radius * 3.14 * 2 / 4;
			npoints = Math.ceil(f < 0 ? -f : f);
		}
		if(npoints < 3) {
			npoints = 3;
		}
		let angle = 6.28318530717958623 / npoints;
		let points = [];
		let _g = 0;
		let _g1 = npoints;
		while(_g < _g1) {
			let i = _g++;
			let a = i * angle;
			let x1 = Math.cos(a) * radius + x;
			let y1 = Math.sin(a) * radius + y;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			points.push(new h2d.col.PointImpl(x1,y1));
		}
		return points == null ? [] : points;
	}
}
h2d.col.Polygon.__properties__ = {get_length: "get_length",get_points: "get_points"};
h2d.col.PolygonCollider = class h2d_col_PolygonCollider extends h2d.col.Collider {
	constructor(polygons,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		super();
		this.polygons = polygons;
		this.isConvex = isConvex;
	}
	contains(p) {
		if(this.polygons == null) {
			return false;
		}
		return h2d.col.Polygons.contains(this.polygons,p,this.isConvex);
	}
	collideCircle(c) {
		throw haxe.Exception.thrown("Not implemented");
	}
	collideBounds(b) {
		throw haxe.Exception.thrown("Not implemented");
	}
}
$hxClasses["h2d.col.PolygonCollider"] = h2d.col.PolygonCollider;
h2d.col.PolygonCollider.__name__ = "h2d.col.PolygonCollider";
h2d.col.PolygonCollider.__super__ = h2d.col.Collider;
Object.assign(h2d.col.PolygonCollider.prototype, {
	__class__: h2d.col.PolygonCollider
});
h2d.col.Polygons = class h2d_col_Polygons {
	static get_length(this1) {
		return this1.length;
	}
	static get_polygons(this1) {
		return this1;
	}
	static _new(polygons) {
		return polygons == null ? [] : polygons;
	}
	static iterator(this1) {
		return new hxd.impl.ArrayIterator_h2d_col_Polygon(this1);
	}
	static toIPolygons(this1,scale) {
		if(scale == null) {
			scale = 1.;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			_g.push(h2d.col.Polygon.toIPolygon(p,scale));
		}
		return _g;
	}
	static getBounds(this1,b) {
		if(b == null) {
			b = new h2d.col.Bounds();
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			h2d.col.Polygon.getBounds(p,b);
		}
		return b;
	}
	static getCollider(this1,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		return new h2d.col.PolygonCollider(this1,isConvex);
	}
	static contains(this1,p,isConvex) {
		if(isConvex == null) {
			isConvex = false;
		}
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let pl = _g1[_g];
			++_g;
			if(h2d.col.Polygon.contains(pl,p,isConvex)) {
				return true;
			}
		}
		return false;
	}
	static optimize(this1,epsilon) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let p = _g2[_g1];
			++_g1;
			_g.push(h2d.col.Polygon.optimize(p,epsilon));
		}
		return _g;
	}
}
h2d.col.Polygons.__properties__ = {get_length: "get_length",get_polygons: "get_polygons"};
h2d.col.Ray = class h2d_col_Ray {
	constructor() {
	}
	side(p) {
		return this.lx * (p.y - this.py) - this.ly * (p.x - this.px);
	}
	getPoint(distance) {
		let x = this.px + distance * this.lx;
		let y = this.py + distance * this.ly;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	getPos() {
		let x = this.px;
		let y = this.py;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	getDir() {
		let x = this.lx;
		let y = this.ly;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	normalize() {
		let l = this.lx * this.lx + this.ly * this.ly;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
	}
	static fromPoints(p1,p2) {
		let r = new h2d.col.Ray();
		r.px = p1.x;
		r.py = p1.y;
		r.lx = p2.x - p1.x;
		r.ly = p2.y - p1.y;
		r.normalize();
		return r;
	}
	static fromValues(x,y,dx,dy) {
		let r = new h2d.col.Ray();
		r.px = x;
		r.py = y;
		r.lx = dx;
		r.ly = dy;
		r.normalize();
		return r;
	}
}
$hxClasses["h2d.col.Ray"] = h2d.col.Ray;
h2d.col.Ray.__name__ = "h2d.col.Ray";
Object.assign(h2d.col.Ray.prototype, {
	__class__: h2d.col.Ray
});
h2d.col.Segment = class h2d_col_Segment {
	constructor(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
		this.lenSq = this.dx * this.dx + this.dy * this.dy;
		this.invLenSq = 1 / this.lenSq;
	}
	setPoints(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
		this.lenSq = this.dx * this.dx + this.dy * this.dy;
		this.invLenSq = 1 / this.lenSq;
	}
	side(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	distanceSq(p) {
		let px = p.x - this.x;
		let py = p.y - this.y;
		let t = px * this.dx + py * this.dy;
		if(t < 0) {
			return px * px + py * py;
		} else if(t > this.lenSq) {
			let kx = p.x - (this.x + this.dx);
			let ky = p.y - (this.y + this.dy);
			return kx * kx + ky * ky;
		} else {
			let tl2 = t * this.invLenSq;
			let pdx = this.x + tl2 * this.dx - p.x;
			let pdy = this.y + tl2 * this.dy - p.y;
			return pdx * pdx + pdy * pdy;
		}
	}
	distance(p) {
		let px = p.x - this.x;
		let py = p.y - this.y;
		let t = px * this.dx + py * this.dy;
		let f;
		if(t < 0) {
			f = px * px + py * py;
		} else if(t > this.lenSq) {
			let kx = p.x - (this.x + this.dx);
			let ky = p.y - (this.y + this.dy);
			f = kx * kx + ky * ky;
		} else {
			let tl2 = t * this.invLenSq;
			let pdx = this.x + tl2 * this.dx - p.x;
			let pdy = this.y + tl2 * this.dy - p.y;
			f = pdx * pdx + pdy * pdy;
		}
		return Math.sqrt(f);
	}
	project(p) {
		let px = p.x - this.x;
		let py = p.y - this.y;
		let t = px * this.dx + py * this.dy;
		if(t < 0) {
			let x = this.x;
			let y = this.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		} else if(t > this.lenSq) {
			let x = this.x + this.dx;
			let y = this.y + this.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		} else {
			let tl2 = t * this.invLenSq;
			let x = this.x + tl2 * this.dx;
			let y = this.y + tl2 * this.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		}
	}
	lineIntersection(r,pt) {
		let x = this.x;
		let y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p_x = x1;
		let p_y = y1;
		let x2 = this.x + this.dx;
		let y2 = this.y + this.dy;
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let p_x1 = x3;
		let p_y1 = y3;
		if((r.lx * (p_y - r.py) - r.ly * (p_x - r.px)) * (r.lx * (p_y1 - r.py) - r.ly * (p_x1 - r.px)) > 0) {
			return null;
		}
		let u = (r.lx * (this.y - r.py) - r.ly * (this.x - r.px)) / (r.ly * this.dx - r.lx * this.dy);
		if(u < 0 || u > 1) {
			return null;
		}
		if(pt == null) {
			pt = new h2d.col.PointImpl(0.,0.);
		}
		pt.x = this.x + u * this.dx;
		pt.y = this.y + u * this.dy;
		return pt;
	}
}
$hxClasses["h2d.col.Segment"] = h2d.col.Segment;
h2d.col.Segment.__name__ = "h2d.col.Segment";
Object.assign(h2d.col.Segment.prototype, {
	__class__: h2d.col.Segment
});
h2d.col.Segments = class h2d_col_Segments {
	static get_segments(this1) {
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static iterator(this1) {
		return new hxd.impl.ArrayIterator_h2d_col_Segment(this1);
	}
	static containsPoint(this1,p,isConvex) {
		if(isConvex) {
			let _g = 0;
			let _g1 = this1;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(s.dx * (p.y - s.y) - s.dy * (p.x - s.x) < 0) {
					return false;
				}
			}
		} else {
			throw haxe.Exception.thrown("TODO");
		}
		return true;
	}
	static toPolygon(this1) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this1;
		while(_g1 < _g2.length) {
			let s = _g2[_g1];
			++_g1;
			let x = s.x;
			let y = s.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_g.push(new h2d.col.PointImpl(x,y));
		}
		return _g;
	}
	static project(this1,p) {
		let dmin = 1e20;
		let smin = null;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let px = p.x - s.x;
			let py = p.y - s.y;
			let t = px * s.dx + py * s.dy;
			let d;
			if(t < 0) {
				d = px * px + py * py;
			} else if(t > s.lenSq) {
				let kx = p.x - (s.x + s.dx);
				let ky = p.y - (s.y + s.dy);
				d = kx * kx + ky * ky;
			} else {
				let tl2 = t * s.invLenSq;
				let pdx = s.x + tl2 * s.dx - p.x;
				let pdy = s.y + tl2 * s.dy - p.y;
				d = pdx * pdx + pdy * pdy;
			}
			if(d < dmin) {
				dmin = d;
				smin = s;
			}
		}
		let px = p.x - smin.x;
		let py = p.y - smin.y;
		let t = px * smin.dx + py * smin.dy;
		if(t < 0) {
			let x = smin.x;
			let y = smin.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		} else if(t > smin.lenSq) {
			let x = smin.x + smin.dx;
			let y = smin.y + smin.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		} else {
			let tl2 = t * smin.invLenSq;
			let x = smin.x + tl2 * smin.dx;
			let y = smin.y + tl2 * smin.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d.col.PointImpl(x,y);
		}
	}
	static distanceSq(this1,p) {
		let dmin = 1e20;
		let _g = 0;
		let _g1 = this1;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let px = p.x - s.x;
			let py = p.y - s.y;
			let t = px * s.dx + py * s.dy;
			let d;
			if(t < 0) {
				d = px * px + py * py;
			} else if(t > s.lenSq) {
				let kx = p.x - (s.x + s.dx);
				let ky = p.y - (s.y + s.dy);
				d = kx * kx + ky * ky;
			} else {
				let tl2 = t * s.invLenSq;
				let pdx = s.x + tl2 * s.dx - p.x;
				let pdy = s.y + tl2 * s.dy - p.y;
				d = pdx * pdx + pdy * pdy;
			}
			if(d < dmin) {
				dmin = d;
			}
		}
		return dmin;
	}
	static distance(this1,p) {
		return Math.sqrt(h2d.col.Segments.distanceSq(this1,p));
	}
}
h2d.col.Segments.__properties__ = {get_length: "get_length",get_segments: "get_segments"};
h2d.filter = {};
h2d.filter.Filter = class h2d_filter_Filter {
	constructor() {
		this.useScreenResolution = h2d.filter.Filter.defaultUseScreenResolution;
		this.resolutionScale = 1;
		this.enable = true;
		this.smooth = false;
		this.boundsExtend = 0.;
		this.autoBounds = true;
	}
	get_enable() {
		return this.enable;
	}
	set_enable(v) {
		return this.enable = v;
	}
	set_resolutionScale(v) {
		return this.resolutionScale = v;
	}
	set_useScreenResolution(v) {
		return this.useScreenResolution = v;
	}
	sync(ctx,s) {
	}
	bind(s) {
	}
	unbind(s) {
	}
	getBounds(s,bounds,scale) {
		s.getBounds(s,bounds);
		bounds.xMin = bounds.xMin * scale.x - this.boundsExtend;
		bounds.xMax = bounds.xMax * scale.x + this.boundsExtend;
		bounds.yMin = bounds.yMin * scale.y - this.boundsExtend;
		bounds.yMax = bounds.yMax * scale.y + this.boundsExtend;
	}
	draw(ctx,input) {
		return input;
	}
}
$hxClasses["h2d.filter.Filter"] = h2d.filter.Filter;
h2d.filter.Filter.__name__ = "h2d.filter.Filter";
Object.assign(h2d.filter.Filter.prototype, {
	__class__: h2d.filter.Filter
	,__properties__: {set_useScreenResolution: "set_useScreenResolution",set_resolutionScale: "set_resolutionScale",set_enable: "set_enable",get_enable: "get_enable"}
});
h2d.impl = {};
h2d.impl.BatchDrawState = class h2d_impl_BatchDrawState {
	constructor() {
		this.head = this.tail = new h2d.impl._BatchDrawState.StateEntry(null);
		this.totalCount = 0;
	}
	setTile(tile) {
		if(tile != null) {
			this.setTexture(tile.innerTex);
		}
	}
	setTexture(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				let cur = this.tail;
				if(cur.count == 0) {
					cur.set(texture);
				} else if(cur.next == null) {
					cur.next = this.tail = new h2d.impl._BatchDrawState.StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	add(count) {
		this.tail.count += count;
		this.totalCount += count;
	}
	clear() {
		let state = this.head;
		do {
			state.texture = null;
			state = state.next;
		} while(state != null);
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	drawQuads(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		let state = this.head;
		let last = this.tail.next;
		let engine = ctx.engine;
		let stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				let start = offset;
				let max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			let caret = 0;
			do {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					let stateMin = offset >= caret ? offset : caret;
					let stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					let start = stateMin;
					let max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	drawIndexed(ctx,buffer,indices,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		let state = this.head;
		let last = this.tail.next;
		let engine = ctx.engine;
		let stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count / 3 | 0;
				engine.renderIndexed(buffer,indices,offset,stateLen);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = this.totalCount / 3 | 0;
			}
			let caret = 0;
			do {
				stateLen = state.count / 3 | 0;
				if(caret + stateLen >= offset) {
					let stateMin = offset >= caret ? offset : caret;
					let stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					engine.renderIndexed(buffer,indices,stateMin,stateLen1);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	get_currentTexture() {
		return this.tail.texture;
	}
}
$hxClasses["h2d.impl.BatchDrawState"] = h2d.impl.BatchDrawState;
h2d.impl.BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
Object.assign(h2d.impl.BatchDrawState.prototype, {
	__class__: h2d.impl.BatchDrawState
	,__properties__: {get_currentTexture: "get_currentTexture"}
});
h2d.impl._BatchDrawState = {};
h2d.impl._BatchDrawState.StateEntry = class h2d_impl__$BatchDrawState_StateEntry {
	constructor(texture) {
		this.texture = texture;
		this.count = 0;
	}
	set(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
}
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d.impl._BatchDrawState.StateEntry;
h2d.impl._BatchDrawState.StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
Object.assign(h2d.impl._BatchDrawState.StateEntry.prototype, {
	__class__: h2d.impl._BatchDrawState.StateEntry
});
h3d.BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__:true,__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_name:"UniformBuffer",_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,ReadWriteBuffer: {_hx_name:"ReadWriteBuffer",_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,IndexBuffer: {_hx_name:"IndexBuffer",_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d.BufferFlag.__constructs__ = [h3d.BufferFlag.Dynamic,h3d.BufferFlag.NoAlloc,h3d.BufferFlag.UniformBuffer,h3d.BufferFlag.ReadWriteBuffer,h3d.BufferFlag.IndexBuffer];
h3d.BufferFlag.__empty_constructs__ = [h3d.BufferFlag.Dynamic,h3d.BufferFlag.NoAlloc,h3d.BufferFlag.UniformBuffer,h3d.BufferFlag.ReadWriteBuffer,h3d.BufferFlag.IndexBuffer];
h3d.Buffer = class h3d_Buffer {
	constructor(vertices,format1,flags) {
		this.id = h3d.Buffer.GUID++;
		this.vertices = vertices;
		this.format = format1;
		this.flags = 0;
		if(flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				this.flags |= 1 << f._hx_index;
			}
		}
		this.engine = h3d.Engine.CURRENT;
		if((this.flags & 1 << h3d.BufferFlag.NoAlloc._hx_index) == 0) {
			this.engine.mem.allocBuffer(this);
		}
	}
	getMemSize() {
		return this.vertices * this.format.strideBytes;
	}
	isDisposed() {
		return this.vbuf == null;
	}
	dispose() {
		if(this.vbuf != null) {
			this.engine.mem.freeBuffer(this);
			this.vbuf = null;
		}
	}
	uploadFloats(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe.Exception.thrown("Invalid vertices count");
		}
		if(this.format.hasLowPrecision) {
			throw haxe.Exception.thrown("Can't upload floats on low precision buffer");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferData(this,startVertice,vertices,buf,bufPos);
	}
	uploadBytes(data,dataPos,vertices) {
		if(vertices < 0 || vertices > this.vertices) {
			throw haxe.Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferBytes(this,0,vertices,data,dataPos);
	}
	readBytes(bytes,bytesPosition,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe.Exception.thrown("Invalid vertices count");
		}
		this.engine.driver.readBufferBytes(this,startVertice,vertices,bytes,bytesPosition);
	}
	static ofFloats(v,format1,flags) {
		let nvert = v.pos / format1.stride | 0;
		let b = new h3d.Buffer(nvert,format1,flags);
		b.uploadFloats(v,0,nvert);
		return b;
	}
	static ofSubFloats(v,vertices,format1,flags) {
		let b = new h3d.Buffer(vertices,format1,flags);
		b.uploadFloats(v,0,vertices);
		return b;
	}
}
$hxClasses["h3d.Buffer"] = h3d.Buffer;
h3d.Buffer.__name__ = "h3d.Buffer";
Object.assign(h3d.Buffer.prototype, {
	__class__: h3d.Buffer
});
h3d.Camera = class h3d_Camera {
	constructor(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
		if(rightHanded == null) {
			rightHanded = false;
		}
		if(zFar == null) {
			zFar = 4000.;
		}
		if(zNear == null) {
			zNear = 0.02;
		}
		if(screenRatio == null) {
			screenRatio = 1.333333;
		}
		if(zoom == null) {
			zoom = 1.;
		}
		if(fovY == null) {
			fovY = 25.;
		}
		this.viewY = 0.;
		this.viewX = 0.;
		this.fovY = fovY;
		this.zoom = zoom;
		this.screenRatio = screenRatio;
		this.zNear = zNear;
		this.zFar = zFar;
		this.rightHanded = rightHanded;
		let x = 2;
		let y = 3;
		let z = 4;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.pos = new h3d.VectorImpl(x,y,z);
		let x1 = 0;
		let y1 = 0;
		let z1 = 1;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		this.up = new h3d.VectorImpl(x1,y1,z1);
		let x2 = 0;
		let y2 = 0;
		let z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		this.target = new h3d.VectorImpl(x2,y2,z2);
		this.m = new h3d.MatrixImpl();
		this.mcam = new h3d.MatrixImpl();
		this.mproj = new h3d.MatrixImpl();
		this.frustum = new h3d.col.Frustum();
		this.update();
	}
	setFovX(fovX,withRatio) {
		let degToRad = Math.PI / 180;
		this.fovY = 2 * Math.atan(Math.tan(fovX * 0.5 * degToRad) / withRatio) / degToRad;
	}
	getFovX() {
		let degToRad = Math.PI / 180;
		let halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
		let fovX = halfFovX * 2 / degToRad;
		return fovX;
	}
	clone() {
		let c = new h3d.Camera(this.fovY,this.zoom,this.screenRatio,this.zNear,this.zFar,this.rightHanded);
		let _this = this.pos;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		c.pos = new h3d.VectorImpl(x,y,z);
		let _this1 = this.up;
		let x1 = _this1.x;
		let y1 = _this1.y;
		let z1 = _this1.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		c.up = new h3d.VectorImpl(x1,y1,z1);
		let _this2 = this.target;
		let x2 = _this2.x;
		let y2 = _this2.y;
		let z2 = _this2.z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		c.target = new h3d.VectorImpl(x2,y2,z2);
		c.update();
		return c;
	}
	getInverseViewProj() {
		if(this.minv == null) {
			this.minv = new h3d.MatrixImpl();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	getInverseProj() {
		if(this.mprojInv == null) {
			this.mprojInv = new h3d.MatrixImpl();
			this.mprojInv._44 = 0;
		}
		if(this.mprojInv._44 == 0) {
			this.mprojInv.initInverse(this.mproj);
		}
		return this.mprojInv;
	}
	getInverseView() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d.MatrixImpl();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	setCubeMap(face,position) {
		let dx = 0;
		let dy = 0;
		let dz = 0;
		switch(face) {
		case 0:
			dx = 1;
			let _this = this.up;
			let x = 0;
			let y = 1;
			let z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 1:
			dx = -1;
			let _this1 = this.up;
			let x1 = 0;
			let y1 = 1;
			let z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			break;
		case 2:
			dy = 1;
			let _this2 = this.up;
			let x2 = 0;
			let y2 = 0;
			let z2 = -1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			break;
		case 3:
			dy = -1;
			let _this3 = this.up;
			let x3 = 0;
			let y3 = 0;
			let z3 = 1;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this3.x = x3;
			_this3.y = y3;
			_this3.z = z3;
			break;
		case 4:
			dz = 1;
			let _this4 = this.up;
			let x4 = 0;
			let y4 = 1;
			let z4 = 0;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this4.x = x4;
			_this4.y = y4;
			_this4.z = z4;
			break;
		case 5:
			dz = -1;
			let _this5 = this.up;
			let x5 = 0;
			let y5 = 1;
			let z5 = 0;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			_this5.x = x5;
			_this5.y = y5;
			_this5.z = z5;
			break;
		}
		if(position != null) {
			let _this = this.pos;
			_this.x = position.x;
			_this.y = position.y;
			_this.z = position.z;
		}
		let _this6 = this.target;
		let x6 = this.pos.x + dx;
		let y6 = this.pos.y + dy;
		let z6 = this.pos.z + dz;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this6.x = x6;
		_this6.y = y6;
		_this6.z = z6;
	}
	unproject(screenX,screenY,camZ) {
		let x = screenX;
		let y = screenY;
		let z = camZ;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let p = new h3d.VectorImpl(x,y,z);
		let _this = p;
		let m = this.getInverseViewProj();
		let px = _this.x * m._11 + _this.y * m._21 + _this.z * m._31 + m._41;
		let py = _this.x * m._12 + _this.y * m._22 + _this.z * m._32 + m._42;
		let pz = _this.x * m._13 + _this.y * m._23 + _this.z * m._33 + m._43;
		let iw = 1 / (_this.x * m._14 + _this.y * m._24 + _this.z * m._34 + m._44);
		_this.x = px * iw;
		_this.y = py * iw;
		_this.z = pz * iw;
		return p;
	}
	rayFromScreen(pixelX,pixelY,sceneWidth,sceneHeight) {
		if(sceneHeight == null) {
			sceneHeight = -1;
		}
		if(sceneWidth == null) {
			sceneWidth = -1;
		}
		let engine = h3d.Engine.CURRENT;
		if(sceneWidth < 0) {
			sceneWidth = engine.width;
		}
		if(sceneHeight < 0) {
			sceneHeight = engine.height;
		}
		let rx = (pixelX / sceneWidth - 0.5) * 2;
		let ry = (0.5 - pixelY / sceneHeight) * 2;
		let p1 = this.unproject(rx,ry,0);
		let p2 = this.unproject(rx,ry,1);
		let r = new h3d.col.Ray();
		r.px = p1.x;
		r.py = p1.y;
		r.pz = p1.z;
		r.lx = p2.x - p1.x;
		r.ly = p2.y - p1.y;
		r.lz = p2.z - p1.z;
		r.normalize();
		return r;
	}
	update() {
		if(this.follow != null) {
			let fpos = this.follow.pos.localToGlobal();
			let ftarget = this.follow.target.localToGlobal();
			let _this = this.pos;
			let x = fpos.x;
			let y = fpos.y;
			let z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			let _this1 = this.target;
			let x1 = ftarget.x;
			let y1 = ftarget.y;
			let z1 = ftarget.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			if(this.follow.pos.name != null) {
				let p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						let v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	getFrustumCorners(zMax,zMin) {
		if(zMin == null) {
			zMin = 0.;
		}
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,zMin),this.unproject(1,1,zMin),this.unproject(1,-1,zMin),this.unproject(-1,-1,zMin),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	lostUp() {
		let _this = this.pos;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x *= k;
		_this_y *= k;
		_this_z *= k;
		let v = this.up;
		return Math.abs(_this_x * v.x + _this_y * v.y + _this_z * v.z) > 0.999;
	}
	getViewDirection(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		let x = dx;
		let y = dy;
		let z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let a = new h3d.VectorImpl(x,y,z);
		let _this = a;
		let m = this.mcam;
		let px = _this.x * m._11 + _this.y * m._21 + _this.z * m._31;
		let py = _this.x * m._12 + _this.y * m._22 + _this.z * m._32;
		let pz = _this.x * m._13 + _this.y * m._23 + _this.z * m._33;
		_this.x = px;
		_this.y = py;
		_this.z = pz;
		let _this1 = a;
		let k = _this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this1.x *= k;
		_this1.y *= k;
		_this1.z *= k;
		return a;
	}
	movePosAxis(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		let x = dx;
		let y = dy;
		let z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let m = this.mcam;
		let px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		this.pos.x += _this_x;
		this.pos.y += _this_y;
		this.pos.z += _this_z;
	}
	moveTargetAxis(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		let x = dx;
		let y = dy;
		let z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let m = this.mcam;
		let px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		this.target.x += _this_x;
		this.target.y += _this_y;
		this.target.z += _this_z;
	}
	forward(speed) {
		if(speed == null) {
			speed = 1.;
		}
		let c = 1 - 0.025 * speed;
		let _this = this.pos;
		let x = this.target.x + (this.pos.x - this.target.x) * c;
		let y = this.target.y + (this.pos.y - this.target.y) * c;
		let z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	backward(speed) {
		if(speed == null) {
			speed = 1.;
		}
		let c = 1 + 0.025 * speed;
		let _this = this.pos;
		let x = this.target.x + (this.pos.x - this.target.x) * c;
		let y = this.target.y + (this.pos.y - this.target.y) * c;
		let z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	makeCameraMatrix(m) {
		let this1 = this.target;
		let v = this.pos;
		let x = this1.x - v.x;
		let y = this1.y - v.y;
		let z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		if(this.rightHanded) {
			_this_x *= -1;
			_this_y *= -1;
			_this_z *= -1;
		}
		let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x *= k;
		_this_y *= k;
		_this_z *= k;
		let _this = this.up;
		let x2 = _this.y * _this_z - _this.z * _this_y;
		let y2 = _this.z * _this_x - _this.x * _this_z;
		let z2 = _this.x * _this_y - _this.y * _this_x;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x1 = x3;
		let _this_y1 = y3;
		let _this_z1 = z3;
		let k1 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k1 < 1e-20) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		_this_x1 *= k1;
		_this_y1 *= k1;
		_this_z1 *= k1;
		if(Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1) == 0) {
			_this_x1 = _this_y;
			_this_y1 = _this_z;
			_this_z1 = _this_x;
		}
		let x4 = _this_y * _this_z1 - _this_z * _this_y1;
		let y4 = _this_z * _this_x1 - _this_x * _this_z1;
		let z4 = _this_x * _this_y1 - _this_y * _this_x1;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let _this_x2 = x5;
		let _this_y2 = y5;
		let _this_z2 = z5;
		m._11 = _this_x1;
		m._12 = _this_x2;
		m._13 = _this_x;
		m._14 = 0;
		m._21 = _this_y1;
		m._22 = _this_y2;
		m._23 = _this_y;
		m._24 = 0;
		m._31 = _this_z1;
		m._32 = _this_z2;
		m._33 = _this_z;
		m._34 = 0;
		let v1 = this.pos;
		m._41 = -(_this_x1 * v1.x + _this_y1 * v1.y + _this_z1 * v1.z);
		let v2 = this.pos;
		m._42 = -(_this_x2 * v2.x + _this_y2 * v2.y + _this_z2 * v2.z);
		let v3 = this.pos;
		m._43 = -(_this_x * v3.x + _this_y * v3.y + _this_z * v3.z);
		m._44 = 1;
	}
	setTransform(m) {
		let _this = this.pos;
		let x = m._41;
		let y = m._42;
		let z = m._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.target;
		let this1 = this.pos;
		let v = m.getDirection();
		let x1 = this1.x + v.x;
		let y1 = this1.y + v.y;
		let z1 = this1.z + v.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let x2 = x1;
		let y2 = y1;
		let z2 = z1;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let v_x = x2;
		let v_y = y2;
		let v_z = z2;
		_this1.x = v_x;
		_this1.y = v_y;
		_this1.z = v_z;
	}
	makeFrustumMatrix(m) {
		m.zero();
		let bounds = this.orthoBounds;
		if(bounds != null) {
			let w = 1 / (bounds.xMax - bounds.xMin);
			let h = 1 / (bounds.yMax - bounds.yMin);
			let d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			let degToRad = Math.PI / 180;
			let halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			let scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	project(x,y,z,screenWidth,screenHeight,snapToPixel,p) {
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		if(p == null) {
			p = new h3d.VectorImpl(0.,0.,0.);
		}
		let _this = p;
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this.x = x1;
		_this.y = y1;
		_this.z = z1;
		let _this1 = p;
		let m = this.m;
		let px = _this1.x * m._11 + _this1.y * m._21 + _this1.z * m._31 + m._41;
		let py = _this1.x * m._12 + _this1.y * m._22 + _this1.z * m._32 + m._42;
		let pz = _this1.x * m._13 + _this1.y * m._23 + _this1.z * m._33 + m._43;
		let iw = 1 / (_this1.x * m._14 + _this1.y * m._24 + _this1.z * m._34 + m._44);
		_this1.x = px * iw;
		_this1.y = py * iw;
		_this1.z = pz * iw;
		p.x = (p.x + 1) * 0.5 * screenWidth;
		p.y = (-p.y + 1) * 0.5 * screenHeight;
		if(snapToPixel) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		}
		return p;
	}
	distanceToDepth(dist) {
		let min = this.zNear;
		let max = this.zFar;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((this.zFar + this.zNear - 2.0 * this.zNear * this.zFar / (dist < min ? min : dist > max ? max : dist)) / (this.zFar - this.zNear) + 1.0) / 2.0;
	}
	depthToDistance(depth) {
		let min = 0;
		let max = 1;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((depth < min ? min : depth > max ? max : depth) * this.zFar - this.zNear * this.zFar) / (this.zFar - this.zNear);
	}
	load(cam) {
		let _this = this.pos;
		let v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		let _this1 = this.target;
		let v1 = cam.target;
		_this1.x = v1.x;
		_this1.y = v1.y;
		_this1.z = v1.z;
		let _this2 = this.up;
		let v2 = cam.up;
		_this2.x = v2.x;
		_this2.y = v2.y;
		_this2.z = v2.z;
		if(cam.orthoBounds != null) {
			this.orthoBounds = new h3d.col.Bounds();
			this.orthoBounds.load(cam.orthoBounds);
		} else {
			this.orthoBounds = null;
		}
		this.fovY = cam.fovY;
		this.screenRatio = cam.screenRatio;
		this.zoom = cam.zoom;
		this.zNear = cam.zNear;
		this.zFar = cam.zFar;
		if(cam.follow != null) {
			this.follow = { pos : cam.follow.pos, target : cam.follow.target};
		} else {
			this.follow = null;
		}
		this.viewX = cam.viewX;
		this.viewY = cam.viewY;
		this.update();
	}
}
$hxClasses["h3d.Camera"] = h3d.Camera;
h3d.Camera.__name__ = "h3d.Camera";
Object.assign(h3d.Camera.prototype, {
	__class__: h3d.Camera
});
h3d._Engine = {};
h3d._Engine.TargetTmp = class h3d__$Engine_TargetTmp {
	constructor(t,n,l,m,db) {
		this.t = t;
		this.next = n;
		this.layer = l;
		this.mipLevel = m;
		this.depthBinding = db;
	}
}
$hxClasses["h3d._Engine.TargetTmp"] = h3d._Engine.TargetTmp;
h3d._Engine.TargetTmp.__name__ = "h3d._Engine.TargetTmp";
Object.assign(h3d._Engine.TargetTmp.prototype, {
	__class__: h3d._Engine.TargetTmp
});
h3d.DepthBinding = $hxEnums["h3d.DepthBinding"] = { __ename__:true,__constructs__:null
	,ReadWrite: {_hx_name:"ReadWrite",_hx_index:0,__enum__:"h3d.DepthBinding",toString:$estr}
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:1,__enum__:"h3d.DepthBinding",toString:$estr}
	,DepthOnly: {_hx_name:"DepthOnly",_hx_index:2,__enum__:"h3d.DepthBinding",toString:$estr}
	,NotBound: {_hx_name:"NotBound",_hx_index:3,__enum__:"h3d.DepthBinding",toString:$estr}
};
h3d.DepthBinding.__constructs__ = [h3d.DepthBinding.ReadWrite,h3d.DepthBinding.ReadOnly,h3d.DepthBinding.DepthOnly,h3d.DepthBinding.NotBound];
h3d.DepthBinding.__empty_constructs__ = [h3d.DepthBinding.ReadWrite,h3d.DepthBinding.ReadOnly,h3d.DepthBinding.DepthOnly,h3d.DepthBinding.NotBound];
h3d.Engine = class h3d_Engine {
	constructor() {
		this.resCache = new haxe.ds.ObjectMap();
		this.ready = false;
		this.inRender = false;
		this.textureColorCache = new haxe.ds.IntMap();
		this.tmpVector = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.backgroundColor = -16777216;
		this.hardware = !h3d.Engine.SOFTWARE_DRIVER;
		this.antiAlias = h3d.Engine.ANTIALIASING;
		this.autoResize = true;
		this.set_fullScreen(!hxd.System.getValue(hxd.SystemValue.IsWindowed));
		this.window = hxd.Window.getInstance();
		this.realFps = hxd.System.getDefaultFrameRate();
		this.lastTime = HxOverrides.now() / 1000;
		this.window.addResizeEvent($bind(this,this.onWindowResize));
		this.driver = js.Browser.get_supported() ? new h3d.impl.GlDriver(this.antiAlias) : new h3d.impl.NullDriver();
		h3d.Engine.CURRENT = this;
	}
	setDriver(d) {
		this.driver = d;
		if(this.mem != null) {
			this.mem.driver = d;
		}
	}
	setCurrent() {
		h3d.Engine.CURRENT = this;
	}
	init() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	driverName(details) {
		if(details == null) {
			details = false;
		}
		return this.driver.getDriverName(details);
	}
	selectShader(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	selectMaterial(pass) {
		this.driver.selectMaterial(pass);
	}
	uploadShaderBuffers(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	selectBuffer(buf) {
		if(buf.vbuf == null) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	renderTriBuffer(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.getTriIndexes(b.vertices),3,start,max);
	}
	renderQuadBuffer(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.getQuadIndexes(b.vertices),2,start,max);
	}
	renderBuffer(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		let ntri = b.vertices / vertPerTri | 0;
		if(drawTri < 0) {
			drawTri = ntri - startTri;
		}
		if(startTri < 0 || drawTri < 0 || startTri + drawTri > ntri) {
			throw haxe.Exception.thrown("Invalid vertices count");
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	renderIndexed(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		let maxTri = indexes.vertices / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	renderMultiBuffers(format1,buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		let maxTri = indexes.vertices / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(format1,buffers);
		if(indexes.vbuf == null) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	renderInstanced(indexes,commands) {
		if(indexes.vbuf == null) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	set_debug(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	onCreate(disposed) {
		h3d.Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd.impl.Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d.impl.MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d.mat.Texture(0,0,[h3d.mat.TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d.impl.Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	onContextLost() {
	}
	onReady() {
	}
	onWindowResize() {
		if(this.autoResize && !this.driver.isDisposed()) {
			let w = this.window.get_width();
			let h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	set_fullScreen(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd.System.getValue(hxd.SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd.DisplayMode.Borderless : hxd.DisplayMode.Windowed);
		}
		return v;
	}
	onResized() {
	}
	resize(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	begin() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd.Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	hasFeature(f) {
		return this.driver.hasFeature(f);
	}
	end() {
		this.inRender = false;
		this.driver.end();
	}
	getCurrentTarget() {
		if(this.targetStack == null) {
			return null;
		} else if(this.targetStack.t == this.nullTexture) {
			return this.targetStack.textures[0];
		} else {
			return this.targetStack.t;
		}
	}
	pushTarget(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		let c = this.targetTmp;
		if(c == null) {
			c = new h3d._Engine.TargetTmp(tex,this.targetStack,layer,mipLevel,depthBinding);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
			c.depthBinding = depthBinding;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	updateNeedFlush() {
		let t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null || this.currentDepthBinding != t.depthBinding;
		}
	}
	pushTargets(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		this.pushTarget(this.nullTexture,null,null,depthBinding);
		this.targetStack.textures = textures;
		this.needFlushTarget = true;
	}
	pushDepth(depthBuffer) {
		this.pushTarget(depthBuffer,null,null,h3d.DepthBinding.DepthOnly);
	}
	popTarget() {
		let c = this.targetStack;
		if(c == null) {
			throw haxe.Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	flushTarget() {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
	}
	doFlushTarget() {
		let t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.depthBinding == h3d.DepthBinding.DepthOnly) {
				this.driver.setDepth(t.t);
			} else if(t.textures != null) {
				this.driver.setRenderTargets(t.textures,t.depthBinding);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel,t.depthBinding);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
			this.currentDepthBinding = t.depthBinding;
		}
		this.needFlushTarget = false;
	}
	clearF(color,depth,stencil) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color,depth,stencil);
	}
	clear(color,depth,stencil) {
		if(color != null) {
			let _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	setRenderZone(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	render(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		let delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			let curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			let f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	dispose() {
		this.driver.dispose();
		this.window.removeResizeEvent($bind(this,this.onWindowResize));
	}
	get_fps() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	static getCurrent() {
		return h3d.Engine.CURRENT;
	}
}
$hxClasses["h3d.Engine"] = h3d.Engine;
h3d.Engine.__name__ = "h3d.Engine";
Object.assign(h3d.Engine.prototype, {
	__class__: h3d.Engine
	,__properties__: {get_fps: "get_fps",set_fullScreen: "set_fullScreen",set_debug: "set_debug"}
});
h3d.Indexes = class h3d_Indexes {
	static _new(count,is32) {
		if(is32 == null) {
			is32 = false;
		}
		return new h3d.Buffer(count,is32 ? hxd.BufferFormat.get_INDEX32() : hxd.BufferFormat.get_INDEX16(),[h3d.BufferFlag.IndexBuffer]);
	}
	static uploadIndexes(this1,ibuf,bufPos,indices,startIndice) {
		if(startIndice == null) {
			startIndice = 0;
		}
		if(startIndice < 0 || indices < 0 || startIndice + indices > this1.vertices) {
			throw haxe.Exception.thrown("Invalid indices count");
		}
		if(this1.format.inputs[0].precision != 1) {
			throw haxe.Exception.thrown("Can't upload indexes on a 32-bit buffer");
		}
		if(indices == 0) {
			return;
		}
		h3d.Engine.CURRENT.driver.uploadIndexData(this1,startIndice,indices,ibuf,bufPos);
	}
	static get_count(this1) {
		return this1.vertices;
	}
	static alloc(i,startPos,length) {
		if(length == null) {
			length = -1;
		}
		if(startPos == null) {
			startPos = 0;
		}
		if(length < 0) {
			length = i.length;
		}
		let idx = h3d.Indexes._new(length);
		h3d.Indexes.uploadIndexes(idx,i,0,length);
		return idx;
	}
}
h3d.Indexes.__properties__ = {get_count: "get_count"};
h3d.MatrixImpl = class h3d_MatrixImpl {
	constructor() {
	}
	get_tx() {
		return this._41;
	}
	get_ty() {
		return this._42;
	}
	get_tz() {
		return this._43;
	}
	set_tx(v) {
		return this._41 = v;
	}
	set_ty(v) {
		return this._42 = v;
	}
	set_tz(v) {
		return this._43 = v;
	}
	equal(other) {
		if(this._11 == other._11 && this._12 == other._12 && this._13 == other._13 && this._14 == other._14 && this._21 == other._21 && this._22 == other._22 && this._23 == other._23 && this._24 == other._24 && this._31 == other._31 && this._32 == other._32 && this._33 == other._33 && this._34 == other._34 && this._41 == other._41 && this._42 == other._42 && this._43 == other._43) {
			return this._44 == other._44;
		} else {
			return false;
		}
	}
	zero() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	identity() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	isIdentity() {
		if(this._41 != 0 || this._42 != 0 || this._43 != 0) {
			return false;
		}
		if(this._11 != 1 || this._22 != 1 || this._33 != 1) {
			return false;
		}
		if(this._12 != 0 || this._13 != 0 || this._14 != 0) {
			return false;
		}
		if(this._21 != 0 || this._23 != 0 || this._24 != 0) {
			return false;
		}
		if(this._31 != 0 || this._32 != 0 || this._34 != 0) {
			return false;
		}
		return this._44 == 1;
	}
	isIdentityEpsilon(e) {
		let tmp;
		let tmp1;
		let f = this._41;
		if(!((f < 0 ? -f : f) > e)) {
			let f = this._42;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			let f = this._43;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		let tmp2;
		let tmp3;
		let f1 = this._11 - 1;
		if(!((f1 < 0 ? -f1 : f1) > e)) {
			let f = this._22 - 1;
			tmp3 = (f < 0 ? -f : f) > e;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			let f = this._33 - 1;
			tmp2 = (f < 0 ? -f : f) > e;
		} else {
			tmp2 = true;
		}
		if(tmp2) {
			return false;
		}
		let tmp4;
		let tmp5;
		let f2 = this._12;
		if(!((f2 < 0 ? -f2 : f2) > e)) {
			let f = this._13;
			tmp5 = (f < 0 ? -f : f) > e;
		} else {
			tmp5 = true;
		}
		if(!tmp5) {
			let f = this._14;
			tmp4 = (f < 0 ? -f : f) > e;
		} else {
			tmp4 = true;
		}
		if(tmp4) {
			return false;
		}
		let tmp6;
		let tmp7;
		let f3 = this._21;
		if(!((f3 < 0 ? -f3 : f3) > e)) {
			let f = this._23;
			tmp7 = (f < 0 ? -f : f) > e;
		} else {
			tmp7 = true;
		}
		if(!tmp7) {
			let f = this._24;
			tmp6 = (f < 0 ? -f : f) > e;
		} else {
			tmp6 = true;
		}
		if(tmp6) {
			return false;
		}
		let tmp8;
		let tmp9;
		let f4 = this._31;
		if(!((f4 < 0 ? -f4 : f4) > e)) {
			let f = this._32;
			tmp9 = (f < 0 ? -f : f) > e;
		} else {
			tmp9 = true;
		}
		if(!tmp9) {
			let f = this._34;
			tmp8 = (f < 0 ? -f : f) > e;
		} else {
			tmp8 = true;
		}
		if(tmp8) {
			return false;
		}
		let f5 = this._44 - 1;
		return (f5 < 0 ? -f5 : f5) <= e;
	}
	initRotationX(a) {
		let cos = Math.cos(a);
		let sin = Math.sin(a);
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = cos;
		this._23 = sin;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = -sin;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	initRotationY(a) {
		let cos = Math.cos(a);
		let sin = Math.sin(a);
		this._11 = cos;
		this._12 = 0.0;
		this._13 = -sin;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = sin;
		this._32 = 0.0;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	initRotationZ(a) {
		let cos = Math.cos(a);
		let sin = Math.sin(a);
		this._11 = cos;
		this._12 = sin;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = -sin;
		this._22 = cos;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	initTranslation(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = x;
		this._42 = y;
		this._43 = z;
		this._44 = 1.0;
	}
	initScale(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 = x;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = y;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = z;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	initRotationAxis(axis,angle) {
		let cos = Math.cos(angle);
		let sin = Math.sin(angle);
		let cos1 = 1 - cos;
		let x = -axis.x;
		let y = -axis.y;
		let z = -axis.z;
		let xx = x * x;
		let yy = y * y;
		let zz = z * z;
		let len = 1. / Math.sqrt(xx + yy + zz);
		x *= len;
		y *= len;
		z *= len;
		let xcos1 = x * cos1;
		let zcos1 = z * cos1;
		this._11 = cos + x * xcos1;
		this._12 = y * xcos1 - z * sin;
		this._13 = x * zcos1 + y * sin;
		this._14 = 0.;
		this._21 = y * xcos1 + z * sin;
		this._22 = cos + y * y * cos1;
		this._23 = y * zcos1 - x * sin;
		this._24 = 0.;
		this._31 = x * zcos1 - y * sin;
		this._32 = y * zcos1 + x * sin;
		this._33 = cos + z * zcos1;
		this._34 = 0.;
		this._41 = 0.;
		this._42 = 0.;
		this._43 = 0.;
		this._44 = 1.;
	}
	initRotation(x,y,z) {
		let cx = Math.cos(x);
		let sx = Math.sin(x);
		let cy = Math.cos(y);
		let sy = Math.sin(y);
		let cz = Math.cos(z);
		let sz = Math.sin(z);
		let cxsy = cx * sy;
		let sxsy = sx * sy;
		this._11 = cy * cz;
		this._12 = cy * sz;
		this._13 = -sy;
		this._14 = 0;
		this._21 = sxsy * cz - cx * sz;
		this._22 = sxsy * sz + cx * cz;
		this._23 = sx * cy;
		this._24 = 0;
		this._31 = cxsy * cz + sx * sz;
		this._32 = cxsy * sz - sx * cz;
		this._33 = cx * cy;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	translate(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 += x * this._14;
		this._12 += y * this._14;
		this._13 += z * this._14;
		this._21 += x * this._24;
		this._22 += y * this._24;
		this._23 += z * this._24;
		this._31 += x * this._34;
		this._32 += y * this._34;
		this._33 += z * this._34;
		this._41 += x * this._44;
		this._42 += y * this._44;
		this._43 += z * this._44;
	}
	scale(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 *= x;
		this._21 *= x;
		this._31 *= x;
		this._41 *= x;
		this._12 *= y;
		this._22 *= y;
		this._32 *= y;
		this._42 *= y;
		this._13 *= z;
		this._23 *= z;
		this._33 *= z;
		this._43 *= z;
	}
	rotate(x,y,z) {
		let tmp = h3d.MatrixImpl.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(this,tmp);
	}
	rotateAxis(axis,angle) {
		let tmp = h3d.MatrixImpl.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(this,tmp);
	}
	getPosition() {
		let v = new h3d.VectorImpl(0.,0.,0.);
		let _this = v;
		let x = this._41;
		let y = this._42;
		let z = this._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		return v;
	}
	setPosition(v) {
		this._41 = v.x;
		this._42 = v.y;
		this._43 = v.z;
	}
	prependTranslation(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let vx = this._11 * x + this._21 * y + this._31 * z + this._41;
		let vy = this._12 * x + this._22 * y + this._32 * z + this._42;
		let vz = this._13 * x + this._23 * y + this._33 * z + this._43;
		let vw = this._14 * x + this._24 * y + this._34 * z + this._44;
		this._41 = vx;
		this._42 = vy;
		this._43 = vz;
		this._44 = vw;
	}
	getScale() {
		let v = new h3d.VectorImpl(0.,0.,0.);
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		return v;
	}
	prependRotation(x,y,z) {
		let tmp = h3d.MatrixImpl.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(tmp,this);
	}
	prependRotationAxis(axis,angle) {
		let tmp = h3d.MatrixImpl.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(tmp,this);
	}
	prependScale(sx,sy,sz) {
		if(sz == null) {
			sz = 1.;
		}
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		let tmp = h3d.MatrixImpl.tmp;
		tmp.initScale(sx,sy,sz);
		this.multiply(tmp,this);
	}
	multiply3x4(a,b) {
		let m11 = a._11;
		let m12 = a._12;
		let m13 = a._13;
		let m21 = a._21;
		let m22 = a._22;
		let m23 = a._23;
		let a31 = a._31;
		let a32 = a._32;
		let a33 = a._33;
		let a41 = a._41;
		let a42 = a._42;
		let a43 = a._43;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	multiply3x4inline(a,b) {
		let m11 = a._11;
		let m12 = a._12;
		let m13 = a._13;
		let m21 = a._21;
		let m22 = a._22;
		let m23 = a._23;
		let a31 = a._31;
		let a32 = a._32;
		let a33 = a._33;
		let a41 = a._41;
		let a42 = a._42;
		let a43 = a._43;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	multiply(a,b) {
		let a11 = a._11;
		let a12 = a._12;
		let a13 = a._13;
		let a14 = a._14;
		let a21 = a._21;
		let a22 = a._22;
		let a23 = a._23;
		let a24 = a._24;
		let a31 = a._31;
		let a32 = a._32;
		let a33 = a._33;
		let a34 = a._34;
		let a41 = a._41;
		let a42 = a._42;
		let a43 = a._43;
		let a44 = a._44;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b14 = b._14;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b24 = b._24;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b34 = b._34;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		let b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	multiplyValue(v) {
		this._11 *= v;
		this._12 *= v;
		this._13 *= v;
		this._14 *= v;
		this._21 *= v;
		this._22 *= v;
		this._23 *= v;
		this._24 *= v;
		this._31 *= v;
		this._32 *= v;
		this._33 *= v;
		this._34 *= v;
		this._41 *= v;
		this._42 *= v;
		this._43 *= v;
		this._44 *= v;
	}
	invert() {
		this.initInverse(this);
	}
	getInverse(m) {
		if(m == null) {
			m = new h3d.MatrixImpl();
		}
		m.initInverse(this);
		return m;
	}
	getDeterminant() {
		return this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31);
	}
	inverse3x4(m) {
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let m31 = m._31;
		let m32 = m._32;
		let m33 = m._33;
		let m41 = m._41;
		let m42 = m._42;
		let m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		let det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		let invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	initInverse(m) {
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m14 = m._14;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let m24 = m._24;
		let m31 = m._31;
		let m32 = m._32;
		let m33 = m._33;
		let m34 = m._34;
		let m41 = m._41;
		let m42 = m._42;
		let m43 = m._43;
		let m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		let det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	initInverse3x3(m) {
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let m31 = m._31;
		let m32 = m._32;
		let m33 = m._33;
		this._11 = m22 * m33 - m32 * m23;
		this._12 = -m12 * m33 + m32 * m13;
		this._13 = m12 * m23 - m22 * m13;
		this._21 = -m21 * m33 + m31 * m23;
		this._22 = m11 * m33 - m31 * m13;
		this._23 = -m11 * m23 + m21 * m13;
		this._31 = m21 * m32 - m31 * m22;
		this._32 = -m11 * m32 + m31 * m12;
		this._33 = m11 * m22 - m21 * m12;
		let det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 = 0;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 = 0;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	front() {
		let x = this._11;
		let y = this._12;
		let z = this._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let v = new h3d.VectorImpl(x,y,z);
		let _this = v;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		return v;
	}
	right() {
		let x = this._21;
		let y = this._22;
		let z = this._23;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let v = new h3d.VectorImpl(x,y,z);
		let _this = v;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		return v;
	}
	up() {
		let x = this._31;
		let y = this._32;
		let z = this._33;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let v = new h3d.VectorImpl(x,y,z);
		let _this = v;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		return v;
	}
	transpose() {
		let tmp = this._12;
		this._12 = this._21;
		this._21 = tmp;
		tmp = this._13;
		this._13 = this._31;
		this._31 = tmp;
		tmp = this._14;
		this._14 = this._41;
		this._41 = tmp;
		tmp = this._23;
		this._23 = this._32;
		this._32 = tmp;
		tmp = this._24;
		this._24 = this._42;
		this._42 = tmp;
		tmp = this._34;
		this._34 = this._43;
		this._43 = tmp;
	}
	clone() {
		let m = new h3d.MatrixImpl();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	load(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	loadValues(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	getFloats() {
		return [this._11,this._12,this._13,this._14,this._21,this._22,this._23,this._24,this._31,this._32,this._33,this._34,this._41,this._42,this._43,this._44];
	}
	getDirection() {
		let q = new h3d.Quat();
		q.initRotateMatrix(this);
		q.normalize();
		let x = 1 - 2 * (q.y * q.y + q.z * q.z);
		let y = 2 * (q.x * q.y + q.z * q.w);
		let z = 2 * (q.x * q.z - q.y * q.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getEulerAngles() {
		let m = this.clone();
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let s_x = x;
		let s_y = y;
		let s_z = z;
		s_x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		s_y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		s_z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		m.prependScale(1.0 / s_x,1.0 / s_y,1.0 / s_z);
		let cy = Math.sqrt(m._11 * m._11 + m._12 * m._12);
		if(cy > 0.01) {
			let x = Math.atan2(m._23,m._33);
			let y = Math.atan2(-m._13,cy);
			let z = Math.atan2(m._12,m._11);
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let v1 = new h3d.VectorImpl(x,y,z);
			let x1 = Math.atan2(-m._23,-m._33);
			let y1 = Math.atan2(-m._13,-cy);
			let z1 = Math.atan2(-m._12,-m._11);
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let v2 = new h3d.VectorImpl(x1,y1,z1);
			let _this = v1;
			let _this1 = v2;
			if(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z < _this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z) {
				return v1;
			} else {
				return v2;
			}
		} else {
			let x = Math.atan2(-m._32,m._22);
			let y = Math.atan2(-m._13,cy);
			let z = 0.0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h3d.VectorImpl(x,y,z);
		}
	}
	toString() {
		return "MAT=[\n" + "  [ " + hxd.Math.fmt(this._11) + ", " + hxd.Math.fmt(this._12) + ", " + hxd.Math.fmt(this._13) + ", " + hxd.Math.fmt(this._14) + " ]\n" + "  [ " + hxd.Math.fmt(this._21) + ", " + hxd.Math.fmt(this._22) + ", " + hxd.Math.fmt(this._23) + ", " + hxd.Math.fmt(this._24) + " ]\n" + "  [ " + hxd.Math.fmt(this._31) + ", " + hxd.Math.fmt(this._32) + ", " + hxd.Math.fmt(this._33) + ", " + hxd.Math.fmt(this._34) + " ]\n" + "  [ " + hxd.Math.fmt(this._41) + ", " + hxd.Math.fmt(this._42) + ", " + hxd.Math.fmt(this._43) + ", " + hxd.Math.fmt(this._44) + " ]\n" + "]";
	}
	colorHue(hue) {
		if(hue == 0.) {
			return;
		}
		let cosA = Math.cos(-hue);
		let sinA = Math.sin(-hue);
		let ch = (1 - cosA) / 3;
		let tmp = h3d.MatrixImpl.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	colorSaturate(sat) {
		++sat;
		let ins = 1 - sat;
		let r = ins * 0.212671;
		let g = ins * 0.71516;
		let b = ins * 0.072169;
		let tmp = h3d.MatrixImpl.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	colorContrast(contrast) {
		let tmp = h3d.MatrixImpl.tmp;
		let v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	colorLightness(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	colorGain(color,alpha) {
		let tmp = h3d.MatrixImpl.tmp;
		tmp._11 = 1 - alpha;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = 1 - alpha;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = 1 - alpha;
		tmp._41 = (color >> 16 & 255) / 255 * alpha;
		tmp._42 = (color >> 8 & 255) / 255 * alpha;
		tmp._43 = (color & 255) / 255 * alpha;
		this.multiply3x4(this,tmp);
	}
	colorBits(bits,blend) {
		let t11 = 0.;
		let t12 = 0.;
		let t13 = 0.;
		let t21 = 0.;
		let t22 = 0.;
		let t23 = 0.;
		let t31 = 0.;
		let t32 = 0.;
		let t33 = 0.;
		let c = bits;
		if((c & 1) == 1) {
			t11 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t12 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t13 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t21 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t22 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t23 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t31 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t32 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t33 = 1;
		}
		c >>= 1;
		let r = t11 + t21 + t31;
		let g = t12 + t22 + t32;
		let b = t13 + t23 + t33;
		if(r > 1) {
			t11 /= r;
			t21 /= r;
			t31 /= r;
		}
		if(g > 1) {
			t12 /= g;
			t22 /= g;
			t32 /= g;
		}
		if(b > 1) {
			t13 /= b;
			t23 /= b;
			t33 /= b;
		}
		let b11 = this._11 * t11 + this._12 * t21 + this._13 * t31;
		let b12 = this._11 * t12 + this._12 * t22 + this._13 * t32;
		let b13 = this._11 * t13 + this._12 * t23 + this._13 * t33;
		let b21 = this._21 * t11 + this._22 * t21 + this._23 * t31;
		let b22 = this._21 * t12 + this._22 * t22 + this._23 * t32;
		let b23 = this._21 * t13 + this._22 * t23 + this._23 * t33;
		let b31 = this._31 * t11 + this._32 * t21 + this._33 * t31;
		let b32 = this._31 * t12 + this._32 * t22 + this._33 * t32;
		let b33 = this._31 * t13 + this._32 * t23 + this._33 * t33;
		let ik = blend;
		let k = 1 - ik;
		this._11 = this._11 * k + b11 * ik;
		this._12 = this._12 * k + b12 * ik;
		this._13 = this._13 * k + b13 * ik;
		this._21 = this._21 * k + b21 * ik;
		this._22 = this._22 * k + b22 * ik;
		this._23 = this._23 * k + b23 * ik;
		this._31 = this._31 * k + b31 * ik;
		this._32 = this._32 * k + b32 * ik;
		this._33 = this._33 * k + b33 * ik;
	}
	colorAdd(c) {
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	colorSet(c,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.zero();
		this._44 = alpha;
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	adjustColor(col) {
		if(col.hue != null) {
			this.colorHue(col.hue);
		}
		if(col.saturation != null) {
			this.colorSaturate(col.saturation);
		}
		if(col.contrast != null) {
			this.colorContrast(col.contrast);
		}
		if(col.lightness != null) {
			this.colorLightness(col.lightness);
		}
		if(col.gain != null) {
			this.colorGain(col.gain.color,col.gain.alpha);
		}
	}
	toMatrix2D(m) {
		if(m == null) {
			m = new h2d.col.Matrix();
		}
		m.a = this._11;
		m.b = this._12;
		m.c = this._21;
		m.d = this._22;
		m.x = this._41;
		m.y = this._42;
		return m;
	}
}
$hxClasses["h3d.MatrixImpl"] = h3d.MatrixImpl;
h3d.MatrixImpl.__name__ = "h3d.MatrixImpl";
Object.assign(h3d.MatrixImpl.prototype, {
	__class__: h3d.MatrixImpl
	,__properties__: {set_tz: "set_tz",get_tz: "get_tz",set_ty: "set_ty",get_ty: "get_ty",set_tx: "set_tx",get_tx: "get_tx"}
});
h3d.Matrix = class h3d_Matrix {
	static _new() {
		return new h3d.MatrixImpl();
	}
	static multiplied(this1,m) {
		let mout = new h3d.MatrixImpl();
		mout.multiply(this1,m);
		return mout;
	}
	static I() {
		let m = new h3d.MatrixImpl();
		m.identity();
		return m;
	}
	static L(a) {
		let m = new h3d.MatrixImpl();
		m.loadValues(a);
		return m;
	}
	static T(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let m = new h3d.MatrixImpl();
		m.initTranslation(x,y,z);
		return m;
	}
	static R(x,y,z) {
		let m = new h3d.MatrixImpl();
		m.initRotation(x,y,z);
		return m;
	}
	static S(x,y,z) {
		if(z == null) {
			z = 1.0;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		let m = new h3d.MatrixImpl();
		m.initScale(x,y,z);
		return m;
	}
	static lookAtX(dir,up,m) {
		if(up == null) {
			let x = 0;
			let y = 0;
			let z = 1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			up = new h3d.VectorImpl(x,y,z);
		}
		if(m == null) {
			m = new h3d.MatrixImpl();
		}
		let _this = dir;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		let x = _this.x * k;
		let y = _this.y * k;
		let z = _this.z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let _this1 = up;
		let x2 = _this1.y * _this_z - _this1.z * _this_y;
		let y2 = _this1.z * _this_x - _this1.x * _this_z;
		let z2 = _this1.x * _this_y - _this1.y * _this_x;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x1 = x3;
		let _this_y1 = y3;
		let _this_z1 = z3;
		let k1 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k1 < 1e-20) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		let x4 = _this_x1 * k1;
		let y4 = _this_y1 * k1;
		let z4 = _this_z1 * k1;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let _this_x2 = x5;
		let _this_y2 = y5;
		let _this_z2 = z5;
		if(_this_x2 * _this_x2 + _this_y2 * _this_y2 + _this_z2 * _this_z2 < 1e-20) {
			_this_x2 = _this_y;
			_this_y2 = _this_z;
			_this_z2 = _this_x;
		}
		let x6 = _this_y * _this_z2 - _this_z * _this_y2;
		let y6 = _this_z * _this_x2 - _this_x * _this_z2;
		let z6 = _this_x * _this_y2 - _this_y * _this_x2;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let x7 = x6;
		let y7 = y6;
		let z7 = z6;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let az_x = x7;
		let az_y = y7;
		let az_z = z7;
		m._11 = _this_x;
		m._12 = _this_y;
		m._13 = _this_z;
		m._14 = 0;
		m._21 = _this_x2;
		m._22 = _this_y2;
		m._23 = _this_z2;
		m._24 = 0;
		m._31 = az_x;
		m._32 = az_y;
		m._33 = az_z;
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
}
h3d.Quat = class h3d_Quat {
	constructor(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	set(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	identity() {
		this.x = this.y = this.z = 0;
		this.w = 1;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	load(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	clone() {
		return new h3d.Quat(this.x,this.y,this.z,this.w);
	}
	initMoveTo(from,to) {
		let hx = from.x + to.x;
		let hy = from.y + to.y;
		let hz = from.z + to.z;
		let h = 1. / Math.sqrt(hx * hx + hy * hy + hz * hz);
		this.x = from.y * hz - from.z * hy;
		this.y = from.z * hx - from.x * hz;
		this.z = from.x * hy - from.y * hx;
		this.w = from.x * hx + from.y * hy + from.z * hz;
		this.normalize();
	}
	initNormal(dir) {
		let _this = dir;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		let x = _this.x * k;
		let y = _this.y * k;
		let z = _this.z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		if(_this_x * _this_x + _this_y * _this_y < 1e-20) {
			let x = 1;
			let y = 0;
			let z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			this.initDirection(new h3d.VectorImpl(x,y,z));
		} else {
			let x = _this_x;
			let y = _this_y;
			let z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let _this_x1 = x1;
			let _this_y1 = y1;
			let _this_z1 = z1;
			let k = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			let x2 = _this_x1 * k;
			let y2 = _this_y1 * k;
			let z2 = _this_z1 * k;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let x3 = x2;
			let y3 = y2;
			let z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let ay_x = x3;
			let ay_y = y3;
			let ay_z = z3;
			let x4 = _this_y * ay_z - _this_z * ay_y;
			let y4 = _this_z * ay_x - _this_x * ay_z;
			let z4 = _this_x * ay_y - _this_y * ay_x;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let x5 = x4;
			let y5 = y4;
			let z5 = z4;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let az_x = x5;
			let az_y = y5;
			let az_z = z5;
			let x6 = _this_y * az_z - _this_z * az_y;
			let y6 = _this_z * az_x - _this_x * az_z;
			let z6 = _this_x * az_y - _this_y * az_x;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let x7 = x6;
			let y7 = y6;
			let z7 = z6;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let this_x = x7;
			let this_y = y7;
			let this_z = z7;
			let x8 = this_x;
			let y8 = this_y;
			let z8 = this_z;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			this.initDirection(new h3d.VectorImpl(x8,y8,z8));
		}
	}
	initDirection(dir,up) {
		let _this = dir;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		let x2 = _this_x * k;
		let y2 = _this_y * k;
		let z2 = _this_z * k;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x1 = x3;
		let _this_y1 = y3;
		let _this_z1 = z3;
		let x4 = -_this_y1;
		let y4 = _this_x1;
		let z4 = 0;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let _this_x2 = x5;
		let _this_y2 = y5;
		let _this_z2 = z5;
		if(up != null) {
			let _this = up;
			let x = _this.y * _this_z1 - _this.z * _this_y1;
			let y = _this.z * _this_x1 - _this.x * _this_z1;
			let z = _this.x * _this_y1 - _this.y * _this_x1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let v_x = x1;
			let v_y = y1;
			let v_z = z1;
			_this_x2 = v_x;
			_this_y2 = v_y;
			_this_z2 = v_z;
		}
		let k1 = _this_x2 * _this_x2 + _this_y2 * _this_y2 + _this_z2 * _this_z2;
		if(k1 < 1e-20) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		_this_x2 *= k1;
		_this_y2 *= k1;
		_this_z2 *= k1;
		if(_this_x2 * _this_x2 + _this_y2 * _this_y2 + _this_z2 * _this_z2 < 1e-20) {
			_this_x2 = _this_y1;
			_this_y2 = _this_z1;
			_this_z2 = _this_x1;
		}
		let x6 = _this_y1 * _this_z2 - _this_z1 * _this_y2;
		let y6 = _this_z1 * _this_x2 - _this_x1 * _this_z2;
		let z6 = _this_x1 * _this_y2 - _this_y1 * _this_x2;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let x7 = x6;
		let y7 = y6;
		let z7 = z6;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let az_x = x7;
		let az_y = y7;
		let az_z = z7;
		let tr = _this_x1 + _this_y2 + az_z;
		if(tr > 0) {
			let s = Math.sqrt(tr + 1.0) * 2;
			let ins = 1 / s;
			this.x = (_this_z2 - az_y) * ins;
			this.y = (az_x - _this_z1) * ins;
			this.z = (_this_y1 - _this_x2) * ins;
			this.w = 0.25 * s;
		} else if(_this_x1 > _this_y2 && _this_x1 > az_z) {
			let s = Math.sqrt(1.0 + _this_x1 - _this_y2 - az_z) * 2;
			let ins = 1 / s;
			this.x = 0.25 * s;
			this.y = (_this_x2 + _this_y1) * ins;
			this.z = (az_x + _this_z1) * ins;
			this.w = (_this_z2 - az_y) * ins;
		} else if(_this_y2 > az_z) {
			let s = Math.sqrt(1.0 + _this_y2 - _this_x1 - az_z) * 2;
			let ins = 1 / s;
			this.x = (_this_x2 + _this_y1) * ins;
			this.y = 0.25 * s;
			this.z = (az_y + _this_z2) * ins;
			this.w = (az_x - _this_z1) * ins;
		} else {
			let s = Math.sqrt(1.0 + az_z - _this_x1 - _this_y2) * 2;
			let ins = 1 / s;
			this.x = (az_x + _this_z1) * ins;
			this.y = (az_y + _this_z2) * ins;
			this.z = 0.25 * s;
			this.w = (_this_y1 - _this_x2) * ins;
		}
	}
	initRotateAxis(x,y,z,a) {
		let sin = Math.sin(a / 2);
		let cos = Math.cos(a / 2);
		this.x = x * sin;
		this.y = y * sin;
		this.z = z * sin;
		this.w = cos * Math.sqrt(x * x + y * y + z * z);
		this.normalize();
	}
	initRotateMatrix(m) {
		let tr = m._11 + m._22 + m._33;
		if(tr > 0) {
			let s = Math.sqrt(tr + 1.0) * 2;
			let ins = 1 / s;
			this.x = (m._23 - m._32) * ins;
			this.y = (m._31 - m._13) * ins;
			this.z = (m._12 - m._21) * ins;
			this.w = 0.25 * s;
		} else if(m._11 > m._22 && m._11 > m._33) {
			let s = Math.sqrt(1.0 + m._11 - m._22 - m._33) * 2;
			let ins = 1 / s;
			this.x = 0.25 * s;
			this.y = (m._21 + m._12) * ins;
			this.z = (m._31 + m._13) * ins;
			this.w = (m._23 - m._32) * ins;
		} else if(m._22 > m._33) {
			let s = Math.sqrt(1.0 + m._22 - m._11 - m._33) * 2;
			let ins = 1 / s;
			this.x = (m._21 + m._12) * ins;
			this.y = 0.25 * s;
			this.z = (m._32 + m._23) * ins;
			this.w = (m._31 - m._13) * ins;
		} else {
			let s = Math.sqrt(1.0 + m._33 - m._11 - m._22) * 2;
			let ins = 1 / s;
			this.x = (m._31 + m._13) * ins;
			this.y = (m._32 + m._23) * ins;
			this.z = 0.25 * s;
			this.w = (m._12 - m._21) * ins;
		}
	}
	normalize() {
		let len = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		if(len < 1e-20) {
			this.x = this.y = this.z = 0;
			this.w = 1;
		} else {
			let m = 1. / Math.sqrt(len);
			this.x *= m;
			this.y *= m;
			this.z *= m;
			this.w *= m;
		}
	}
	initRotation(ax,ay,az) {
		let sinX = Math.sin(ax * 0.5);
		let cosX = Math.cos(ax * 0.5);
		let sinY = Math.sin(ay * 0.5);
		let cosY = Math.cos(ay * 0.5);
		let sinZ = Math.sin(az * 0.5);
		let cosZ = Math.cos(az * 0.5);
		let cosYZ = cosY * cosZ;
		let sinYZ = sinY * sinZ;
		this.x = sinX * cosYZ - cosX * sinYZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
		this.w = cosX * cosYZ + sinX * sinYZ;
	}
	multiply(q1,q2) {
		let x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		let y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		let z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		let w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	toEuler() {
		return this.toMatrix().getEulerAngles();
	}
	lerp(q1,q2,v,nearest) {
		if(nearest == null) {
			nearest = false;
		}
		let v2 = 1 - v;
		if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
			v = -v;
		}
		let x = q1.x * v2 + q2.x * v;
		let y = q1.y * v2 + q2.y * v;
		let z = q1.z * v2 + q2.z * v;
		let w = q1.w * v2 + q2.w * v;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	slerp(q1,q2,v) {
		let cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
		if((cosHalfTheta < 0 ? -cosHalfTheta : cosHalfTheta) >= 1) {
			this.x = q1.x;
			this.y = q1.y;
			this.z = q1.z;
			this.w = q1.w;
			return;
		}
		let halfTheta = Math.acos(cosHalfTheta);
		let invSinHalfTheta = 1. / Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
		if((invSinHalfTheta < 0 ? -invSinHalfTheta : invSinHalfTheta) > 1e3) {
			let v = 0.5;
			let nearest = true;
			if(nearest == null) {
				nearest = false;
			}
			let v2 = 1 - v;
			if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
				v = -v;
			}
			let x = q1.x * v2 + q2.x * v;
			let y = q1.y * v2 + q2.y * v;
			let z = q1.z * v2 + q2.z * v;
			let w = q1.w * v2 + q2.w * v;
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return;
		}
		let a = Math.sin((1 - v) * halfTheta) * invSinHalfTheta;
		let b = Math.sin(v * halfTheta) * invSinHalfTheta * (cosHalfTheta < 0 ? -1 : 1);
		this.x = q1.x * a + q2.x * b;
		this.y = q1.y * a + q2.y * b;
		this.z = q1.z * a + q2.z * b;
		this.w = q1.w * a + q2.w * b;
	}
	conjugate() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	pow(v) {
		let r = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		let t = r > 1e-10 ? Math.atan2(r,this.w) / r : 0;
		this.w = 0.5 * Math.log(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= t;
		this.y *= t;
		this.z *= t;
		this.x *= v;
		this.y *= v;
		this.z *= v;
		this.w *= v;
		let r1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		let et = Math.exp(this.w);
		let s = r1 > 1e-10 ? et * Math.sin(r1) / r1 : 0;
		this.w = et * Math.cos(r1);
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	negate() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		this.w = -this.w;
	}
	dot(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	getDirection() {
		let x = 1 - 2 * (this.y * this.y + this.z * this.z);
		let y = 2 * (this.x * this.y + this.z * this.w);
		let z = 2 * (this.x * this.z - this.y * this.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getUpAxis() {
		let x = 2 * (this.x * this.z + this.y * this.w);
		let y = 2 * (this.y * this.z - this.x * this.w);
		let z = 1 - 2 * (this.x * this.x + this.y * this.y);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	toMatrix(m) {
		if(m == null) {
			m = new h3d.MatrixImpl();
		}
		let xx = this.x * this.x;
		let xy = this.x * this.y;
		let xz = this.x * this.z;
		let xw = this.x * this.w;
		let yy = this.y * this.y;
		let yz = this.y * this.z;
		let yw = this.y * this.w;
		let zz = this.z * this.z;
		let zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	toString() {
		return "{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "," + hxd.Math.fmt(this.z) + "," + hxd.Math.fmt(this.w) + "}";
	}
}
$hxClasses["h3d.Quat"] = h3d.Quat;
h3d.Quat.__name__ = "h3d.Quat";
Object.assign(h3d.Quat.prototype, {
	__class__: h3d.Quat
});
h3d.VectorImpl = class h3d_VectorImpl {
	constructor(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	distance(v) {
		let dx = v.x - this.x;
		let dy = v.y - this.y;
		let dz = v.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	distanceSq(v) {
		let dx = v.x - this.x;
		let dy = v.y - this.y;
		let dz = v.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	sub(v) {
		let x = this.x - v.x;
		let y = this.y - v.y;
		let z = this.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	add(v) {
		let x = this.x + v.x;
		let y = this.y + v.y;
		let z = this.z + v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	scaled(v) {
		let x = this.x * v;
		let y = this.y * v;
		let z = this.z * v;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	equals(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	cross(v) {
		let x = this.y * v.z - this.z * v.y;
		let y = this.z * v.x - this.x * v.z;
		let z = this.x * v.y - this.y * v.x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	dot(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	normalize() {
		let k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	normalized() {
		let k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		let x = this.x * k;
		let y = this.y * k;
		let z = this.z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	packNormal() {
		this.x = this.x * 0.5 + 0.5;
		this.y = this.y * 0.5 + 0.5;
		this.z = this.z * 0.5 + 0.5;
	}
	unpackNormal() {
		this.x = this.x * 2.0 - 1.0;
		this.y = this.y * 2.0 - 1.0;
		this.z = this.z * 2.0 - 1.0;
	}
	normalStrength(strength) {
		let k = 1.0 / strength;
		this.x *= k;
		this.y *= k;
		let k1 = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k1 < 1e-20) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		this.x *= k1;
		this.y *= k1;
		this.z *= k1;
	}
	set(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	load(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	}
	scale(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	lerp(v1,v2,k) {
		let a = v1.x;
		this.x = a + k * (v2.x - a);
		let a1 = v1.y;
		this.y = a1 + k * (v2.y - a1);
		let a2 = v1.z;
		this.z = a2 + k * (v2.z - a2);
	}
	transform(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	transformed(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		let x = px;
		let y = py;
		let z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	transform3x3(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	transformed3x3(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		let x = px;
		let y = py;
		let z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	clone() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	toVector4() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,1.);
	}
	toString() {
		return "{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "," + hxd.Math.fmt(this.z) + "}";
	}
	reflect(n) {
		let k = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		let x = this.x - k * n.x;
		let y = this.y - k * n.y;
		let z = this.z - k * n.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	project(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		let iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
	}
	get_r() {
		return this.x;
	}
	get_g() {
		return this.y;
	}
	get_b() {
		return this.z;
	}
	set_r(v) {
		return this.x = v;
	}
	set_g(v) {
		return this.y = v;
	}
	set_b(v) {
		return this.z = v;
	}
	setColor(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
	}
	makeColor(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		let r = hue % 6.28318530717958623;
		hue = r >= 0 ? r : r + 6.28318530717958623;
		let f = 2 * brightness - 1;
		let c = (1 - (f < 0 ? -f : f)) * saturation;
		let f1 = hue * 3 / 3.14159265358979323 % 2. - 1;
		let x = c * (1 - (f1 < 0 ? -f1 : f1));
		let m = brightness - c / 2;
		if(hue < 1.04719755119659763) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.09439510239319526) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.18879020478639053) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.23598775598298882) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
	}
	toColor() {
		let f = this.x;
		let f1 = this.y;
		let f2 = this.z;
		return -16777216 | ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 16 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 8 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0);
	}
	toColorHSL() {
		let a = this.x;
		let b = this.y;
		let a1 = a < b ? b : a;
		let b1 = this.z;
		let max = a1 < b1 ? b1 : a1;
		let a2 = this.x;
		let b2 = this.y;
		let a3 = a2 > b2 ? b2 : a2;
		let b3 = this.z;
		let min = a3 > b3 ? b3 : a3;
		let h;
		let s;
		let l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			let d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.04719755119659763;
		}
		let x = h;
		let y = s;
		let z = l;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
}
$hxClasses["h3d.VectorImpl"] = h3d.VectorImpl;
h3d.VectorImpl.__name__ = "h3d.VectorImpl";
Object.assign(h3d.VectorImpl.prototype, {
	__class__: h3d.VectorImpl
	,__properties__: {set_b: "set_b",get_b: "get_b",set_g: "set_g",get_g: "get_g",set_r: "set_r",get_r: "get_r"}
});
h3d.Vector = class h3d_Vector {
	static _new(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static sub(this1,v) {
		let x = this1.x - v.x;
		let y = this1.y - v.y;
		let z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static add(this1,v) {
		let x = this1.x + v.x;
		let y = this1.y + v.y;
		let z = this1.z + v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static transform(this1,m) {
		let px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + m._41;
		let py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + m._42;
		let pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + m._43;
		this1.x = px;
		this1.y = py;
		this1.z = pz;
	}
	static transformed(this1,m) {
		let px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + m._41;
		let py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + m._42;
		let pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + m._43;
		let x = px;
		let y = py;
		let z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static toPoint(this1) {
		let x = this1.x;
		let y = this1.y;
		let z = this1.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static toVector(this1) {
		let x = this1.x;
		let y = this1.y;
		let z = this1.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static scale(this1,v) {
		this1.x *= v;
		this1.y *= v;
		this1.z *= v;
	}
	static scaled(this1,v) {
		let x = this1.x * v;
		let y = this1.y * v;
		let z = this1.z * v;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static scaledInv(f,v) {
		let x = v.x * f;
		let y = v.y * f;
		let z = v.z * f;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static fromColor(c,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		let s = scale / 255;
		let x = (c >> 16 & 255) * s;
		let y = (c >> 8 & 255) * s;
		let z = (c & 255) * s;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	static fromArray(a) {
		let r = new h3d.VectorImpl(0.,0.,0.);
		if(a.length > 0) {
			r.x = a[0];
		}
		if(a.length > 1) {
			r.y = a[1];
		}
		if(a.length > 2) {
			r.z = a[2];
		}
		return r;
	}
}
h3d.Vector4Impl = class h3d_Vector4Impl {
	constructor(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	dot4(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	dot3(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	scale3(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	sub(v) {
		let x = this.x - v.x;
		let y = this.y - v.y;
		let z = this.z - v.z;
		let w = this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	add(v) {
		let x = this.x + v.x;
		let y = this.y + v.y;
		let z = this.z + v.z;
		let w = this.w + v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	equals(v) {
		if(this.x == v.x && this.y == v.y && this.z == v.z) {
			return this.w == v.w;
		} else {
			return false;
		}
	}
	cross(v) {
		let x = this.y * v.z - this.z * v.y;
		let y = this.z * v.x - this.x * v.z;
		let z = this.x * v.y - this.y * v.x;
		let w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	set(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	load(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	lerp(v1,v2,k) {
		let a = v1.x;
		this.x = a + k * (v2.x - a);
		let a1 = v1.y;
		this.y = a1 + k * (v2.y - a1);
		let a2 = v1.z;
		this.z = a2 + k * (v2.z - a2);
		let a3 = v1.w;
		this.w = a3 + k * (v2.w - a3);
	}
	transform(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		let pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		this.x = px;
		this.y = py;
		this.z = pz;
		this.w = pw;
	}
	transformed(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		let pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		let x = px;
		let y = py;
		let z = pz;
		let w = pw;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	transform3x4(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	transformed3x4(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		let x = px;
		let y = py;
		let z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,1.);
	}
	transform3x3(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	transformed3x3(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		let x = px;
		let y = py;
		let z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,1.);
	}
	clone() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		let w = this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	toVector() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	toString() {
		return "{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "," + hxd.Math.fmt(this.z) + "," + hxd.Math.fmt(this.w) + "}";
	}
	project(m) {
		let px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		let py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		let pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		let iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
		this.w = 1;
	}
	get_r() {
		return this.x;
	}
	get_g() {
		return this.y;
	}
	get_b() {
		return this.z;
	}
	get_a() {
		return this.w;
	}
	set_r(v) {
		return this.x = v;
	}
	set_g(v) {
		return this.y = v;
	}
	set_b(v) {
		return this.z = v;
	}
	set_a(v) {
		return this.w = v;
	}
	setColor(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
		this.w = (c >>> 24) / 255;
	}
	makeColor(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		let r = hue % 6.28318530717958623;
		hue = r >= 0 ? r : r + 6.28318530717958623;
		let f = 2 * brightness - 1;
		let c = (1 - (f < 0 ? -f : f)) * saturation;
		let f1 = hue * 3 / 3.14159265358979323 % 2. - 1;
		let x = c * (1 - (f1 < 0 ? -f1 : f1));
		let m = brightness - c / 2;
		if(hue < 1.04719755119659763) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.09439510239319526) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.18879020478639053) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.23598775598298882) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
		this.w = 1;
	}
	toColor() {
		let f = this.w;
		let f1 = this.x;
		let f2 = this.y;
		let f3 = this.z;
		return ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
	}
	toColorHSL() {
		let a = this.x;
		let b = this.y;
		let a1 = a < b ? b : a;
		let b1 = this.z;
		let max = a1 < b1 ? b1 : a1;
		let a2 = this.x;
		let b2 = this.y;
		let a3 = a2 > b2 ? b2 : a2;
		let b3 = this.z;
		let min = a3 > b3 ? b3 : a3;
		let h;
		let s;
		let l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			let d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.04719755119659763;
		}
		let x = h;
		let y = s;
		let z = l;
		let w = this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
}
$hxClasses["h3d.Vector4Impl"] = h3d.Vector4Impl;
h3d.Vector4Impl.__name__ = "h3d.Vector4Impl";
Object.assign(h3d.Vector4Impl.prototype, {
	__class__: h3d.Vector4Impl
	,__properties__: {set_a: "set_a",get_a: "get_a",set_b: "set_b",get_b: "get_b",set_g: "set_g",get_g: "get_g",set_r: "set_r",get_r: "get_r"}
});
h3d.Vector4 = class h3d_Vector4 {
	static _new(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	static sub(this1,v) {
		let x = this1.x - v.x;
		let y = this1.y - v.y;
		let z = this1.z - v.z;
		let w = this1.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	static add(this1,v) {
		let x = this1.x + v.x;
		let y = this1.y + v.y;
		let z = this1.z + v.z;
		let w = this1.w + v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	static transform(this1,m) {
		let px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + this1.w * m._41;
		let py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + this1.w * m._42;
		let pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + this1.w * m._43;
		let pw = this1.x * m._14 + this1.y * m._24 + this1.z * m._34 + this1.w * m._44;
		this1.x = px;
		this1.y = py;
		this1.z = pz;
		this1.w = pw;
	}
	static transformed(this1,m) {
		let px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + this1.w * m._41;
		let py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + this1.w * m._42;
		let pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + this1.w * m._43;
		let pw = this1.x * m._14 + this1.y * m._24 + this1.z * m._34 + this1.w * m._44;
		let x = px;
		let y = py;
		let z = pz;
		let w = pw;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	static fromColor(c,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		let s = scale / 255;
		let x = (c >> 16 & 255) * s;
		let y = (c >> 8 & 255) * s;
		let z = (c & 255) * s;
		let w = (c >>> 24) * s;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.Vector4Impl(x,y,z,w);
	}
	static fromArray(a) {
		let r = new h3d.Vector4Impl(0.,0.,0.,1.);
		if(a.length > 0) {
			r.x = a[0];
		}
		if(a.length > 1) {
			r.y = a[1];
		}
		if(a.length > 2) {
			r.z = a[2];
		}
		if(a.length > 3) {
			r.w = a[3];
		}
		return r;
	}
}
h3d.anim = {};
h3d.anim.AnimatedObject = class h3d_anim_AnimatedObject {
	constructor(name) {
		if(h3d.anim.AnimatedObject._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(name);
	}
	_hx_constructor(name) {
		this.objectName = name;
	}
	clone() {
		return new h3d.anim.AnimatedObject(this.objectName);
	}
}
$hxClasses["h3d.anim.AnimatedObject"] = h3d.anim.AnimatedObject;
h3d.anim.AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
Object.assign(h3d.anim.AnimatedObject.prototype, {
	__class__: h3d.anim.AnimatedObject
});
h3d.anim.Animation = class h3d_anim_Animation {
	constructor(name,frameCount,sampling) {
		this.name = name;
		this.frameCount = frameCount;
		this.sampling = sampling;
		this.objects = [];
		this.lastEvent = -1;
		this.frame = 0.;
		this.speed = 1.;
		this.loop = true;
		this.pause = false;
	}
	getDuration() {
		return this.frameCount / (this.sampling * this.speed);
	}
	frameToTime(f) {
		return f / (this.sampling * this.speed);
	}
	getIFrame() {
		let f = this.frame | 0;
		let max = this.endFrame();
		if(f == max) {
			--f;
		}
		return f;
	}
	unbind(objectName) {
		let _g = 0;
		let _g1 = this.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.objectName == objectName) {
				this.isSync = false;
				o.targetObject = null;
				o.targetSkin = null;
				return;
			}
		}
	}
	setEvents(el) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this.frameCount;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(null);
		}
		this.events = _g;
		let e = $getIterator(el);
		while(e.hasNext()) {
			let e1 = e.next();
			if(this.events[e1.frame] == null) {
				this.events[e1.frame] = [];
			}
			this.events[e1.frame].push(e1.data);
		}
	}
	addEvent(frame,data) {
		if(this.events == null) {
			this.events = [];
		}
		if(this.events[frame] == null) {
			this.events[frame] = [data];
		} else {
			this.events[frame].push(data);
		}
	}
	getEvents() {
		return this.events;
	}
	getObjects() {
		return this.objects;
	}
	getEventTime(id) {
		if(this.events == null) {
			return null;
		}
		let _g = 0;
		let _g1 = this.events.length;
		while(_g < _g1) {
			let i = _g++;
			let ev = this.events[i];
			if(ev != null && ev.indexOf(id) >= 0) {
				return i / (this.sampling * this.speed);
			}
		}
		return null;
	}
	setFrame(f) {
		this.frame = f;
		this.lastEvent = -1;
		while(this.frame < 0) this.frame += this.frameCount;
		while(this.frame > this.frameCount) this.frame -= this.frameCount;
	}
	clone(a) {
		if(a == null) {
			a = new h3d.anim.Animation(this.name,this.frameCount,this.sampling);
		}
		a.objects = this.objects;
		a.speed = this.speed;
		a.loop = this.loop;
		a.pause = this.pause;
		a.events = this.events;
		a.resourcePath = this.resourcePath;
		return a;
	}
	initInstance() {
		this.isInstance = true;
	}
	createInstance(base) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this.objects;
		while(_g1 < _g2.length) {
			let a = _g2[_g1];
			++_g1;
			_g.push(a.clone());
		}
		let objects = _g;
		let a = this.clone();
		a.objects = objects;
		a.bind(base);
		a.initInstance();
		return a;
	}
	bind(base) {
		let currentSkin = null;
		let _g = 0;
		let _g1 = this.objects.slice();
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(currentSkin != null) {
				let j = currentSkin.skinData.namedJoints.h[a.objectName];
				if(j != null) {
					a.targetSkin = currentSkin;
					a.targetJoint = j.index;
					continue;
				}
			}
			let obj = base.getObjectByName(a.objectName);
			if(obj == null) {
				HxOverrides.remove(this.objects,a);
				continue;
			}
			let joint = ((obj) instanceof h3d.scene.Joint) ? obj : null;
			if(joint != null) {
				currentSkin = joint.parent;
				a.targetSkin = currentSkin != null ? currentSkin : joint.skin;
				a.targetJoint = joint.index;
			} else {
				a.targetObject = obj;
			}
		}
		this.isSync = false;
	}
	getPropValue(objectName,propName) {
		return null;
	}
	sync(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe.Exception.thrown("assert");
	}
	isPlaying() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	endFrame() {
		return this.frameCount;
	}
	update(dt) {
		if(!this.isInstance) {
			throw haxe.Exception.thrown("You must instantiate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			let f0 = this.frame | 0;
			let f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			let _g = f0;
			let _g1 = f1 + 1;
			while(_g < _g1) {
				let f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					let oldF = this.frame;
					let oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					let _g = 0;
					let _g1 = this.events[f];
					while(_g < _g1.length) {
						let e = _g1[_g];
						++_g;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			let end = this.endFrame();
			let et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	initAndBind(obj) {
		this.bind(obj);
		this.initInstance();
		this.pause = true;
	}
	toString() {
		return this.name;
	}
}
$hxClasses["h3d.anim.Animation"] = h3d.anim.Animation;
h3d.anim.Animation.__name__ = "h3d.anim.Animation";
Object.assign(h3d.anim.Animation.prototype, {
	__class__: h3d.anim.Animation
});
h3d.anim.DataLayout = $hxEnums["h3d.anim.DataLayout"] = { __ename__:true,__constructs__:null
	,Position: {_hx_name:"Position",_hx_index:0,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Rotation: {_hx_name:"Rotation",_hx_index:1,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Scale: {_hx_name:"Scale",_hx_index:2,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,UV: {_hx_name:"UV",_hx_index:3,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:4,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Property: {_hx_name:"Property",_hx_index:5,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,SingleFrame: {_hx_name:"SingleFrame",_hx_index:6,__enum__:"h3d.anim.DataLayout",toString:$estr}
};
h3d.anim.DataLayout.__constructs__ = [h3d.anim.DataLayout.Position,h3d.anim.DataLayout.Rotation,h3d.anim.DataLayout.Scale,h3d.anim.DataLayout.UV,h3d.anim.DataLayout.Alpha,h3d.anim.DataLayout.Property,h3d.anim.DataLayout.SingleFrame];
h3d.anim.DataLayout.__empty_constructs__ = [h3d.anim.DataLayout.Position,h3d.anim.DataLayout.Rotation,h3d.anim.DataLayout.Scale,h3d.anim.DataLayout.UV,h3d.anim.DataLayout.Alpha,h3d.anim.DataLayout.Property,h3d.anim.DataLayout.SingleFrame];
h3d.anim.BufferObject = class h3d_anim_BufferObject extends h3d.anim.AnimatedObject {
	constructor(objectName,dataOffset) {
		super(objectName);
		this.dataOffset = dataOffset;
	}
	getStride() {
		let stride = 0;
		if((this.layout & 1 << h3d.anim.DataLayout.Position._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d.anim.DataLayout.Rotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d.anim.DataLayout.Scale._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d.anim.DataLayout.UV._hx_index) != 0) {
			stride += 2;
		}
		if((this.layout & 1 << h3d.anim.DataLayout.Alpha._hx_index) != 0) {
			++stride;
		}
		if((this.layout & 1 << h3d.anim.DataLayout.Property._hx_index) != 0) {
			++stride;
		}
		return stride;
	}
	clone() {
		let o = new h3d.anim.BufferObject(this.objectName,this.dataOffset);
		o.layout = this.layout;
		o.propName = this.propName;
		return o;
	}
}
$hxClasses["h3d.anim.BufferObject"] = h3d.anim.BufferObject;
h3d.anim.BufferObject.__name__ = "h3d.anim.BufferObject";
h3d.anim.BufferObject.__super__ = h3d.anim.AnimatedObject;
Object.assign(h3d.anim.BufferObject.prototype, {
	__class__: h3d.anim.BufferObject
});
h3d.anim.BufferAnimation = class h3d_anim_BufferAnimation extends h3d.anim.Animation {
	constructor(name,frame,sampling) {
		super(name,frame,sampling);
		this.syncFrame = -1;
	}
	setData(data,stride) {
		this.data = data;
		this.stride = stride;
	}
	addObject(objName,offset) {
		let f = new h3d.anim.BufferObject(objName,offset);
		this.objects.push(f);
		return f;
	}
	getPropValue(objName,propName) {
		let _g = 0;
		let _g1 = this.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	getFrames() {
		return this.objects;
	}
	clone(a) {
		if(a == null) {
			a = new h3d.anim.BufferAnimation(this.name,this.frameCount,this.sampling);
		}
		super.clone(a);
		let la = ((a) instanceof h3d.anim.BufferAnimation) ? a : null;
		la.setData(this.data,this.stride);
		return a;
	}
	endFrame() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	initInstance() {
		super.initInstance();
		let frames = this.objects;
		let _g = 0;
		while(_g < frames.length) {
			let a = frames[_g];
			++_g;
			if((a.layout & 1 << h3d.anim.DataLayout.Property._hx_index) != 0) {
				a.propCurrentValue = this.data[a.dataOffset];
			}
			let tmp;
			if((a.layout & 1 << h3d.anim.DataLayout.Alpha._hx_index) != 0) {
				if(a.targetObject != null) {
					let _this = a.targetObject;
					tmp = (((_this) instanceof h3d.scene.Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe.Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if((a.layout & 1 << h3d.anim.DataLayout.Position._hx_index) != 0 || (a.layout & 1 << h3d.anim.DataLayout.Rotation._hx_index) != 0 || (a.layout & 1 << h3d.anim.DataLayout.Scale._hx_index) != 0) {
				a.matrix = new h3d.MatrixImpl();
				a.matrix.identity();
				if((a.layout & 1 << h3d.anim.DataLayout.Position._hx_index) == 0 && a.targetSkin != null) {
					let m2 = a.targetSkin.getSkinData().allJoints[a.targetJoint].defMat;
					a.matrix._14 = m2._41;
					a.matrix._24 = m2._42;
					a.matrix._34 = m2._43;
				}
			}
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	sortByFrameCountDesc(o1,o2) {
		return ((o2.layout & 1 << h3d.anim.DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1) - ((o1.layout & 1 << h3d.anim.DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1);
	}
	uvLerp(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	sync(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		let f = this.frame | 0;
		let max = this.endFrame();
		if(f == max) {
			--f;
		}
		let frame1 = f;
		let frame2 = (frame1 + 1) % this.frameCount;
		let k2 = this.frame - frame1;
		let k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		let _gthis = this;
		let _g = 0;
		let _g1 = this.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			let layout = o.layout;
			let offset1 = this.stride * frame1 + o.dataOffset;
			let offset2 = this.stride * frame2 + o.dataOffset;
			let frame11 = frame1;
			let frame21 = frame2;
			if((layout & 1 << h3d.anim.DataLayout.SingleFrame._hx_index) != 0) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
				offset2 = o.dataOffset;
				offset1 = offset2;
			}
			let m = o.matrix;
			if(m != null) {
				if((layout & 1 << h3d.anim.DataLayout.Position._hx_index) != 0) {
					m._41 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._42 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._43 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
				} else {
					m._41 = m._14;
					m._42 = m._24;
					m._43 = m._34;
				}
				if((layout & 1 << h3d.anim.DataLayout.Rotation._hx_index) != 0) {
					let q1x = this.data[offset1++];
					let q1y = this.data[offset1++];
					let q1z = this.data[offset1++];
					let f = 1 - (q1x * q1x + q1y * q1y + q1z * q1z);
					let q1w = Math.sqrt(f < 0 ? -f : f);
					let q2x = this.data[offset2++];
					let q2y = this.data[offset2++];
					let q2z = this.data[offset2++];
					let f1 = 1 - (q2x * q2x + q2y * q2y + q2z * q2z);
					let q2w = Math.sqrt(f1 < 0 ? -f1 : f1);
					let dot = q1x * q2x + q1y * q2y + q1z * q2z + q1w * q2w;
					let q2 = dot < 0 ? -k2 : k2;
					let qx = q1x * k1 + q2x * q2;
					let qy = q1y * k1 + q2y * q2;
					let qz = q1z * k1 + q2z * q2;
					let qw = q1w * k1 + q2w * q2;
					let ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
					qx *= ql;
					qy *= ql;
					qz *= ql;
					qw *= ql;
					if(decompose) {
						m._12 = qx;
						m._13 = qy;
						m._21 = qz;
						m._23 = qw;
						if((layout & 1 << h3d.anim.DataLayout.Scale._hx_index) != 0) {
							m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						} else {
							m._11 = 1;
							m._22 = 1;
							m._33 = 1;
						}
					} else {
						let xx = qx * qx;
						let xy = qx * qy;
						let xz = qx * qz;
						let xw = qx * qw;
						let yy = qy * qy;
						let yz = qy * qz;
						let yw = qy * qw;
						let zz = qz * qz;
						let zw = qz * qw;
						m._11 = 1 - 2 * (yy + zz);
						m._12 = 2 * (xy + zw);
						m._13 = 2 * (xz - yw);
						m._21 = 2 * (xy - zw);
						m._22 = 1 - 2 * (xx + zz);
						m._23 = 2 * (yz + xw);
						m._31 = 2 * (xz + yw);
						m._32 = 2 * (yz - xw);
						m._33 = 1 - 2 * (xx + yy);
						if((layout & 1 << h3d.anim.DataLayout.Scale._hx_index) != 0) {
							let sx = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							let sy = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							let sz = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._11 *= sx;
							m._12 *= sx;
							m._13 *= sx;
							m._21 *= sy;
							m._22 *= sy;
							m._23 *= sy;
							m._31 *= sz;
							m._32 *= sz;
							m._33 *= sz;
						}
					}
				} else {
					m._12 = 0;
					m._13 = 0;
					m._21 = 0;
					m._23 = decompose ? 1 : 0;
					if((layout & 1 << h3d.anim.DataLayout.Scale._hx_index) != 0) {
						m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				}
				if(o.targetSkin != null) {
					o.targetSkin.currentRelPose[o.targetJoint] = m;
					o.targetSkin.jointsUpdated = true;
				} else {
					let _this = o.targetObject;
					_this.defaultTransform = m;
					let f = 1;
					let b = true;
					if(b) {
						_this.flags |= f;
					} else {
						_this.flags &= ~f;
					}
				}
			}
			if((layout & 1 << h3d.anim.DataLayout.UV._hx_index) != 0) {
				let mat = o.targetObject.toMesh().material;
				let s = mat.passes.getShader(h3d.shader.UVDelta);
				if(s == null) {
					s = mat.passes.addShader(new h3d.shader.UVDelta());
					mat.get_texture().set_wrap(h3d.mat.Wrap.Repeat);
				}
				let v1 = this.data[offset1++];
				let v2 = this.data[offset2++];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				let v11 = this.data[offset1++];
				let v21 = this.data[offset2++];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
			}
			if((layout & 1 << h3d.anim.DataLayout.Alpha._hx_index) != 0) {
				let mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d.BlendMode.None) {
					mat.set_blendMode(h2d.BlendMode.Alpha);
				}
				mat.mshader.color__.w = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
			if((layout & 1 << h3d.anim.DataLayout.Property._hx_index) != 0) {
				o.propCurrentValue = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
}
$hxClasses["h3d.anim.BufferAnimation"] = h3d.anim.BufferAnimation;
h3d.anim.BufferAnimation.__name__ = "h3d.anim.BufferAnimation";
h3d.anim.BufferAnimation.__super__ = h3d.anim.Animation;
Object.assign(h3d.anim.BufferAnimation.prototype, {
	__class__: h3d.anim.BufferAnimation
});
h3d.anim.LinearFrame = class h3d_anim_LinearFrame {
	constructor() {
	}
	toMatrix() {
		let m = new h3d.MatrixImpl();
		new h3d.Quat(this.qx,this.qy,this.qz,this.qw).toMatrix(m);
		m.prependScale(this.sx,this.sy,this.sz);
		m.translate(this.tx,this.ty,this.tz);
		return m;
	}
}
$hxClasses["h3d.anim.LinearFrame"] = h3d.anim.LinearFrame;
h3d.anim.LinearFrame.__name__ = "h3d.anim.LinearFrame";
Object.assign(h3d.anim.LinearFrame.prototype, {
	__class__: h3d.anim.LinearFrame
});
h3d.anim.LinearObject = class h3d_anim_LinearObject extends h3d.anim.AnimatedObject {
	constructor(name) {
		h3d.anim.AnimatedObject._hx_skip_constructor = true;
		super();
		h3d.anim.AnimatedObject._hx_skip_constructor = false;
		this._hx_constructor(name);
	}
	_hx_constructor(name) {
		this.hasPosition = true;
		super._hx_constructor(name);
	}
	clone() {
		let o = new h3d.anim.LinearObject(this.objectName);
		o.hasPosition = this.hasPosition;
		o.hasRotation = this.hasRotation;
		o.hasScale = this.hasScale;
		o.frames = this.frames;
		o.alphas = this.alphas;
		o.uvs = this.uvs;
		o.propName = this.propName;
		o.propValues = this.propValues;
		return o;
	}
}
$hxClasses["h3d.anim.LinearObject"] = h3d.anim.LinearObject;
h3d.anim.LinearObject.__name__ = "h3d.anim.LinearObject";
h3d.anim.LinearObject.__super__ = h3d.anim.AnimatedObject;
Object.assign(h3d.anim.LinearObject.prototype, {
	__class__: h3d.anim.LinearObject
});
h3d.anim.LinearAnimation = class h3d_anim_LinearAnimation extends h3d.anim.Animation {
	constructor(name,frame,sampling) {
		super(name,frame,sampling);
		this.syncFrame = -1;
	}
	addCurve(objName,frames,hasPos,hasRot,hasScale) {
		let f = new h3d.anim.LinearObject(objName);
		f.frames = frames;
		f.hasPosition = hasPos;
		f.hasRotation = hasRot;
		f.hasScale = hasScale;
		this.objects.push(f);
	}
	addAlphaCurve(objName,alphas) {
		let f = new h3d.anim.LinearObject(objName);
		f.alphas = alphas;
		this.objects.push(f);
	}
	addUVCurve(objName,uvs) {
		let f = new h3d.anim.LinearObject(objName);
		f.uvs = uvs;
		this.objects.push(f);
	}
	addPropCurve(objName,propName,values) {
		let f = new h3d.anim.LinearObject(objName);
		f.propName = propName;
		f.propValues = values;
		this.objects.push(f);
	}
	getPropValue(objName,propName) {
		let _g = 0;
		let _g1 = this.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	getFrames() {
		return this.objects;
	}
	clone(a) {
		if(a == null) {
			a = new h3d.anim.LinearAnimation(this.name,this.frameCount,this.sampling);
		}
		super.clone(a);
		return a;
	}
	endFrame() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	initInstance() {
		super.initInstance();
		let frames = this.objects;
		let _g = 0;
		while(_g < frames.length) {
			let a = frames[_g];
			++_g;
			if(a.propValues != null) {
				a.propCurrentValue = a.propValues[0];
				continue;
			}
			let tmp;
			if(a.alphas != null) {
				if(a.targetObject != null) {
					let _this = a.targetObject;
					tmp = (((_this) instanceof h3d.scene.Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe.Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if(a.uvs != null || a.alphas != null) {
				continue;
			}
			a.matrix = new h3d.MatrixImpl();
			a.matrix.identity();
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	sortByFrameCountDesc(o1,o2) {
		return (o2.frames == null ? 10 : o2.frames.length) - (o1.frames == null ? 10 : o1.frames.length);
	}
	uvLerp(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	sync(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		let f = this.frame | 0;
		let max = this.endFrame();
		if(f == max) {
			--f;
		}
		let frame1 = f;
		let frame2 = (frame1 + 1) % this.frameCount;
		let k2 = this.frame - frame1;
		let k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		let _g = 0;
		let _g1 = this.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			if(o.alphas != null) {
				let mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d.BlendMode.None) {
					mat.set_blendMode(h2d.BlendMode.Alpha);
				}
				mat.mshader.color__.w = o.alphas[frame1] * k1 + o.alphas[frame2] * k2;
				continue;
			}
			if(o.uvs != null) {
				let mat = o.targetObject.toMesh().material;
				let s = mat.passes.getShader(h3d.shader.UVDelta);
				if(s == null) {
					s = mat.passes.addShader(new h3d.shader.UVDelta());
					mat.get_texture().set_wrap(h3d.mat.Wrap.Repeat);
				}
				let v1 = o.uvs[frame1 << 1];
				let v2 = o.uvs[frame2 << 1];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				let v11 = o.uvs[frame1 << 1 | 1];
				let v21 = o.uvs[frame2 << 1 | 1];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
				continue;
			}
			if(o.propValues != null) {
				o.propCurrentValue = o.propValues[frame1] * k1 + o.propValues[frame2] * k2;
				continue;
			}
			let frame11 = frame1;
			let frame21 = frame2;
			if(o.frames.length == 1) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
			}
			let f1 = o.frames[frame11];
			let f2 = o.frames[frame21];
			let m = o.matrix;
			m._41 = f1.tx * k1 + f2.tx * k2;
			m._42 = f1.ty * k1 + f2.ty * k2;
			m._43 = f1.tz * k1 + f2.tz * k2;
			if(o.hasRotation) {
				let dot = f1.qx * f2.qx + f1.qy * f2.qy + f1.qz * f2.qz + f1.qw * f2.qw;
				let q2 = dot < 0 ? -k2 : k2;
				let qx = f1.qx * k1 + f2.qx * q2;
				let qy = f1.qy * k1 + f2.qy * q2;
				let qz = f1.qz * k1 + f2.qz * q2;
				let qw = f1.qw * k1 + f2.qw * q2;
				let ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
				qx *= ql;
				qy *= ql;
				qz *= ql;
				qw *= ql;
				if(decompose) {
					m._12 = qx;
					m._13 = qy;
					m._21 = qz;
					m._23 = qw;
					if(o.hasScale) {
						m._11 = f1.sx * k1 + f2.sx * k2;
						m._22 = f1.sy * k1 + f2.sy * k2;
						m._33 = f1.sz * k1 + f2.sz * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				} else {
					let xx = qx * qx;
					let xy = qx * qy;
					let xz = qx * qz;
					let xw = qx * qw;
					let yy = qy * qy;
					let yz = qy * qz;
					let yw = qy * qw;
					let zz = qz * qz;
					let zw = qz * qw;
					m._11 = 1 - 2 * (yy + zz);
					m._12 = 2 * (xy + zw);
					m._13 = 2 * (xz - yw);
					m._21 = 2 * (xy - zw);
					m._22 = 1 - 2 * (xx + zz);
					m._23 = 2 * (yz + xw);
					m._31 = 2 * (xz + yw);
					m._32 = 2 * (yz - xw);
					m._33 = 1 - 2 * (xx + yy);
					if(o.hasScale) {
						let sx = f1.sx * k1 + f2.sx * k2;
						let sy = f1.sy * k1 + f2.sy * k2;
						let sz = f1.sz * k1 + f2.sz * k2;
						m._11 *= sx;
						m._12 *= sx;
						m._13 *= sx;
						m._21 *= sy;
						m._22 *= sy;
						m._23 *= sy;
						m._31 *= sz;
						m._32 *= sz;
						m._33 *= sz;
					}
				}
			} else {
				m._12 = 0;
				m._13 = 0;
				m._21 = 0;
				m._23 = decompose ? 1 : 0;
				if(o.hasScale) {
					m._11 = f1.sx * k1 + f2.sx * k2;
					m._22 = f1.sy * k1 + f2.sy * k2;
					m._33 = f1.sz * k1 + f2.sz * k2;
				} else {
					m._11 = 1;
					m._22 = 1;
					m._33 = 1;
				}
			}
			if(o.targetSkin != null) {
				o.targetSkin.currentRelPose[o.targetJoint] = o.matrix;
				o.targetSkin.jointsUpdated = true;
			} else {
				let _this = o.targetObject;
				let v = o.matrix;
				_this.defaultTransform = v;
				let f = 1;
				let b = true;
				if(b) {
					_this.flags |= f;
				} else {
					_this.flags &= ~f;
				}
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
}
$hxClasses["h3d.anim.LinearAnimation"] = h3d.anim.LinearAnimation;
h3d.anim.LinearAnimation.__name__ = "h3d.anim.LinearAnimation";
h3d.anim.LinearAnimation.__super__ = h3d.anim.Animation;
Object.assign(h3d.anim.LinearAnimation.prototype, {
	__class__: h3d.anim.LinearAnimation
});
h3d.anim.Joint = class h3d_anim_Joint {
	constructor() {
		this.bindIndex = -1;
		this.splitIndex = -1;
		this.subs = [];
	}
}
$hxClasses["h3d.anim.Joint"] = h3d.anim.Joint;
h3d.anim.Joint.__name__ = "h3d.anim.Joint";
Object.assign(h3d.anim.Joint.prototype, {
	__class__: h3d.anim.Joint
});
h3d.anim._Skin = {};
h3d.anim._Skin.Permut = class h3d_anim__$Skin_Permut {
	constructor() {
	}
}
$hxClasses["h3d.anim._Skin.Permut"] = h3d.anim._Skin.Permut;
h3d.anim._Skin.Permut.__name__ = "h3d.anim._Skin.Permut";
Object.assign(h3d.anim._Skin.Permut.prototype, {
	__class__: h3d.anim._Skin.Permut
});
h3d.anim._Skin.Influence = class h3d_anim__$Skin_Influence {
	constructor(j,w) {
		this.j = j;
		this.w = w;
	}
}
$hxClasses["h3d.anim._Skin.Influence"] = h3d.anim._Skin.Influence;
h3d.anim._Skin.Influence.__name__ = "h3d.anim._Skin.Influence";
Object.assign(h3d.anim._Skin.Influence.prototype, {
	__class__: h3d.anim._Skin.Influence
});
h3d.anim.Skin = class h3d_anim_Skin {
	constructor(name,vertexCount,bonesPerVertex) {
		this.name = name;
		this.vertexCount = vertexCount;
		this.bonesPerVertex = bonesPerVertex;
		if(vertexCount > 0) {
			this.vertexJoints = new Array(vertexCount * bonesPerVertex);
			this.vertexWeights = new Array(vertexCount * bonesPerVertex);
			this.envelop = [];
		}
	}
	setJoints(joints,roots) {
		this.rootJoints = roots;
		this.allJoints = joints;
		this.namedJoints = new haxe.ds.StringMap();
		let _g = 0;
		while(_g < joints.length) {
			let j = joints[_g];
			++_g;
			if(j.name != null) {
				this.namedJoints.h[j.name] = j;
			}
		}
	}
	addInfluence(vid,j,w) {
		let il = this.envelop[vid];
		if(il == null) {
			il = this.envelop[vid] = [];
		}
		il.push(new h3d.anim._Skin.Influence(j,w));
	}
	sortInfluences(i1,i2) {
		if(i2.w > i1.w) {
			return 1;
		} else {
			return -1;
		}
	}
	isSplit() {
		return this.splitJoints != null;
	}
	initWeights() {
		this.boundJoints = [];
		let pos = 0;
		let _g = 0;
		let _g1 = this.vertexCount;
		while(_g < _g1) {
			let i = _g++;
			let il = this.envelop[i];
			if(il == null) {
				il = [];
			}
			haxe.ds.ArraySort.sort(il,$bind(this,this.sortInfluences));
			if(il.length > this.bonesPerVertex) {
				il = il.slice(0,this.bonesPerVertex);
			}
			let tw = 0.;
			let _g1 = 0;
			while(_g1 < il.length) {
				let i = il[_g1];
				++_g1;
				tw += i.w;
			}
			tw = 1 / tw;
			let _g2 = 0;
			let _g3 = this.bonesPerVertex;
			while(_g2 < _g3) {
				let i = _g2++;
				let i1 = il[i];
				if(i1 == null) {
					this.vertexJoints[pos] = 0;
					this.vertexWeights[pos] = 0;
				} else {
					if(i1.j.bindIndex == -1) {
						i1.j.bindIndex = this.boundJoints.length;
						this.boundJoints.push(i1.j);
					}
					this.vertexJoints[pos] = i1.j.bindIndex;
					this.vertexWeights[pos] = i1.w * tw;
				}
				++pos;
			}
		}
		this.envelop = null;
	}
	sortByBindIndex(j1,j2) {
		return j1.bindIndex - j2.bindIndex;
	}
	isSub(a,b) {
		let j = 0;
		let max = b.length;
		let _g = 0;
		while(_g < a.length) {
			let e = a[_g];
			++_g;
			while(e != b[j++]) if(j >= max) {
				return false;
			}
		}
		return true;
	}
	merge(permuts) {
		let _g = 0;
		while(_g < permuts.length) {
			let p1 = permuts[_g];
			++_g;
			let _g1 = 0;
			while(_g1 < permuts.length) {
				let p2 = permuts[_g1];
				++_g1;
				if(p1 != p2 && p1.material == p2.material && this.isSub(p1.joints,p2.joints)) {
					let _g = 0;
					let _g1 = p1.triangles;
					while(_g < _g1.length) {
						let t = _g1[_g];
						++_g;
						p2.triangles.push(t);
					}
					HxOverrides.remove(permuts,p1);
					return true;
				}
			}
		}
		return false;
	}
	jointsDiff(p1,p2) {
		let diff = 0;
		let i = 0;
		let j = 0;
		let imax = p1.joints.length;
		let jmax = p2.joints.length;
		while(i < imax && j < jmax) {
			let j1 = p1.joints[i];
			let j2 = p2.joints[j];
			if(j1 == j2) {
				++i;
				++j;
			} else {
				++diff;
				if(j1.bindIndex < j2.bindIndex) {
					++i;
				} else {
					++j;
				}
			}
		}
		return diff + (imax - i) + (jmax - j);
	}
	split(maxBones,index,triangleMaterials) {
		if(this.splitJoints != null) {
			return true;
		}
		if(this.boundJoints.length <= maxBones) {
			return false;
		}
		this.splitJoints = [];
		this.triangleGroups = new Array(index.length / 3 | 0);
		let permuts = [];
		let _g = 0;
		let _g1 = index.length / 3 | 0;
		while(_g < _g1) {
			let tri = _g++;
			let iid = tri * 3;
			let mid = triangleMaterials == null ? 0 : triangleMaterials[tri];
			let jl = [];
			let _g1 = 0;
			while(_g1 < 3) {
				let i = _g1++;
				let vid = index[iid + i];
				let _g = 0;
				let _g2 = this.bonesPerVertex;
				while(_g < _g2) {
					let b = _g++;
					let bidx = vid * this.bonesPerVertex + b;
					if(this.vertexWeights[bidx] == 0) {
						continue;
					}
					let j = this.boundJoints[this.vertexJoints[bidx]];
					if(j.splitIndex != iid) {
						j.splitIndex = iid;
						jl.push(j);
					}
				}
			}
			jl.sort($bind(this,this.sortByBindIndex));
			let _g2 = 0;
			while(_g2 < permuts.length) {
				let p2 = permuts[_g2];
				++_g2;
				if(p2.material == mid && this.isSub(jl,p2.joints)) {
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			let _g3 = 0;
			while(_g3 < permuts.length) {
				let p2 = permuts[_g3];
				++_g3;
				if(p2.material == mid && this.isSub(p2.joints,jl)) {
					p2.joints = jl;
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			let pr = new h3d.anim._Skin.Permut();
			pr.joints = jl;
			pr.triangles = [tri];
			pr.material = mid;
			permuts.push(pr);
		}
		while(true) {
			while(this.merge(permuts)) {
			}
			let minDif = 100000;
			let minTot = 100000;
			let minP1 = null;
			let minP2 = null;
			let _g = 0;
			let _g1 = permuts.length;
			while(_g < _g1) {
				let i = _g++;
				let p1 = permuts[i];
				if(p1.joints.length == maxBones) {
					continue;
				}
				let _g1 = i + 1;
				let _g2 = permuts.length;
				while(_g1 < _g2) {
					let j = _g1++;
					let p2 = permuts[j];
					if(p2.joints.length == maxBones || p1.material != p2.material) {
						continue;
					}
					let count = this.jointsDiff(p1,p2);
					let tot = count + (p1.joints.length + p2.joints.length - count >> 1);
					if(tot > maxBones || tot > minTot || tot == minTot && count > minDif) {
						continue;
					}
					minDif = count;
					minTot = tot;
					minP1 = p1;
					minP2 = p2;
				}
			}
			if(minP1 == null) {
				break;
			}
			let p1 = minP1;
			let p2 = minP2;
			let _g2 = 0;
			let _g3 = p1.joints;
			while(_g2 < _g3.length) {
				let j = _g3[_g2];
				++_g2;
				HxOverrides.remove(p2.joints,j);
				p2.joints.push(j);
			}
			p2.joints.sort($bind(this,this.sortByBindIndex));
			let _g4 = 0;
			let _g5 = p1.triangles;
			while(_g4 < _g5.length) {
				let t = _g5[_g4];
				++_g4;
				p2.triangles.push(t);
			}
			HxOverrides.remove(permuts,p1);
		}
		let _g2 = 0;
		let _g3 = permuts.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let _g = 0;
			let _g1 = permuts[i].triangles;
			while(_g < _g1.length) {
				let tri = _g1[_g];
				++_g;
				this.triangleGroups[tri] = i;
			}
		}
		let jointsPermuts = [];
		let _g4 = 0;
		let _g5 = this.boundJoints;
		while(_g4 < _g5.length) {
			let j = _g5[_g4];
			++_g4;
			let pl = [];
			let _g = 0;
			while(_g < permuts.length) {
				let p = permuts[_g];
				++_g;
				if(p.joints.indexOf(j) >= 0) {
					pl.push(p);
				}
			}
			jointsPermuts.push({ j : j, pl : pl, priority : 0});
		}
		while(true) {
			jointsPermuts.sort(function(j1,j2) {
				return j2.pl.length + j2.priority * 100 - (j1.pl.length + j1.priority * 100);
			});
			let _g = 0;
			while(_g < permuts.length) {
				let p = permuts[_g];
				++_g;
				p.indexedJoints = [];
			}
			let fail = false;
			let _g1 = 0;
			while(_g1 < jointsPermuts.length) {
				let j = jointsPermuts[_g1];
				++_g1;
				j.j.splitIndex = -1;
				let _g = 0;
				let _g2 = maxBones;
				while(_g < _g2) {
					let id = _g++;
					let ok = true;
					let _g1 = 0;
					let _g2 = j.pl;
					while(_g1 < _g2.length) {
						let p = _g2[_g1];
						++_g1;
						if(p.indexedJoints[id] != null) {
							ok = false;
							break;
						}
					}
					if(ok) {
						j.j.splitIndex = id;
						let _g = 0;
						let _g1 = j.pl;
						while(_g < _g1.length) {
							let p = _g1[_g];
							++_g;
							p.indexedJoints[id] = j.j;
						}
						break;
					}
				}
				if(j.j.splitIndex < 0) {
					j.priority++;
					if(j.priority > 10) {
						throw haxe.Exception.thrown("Failed to assign index while spliting skin");
					}
					fail = true;
					break;
				}
			}
			if(!fail) {
				break;
			}
		}
		this.splitJoints = [];
		let _g6 = 0;
		while(_g6 < permuts.length) {
			let p = permuts[_g6];
			++_g6;
			let jl = [];
			let _g = 0;
			let _g1 = p.indexedJoints.length;
			while(_g < _g1) {
				let i = _g++;
				let j = p.indexedJoints[i];
				if(j == null) {
					j = this.boundJoints[0];
				}
				jl.push(j);
			}
			this.splitJoints.push({ material : p.material, joints : jl});
		}
		let _g7 = 0;
		let _g8 = this.vertexJoints.length;
		while(_g7 < _g8) {
			let i = _g7++;
			this.vertexJoints[i] = this.boundJoints[this.vertexJoints[i]].splitIndex;
		}
		return true;
	}
}
$hxClasses["h3d.anim.Skin"] = h3d.anim.Skin;
h3d.anim.Skin.__name__ = "h3d.anim.Skin";
Object.assign(h3d.anim.Skin.prototype, {
	__class__: h3d.anim.Skin
});
h3d.col = {};
h3d.col.Collider = class h3d_col_Collider {
}
$hxClasses["h3d.col.Collider"] = h3d.col.Collider;
h3d.col.Collider.__name__ = "h3d.col.Collider";
Object.assign(h3d.col.Collider.prototype, {
	__class__: h3d.col.Collider
});
h3d.col.Bounds = class h3d_col_Bounds extends h3d.col.Collider {
	constructor() {
		super();
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	inFrustum(f,m) {
		if(m != null) {
			throw haxe.Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	inSphere(s) {
		let x = s.x;
		let y = s.y;
		let z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let a = this.xMin;
		let a1 = s.x;
		let b = this.xMax;
		let b1 = a1 > b ? b : a1;
		let x2 = a < b1 ? b1 : a;
		let a2 = this.yMin;
		let a3 = s.y;
		let b2 = this.yMax;
		let b3 = a3 > b2 ? b2 : a3;
		let y2 = a2 < b3 ? b3 : a2;
		let a4 = this.zMin;
		let a5 = s.z;
		let b4 = this.zMax;
		let b5 = a5 > b4 ? b4 : a5;
		let z2 = a4 < b5 ? b5 : a4;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let p_x = x3;
		let p_y = y3;
		let p_z = z3;
		let dx = p_x - _this_x;
		let dy = p_y - _this_y;
		let dz = p_z - _this_z;
		return dx * dx + dy * dy + dz * dz < s.r * s.r;
	}
	testPlane(p) {
		let a = p.nx;
		let b = p.ny;
		let c = p.nz;
		let dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		let rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		return dd + rr - p.d * 2;
	}
	rayIntersection(r,bestMatch) {
		let minTx = (this.xMin - r.px) / r.lx;
		let minTy = (this.yMin - r.py) / r.ly;
		let minTz = (this.zMin - r.pz) / r.lz;
		let maxTx = (this.xMax - r.px) / r.lx;
		let maxTy = (this.yMax - r.py) / r.ly;
		let maxTz = (this.zMax - r.pz) / r.lz;
		let realMinTx = minTx > maxTx ? maxTx : minTx;
		let realMinTy = minTy > maxTy ? maxTy : minTy;
		let realMinTz = minTz > maxTz ? maxTz : minTz;
		let realMaxTx = minTx < maxTx ? maxTx : minTx;
		let realMaxTy = minTy < maxTy ? maxTy : minTy;
		let realMaxTz = minTz < maxTz ? maxTz : minTz;
		let a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		let minmax = a > realMaxTz ? realMaxTz : a;
		let a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		let maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	inFrustumDetails(mvp,checkZ) {
		if(checkZ == null) {
			checkZ = true;
		}
		let ret = 1;
		let p_nx = mvp._14 + mvp._11;
		let p_ny = mvp._24 + mvp._21;
		let p_nz = mvp._34 + mvp._31;
		let p_d = mvp._44 + mvp._41;
		let m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		let n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		let p_nx1 = mvp._14 - mvp._11;
		let p_ny1 = mvp._24 - mvp._21;
		let p_nz1 = mvp._34 - mvp._31;
		let p_d1 = mvp._44 - mvp._41;
		let m1 = p_nx1 * (p_nx1 > 0 ? this.xMax : this.xMin) + p_ny1 * (p_ny1 > 0 ? this.yMax : this.yMin) + p_nz1 * (p_nz1 > 0 ? this.zMax : this.zMin);
		if(m1 + p_d1 < 0) {
			return -1;
		}
		let n1 = p_nx1 * (p_nx1 > 0 ? this.xMin : this.xMax) + p_ny1 * (p_ny1 > 0 ? this.yMin : this.yMax) + p_nz1 * (p_nz1 > 0 ? this.zMin : this.zMax);
		if(n1 + p_d1 < 0) {
			ret = 0;
		}
		let p_nx2 = mvp._14 + mvp._12;
		let p_ny2 = mvp._24 + mvp._22;
		let p_nz2 = mvp._34 + mvp._32;
		let p_d2 = mvp._44 + mvp._42;
		let m2 = p_nx2 * (p_nx2 > 0 ? this.xMax : this.xMin) + p_ny2 * (p_ny2 > 0 ? this.yMax : this.yMin) + p_nz2 * (p_nz2 > 0 ? this.zMax : this.zMin);
		if(m2 + p_d2 < 0) {
			return -1;
		}
		let n2 = p_nx2 * (p_nx2 > 0 ? this.xMin : this.xMax) + p_ny2 * (p_ny2 > 0 ? this.yMin : this.yMax) + p_nz2 * (p_nz2 > 0 ? this.zMin : this.zMax);
		if(n2 + p_d2 < 0) {
			ret = 0;
		}
		let p_nx3 = mvp._14 - mvp._12;
		let p_ny3 = mvp._24 - mvp._22;
		let p_nz3 = mvp._34 - mvp._32;
		let p_d3 = mvp._44 - mvp._42;
		let m3 = p_nx3 * (p_nx3 > 0 ? this.xMax : this.xMin) + p_ny3 * (p_ny3 > 0 ? this.yMax : this.yMin) + p_nz3 * (p_nz3 > 0 ? this.zMax : this.zMin);
		if(m3 + p_d3 < 0) {
			return -1;
		}
		let n3 = p_nx3 * (p_nx3 > 0 ? this.xMin : this.xMax) + p_ny3 * (p_ny3 > 0 ? this.yMin : this.yMax) + p_nz3 * (p_nz3 > 0 ? this.zMin : this.zMax);
		if(n3 + p_d3 < 0) {
			ret = 0;
		}
		if(checkZ) {
			let p_nx = mvp._13;
			let p_ny = mvp._23;
			let p_nz = mvp._33;
			let p_d = mvp._43;
			let m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
			if(m + p_d < 0) {
				return -1;
			}
			let n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
			if(n + p_d < 0) {
				ret = 0;
			}
			let p_nx1 = mvp._14 - mvp._13;
			let p_ny1 = mvp._24 - mvp._23;
			let p_nz1 = mvp._34 - mvp._33;
			let p_d1 = mvp._44 - mvp._43;
			let m1 = p_nx1 * (p_nx1 > 0 ? this.xMax : this.xMin) + p_ny1 * (p_ny1 > 0 ? this.yMax : this.yMin) + p_nz1 * (p_nz1 > 0 ? this.zMax : this.zMin);
			if(m1 + p_d1 < 0) {
				return -1;
			}
			let n1 = p_nx1 * (p_nx1 > 0 ? this.xMin : this.xMax) + p_ny1 * (p_ny1 > 0 ? this.yMin : this.yMax) + p_nz1 * (p_nz1 > 0 ? this.zMin : this.zMax);
			if(n1 + p_d1 < 0) {
				ret = 0;
			}
		}
		return ret;
	}
	transform3x3(m) {
		let xMin = this.xMin;
		let yMin = this.yMin;
		let zMin = this.zMin;
		let xMax = this.xMax;
		let yMax = this.yMax;
		let zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let _this_x = x;
		let _this_y = y;
		let _this_z = z;
		let x1 = xMin;
		let y1 = yMin;
		let z1 = zMin;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this_x = x1;
		_this_y = y1;
		_this_z = z1;
		let px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x2 = xMin;
		let y2 = yMin;
		let z2 = zMax;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this_x = x2;
		_this_y = y2;
		_this_z = z2;
		let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px1;
		_this_y = py1;
		_this_z = pz1;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x3 = xMin;
		let y3 = yMax;
		let z3 = zMin;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this_x = x3;
		_this_y = y3;
		_this_z = z3;
		let px2 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py2 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz2 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px2;
		_this_y = py2;
		_this_z = pz2;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x4 = xMin;
		let y4 = yMax;
		let z4 = zMax;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this_x = x4;
		_this_y = y4;
		_this_z = z4;
		let px3 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py3 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz3 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px3;
		_this_y = py3;
		_this_z = pz3;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x5 = xMax;
		let y5 = yMin;
		let z5 = zMin;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this_x = x5;
		_this_y = y5;
		_this_z = z5;
		let px4 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py4 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz4 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px4;
		_this_y = py4;
		_this_z = pz4;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x6 = xMax;
		let y6 = yMin;
		let z6 = zMax;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this_x = x6;
		_this_y = y6;
		_this_z = z6;
		let px5 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py5 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz5 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px5;
		_this_y = py5;
		_this_z = pz5;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x7 = xMax;
		let y7 = yMax;
		let z7 = zMin;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this_x = x7;
		_this_y = y7;
		_this_z = z7;
		let px6 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py6 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz6 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px6;
		_this_y = py6;
		_this_z = pz6;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x8 = xMax;
		let y8 = yMax;
		let z8 = zMax;
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		_this_x = x8;
		_this_y = y8;
		_this_z = z8;
		let px7 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py7 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz7 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px7;
		_this_y = py7;
		_this_z = pz7;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
	}
	transform(m) {
		let xMin = this.xMin;
		let yMin = this.yMin;
		let zMin = this.zMin;
		let xMax = this.xMax;
		let yMax = this.yMax;
		let zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let _this_x = x;
		let _this_y = y;
		let _this_z = z;
		let x1 = xMin;
		let y1 = yMin;
		let z1 = zMin;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this_x = x1;
		_this_y = y1;
		_this_z = z1;
		let px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x2 = xMin;
		let y2 = yMin;
		let z2 = zMax;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this_x = x2;
		_this_y = y2;
		_this_z = z2;
		let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px1;
		_this_y = py1;
		_this_z = pz1;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x3 = xMin;
		let y3 = yMax;
		let z3 = zMin;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this_x = x3;
		_this_y = y3;
		_this_z = z3;
		let px2 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py2 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz2 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px2;
		_this_y = py2;
		_this_z = pz2;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x4 = xMin;
		let y4 = yMax;
		let z4 = zMax;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this_x = x4;
		_this_y = y4;
		_this_z = z4;
		let px3 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py3 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz3 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px3;
		_this_y = py3;
		_this_z = pz3;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x5 = xMax;
		let y5 = yMin;
		let z5 = zMin;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this_x = x5;
		_this_y = y5;
		_this_z = z5;
		let px4 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py4 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz4 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px4;
		_this_y = py4;
		_this_z = pz4;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x6 = xMax;
		let y6 = yMin;
		let z6 = zMax;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this_x = x6;
		_this_y = y6;
		_this_z = z6;
		let px5 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py5 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz5 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px5;
		_this_y = py5;
		_this_z = pz5;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x7 = xMax;
		let y7 = yMax;
		let z7 = zMin;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this_x = x7;
		_this_y = y7;
		_this_z = z7;
		let px6 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py6 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz6 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px6;
		_this_y = py6;
		_this_z = pz6;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		let x8 = xMax;
		let y8 = yMax;
		let z8 = zMax;
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		_this_x = x8;
		_this_y = y8;
		_this_z = z8;
		let px7 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		let py7 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		let pz7 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px7;
		_this_y = py7;
		_this_z = pz7;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
	}
	collide(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.zMin > b.zMax || this.xMax < b.xMin || this.yMax < b.yMin || this.zMax < b.zMin);
	}
	contains(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin && p.y < this.yMax && p.z >= this.zMin) {
			return p.z < this.zMax;
		} else {
			return false;
		}
	}
	containsBounds(b) {
		if(this.xMin <= b.xMin && this.yMin <= b.yMin && this.zMin <= b.zMin && this.xMax >= b.xMax && this.yMax >= b.yMax) {
			return this.zMax >= b.zMax;
		} else {
			return false;
		}
	}
	containsSphere(s) {
		if(this.xMin <= s.x - s.r && this.yMin <= s.y - s.r && this.zMin <= s.z - s.r && this.xMax >= s.x + s.r && this.yMax >= s.y + s.r) {
			return this.zMax >= s.z + s.r;
		} else {
			return false;
		}
	}
	add(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
		if(b.zMin < this.zMin) {
			this.zMin = b.zMin;
		}
		if(b.zMax > this.zMax) {
			this.zMax = b.zMax;
		}
	}
	addTransform(b,m) {
		let b1 = new h3d.col.Bounds();
		b1.xMin = b.xMin;
		b1.xMax = b.xMax;
		b1.yMin = b.yMin;
		b1.yMax = b.yMax;
		b1.zMin = b.zMin;
		b1.zMax = b.zMax;
		let tmp = b1;
		tmp.transform(m);
		if(tmp.xMin < this.xMin) {
			this.xMin = tmp.xMin;
		}
		if(tmp.xMax > this.xMax) {
			this.xMax = tmp.xMax;
		}
		if(tmp.yMin < this.yMin) {
			this.yMin = tmp.yMin;
		}
		if(tmp.yMax > this.yMax) {
			this.yMax = tmp.yMax;
		}
		if(tmp.zMin < this.zMin) {
			this.zMin = tmp.zMin;
		}
		if(tmp.zMax > this.zMax) {
			this.zMax = tmp.zMax;
		}
	}
	addPoint(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
		if(p.z < this.zMin) {
			this.zMin = p.z;
		}
		if(p.z > this.zMax) {
			this.zMax = p.z;
		}
	}
	addPos(x,y,z) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(z < this.zMin) {
			this.zMin = z;
		}
		if(z > this.zMax) {
			this.zMax = z;
		}
	}
	addSphere(s) {
		let x = s.x;
		let y = s.y;
		let z = s.z;
		let r = s.r;
		if(x - r < this.xMin) {
			this.xMin = x - r;
		}
		if(x + r > this.xMax) {
			this.xMax = x + r;
		}
		if(y - r < this.yMin) {
			this.yMin = y - r;
		}
		if(y + r > this.yMax) {
			this.yMax = y + r;
		}
		if(z - r < this.zMin) {
			this.zMin = z - r;
		}
		if(z + r > this.zMax) {
			this.zMax = z + r;
		}
	}
	addSpherePos(x,y,z,r) {
		if(x - r < this.xMin) {
			this.xMin = x - r;
		}
		if(x + r > this.xMax) {
			this.xMax = x + r;
		}
		if(y - r < this.yMin) {
			this.yMin = y - r;
		}
		if(y + r > this.yMax) {
			this.yMax = y + r;
		}
		if(z - r < this.zMin) {
			this.zMin = z - r;
		}
		if(z + r > this.zMax) {
			this.zMax = z + r;
		}
	}
	intersection(a,b) {
		let a1 = a.xMin;
		let b1 = b.xMin;
		let xMin = a1 < b1 ? b1 : a1;
		let a2 = a.yMin;
		let b2 = b.yMin;
		let yMin = a2 < b2 ? b2 : a2;
		let a3 = a.zMin;
		let b3 = b.zMin;
		let zMin = a3 < b3 ? b3 : a3;
		let a4 = a.xMax;
		let b4 = b.xMax;
		let xMax = a4 > b4 ? b4 : a4;
		let a5 = a.yMax;
		let b5 = b.yMax;
		let yMax = a5 > b5 ? b5 : a5;
		let a6 = a.zMax;
		let b6 = b.zMax;
		let zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	offset(dx,dy,dz) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
		this.zMin += dz;
		this.zMax += dz;
	}
	setMin(p) {
		this.xMin = p.x;
		this.yMin = p.y;
		this.zMin = p.z;
	}
	setMax(p) {
		this.xMax = p.x;
		this.yMax = p.y;
		this.zMax = p.z;
	}
	load(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	scalePivot(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.zMin *= v;
		this.xMax *= v;
		this.yMax *= v;
		this.zMax *= v;
	}
	scaleCenter(v) {
		let dx = (this.xMax - this.xMin) * 0.5 * v;
		let dy = (this.yMax - this.yMin) * 0.5 * v;
		let dz = (this.zMax - this.zMin) * 0.5 * v;
		let mx = (this.xMax + this.xMin) * 0.5;
		let my = (this.yMax + this.yMin) * 0.5;
		let mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	getMin() {
		let x = this.xMin;
		let y = this.yMin;
		let z = this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getCenter() {
		let x = (this.xMin + this.xMax) * 0.5;
		let y = (this.yMin + this.yMax) * 0.5;
		let z = (this.zMin + this.zMax) * 0.5;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getSize() {
		let x = this.xMax - this.xMin;
		let y = this.yMax - this.yMin;
		let z = this.zMax - this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getMax() {
		let x = this.xMax;
		let y = this.yMax;
		let z = this.zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getVolume() {
		return (this.xMax - this.xMin) * (this.yMax - this.yMin) * (this.zMax - this.zMin);
	}
	get_xSize() {
		return this.xMax - this.xMin;
	}
	get_ySize() {
		return this.yMax - this.yMin;
	}
	get_zSize() {
		return this.zMax - this.zMin;
	}
	set_xSize(v) {
		this.xMax = this.xMin + v;
		return v;
	}
	set_ySize(v) {
		this.yMax = this.yMin + v;
		return v;
	}
	set_zSize(v) {
		this.zMax = this.zMin + v;
		return v;
	}
	isEmpty() {
		if(!(this.xMax < this.xMin || this.yMax < this.yMin)) {
			return this.zMax < this.zMin;
		} else {
			return true;
		}
	}
	empty() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	all() {
		this.xMin = -1e20;
		this.xMax = 1e20;
		this.yMin = -1e20;
		this.yMax = 1e20;
		this.zMin = -1e20;
		this.zMax = 1e20;
	}
	clone() {
		let b = new h3d.col.Bounds();
		b.xMin = this.xMin;
		b.xMax = this.xMax;
		b.yMin = this.yMin;
		b.yMax = this.yMax;
		b.zMin = this.zMin;
		b.zMax = this.zMax;
		return b;
	}
	toString() {
		let x = this.xMin;
		let y = this.yMin;
		let z = this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let tmp = "Bounds{" + Std.string(new h3d.VectorImpl(x,y,z)) + ",";
		let x1 = this.xMax - this.xMin;
		let y1 = this.yMax - this.yMin;
		let z1 = this.zMax - this.zMin;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		return tmp + Std.string(new h3d.VectorImpl(x1,y1,z1)) + "}";
	}
	toSphere() {
		let dx = this.xMax - this.xMin;
		let dy = this.yMax - this.yMin;
		let dz = this.zMax - this.zMin;
		return new h3d.col.Sphere((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
	}
	makeDebugObj() {
		let prim = new h3d.prim.Cube(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin);
		prim.translate(this.xMin,this.yMin,this.zMin);
		prim.addNormals();
		return new h3d.scene.Mesh(prim);
	}
	static fromPoints(min,max) {
		let b = new h3d.col.Bounds();
		b.xMin = min.x;
		b.yMin = min.y;
		b.zMin = min.z;
		b.xMax = max.x;
		b.yMax = max.y;
		b.zMax = max.z;
		return b;
	}
	static fromValues(x,y,z,dx,dy,dz) {
		let b = new h3d.col.Bounds();
		b.xMin = x;
		b.yMin = y;
		b.zMin = z;
		b.xMax = x + dx;
		b.yMax = y + dy;
		b.zMax = z + dz;
		return b;
	}
}
$hxClasses["h3d.col.Bounds"] = h3d.col.Bounds;
h3d.col.Bounds.__name__ = "h3d.col.Bounds";
h3d.col.Bounds.__super__ = h3d.col.Collider;
Object.assign(h3d.col.Bounds.prototype, {
	__class__: h3d.col.Bounds
	,__properties__: {set_zSize: "set_zSize",get_zSize: "get_zSize",set_ySize: "set_ySize",get_ySize: "get_ySize",set_xSize: "set_xSize",get_xSize: "get_xSize"}
});
h3d.col.OptimizedCollider = class h3d_col_OptimizedCollider extends h3d.col.Collider {
	constructor(a,b) {
		super();
		this.a = a;
		this.b = b;
	}
	rayIntersection(r,bestMatch) {
		if(this.a.rayIntersection(r,bestMatch) < 0) {
			if(!this.checkInside) {
				return -1;
			}
			let x = r.px + 0 * r.lx;
			let y = r.py + 0 * r.ly;
			let z = r.pz + 0 * r.lz;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			if(!this.a.contains(new h3d.VectorImpl(x,y,z))) {
				return -1;
			}
		}
		return this.b.rayIntersection(r,bestMatch);
	}
	contains(p) {
		if(this.a.contains(p)) {
			return this.b.contains(p);
		} else {
			return false;
		}
	}
	inFrustum(f,m) {
		if(this.a.inFrustum(f,m)) {
			return this.b.inFrustum(f,m);
		} else {
			return false;
		}
	}
	inSphere(s) {
		if(this.a.inSphere(s)) {
			return this.b.inSphere(s);
		} else {
			return false;
		}
	}
	makeDebugObj() {
		let bobj = this.b.makeDebugObj();
		let aobj = this.a.makeDebugObj();
		if(aobj == null && bobj == null) {
			return null;
		}
		let ret = new h3d.scene.Object();
		if(aobj != null) {
			ret.addChild(aobj);
		}
		if(bobj != null) {
			ret.addChild(bobj);
		}
		return ret;
	}
}
$hxClasses["h3d.col.OptimizedCollider"] = h3d.col.OptimizedCollider;
h3d.col.OptimizedCollider.__name__ = "h3d.col.OptimizedCollider";
h3d.col.OptimizedCollider.__super__ = h3d.col.Collider;
Object.assign(h3d.col.OptimizedCollider.prototype, {
	__class__: h3d.col.OptimizedCollider
});
h3d.col.GroupCollider = class h3d_col_GroupCollider extends h3d.col.Collider {
	constructor(colliders) {
		super();
		this.colliders = colliders;
	}
	rayIntersection(r,bestMatch) {
		let best = -1.;
		let _g = 0;
		let _g1 = this.colliders;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let d = c.rayIntersection(r,bestMatch);
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
		}
		return best;
	}
	contains(p) {
		let _g = 0;
		let _g1 = this.colliders;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(c.contains(p)) {
				return true;
			}
		}
		return false;
	}
	inFrustum(f,m) {
		let _g = 0;
		let _g1 = this.colliders;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(c.inFrustum(f,m)) {
				return true;
			}
		}
		return false;
	}
	inSphere(s) {
		let _g = 0;
		let _g1 = this.colliders;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(c.inSphere(s)) {
				return true;
			}
		}
		return false;
	}
	makeDebugObj() {
		let ret = null;
		let _g = 0;
		let _g1 = this.colliders;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let toAdd = c.makeDebugObj();
			if(toAdd == null) {
				continue;
			}
			if(ret == null) {
				ret = new h3d.scene.Object();
			}
			ret.addChild(toAdd);
		}
		return ret;
	}
}
$hxClasses["h3d.col.GroupCollider"] = h3d.col.GroupCollider;
h3d.col.GroupCollider.__name__ = "h3d.col.GroupCollider";
h3d.col.GroupCollider.__super__ = h3d.col.Collider;
Object.assign(h3d.col.GroupCollider.prototype, {
	__class__: h3d.col.GroupCollider
});
h3d.col.FPoint = class h3d_col_FPoint {
	constructor(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	set(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	sub(p) {
		return new h3d.col.FPoint(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	add(p) {
		return new h3d.col.FPoint(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	cross(p) {
		return new h3d.col.FPoint(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	dot(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	toString() {
		return "FPoint{" + hxd.Math.fmt(this.x) + "," + hxd.Math.fmt(this.y) + "," + hxd.Math.fmt(this.z) + "}";
	}
}
$hxClasses["h3d.col.FPoint"] = h3d.col.FPoint;
h3d.col.FPoint.__name__ = "h3d.col.FPoint";
Object.assign(h3d.col.FPoint.prototype, {
	__class__: h3d.col.FPoint
});
h3d.col.Frustum = class h3d_col_Frustum {
	constructor(mvp) {
		this.checkNearFar = true;
		this.pleft = new h3d.col.Plane(1,0,0,0.0);
		this.pright = new h3d.col.Plane(1,0,0,0.0);
		this.ptop = new h3d.col.Plane(1,0,0,0.0);
		this.pbottom = new h3d.col.Plane(1,0,0,0.0);
		this.pnear = new h3d.col.Plane(1,0,0,0.0);
		this.pfar = new h3d.col.Plane(1,0,0,0.0);
		if(mvp != null) {
			this.loadMatrix(mvp);
		}
	}
	clone() {
		let f = new h3d.col.Frustum();
		let _this = f.pleft;
		let p = this.pleft;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		let _this1 = f.pright;
		let p1 = this.pright;
		_this1.nx = p1.nx;
		_this1.ny = p1.ny;
		_this1.nz = p1.nz;
		_this1.d = p1.d;
		let _this2 = f.ptop;
		let p2 = this.ptop;
		_this2.nx = p2.nx;
		_this2.ny = p2.ny;
		_this2.nz = p2.nz;
		_this2.d = p2.d;
		let _this3 = f.pbottom;
		let p3 = this.pbottom;
		_this3.nx = p3.nx;
		_this3.ny = p3.ny;
		_this3.nz = p3.nz;
		_this3.d = p3.d;
		let _this4 = f.pnear;
		let p4 = this.pnear;
		_this4.nx = p4.nx;
		_this4.ny = p4.ny;
		_this4.nz = p4.nz;
		_this4.d = p4.d;
		let _this5 = f.pfar;
		let p5 = this.pfar;
		_this5.nx = p5.nx;
		_this5.ny = p5.ny;
		_this5.nz = p5.nz;
		_this5.d = p5.d;
		f.checkNearFar = this.checkNearFar;
		return f;
	}
	loadMatrix(mvp) {
		let _this = this.pleft;
		let p_nx = mvp._14 + mvp._11;
		let p_ny = mvp._24 + mvp._21;
		let p_nz = mvp._34 + mvp._31;
		let p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		let _this1 = this.pright;
		let p_nx1 = mvp._14 - mvp._11;
		let p_ny1 = mvp._24 - mvp._21;
		let p_nz1 = mvp._34 - mvp._31;
		let p_d1 = mvp._41 - mvp._44;
		_this1.nx = p_nx1;
		_this1.ny = p_ny1;
		_this1.nz = p_nz1;
		_this1.d = p_d1;
		let _this2 = this.ptop;
		let p_nx2 = mvp._14 - mvp._12;
		let p_ny2 = mvp._24 - mvp._22;
		let p_nz2 = mvp._34 - mvp._32;
		let p_d2 = mvp._42 - mvp._44;
		_this2.nx = p_nx2;
		_this2.ny = p_ny2;
		_this2.nz = p_nz2;
		_this2.d = p_d2;
		let _this3 = this.pbottom;
		let p_nx3 = mvp._14 + mvp._12;
		let p_ny3 = mvp._24 + mvp._22;
		let p_nz3 = mvp._34 + mvp._32;
		let p_d3 = -(mvp._44 + mvp._42);
		_this3.nx = p_nx3;
		_this3.ny = p_ny3;
		_this3.nz = p_nz3;
		_this3.d = p_d3;
		let _this4 = this.pnear;
		let p_nx4 = mvp._13;
		let p_ny4 = mvp._23;
		let p_nz4 = mvp._33;
		let p_d4 = -mvp._43;
		_this4.nx = p_nx4;
		_this4.ny = p_ny4;
		_this4.nz = p_nz4;
		_this4.d = p_d4;
		let _this5 = this.pfar;
		let p_nx5 = mvp._14 - mvp._13;
		let p_ny5 = mvp._24 - mvp._23;
		let p_nz5 = mvp._34 - mvp._33;
		let p_d5 = mvp._43 - mvp._44;
		_this5.nx = p_nx5;
		_this5.ny = p_ny5;
		_this5.nz = p_nz5;
		_this5.d = p_d5;
		let _this6 = this.pleft;
		let len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		let _this7 = this.pright;
		let len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		let _this8 = this.ptop;
		let len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		let _this9 = this.pbottom;
		let len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		let _this10 = this.pnear;
		let len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		let _this11 = this.pfar;
		let len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	transform(m) {
		let m2 = new h3d.MatrixImpl();
		m2.initInverse(m);
		m2.transpose();
		let _this = this.pleft;
		let x = _this.nx;
		let y = _this.ny;
		let z = _this.nz;
		let w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		let w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let v_w = w1;
		let px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		let py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		let pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		let pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		let _this1 = this.pright;
		let x2 = _this1.nx;
		let y2 = _this1.ny;
		let z2 = _this1.nz;
		let w2 = -_this1.d;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		let w3 = w2;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let v_x1 = x3;
		let v_y1 = y3;
		let v_z1 = z3;
		let v_w1 = w3;
		let px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		let py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		let pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		let pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		let _this2 = this.ptop;
		let x4 = _this2.nx;
		let y4 = _this2.ny;
		let z4 = _this2.nz;
		let w4 = -_this2.d;
		if(w4 == null) {
			w4 = 1.;
		}
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		let w5 = w4;
		if(w5 == null) {
			w5 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let v_x2 = x5;
		let v_y2 = y5;
		let v_z2 = z5;
		let v_w2 = w5;
		let px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		let py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		let pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		let pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		let _this3 = this.pbottom;
		let x6 = _this3.nx;
		let y6 = _this3.ny;
		let z6 = _this3.nz;
		let w6 = -_this3.d;
		if(w6 == null) {
			w6 = 1.;
		}
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let x7 = x6;
		let y7 = y6;
		let z7 = z6;
		let w7 = w6;
		if(w7 == null) {
			w7 = 1.;
		}
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let v_x3 = x7;
		let v_y3 = y7;
		let v_z3 = z7;
		let v_w3 = w7;
		let px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		let py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		let pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		let pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		let _this4 = this.pfar;
		let x8 = _this4.nx;
		let y8 = _this4.ny;
		let z8 = _this4.nz;
		let w8 = -_this4.d;
		if(w8 == null) {
			w8 = 1.;
		}
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		let x9 = x8;
		let y9 = y8;
		let z9 = z8;
		let w9 = w8;
		if(w9 == null) {
			w9 = 1.;
		}
		if(z9 == null) {
			z9 = 0.;
		}
		if(y9 == null) {
			y9 = 0.;
		}
		if(x9 == null) {
			x9 = 0.;
		}
		let v_x4 = x9;
		let v_y4 = y9;
		let v_z4 = z9;
		let v_w4 = w9;
		let px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		let py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		let pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		let pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		let _this5 = this.pnear;
		let x10 = _this5.nx;
		let y10 = _this5.ny;
		let z10 = _this5.nz;
		let w10 = -_this5.d;
		if(w10 == null) {
			w10 = 1.;
		}
		if(z10 == null) {
			z10 = 0.;
		}
		if(y10 == null) {
			y10 = 0.;
		}
		if(x10 == null) {
			x10 = 0.;
		}
		let x11 = x10;
		let y11 = y10;
		let z11 = z10;
		let w11 = w10;
		if(w11 == null) {
			w11 = 1.;
		}
		if(z11 == null) {
			z11 = 0.;
		}
		if(y11 == null) {
			y11 = 0.;
		}
		if(x11 == null) {
			x11 = 0.;
		}
		let v_x5 = x11;
		let v_y5 = y11;
		let v_z5 = z11;
		let v_w5 = w11;
		let px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		let py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		let pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		let pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		let _this6 = this.pleft;
		let len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		let _this7 = this.pright;
		let len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		let _this8 = this.ptop;
		let len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		let _this9 = this.pbottom;
		let len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		let _this10 = this.pnear;
		let len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		let _this11 = this.pfar;
		let len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	transform3x3(m) {
		let m2 = new h3d.MatrixImpl();
		m2.initInverse3x3(m);
		m2.transpose();
		let _this = this.pleft;
		let x = _this.nx;
		let y = _this.ny;
		let z = _this.nz;
		let w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		let w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let v_w = w1;
		let px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		let py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		let pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		let pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		let _this1 = this.pright;
		let x2 = _this1.nx;
		let y2 = _this1.ny;
		let z2 = _this1.nz;
		let w2 = -_this1.d;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		let w3 = w2;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let v_x1 = x3;
		let v_y1 = y3;
		let v_z1 = z3;
		let v_w1 = w3;
		let px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		let py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		let pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		let pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		let _this2 = this.ptop;
		let x4 = _this2.nx;
		let y4 = _this2.ny;
		let z4 = _this2.nz;
		let w4 = -_this2.d;
		if(w4 == null) {
			w4 = 1.;
		}
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		let w5 = w4;
		if(w5 == null) {
			w5 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let v_x2 = x5;
		let v_y2 = y5;
		let v_z2 = z5;
		let v_w2 = w5;
		let px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		let py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		let pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		let pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		let _this3 = this.pbottom;
		let x6 = _this3.nx;
		let y6 = _this3.ny;
		let z6 = _this3.nz;
		let w6 = -_this3.d;
		if(w6 == null) {
			w6 = 1.;
		}
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let x7 = x6;
		let y7 = y6;
		let z7 = z6;
		let w7 = w6;
		if(w7 == null) {
			w7 = 1.;
		}
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let v_x3 = x7;
		let v_y3 = y7;
		let v_z3 = z7;
		let v_w3 = w7;
		let px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		let py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		let pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		let pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		let _this4 = this.pfar;
		let x8 = _this4.nx;
		let y8 = _this4.ny;
		let z8 = _this4.nz;
		let w8 = -_this4.d;
		if(w8 == null) {
			w8 = 1.;
		}
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		let x9 = x8;
		let y9 = y8;
		let z9 = z8;
		let w9 = w8;
		if(w9 == null) {
			w9 = 1.;
		}
		if(z9 == null) {
			z9 = 0.;
		}
		if(y9 == null) {
			y9 = 0.;
		}
		if(x9 == null) {
			x9 = 0.;
		}
		let v_x4 = x9;
		let v_y4 = y9;
		let v_z4 = z9;
		let v_w4 = w9;
		let px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		let py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		let pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		let pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		let _this5 = this.pnear;
		let x10 = _this5.nx;
		let y10 = _this5.ny;
		let z10 = _this5.nz;
		let w10 = -_this5.d;
		if(w10 == null) {
			w10 = 1.;
		}
		if(z10 == null) {
			z10 = 0.;
		}
		if(y10 == null) {
			y10 = 0.;
		}
		if(x10 == null) {
			x10 = 0.;
		}
		let x11 = x10;
		let y11 = y10;
		let z11 = z10;
		let w11 = w10;
		if(w11 == null) {
			w11 = 1.;
		}
		if(z11 == null) {
			z11 = 0.;
		}
		if(y11 == null) {
			y11 = 0.;
		}
		if(x11 == null) {
			x11 = 0.;
		}
		let v_x5 = x11;
		let v_y5 = y11;
		let v_z5 = z11;
		let v_w5 = w11;
		let px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		let py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		let pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		let pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		let _this6 = this.pleft;
		let len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		let _this7 = this.pright;
		let len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		let _this8 = this.ptop;
		let len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		let _this9 = this.pbottom;
		let len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		let _this10 = this.pnear;
		let len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		let _this11 = this.pfar;
		let len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	hasPoint(p) {
		let _this = this.pleft;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		let _this1 = this.pright;
		if(_this1.nx * p.x + _this1.ny * p.y + _this1.nz * p.z - _this1.d < 0) {
			return false;
		}
		let _this2 = this.ptop;
		if(_this2.nx * p.x + _this2.ny * p.y + _this2.nz * p.z - _this2.d < 0) {
			return false;
		}
		let _this3 = this.pbottom;
		if(_this3.nx * p.x + _this3.ny * p.y + _this3.nz * p.z - _this3.d < 0) {
			return false;
		}
		if(this.checkNearFar) {
			let _this = this.pnear;
			if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
				return false;
			}
			let _this1 = this.pfar;
			if(_this1.nx * p.x + _this1.ny * p.y + _this1.nz * p.z - _this1.d < 0) {
				return false;
			}
		}
		return true;
	}
	hasSphere(s) {
		let x = s.x;
		let y = s.y;
		let z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p_x = x1;
		let p_y = y1;
		let p_z = z1;
		let _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		let _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		let _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		let _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			let _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			let _this1 = this.pfar;
			if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	hasBounds(b) {
		let p = this.pleft;
		let a = p.nx;
		let b1 = p.ny;
		let c = p.nz;
		let dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		let rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		let p1 = this.pright;
		let a1 = p1.nx;
		let b2 = p1.ny;
		let c1 = p1.nz;
		let dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		let rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		let p2 = this.ptop;
		let a2 = p2.nx;
		let b3 = p2.ny;
		let c2 = p2.nz;
		let dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		let rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		let p3 = this.pbottom;
		let a3 = p3.nx;
		let b4 = p3.ny;
		let c3 = p3.nz;
		let dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		let rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		let p4 = this.pnear;
		let a4 = p4.nx;
		let b5 = p4.ny;
		let c4 = p4.nz;
		let dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		let rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		let p5 = this.pfar;
		let a5 = p5.nx;
		let b6 = p5.ny;
		let c5 = p5.nz;
		let dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		let rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
}
$hxClasses["h3d.col.Frustum"] = h3d.col.Frustum;
h3d.col.Frustum.__name__ = "h3d.col.Frustum";
Object.assign(h3d.col.Frustum.prototype, {
	__class__: h3d.col.Frustum
});
h3d.col.Ray = class h3d_col_Ray {
	constructor() {
	}
	clone() {
		let r = new h3d.col.Ray();
		r.px = this.px;
		r.py = this.py;
		r.pz = this.pz;
		r.lx = this.lx;
		r.ly = this.ly;
		r.lz = this.lz;
		return r;
	}
	load(r) {
		this.px = r.px;
		this.py = r.py;
		this.pz = r.pz;
		this.lx = r.lx;
		this.ly = r.ly;
		this.lz = r.lz;
	}
	normalize() {
		let l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	transform(m) {
		let x = this.px;
		let y = this.py;
		let z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p_x = x1;
		let p_y = y1;
		let p_z = z1;
		let px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		let py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		let pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.px = p_x;
		this.py = p_y;
		this.pz = p_z;
		let x2 = this.lx;
		let y2 = this.ly;
		let z2 = this.lz;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x = x3;
		let _this_y = y3;
		let _this_z = z3;
		let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px1;
		_this_y = py1;
		_this_z = pz1;
		this.lx = _this_x;
		this.ly = _this_y;
		this.lz = _this_z;
		this.normalize();
	}
	getPos() {
		let x = this.px;
		let y = this.py;
		let z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getDir() {
		let x = this.lx;
		let y = this.ly;
		let z = this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getPoint(distance) {
		let x = this.px + distance * this.lx;
		let y = this.py + distance * this.ly;
		let z = this.pz + distance * this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	toString() {
		let x = this.px;
		let y = this.py;
		let z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let tmp = "Ray{" + Std.string(new h3d.VectorImpl(x,y,z)) + ",";
		let x1 = this.lx;
		let y1 = this.ly;
		let z1 = this.lz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		return tmp + Std.string(new h3d.VectorImpl(x1,y1,z1)) + "}";
	}
	distance(p) {
		let d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		let nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				return 0.;
			} else {
				return -1;
			}
		} else {
			return nd / d;
		}
	}
	intersect(p) {
		let d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		let nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				let x = this.px;
				let y = this.py;
				let z = this.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				return new h3d.VectorImpl(x,y,z);
			} else {
				return null;
			}
		} else {
			let k = nd / d;
			let x = this.px + this.lx * k;
			let y = this.py + this.ly * k;
			let z = this.pz + this.lz * k;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h3d.VectorImpl(x,y,z);
		}
	}
	collideFrustum(mvp) {
		let x = this.px;
		let y = this.py;
		let z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let px = _this_x * mvp._11 + _this_y * mvp._21 + _this_z * mvp._31 + mvp._41;
		let py = _this_x * mvp._12 + _this_y * mvp._22 + _this_z * mvp._32 + mvp._42;
		let pz = _this_x * mvp._13 + _this_y * mvp._23 + _this_z * mvp._33 + mvp._43;
		let iw = 1 / (_this_x * mvp._14 + _this_y * mvp._24 + _this_z * mvp._34 + mvp._44);
		_this_x = px * iw;
		_this_y = py * iw;
		_this_z = pz * iw;
		let x2 = this.px + this.lx;
		let y2 = this.py + this.ly;
		let z2 = this.pz + this.lz;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x1 = x3;
		let _this_y1 = y3;
		let _this_z1 = z3;
		let px1 = _this_x1 * mvp._11 + _this_y1 * mvp._21 + _this_z1 * mvp._31 + mvp._41;
		let py1 = _this_x1 * mvp._12 + _this_y1 * mvp._22 + _this_z1 * mvp._32 + mvp._42;
		let pz1 = _this_x1 * mvp._13 + _this_y1 * mvp._23 + _this_z1 * mvp._33 + mvp._43;
		let iw1 = 1 / (_this_x1 * mvp._14 + _this_y1 * mvp._24 + _this_z1 * mvp._34 + mvp._44);
		_this_x1 = px1 * iw1;
		_this_y1 = py1 * iw1;
		_this_z1 = pz1 * iw1;
		let lx = _this_x1 - _this_x;
		let ly = _this_y1 - _this_y;
		let lz = _this_z1 - _this_z;
		let dx = 1 / lx;
		let dy = 1 / ly;
		let dz = 1 / lz;
		let t1 = (-1 - _this_x) * dx;
		let t2 = (1 - _this_x) * dx;
		let t3 = (-1 - _this_y) * dy;
		let t4 = (1 - _this_y) * dy;
		let t5 = (0 - _this_z) * dz;
		let t6 = (1 - _this_z) * dz;
		let a = t1 > t2 ? t2 : t1;
		let b = t3 > t4 ? t4 : t3;
		let a1 = a < b ? b : a;
		let b1 = t5 > t6 ? t6 : t5;
		let tmin = a1 < b1 ? b1 : a1;
		let a2 = t1 < t2 ? t2 : t1;
		let b2 = t3 < t4 ? t4 : t3;
		let a3 = a2 > b2 ? b2 : a2;
		let b3 = t5 < t6 ? t6 : t5;
		let tmax = a3 > b3 ? b3 : a3;
		return !(tmax < 0 || tmin > tmax);
	}
	collide(b) {
		let dx = 1 / this.lx;
		let dy = 1 / this.ly;
		let dz = 1 / this.lz;
		let t1 = (b.xMin - this.px) * dx;
		let t2 = (b.xMax - this.px) * dx;
		let t3 = (b.yMin - this.py) * dy;
		let t4 = (b.yMax - this.py) * dy;
		let t5 = (b.zMin - this.pz) * dz;
		let t6 = (b.zMax - this.pz) * dz;
		let a = t1 > t2 ? t2 : t1;
		let b1 = t3 > t4 ? t4 : t3;
		let a1 = a < b1 ? b1 : a;
		let b2 = t5 > t6 ? t6 : t5;
		let tmin = a1 < b2 ? b2 : a1;
		let a2 = t1 < t2 ? t2 : t1;
		let b3 = t3 < t4 ? t4 : t3;
		let a3 = a2 > b3 ? b3 : a2;
		let b4 = t5 < t6 ? t6 : t5;
		let tmax = a3 > b4 ? b4 : a3;
		if(tmax < 0) {
			return false;
		} else if(tmin > tmax) {
			return false;
		} else {
			return true;
		}
	}
	static fromPoints(p1,p2) {
		let r = new h3d.col.Ray();
		r.px = p1.x;
		r.py = p1.y;
		r.pz = p1.z;
		r.lx = p2.x - p1.x;
		r.ly = p2.y - p1.y;
		r.lz = p2.z - p1.z;
		r.normalize();
		return r;
	}
	static fromValues(x,y,z,dx,dy,dz) {
		let r = new h3d.col.Ray();
		r.px = x;
		r.py = y;
		r.pz = z;
		r.lx = dx;
		r.ly = dy;
		r.lz = dz;
		r.normalize();
		return r;
	}
}
$hxClasses["h3d.col.Ray"] = h3d.col.Ray;
h3d.col.Ray.__name__ = "h3d.col.Ray";
Object.assign(h3d.col.Ray.prototype, {
	__class__: h3d.col.Ray
});
h3d.col.ObjectCollider = class h3d_col_ObjectCollider extends h3d.col.Collider {
	constructor(obj,collider) {
		super();
		this.obj = obj;
		this.collider = collider;
	}
	rayIntersection(r,bestMatch) {
		let tmpRay = h3d.col.ObjectCollider.TMP_RAY;
		h3d.col.ObjectCollider.TMP_RAY = null;
		tmpRay.px = r.px;
		tmpRay.py = r.py;
		tmpRay.pz = r.pz;
		tmpRay.lx = r.lx;
		tmpRay.ly = r.ly;
		tmpRay.lz = r.lz;
		let m = this.obj.getInvPos();
		let x = r.px;
		let y = r.py;
		let z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p_x = x1;
		let p_y = y1;
		let p_z = z1;
		let px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		let py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		let pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		r.px = p_x;
		r.py = p_y;
		r.pz = p_z;
		let x2 = r.lx;
		let y2 = r.ly;
		let z2 = r.lz;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x = x3;
		let _this_y = y3;
		let _this_z = z3;
		let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px1;
		_this_y = py1;
		_this_z = pz1;
		r.lx = _this_x;
		r.ly = _this_y;
		r.lz = _this_z;
		r.normalize();
		let hit = this.collider.rayIntersection(r,bestMatch);
		if(hit < 0) {
			r.px = tmpRay.px;
			r.py = tmpRay.py;
			r.pz = tmpRay.pz;
			r.lx = tmpRay.lx;
			r.ly = tmpRay.ly;
			r.lz = tmpRay.lz;
			h3d.col.ObjectCollider.TMP_RAY = tmpRay;
			return hit;
		}
		let x4 = r.px + hit * r.lx;
		let y4 = r.py + hit * r.ly;
		let z4 = r.pz + hit * r.lz;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let pt_x = x5;
		let pt_y = y5;
		let pt_z = z5;
		let m1 = this.obj.absPos;
		let px2 = pt_x * m1._11 + pt_y * m1._21 + pt_z * m1._31 + m1._41;
		let py2 = pt_x * m1._12 + pt_y * m1._22 + pt_z * m1._32 + m1._42;
		let pz2 = pt_x * m1._13 + pt_y * m1._23 + pt_z * m1._33 + m1._43;
		pt_x = px2;
		pt_y = py2;
		pt_z = pz2;
		r.px = tmpRay.px;
		r.py = tmpRay.py;
		r.pz = tmpRay.pz;
		r.lx = tmpRay.lx;
		r.ly = tmpRay.ly;
		r.lz = tmpRay.lz;
		h3d.col.ObjectCollider.TMP_RAY = tmpRay;
		let dx = pt_x - r.px;
		let dy = pt_y - r.py;
		let dz = pt_z - r.pz;
		if(dz == null) {
			dz = 0.;
		}
		let dz1 = dz;
		if(dz1 == null) {
			dz1 = 0.;
		}
		return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
	}
	contains(p) {
		let _this = p;
		let x = _this.x;
		let y = _this.y;
		let z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let ptmp_x = x1;
		let ptmp_y = y1;
		let ptmp_z = z1;
		let m = this.obj.getInvPos();
		let px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		let py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		let pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		p.x = px;
		p.y = py;
		p.z = pz;
		let b = this.collider.contains(p);
		let _this1 = p;
		_this1.x = ptmp_x;
		_this1.y = ptmp_y;
		_this1.z = ptmp_z;
		return b;
	}
	inFrustum(f,m) {
		if(m == null) {
			return this.collider.inFrustum(f,this.obj.getAbsPos());
		}
		let mat = h3d.col.ObjectCollider.TMP_MAT;
		let _this = mat;
		let b = this.obj.getAbsPos();
		let m11 = m._11;
		let m12 = m._12;
		let m13 = m._13;
		let m21 = m._21;
		let m22 = m._22;
		let m23 = m._23;
		let a31 = m._31;
		let a32 = m._32;
		let a33 = m._33;
		let a41 = m._41;
		let a42 = m._42;
		let a43 = m._43;
		let b11 = b._11;
		let b12 = b._12;
		let b13 = b._13;
		let b21 = b._21;
		let b22 = b._22;
		let b23 = b._23;
		let b31 = b._31;
		let b32 = b._32;
		let b33 = b._33;
		let b41 = b._41;
		let b42 = b._42;
		let b43 = b._43;
		_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		_this._14 = 0;
		_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		_this._24 = 0;
		_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		_this._34 = 0;
		_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		_this._44 = 1;
		return this.collider.inFrustum(f,mat);
	}
	inSphere(s) {
		let invMat = this.obj.getInvPos();
		let oldX = s.x;
		let oldY = s.y;
		let oldZ = s.z;
		let oldR = s.r;
		let x = s.x;
		let y = s.y;
		let z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let center_x = x1;
		let center_y = y1;
		let center_z = z1;
		let px = center_x * invMat._11 + center_y * invMat._21 + center_z * invMat._31 + invMat._41;
		let py = center_x * invMat._12 + center_y * invMat._22 + center_z * invMat._32 + invMat._42;
		let pz = center_x * invMat._13 + center_y * invMat._23 + center_z * invMat._33 + invMat._43;
		center_x = px;
		center_y = py;
		center_z = pz;
		let _this = invMat;
		let x2 = 0.;
		let y2 = 0.;
		let z2 = 0.;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let scale_x = x2;
		let scale_y = y2;
		let scale_z = z2;
		scale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		scale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		scale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		s.x = center_x;
		s.y = center_y;
		s.z = center_z;
		s.r *= Math.max(Math.max(scale_x,scale_y),scale_z);
		let res = this.collider.inSphere(s);
		s.x = oldX;
		s.y = oldY;
		s.z = oldZ;
		s.r = oldR;
		return res;
	}
	makeDebugObj() {
		let ret = this.collider.makeDebugObj();
		if(ret != null) {
			ret.set_follow(this.obj);
		}
		return ret;
	}
}
$hxClasses["h3d.col.ObjectCollider"] = h3d.col.ObjectCollider;
h3d.col.ObjectCollider.__name__ = "h3d.col.ObjectCollider";
h3d.col.ObjectCollider.__super__ = h3d.col.Collider;
Object.assign(h3d.col.ObjectCollider.prototype, {
	__class__: h3d.col.ObjectCollider
});
h3d.col.Plane = class h3d_col_Plane {
	constructor(nx,ny,nz,d) {
		this.nx = nx;
		this.ny = ny;
		this.nz = nz;
		this.d = d;
	}
	getNormal() {
		let x = this.nx;
		let y = this.ny;
		let z = this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getNormalDistance() {
		return this.d;
	}
	load(p) {
		this.nx = p.nx;
		this.ny = p.ny;
		this.nz = p.nz;
		this.d = p.d;
	}
	transform(m) {
		let m2 = new h3d.MatrixImpl();
		m2.initInverse(m);
		m2.transpose();
		let x = this.nx;
		let y = this.ny;
		let z = this.nz;
		let w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		let w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let v_w = w1;
		let px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		let py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		let pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		let pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	transform3x3(m) {
		let m2 = new h3d.MatrixImpl();
		m2.initInverse3x3(m);
		m2.transpose();
		let x = this.nx;
		let y = this.ny;
		let z = this.nz;
		let w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		let w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let v_w = w1;
		let px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		let py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		let pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		let pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	transformInverseTranspose(m) {
		let x = this.nx;
		let y = this.ny;
		let z = this.nz;
		let w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		let w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let v_w = w1;
		let px = v_x * m._11 + v_y * m._21 + v_z * m._31 + v_w * m._41;
		let py = v_x * m._12 + v_y * m._22 + v_z * m._32 + v_w * m._42;
		let pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + v_w * m._43;
		let pw = v_x * m._14 + v_y * m._24 + v_z * m._34 + v_w * m._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	normalize() {
		let len = 1. / Math.sqrt(this.nx * this.nx + this.ny * this.ny + this.nz * this.nz);
		this.nx *= len;
		this.ny *= len;
		this.nz *= len;
		this.d *= len;
	}
	toString() {
		let x = this.nx;
		let y = this.ny;
		let z = this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return "Plane{" + Std.string(new h3d.VectorImpl(x,y,z)) + "," + hxd.Math.fmt(this.d) + "}";
	}
	distance(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
	}
	side(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	project(p) {
		let d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		let x = p.x - d * this.nx;
		let y = p.y - d * this.ny;
		let z = p.z - d * this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	projectTo(p,out) {
		let d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		out.x = p.x - d * this.nx;
		out.y = p.y - d * this.ny;
		out.z = p.z - d * this.nz;
	}
	static fromPoints(p0,p1,p2) {
		let x = p1.x - p0.x;
		let y = p1.y - p0.y;
		let z = p1.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let x2 = p2.x - p0.x;
		let y2 = p2.y - p0.y;
		let z2 = p2.z - p0.z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let d2_x = x3;
		let d2_y = y3;
		let d2_z = z3;
		let x4 = _this_y * d2_z - _this_z * d2_y;
		let y4 = _this_z * d2_x - _this_x * d2_z;
		let z4 = _this_x * d2_y - _this_y * d2_x;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let _this_x1 = x5;
		let _this_y1 = y5;
		let _this_z1 = z5;
		return new h3d.col.Plane(_this_x1,_this_y1,_this_z1,_this_x1 * p0.x + _this_y1 * p0.y + _this_z1 * p0.z);
	}
	static fromNormalPoint(n,p) {
		let _this = n;
		return new h3d.col.Plane(n.x,n.y,n.z,_this.x * p.x + _this.y * p.y + _this.z * p.z);
	}
	static X(v) {
		if(v == null) {
			v = 0.0;
		}
		return new h3d.col.Plane(1,0,0,v);
	}
	static Y(v) {
		if(v == null) {
			v = 0.0;
		}
		return new h3d.col.Plane(0,1,0,v);
	}
	static Z(v) {
		if(v == null) {
			v = 0.0;
		}
		return new h3d.col.Plane(0,0,1,v);
	}
	static frustumLeft(mvp) {
		return new h3d.col.Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
	}
	static frustumRight(mvp) {
		return new h3d.col.Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
	}
	static frustumBottom(mvp) {
		return new h3d.col.Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
	}
	static frustumTop(mvp) {
		return new h3d.col.Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
	}
	static frustumNear(mvp) {
		return new h3d.col.Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
	}
	static frustumFar(mvp) {
		return new h3d.col.Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
	}
}
$hxClasses["h3d.col.Plane"] = h3d.col.Plane;
h3d.col.Plane.__name__ = "h3d.col.Plane";
Object.assign(h3d.col.Plane.prototype, {
	__class__: h3d.col.Plane
});
h3d.col.TriPlane = class h3d_col_TriPlane extends h3d.col.Collider {
	constructor() {
		super();
		this.next = null;
	}
	init(p0,p1,p2) {
		this.p0x = p0.x;
		this.p0y = p0.y;
		this.p0z = p0.z;
		let x = p1.x - p0.x;
		let y = p1.y - p0.y;
		let z = p1.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let x2 = p2.x - p0.x;
		let y2 = p2.y - p0.y;
		let z2 = p2.z - p0.z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x1 = x3;
		let _this_y1 = y3;
		let _this_z1 = z3;
		let x4 = _this_y * _this_z1 - _this_z * _this_y1;
		let y4 = _this_z * _this_x1 - _this_x * _this_z1;
		let z4 = _this_x * _this_y1 - _this_y * _this_x1;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let _this_x2 = x5;
		let _this_y2 = y5;
		let _this_z2 = z5;
		this.d = _this_x2 * p0.x + _this_y2 * p0.y + _this_z2 * p0.z;
		this.nx = _this_x2;
		this.ny = _this_y2;
		this.nz = _this_z2;
		this.d1x = _this_x;
		this.d1y = _this_y;
		this.d1z = _this_z;
		this.d2x = _this_x1;
		this.d2y = _this_y1;
		this.d2z = _this_z1;
		this.dot00 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		this.dot01 = _this_x * _this_x1 + _this_y * _this_y1 + _this_z * _this_z1;
		this.dot11 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	clone() {
		let clone = new h3d.col.TriPlane();
		clone.p0x = this.p0x;
		clone.p0y = this.p0y;
		clone.p0z = this.p0z;
		clone.d1x = this.d1x;
		clone.d1y = this.d1y;
		clone.d1z = this.d1z;
		clone.d2x = this.d2x;
		clone.d2y = this.d2y;
		clone.d2z = this.d2z;
		clone.dot00 = this.dot00;
		clone.dot01 = this.dot01;
		clone.dot11 = this.dot11;
		clone.invDenom = this.invDenom;
		clone.nx = this.nx;
		clone.ny = this.ny;
		clone.nz = this.nz;
		clone.d = this.d;
		if(this.next != null) {
			clone.next = this.next.clone();
		}
		return clone;
	}
	load(tp) {
		this.p0x = tp.p0x;
		this.p0y = tp.p0y;
		this.p0z = tp.p0z;
		this.d1x = tp.d1x;
		this.d1y = tp.d1y;
		this.d1z = tp.d1z;
		this.d2x = tp.d2x;
		this.d2y = tp.d2y;
		this.d2z = tp.d2z;
		this.dot00 = tp.dot00;
		this.dot01 = tp.dot01;
		this.dot11 = tp.dot11;
		this.invDenom = tp.invDenom;
		this.nx = tp.nx;
		this.ny = tp.ny;
		this.nz = tp.nz;
		this.d = tp.d;
	}
	transform(m) {
		let x = this.p0x;
		let y = this.p0y;
		let z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p0_x = x1;
		let p0_y = y1;
		let p0_z = z1;
		let x2 = this.d1x + this.p0x;
		let y2 = this.d1y + this.p0y;
		let z2 = this.d1z + this.p0z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let p1_x = x3;
		let p1_y = y3;
		let p1_z = z3;
		let x4 = this.d2x + this.p0x;
		let y4 = this.d2y + this.p0y;
		let z4 = this.d2z + this.p0z;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let x5 = x4;
		let y5 = y4;
		let z5 = z4;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let p2_x = x5;
		let p2_y = y5;
		let p2_z = z5;
		let px = p0_x * m._11 + p0_y * m._21 + p0_z * m._31 + m._41;
		let py = p0_x * m._12 + p0_y * m._22 + p0_z * m._32 + m._42;
		let pz = p0_x * m._13 + p0_y * m._23 + p0_z * m._33 + m._43;
		p0_x = px;
		p0_y = py;
		p0_z = pz;
		let px1 = p1_x * m._11 + p1_y * m._21 + p1_z * m._31 + m._41;
		let py1 = p1_x * m._12 + p1_y * m._22 + p1_z * m._32 + m._42;
		let pz1 = p1_x * m._13 + p1_y * m._23 + p1_z * m._33 + m._43;
		p1_x = px1;
		p1_y = py1;
		p1_z = pz1;
		let px2 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
		let py2 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
		let pz2 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
		p2_x = px2;
		p2_y = py2;
		p2_z = pz2;
		this.p0x = p0_x;
		this.p0y = p0_y;
		this.p0z = p0_z;
		let x6 = p1_x - p0_x;
		let y6 = p1_y - p0_y;
		let z6 = p1_z - p0_z;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let x7 = x6;
		let y7 = y6;
		let z7 = z6;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let _this_x = x7;
		let _this_y = y7;
		let _this_z = z7;
		let x8 = p2_x - p0_x;
		let y8 = p2_y - p0_y;
		let z8 = p2_z - p0_z;
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		let x9 = x8;
		let y9 = y8;
		let z9 = z8;
		if(z9 == null) {
			z9 = 0.;
		}
		if(y9 == null) {
			y9 = 0.;
		}
		if(x9 == null) {
			x9 = 0.;
		}
		let _this_x1 = x9;
		let _this_y1 = y9;
		let _this_z1 = z9;
		let x10 = _this_y * _this_z1 - _this_z * _this_y1;
		let y10 = _this_z * _this_x1 - _this_x * _this_z1;
		let z10 = _this_x * _this_y1 - _this_y * _this_x1;
		if(z10 == null) {
			z10 = 0.;
		}
		if(y10 == null) {
			y10 = 0.;
		}
		if(x10 == null) {
			x10 = 0.;
		}
		let x11 = x10;
		let y11 = y10;
		let z11 = z10;
		if(z11 == null) {
			z11 = 0.;
		}
		if(y11 == null) {
			y11 = 0.;
		}
		if(x11 == null) {
			x11 = 0.;
		}
		let _this_x2 = x11;
		let _this_y2 = y11;
		let _this_z2 = z11;
		this.d = _this_x2 * p0_x + _this_y2 * p0_y + _this_z2 * p0_z;
		this.nx = _this_x2;
		this.ny = _this_y2;
		this.nz = _this_z2;
		this.d1x = _this_x;
		this.d1y = _this_y;
		this.d1z = _this_z;
		this.d2x = _this_x1;
		this.d2y = _this_y1;
		this.d2z = _this_z1;
		this.dot00 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		this.dot01 = _this_x * _this_x1 + _this_y * _this_y1 + _this_z * _this_z1;
		this.dot11 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	contains(p) {
		let x = p.x - this.p0x;
		let y = p.y - this.p0y;
		let z = p.z - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v2_x = x1;
		let v2_y = y1;
		let v2_z = z1;
		let dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		let dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		let u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		let v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	side(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	inFrustum(f,m) {
		throw haxe.Exception.thrown("Not implemented");
	}
	inSphere(s) {
		throw haxe.Exception.thrown("Not implemented");
	}
	rayIntersection(r,bestMatch) {
		let dr = r.lx * this.nx + r.ly * this.ny + r.lz * this.nz;
		if(dr >= 0) {
			return -1.;
		}
		let nd = this.d - (r.px * this.nx + r.py * this.ny + r.pz * this.nz);
		let k = nd / dr;
		if(k < 0) {
			return -1;
		}
		let px = r.px + r.lx * k;
		let py = r.py + r.ly * k;
		let pz = r.pz + r.lz * k;
		let x = px - this.p0x;
		let y = py - this.p0y;
		let z = pz - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v2_x = x1;
		let v2_y = y1;
		let v2_z = z1;
		let dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		let dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		let u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		let v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(!(u >= 0 && v >= 0 && u + v < 1)) {
			return -1;
		}
		return k;
	}
	isPointInTriangle(x,y,z) {
		let x1 = x - this.p0x;
		let y1 = y - this.p0y;
		let z1 = z - this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let x2 = x1;
		let y2 = y1;
		let z2 = z1;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let v2_x = x2;
		let v2_y = y2;
		let v2_z = z2;
		let dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		let dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		let u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		let v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	getPoints() {
		let x = this.p0x;
		let y = this.p0y;
		let z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let this1 = new h3d.VectorImpl(x,y,z);
		let x1 = this.d1x + this.p0x;
		let y1 = this.d1y + this.p0y;
		let z1 = this.d1z + this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let this2 = new h3d.VectorImpl(x1,y1,z1);
		let x2 = this.d2x + this.p0x;
		let y2 = this.d2y + this.p0y;
		let z2 = this.d2z + this.p0z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		return [this1,this2,new h3d.VectorImpl(x2,y2,z2)];
	}
	makeDebugObj() {
		let x = this.p0x;
		let y = this.p0y;
		let z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let p0 = new h3d.VectorImpl(x,y,z);
		let x1 = this.d1x;
		let y1 = this.d1y;
		let z1 = this.d1z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let x2 = x1;
		let y2 = y1;
		let z2 = z1;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let d1_x = x2;
		let d1_y = y2;
		let d1_z = z2;
		let x3 = this.d2x;
		let y3 = this.d2y;
		let z3 = this.d2z;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let x4 = x3;
		let y4 = y3;
		let z4 = z3;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let d2_x = x4;
		let d2_y = y4;
		let d2_z = z4;
		let x5 = d1_x + p0.x;
		let y5 = d1_y + p0.y;
		let z5 = d1_z + p0.z;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let this1 = new h3d.VectorImpl(x5,y5,z5);
		let x6 = d2_x + p0.x;
		let y6 = d2_y + p0.y;
		let z6 = d2_z + p0.z;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let points = [p0,this1,new h3d.VectorImpl(x6,y6,z6)];
		let prim = new h3d.prim.Polygon(points);
		prim.addNormals();
		return new h3d.scene.Mesh(prim);
	}
}
$hxClasses["h3d.col.TriPlane"] = h3d.col.TriPlane;
h3d.col.TriPlane.__name__ = "h3d.col.TriPlane";
h3d.col.TriPlane.__super__ = h3d.col.Collider;
Object.assign(h3d.col.TriPlane.prototype, {
	__class__: h3d.col.TriPlane
});
h3d.col.Polygon = class h3d_col_Polygon extends h3d.col.Collider {
	constructor() {
		super();
	}
	addBuffers(vertexes,indexes,stride) {
		if(stride == null) {
			stride = 3;
		}
		let _g = 0;
		let _g1 = indexes.length / 3 | 0;
		while(_g < _g1) {
			let i = _g++;
			let k = i * 3;
			let t = new h3d.col.TriPlane();
			let i0 = indexes[k] * stride;
			let i1 = indexes[k + 1] * stride;
			let i2 = indexes[k + 2] * stride;
			let x = vertexes[i0];
			let y = vertexes[i0 + 1];
			let z = vertexes[i0 + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p0_x = x1;
			let p0_y = y1;
			let p0_z = z1;
			let x2 = vertexes[i1];
			let y2 = vertexes[i1 + 1];
			let z2 = vertexes[i1 + 2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let x3 = x2;
			let y3 = y2;
			let z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let p1_x = x3;
			let p1_y = y3;
			let p1_z = z3;
			let x4 = vertexes[i2];
			let y4 = vertexes[i2 + 1];
			let z4 = vertexes[i2 + 2];
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let x5 = x4;
			let y5 = y4;
			let z5 = z4;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let p2_x = x5;
			let p2_y = y5;
			let p2_z = z5;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			let x6 = p1_x - p0_x;
			let y6 = p1_y - p0_y;
			let z6 = p1_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let x7 = x6;
			let y7 = y6;
			let z7 = z6;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let _this_x = x7;
			let _this_y = y7;
			let _this_z = z7;
			let x8 = p2_x - p0_x;
			let y8 = p2_y - p0_y;
			let z8 = p2_z - p0_z;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			let x9 = x8;
			let y9 = y8;
			let z9 = z8;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			let _this_x1 = x9;
			let _this_y1 = y9;
			let _this_z1 = z9;
			let x10 = _this_y * _this_z1 - _this_z * _this_y1;
			let y10 = _this_z * _this_x1 - _this_x * _this_z1;
			let z10 = _this_x * _this_y1 - _this_y * _this_x1;
			if(z10 == null) {
				z10 = 0.;
			}
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			let x11 = x10;
			let y11 = y10;
			let z11 = z10;
			if(z11 == null) {
				z11 = 0.;
			}
			if(y11 == null) {
				y11 = 0.;
			}
			if(x11 == null) {
				x11 = 0.;
			}
			let _this_x2 = x11;
			let _this_y2 = y11;
			let _this_z2 = z11;
			t.d = _this_x2 * p0_x + _this_y2 * p0_y + _this_z2 * p0_z;
			t.nx = _this_x2;
			t.ny = _this_y2;
			t.nz = _this_z2;
			t.d1x = _this_x;
			t.d1y = _this_y;
			t.d1z = _this_z;
			t.d2x = _this_x1;
			t.d2y = _this_y1;
			t.d2z = _this_z1;
			t.dot00 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
			t.dot01 = _this_x * _this_x1 + _this_y * _this_y1 + _this_z * _this_z1;
			t.dot11 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = this.triPlanes;
			this.triPlanes = t;
		}
	}
	isConvex() {
		return true;
	}
	clone() {
		let clone = new h3d.col.Polygon();
		let _this = this.triPlanes;
		let clone1 = new h3d.col.TriPlane();
		clone1.p0x = _this.p0x;
		clone1.p0y = _this.p0y;
		clone1.p0z = _this.p0z;
		clone1.d1x = _this.d1x;
		clone1.d1y = _this.d1y;
		clone1.d1z = _this.d1z;
		clone1.d2x = _this.d2x;
		clone1.d2y = _this.d2y;
		clone1.d2z = _this.d2z;
		clone1.dot00 = _this.dot00;
		clone1.dot01 = _this.dot01;
		clone1.dot11 = _this.dot11;
		clone1.invDenom = _this.invDenom;
		clone1.nx = _this.nx;
		clone1.ny = _this.ny;
		clone1.nz = _this.nz;
		clone1.d = _this.d;
		if(_this.next != null) {
			let _this1 = _this.next;
			let clone = new h3d.col.TriPlane();
			clone.p0x = _this1.p0x;
			clone.p0y = _this1.p0y;
			clone.p0z = _this1.p0z;
			clone.d1x = _this1.d1x;
			clone.d1y = _this1.d1y;
			clone.d1z = _this1.d1z;
			clone.d2x = _this1.d2x;
			clone.d2y = _this1.d2y;
			clone.d2z = _this1.d2z;
			clone.dot00 = _this1.dot00;
			clone.dot01 = _this1.dot01;
			clone.dot11 = _this1.dot11;
			clone.invDenom = _this1.invDenom;
			clone.nx = _this1.nx;
			clone.ny = _this1.ny;
			clone.nz = _this1.nz;
			clone.d = _this1.d;
			if(_this1.next != null) {
				clone.next = _this1.next.clone();
			}
			clone1.next = clone;
		}
		clone.triPlanes = clone1;
		return clone;
	}
	transform(m) {
		let t = this.triPlanes;
		while(t != null) {
			t.transform(m);
			t = t.next;
		}
	}
	getPoints() {
		let ret = [];
		let t = this.triPlanes;
		while(t != null) {
			ret = ret.concat(t.getPoints());
			t = t.next;
		}
		return ret;
	}
	getBounds(bnds) {
		if(bnds == null) {
			bnds = new h3d.col.Bounds();
		}
		bnds.xMin = 1e20;
		bnds.xMax = -1e20;
		bnds.yMin = 1e20;
		bnds.yMax = -1e20;
		bnds.zMin = 1e20;
		bnds.zMax = -1e20;
		let t = this.triPlanes;
		while(t != null) {
			let x = t.p0x;
			let y = t.p0y;
			let z = t.p0z;
			if(x < bnds.xMin) {
				bnds.xMin = x;
			}
			if(x > bnds.xMax) {
				bnds.xMax = x;
			}
			if(y < bnds.yMin) {
				bnds.yMin = y;
			}
			if(y > bnds.yMax) {
				bnds.yMax = y;
			}
			if(z < bnds.zMin) {
				bnds.zMin = z;
			}
			if(z > bnds.zMax) {
				bnds.zMax = z;
			}
			let x1 = t.d1x + t.p0x;
			let y1 = t.d1y + t.p0y;
			let z1 = t.d1z + t.p0z;
			if(x1 < bnds.xMin) {
				bnds.xMin = x1;
			}
			if(x1 > bnds.xMax) {
				bnds.xMax = x1;
			}
			if(y1 < bnds.yMin) {
				bnds.yMin = y1;
			}
			if(y1 > bnds.yMax) {
				bnds.yMax = y1;
			}
			if(z1 < bnds.zMin) {
				bnds.zMin = z1;
			}
			if(z1 > bnds.zMax) {
				bnds.zMax = z1;
			}
			let x2 = t.d2x + t.p0x;
			let y2 = t.d2y + t.p0y;
			let z2 = t.d2z + t.p0z;
			if(x2 < bnds.xMin) {
				bnds.xMin = x2;
			}
			if(x2 > bnds.xMax) {
				bnds.xMax = x2;
			}
			if(y2 < bnds.yMin) {
				bnds.yMin = y2;
			}
			if(y2 > bnds.yMax) {
				bnds.yMax = y2;
			}
			if(z2 < bnds.zMin) {
				bnds.zMin = z2;
			}
			if(z2 > bnds.zMax) {
				bnds.zMax = z2;
			}
			t = t.next;
		}
		return bnds;
	}
	contains(p) {
		if(!this.isConvex()) {
			throw haxe.Exception.thrown("Not implemented for concave polygon");
		}
		let t = this.triPlanes;
		while(t != null) {
			if(t.nx * p.x + t.ny * p.y + t.nz * p.z - t.d >= 0) {
				return false;
			}
			t = t.next;
		}
		return true;
	}
	rayIntersection(r,bestMatch) {
		let t = this.triPlanes;
		let best = -1.;
		while(t != null) {
			let dr = r.lx * t.nx + r.ly * t.ny + r.lz * t.nz;
			let d;
			if(dr >= 0) {
				d = -1.;
			} else {
				let nd = t.d - (r.px * t.nx + r.py * t.ny + r.pz * t.nz);
				let k = nd / dr;
				if(k < 0) {
					d = -1;
				} else {
					let px = r.px + r.lx * k;
					let py = r.py + r.ly * k;
					let pz = r.pz + r.lz * k;
					let x = px - t.p0x;
					let y = py - t.p0y;
					let z = pz - t.p0z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v2_x = x1;
					let v2_y = y1;
					let v2_z = z1;
					let dot02 = t.d1x * v2_x + t.d1y * v2_y + t.d1z * v2_z;
					let dot12 = t.d2x * v2_x + t.d2y * v2_y + t.d2z * v2_z;
					let u = (t.dot11 * dot02 - t.dot01 * dot12) * t.invDenom;
					let v = (t.dot00 * dot12 - t.dot01 * dot02) * t.invDenom;
					d = !(u >= 0 && v >= 0 && u + v < 1) ? -1 : k;
				}
			}
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
			t = t.next;
		}
		return best;
	}
	inFrustum(f,m) {
		throw haxe.Exception.thrown("Not implemented");
	}
	inSphere(s) {
		throw haxe.Exception.thrown("Not implemented");
	}
	makeDebugObj() {
		let points = [];
		let idx = new Array(0);
		let t = this.triPlanes;
		while(t != null) {
			let x = t.p0x;
			let y = t.p0y;
			let z = t.p0z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let p0 = new h3d.VectorImpl(x,y,z);
			let x1 = t.d1x;
			let y1 = t.d1y;
			let z1 = t.d1z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let x2 = x1;
			let y2 = y1;
			let z2 = z1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let d1_x = x2;
			let d1_y = y2;
			let d1_z = z2;
			let x3 = t.d2x;
			let y3 = t.d2y;
			let z3 = t.d2z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let x4 = x3;
			let y4 = y3;
			let z4 = z3;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let d2_x = x4;
			let d2_y = y4;
			let d2_z = z4;
			points.push(p0);
			let x5 = d1_x + p0.x;
			let y5 = d1_y + p0.y;
			let z5 = d1_z + p0.z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			points.push(new h3d.VectorImpl(x5,y5,z5));
			let x6 = d2_x + p0.x;
			let y6 = d2_y + p0.y;
			let z6 = d2_z + p0.z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			points.push(new h3d.VectorImpl(x6,y6,z6));
			t = t.next;
		}
		let prim = new h3d.prim.Polygon(points);
		prim.addNormals();
		return new h3d.scene.Mesh(prim);
	}
	static fromPolygon2D(p,z) {
		if(z == null) {
			z = 0.;
		}
		let pout = new h3d.col.Polygon();
		if(h2d.col.Polygon.isConvex(p)) {
			let p0 = p[0];
			let _g = 0;
			let _g1 = p.length - 2;
			while(_g < _g1) {
				let i = _g++;
				let p1 = p[i + 1];
				let p2 = p[i + 2];
				let t = new h3d.col.TriPlane();
				let x = p0.x;
				let y = p0.y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z2 = z1;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p0_x = x1;
				let p0_y = y1;
				let p0_z = z2;
				let x2 = p1.x;
				let y2 = p1.y;
				let z3 = z;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let x3 = x2;
				let y3 = y2;
				let z4 = z3;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				let p1_x = x3;
				let p1_y = y3;
				let p1_z = z4;
				let x4 = p2.x;
				let y4 = p2.y;
				let z5 = z;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				let x5 = x4;
				let y5 = y4;
				let z6 = z5;
				if(z6 == null) {
					z6 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				let p2_x = x5;
				let p2_y = y5;
				let p2_z = z6;
				t.p0x = p0_x;
				t.p0y = p0_y;
				t.p0z = p0_z;
				let x6 = p1_x - p0_x;
				let y6 = p1_y - p0_y;
				let z7 = p1_z - p0_z;
				if(z7 == null) {
					z7 = 0.;
				}
				if(y6 == null) {
					y6 = 0.;
				}
				if(x6 == null) {
					x6 = 0.;
				}
				let x7 = x6;
				let y7 = y6;
				let z8 = z7;
				if(z8 == null) {
					z8 = 0.;
				}
				if(y7 == null) {
					y7 = 0.;
				}
				if(x7 == null) {
					x7 = 0.;
				}
				let _this_x = x7;
				let _this_y = y7;
				let _this_z = z8;
				let x8 = p2_x - p0_x;
				let y8 = p2_y - p0_y;
				let z9 = p2_z - p0_z;
				if(z9 == null) {
					z9 = 0.;
				}
				if(y8 == null) {
					y8 = 0.;
				}
				if(x8 == null) {
					x8 = 0.;
				}
				let x9 = x8;
				let y9 = y8;
				let z10 = z9;
				if(z10 == null) {
					z10 = 0.;
				}
				if(y9 == null) {
					y9 = 0.;
				}
				if(x9 == null) {
					x9 = 0.;
				}
				let _this_x1 = x9;
				let _this_y1 = y9;
				let _this_z1 = z10;
				let x10 = _this_y * _this_z1 - _this_z * _this_y1;
				let y10 = _this_z * _this_x1 - _this_x * _this_z1;
				let z11 = _this_x * _this_y1 - _this_y * _this_x1;
				if(z11 == null) {
					z11 = 0.;
				}
				if(y10 == null) {
					y10 = 0.;
				}
				if(x10 == null) {
					x10 = 0.;
				}
				let x11 = x10;
				let y11 = y10;
				let z12 = z11;
				if(z12 == null) {
					z12 = 0.;
				}
				if(y11 == null) {
					y11 = 0.;
				}
				if(x11 == null) {
					x11 = 0.;
				}
				let _this_x2 = x11;
				let _this_y2 = y11;
				let _this_z2 = z12;
				t.d = _this_x2 * p0_x + _this_y2 * p0_y + _this_z2 * p0_z;
				t.nx = _this_x2;
				t.ny = _this_y2;
				t.nz = _this_z2;
				t.d1x = _this_x;
				t.d1y = _this_y;
				t.d1z = _this_z;
				t.d2x = _this_x1;
				t.d2y = _this_y1;
				t.d2z = _this_z1;
				t.dot00 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
				t.dot01 = _this_x * _this_x1 + _this_y * _this_y1 + _this_z * _this_z1;
				t.dot11 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
				t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
				t.next = pout.triPlanes;
				pout.triPlanes = t;
			}
		} else {
			let idx = h2d.col.Polygon.fastTriangulate(p);
			let _g = 0;
			let _g1 = idx.length / 3 | 0;
			while(_g < _g1) {
				let i = _g++;
				let p0 = p[idx[i * 3]];
				let p1 = p[idx[i * 3 + 1]];
				let p2 = p[idx[i * 3 + 2]];
				let t = new h3d.col.TriPlane();
				let x = p0.x;
				let y = p0.y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z2 = z1;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p0_x = x1;
				let p0_y = y1;
				let p0_z = z2;
				let x2 = p1.x;
				let y2 = p1.y;
				let z3 = z;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let x3 = x2;
				let y3 = y2;
				let z4 = z3;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				let p1_x = x3;
				let p1_y = y3;
				let p1_z = z4;
				let x4 = p2.x;
				let y4 = p2.y;
				let z5 = z;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				let x5 = x4;
				let y5 = y4;
				let z6 = z5;
				if(z6 == null) {
					z6 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				let p2_x = x5;
				let p2_y = y5;
				let p2_z = z6;
				t.p0x = p0_x;
				t.p0y = p0_y;
				t.p0z = p0_z;
				let x6 = p1_x - p0_x;
				let y6 = p1_y - p0_y;
				let z7 = p1_z - p0_z;
				if(z7 == null) {
					z7 = 0.;
				}
				if(y6 == null) {
					y6 = 0.;
				}
				if(x6 == null) {
					x6 = 0.;
				}
				let x7 = x6;
				let y7 = y6;
				let z8 = z7;
				if(z8 == null) {
					z8 = 0.;
				}
				if(y7 == null) {
					y7 = 0.;
				}
				if(x7 == null) {
					x7 = 0.;
				}
				let _this_x = x7;
				let _this_y = y7;
				let _this_z = z8;
				let x8 = p2_x - p0_x;
				let y8 = p2_y - p0_y;
				let z9 = p2_z - p0_z;
				if(z9 == null) {
					z9 = 0.;
				}
				if(y8 == null) {
					y8 = 0.;
				}
				if(x8 == null) {
					x8 = 0.;
				}
				let x9 = x8;
				let y9 = y8;
				let z10 = z9;
				if(z10 == null) {
					z10 = 0.;
				}
				if(y9 == null) {
					y9 = 0.;
				}
				if(x9 == null) {
					x9 = 0.;
				}
				let _this_x1 = x9;
				let _this_y1 = y9;
				let _this_z1 = z10;
				let x10 = _this_y * _this_z1 - _this_z * _this_y1;
				let y10 = _this_z * _this_x1 - _this_x * _this_z1;
				let z11 = _this_x * _this_y1 - _this_y * _this_x1;
				if(z11 == null) {
					z11 = 0.;
				}
				if(y10 == null) {
					y10 = 0.;
				}
				if(x10 == null) {
					x10 = 0.;
				}
				let x11 = x10;
				let y11 = y10;
				let z12 = z11;
				if(z12 == null) {
					z12 = 0.;
				}
				if(y11 == null) {
					y11 = 0.;
				}
				if(x11 == null) {
					x11 = 0.;
				}
				let _this_x2 = x11;
				let _this_y2 = y11;
				let _this_z2 = z12;
				t.d = _this_x2 * p0_x + _this_y2 * p0_y + _this_z2 * p0_z;
				t.nx = _this_x2;
				t.ny = _this_y2;
				t.nz = _this_z2;
				t.d1x = _this_x;
				t.d1y = _this_y;
				t.d1z = _this_z;
				t.d2x = _this_x1;
				t.d2y = _this_y1;
				t.d2z = _this_z1;
				t.dot00 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
				t.dot01 = _this_x * _this_x1 + _this_y * _this_y1 + _this_z * _this_z1;
				t.dot11 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
				t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
				t.next = pout.triPlanes;
				pout.triPlanes = t;
			}
		}
		return pout;
	}
}
$hxClasses["h3d.col.Polygon"] = h3d.col.Polygon;
h3d.col.Polygon.__name__ = "h3d.col.Polygon";
h3d.col.Polygon.__super__ = h3d.col.Collider;
Object.assign(h3d.col.Polygon.prototype, {
	__class__: h3d.col.Polygon
});
h3d.col.PolygonBuffer = class h3d_col_PolygonBuffer extends h3d.col.Collider {
	constructor() {
		super();
	}
	setData(buffer,indexes,startIndex,triCount) {
		if(triCount == null) {
			triCount = -1;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		this.buffer = buffer;
		this.indexes = indexes;
		this.startIndex = startIndex;
		this.triCount = triCount >= 0 ? triCount : (indexes.length - startIndex) / 3 | 0;
	}
	getBounds() {
		let i = this.startIndex;
		let b = new h3d.col.Bounds();
		let _g = 0;
		let _g1 = this.triCount * 3;
		while(_g < _g1) {
			let t = _g++;
			let pos = this.indexes[i++] * 3;
			let x = this.buffer[pos++];
			let y = this.buffer[pos++];
			let z = this.buffer[pos];
			if(x < b.xMin) {
				b.xMin = x;
			}
			if(x > b.xMax) {
				b.xMax = x;
			}
			if(y < b.yMin) {
				b.yMin = y;
			}
			if(y > b.yMax) {
				b.yMax = y;
			}
			if(z < b.zMin) {
				b.zMin = z;
			}
			if(z > b.zMax) {
				b.zMax = z;
			}
		}
		return b;
	}
	getPoints() {
		let vmin = 1073741824;
		let vmax = -1073741824;
		let _g = this.startIndex;
		let _g1 = this.startIndex + this.triCount * 3;
		while(_g < _g1) {
			let i = _g++;
			let pos = this.indexes[i];
			if(pos < vmin) {
				vmin = pos;
			}
			if(pos > vmax) {
				vmax = pos;
			}
		}
		let vcount = vmax + 1 - vmin;
		let bits = hxd.impl.BitSet._new(vcount);
		let points = [];
		let _g2 = this.startIndex;
		let _g3 = this.startIndex + this.triCount * 3;
		while(_g2 < _g3) {
			let i = _g2++;
			let pos = this.indexes[i];
			let vidx = pos - vmin;
			if(!hxd.impl.BitSet.get(bits,vidx)) {
				pos *= 3;
				points.push(new h3d.col.FPoint(this.buffer[pos++],this.buffer[pos++],this.buffer[pos]));
				hxd.impl.BitSet.set(bits,vidx);
			}
		}
		return points;
	}
	contains(p) {
		let i = this.startIndex;
		let x = p.x;
		let y = p.y;
		let z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let p_x = x;
		let p_y = y;
		let p_z = z;
		let _g = 0;
		let _g1 = this.triCount;
		while(_g < _g1) {
			let t = _g++;
			let i0 = this.indexes[i++] * 3;
			let x = this.buffer[i0++];
			let y = this.buffer[i0++];
			let z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let p0_x = x;
			let p0_y = y;
			let p0_z = z;
			let i1 = this.indexes[i++] * 3;
			let x1 = this.buffer[i1++];
			let y1 = this.buffer[i1++];
			let z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p1_x = x1;
			let p1_y = y1;
			let p1_z = z1;
			let i2 = this.indexes[i++] * 3;
			let x2 = this.buffer[i2++];
			let y2 = this.buffer[i2++];
			let z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let p2_x = x2;
			let p2_y = y2;
			let p2_z = z2;
			let x3 = p1_x - p0_x;
			let y3 = p1_y - p0_y;
			let z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let d1_x = x3;
			let d1_y = y3;
			let d1_z = z3;
			let x4 = p2_x - p0_x;
			let y4 = p2_y - p0_y;
			let z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let d2_x = x4;
			let d2_y = y4;
			let d2_z = z4;
			let x5 = d1_y * d2_z - d1_z * d2_y;
			let y5 = d1_z * d2_x - d1_x * d2_z;
			let z5 = d1_x * d2_y - d1_y * d2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let n_x = x5;
			let n_y = y5;
			let n_z = z5;
			let d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			if(n_x * p_x + n_y * p_y + n_z * p_z >= d) {
				return false;
			}
		}
		return true;
	}
	inFrustum(f,m) {
		throw haxe.Exception.thrown("Not implemented");
	}
	inSphere(s) {
		throw haxe.Exception.thrown("Not implemented");
	}
	rayIntersection(r,bestMatch) {
		let i = this.startIndex;
		let x = r.lx;
		let y = r.ly;
		let z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let rdir_x = x;
		let rdir_y = y;
		let rdir_z = z;
		let x1 = r.px;
		let y1 = r.py;
		let z1 = r.pz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let r0_x = x1;
		let r0_y = y1;
		let r0_z = z1;
		let best = -1.;
		let _g = 0;
		let _g1 = this.triCount;
		while(_g < _g1) {
			let t = _g++;
			let i0 = this.indexes[i++] * 3;
			let x = this.buffer[i0++];
			let y = this.buffer[i0++];
			let z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let p0_x = x;
			let p0_y = y;
			let p0_z = z;
			let i1 = this.indexes[i++] * 3;
			let x1 = this.buffer[i1++];
			let y1 = this.buffer[i1++];
			let z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p1_x = x1;
			let p1_y = y1;
			let p1_z = z1;
			let i2 = this.indexes[i++] * 3;
			let x2 = this.buffer[i2++];
			let y2 = this.buffer[i2++];
			let z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let p2_x = x2;
			let p2_y = y2;
			let p2_z = z2;
			let x3 = p1_x - p0_x;
			let y3 = p1_y - p0_y;
			let z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let e1_x = x3;
			let e1_y = y3;
			let e1_z = z3;
			let x4 = p2_x - p0_x;
			let y4 = p2_y - p0_y;
			let z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let e2_x = x4;
			let e2_y = y4;
			let e2_z = z4;
			let x5 = rdir_y * e2_z - rdir_z * e2_y;
			let y5 = rdir_z * e2_x - rdir_x * e2_z;
			let z5 = rdir_x * e2_y - rdir_y * e2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let p_x = x5;
			let p_y = y5;
			let p_z = z5;
			let det = e1_x * p_x + e1_y * p_y + e1_z * p_z;
			if(det < 1e-10) {
				continue;
			}
			let invDet = 1 / det;
			let x6 = r0_x - p0_x;
			let y6 = r0_y - p0_y;
			let z6 = r0_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let T_x = x6;
			let T_y = y6;
			let T_z = z6;
			let u = (T_x * p_x + T_y * p_y + T_z * p_z) * invDet;
			if(u < 0 || u > 1) {
				continue;
			}
			let x7 = T_y * e1_z - T_z * e1_y;
			let y7 = T_z * e1_x - T_x * e1_z;
			let z7 = T_x * e1_y - T_y * e1_x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let q_x = x7;
			let q_y = y7;
			let q_z = z7;
			let v = (rdir_x * q_x + rdir_y * q_y + rdir_z * q_z) * invDet;
			if(v < 0 || u + v > 1) {
				continue;
			}
			let t1 = (e2_x * q_x + e2_y * q_y + e2_z * q_z) * invDet;
			if(t1 < 1e-10) {
				continue;
			}
			if(!bestMatch) {
				return t1;
			}
			if(best < 0 || t1 < best) {
				best = t1;
			}
		}
		return best;
	}
	makeDebugObj() {
		let points = [];
		let idx = new Array(0);
		let i = this.startIndex;
		let _g = 0;
		let _g1 = this.triCount;
		while(_g < _g1) {
			let t = _g++;
			idx.push(this.indexes[i++]);
			idx.push(this.indexes[i++]);
			idx.push(this.indexes[i++]);
		}
		i = 0;
		while(i < this.buffer.length) {
			let x = this.buffer[i++];
			let y = this.buffer[i++];
			let z = this.buffer[i++];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			points.push(new h3d.VectorImpl(x,y,z));
		}
		let prim = new h3d.prim.Polygon(points,idx);
		prim.addNormals();
		return new h3d.scene.Mesh(prim);
	}
}
$hxClasses["h3d.col.PolygonBuffer"] = h3d.col.PolygonBuffer;
h3d.col.PolygonBuffer.__name__ = "h3d.col.PolygonBuffer";
h3d.col.PolygonBuffer.__super__ = h3d.col.Collider;
Object.assign(h3d.col.PolygonBuffer.prototype, {
	__class__: h3d.col.PolygonBuffer
});
h3d.col.SkinCollider = class h3d_col_SkinCollider extends h3d.col.Collider {
	constructor(obj,col) {
		super();
		this.lastBoundsFrame = -1;
		this.lastFrame = -1;
		this.obj = obj;
		this.col = col;
		this.transform = new h3d.col.PolygonBuffer();
		let tmp = this.transform;
		let this1 = col.buffer;
		let r = new Array(this1.length);
		haxe.ds.Vector.blit(this1,0,r,0,this1.length);
		tmp.setData(r,col.indexes,col.startIndex,col.triCount);
		this.currentBounds = new h3d.col.Bounds();
	}
	contains(p) {
		this.checkBounds();
		let _this = this.currentBounds;
		if(!(p.x >= _this.xMin && p.x < _this.xMax && p.y >= _this.yMin && p.y < _this.yMax && p.z >= _this.zMin && p.z < _this.zMax)) {
			return false;
		}
		this.applyTransform();
		return this.transform.contains(p);
	}
	inFrustum(p,m) {
		this.checkBounds();
		let _this = this.currentBounds;
		if(m != null) {
			throw haxe.Exception.thrown("Not implemented");
		}
		if(!p.hasBounds(_this)) {
			return false;
		}
		if(m != null) {
			throw haxe.Exception.thrown("Not implemented");
		}
		this.applyTransform();
		return this.transform.inFrustum(p);
	}
	inSphere(s) {
		this.checkBounds();
		let _this = this.currentBounds;
		let x = s.x;
		let y = s.y;
		let z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let a = _this.xMin;
		let a1 = s.x;
		let b = _this.xMax;
		let b1 = a1 > b ? b : a1;
		let x2 = a < b1 ? b1 : a;
		let a2 = _this.yMin;
		let a3 = s.y;
		let b2 = _this.yMax;
		let b3 = a3 > b2 ? b2 : a3;
		let y2 = a2 < b3 ? b3 : a2;
		let a4 = _this.zMin;
		let a5 = s.z;
		let b4 = _this.zMax;
		let b5 = a5 > b4 ? b4 : a5;
		let z2 = a4 < b5 ? b5 : a4;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let p_x = x3;
		let p_y = y3;
		let p_z = z3;
		let dx = p_x - _this_x;
		let dy = p_y - _this_y;
		let dz = p_z - _this_z;
		if(!(dx * dx + dy * dy + dz * dz < s.r * s.r)) {
			return false;
		}
		this.applyTransform();
		throw haxe.Exception.thrown("Not implemented");
	}
	rayIntersection(r,bestMatch) {
		this.checkBounds();
		if(this.currentBounds.rayIntersection(r,false) < 0) {
			return -1.;
		}
		this.applyTransform();
		return this.transform.rayIntersection(r,bestMatch);
	}
	checkBounds() {
		if(!this.obj.jointsUpdated && this.lastBoundsFrame == this.obj.lastFrame) {
			return;
		}
		this.lastBoundsFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		let _this = this.currentBounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		this.obj.addBoundsRec(this.currentBounds,null);
	}
	applyTransform() {
		if(!this.obj.jointsUpdated && this.lastFrame == this.obj.lastFrame) {
			return;
		}
		this.lastFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		let j = 0;
		let v = 0;
		let nbones = this.obj.skinData.bonesPerVertex;
		let _g = 0;
		let _g1 = this.obj.skinData.vertexCount;
		while(_g < _g1) {
			let i = _g++;
			let px = 0.;
			let py = 0.;
			let pz = 0.;
			let x = this.col.buffer[v];
			let y = this.col.buffer[v + 1];
			let z = this.col.buffer[v + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let _this_x = x1;
			let _this_y = y1;
			let _this_z = z1;
			let _g1 = 0;
			let _g2 = nbones;
			while(_g1 < _g2) {
				let k = _g1++;
				let w = this.obj.skinData.vertexWeights[j];
				if(w == 0) {
					++j;
					continue;
				}
				let bid = this.obj.skinData.vertexJoints[j++];
				let x = _this_x;
				let y = _this_y;
				let z = _this_z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p2_x = x1;
				let p2_y = y1;
				let p2_z = z1;
				let m = this.obj.currentPalette[bid];
				let px1 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
				let py1 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
				let pz1 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
				p2_x = px1;
				p2_y = py1;
				p2_z = pz1;
				px += p2_x * w;
				py += p2_y * w;
				pz += p2_z * w;
			}
			this.transform.buffer[v++] = px;
			this.transform.buffer[v++] = py;
			this.transform.buffer[v++] = pz;
		}
	}
	makeDebugObj() {
		return new h3d.col.SkinColliderDebugObj(this);
	}
}
$hxClasses["h3d.col.SkinCollider"] = h3d.col.SkinCollider;
h3d.col.SkinCollider.__name__ = "h3d.col.SkinCollider";
h3d.col.SkinCollider.__super__ = h3d.col.Collider;
Object.assign(h3d.col.SkinCollider.prototype, {
	__class__: h3d.col.SkinCollider
});
h3d.scene = {};
h3d.scene.Object = class h3d_scene_Object {
	constructor(parent) {
		if(h3d.scene.Object._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.flags = 32768;
		this.absPos = new h3d.MatrixImpl();
		this.absPos.identity();
		this.x = 0;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = 0;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.z = 0;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		this.scaleX = 1;
		let f3 = 1;
		let b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
		this.scaleY = 1;
		let f4 = 1;
		let b4 = true;
		if(b4) {
			this.flags |= f4;
		} else {
			this.flags &= ~f4;
		}
		this.scaleZ = 1;
		let f5 = 1;
		let b5 = true;
		if(b5) {
			this.flags |= f5;
		} else {
			this.flags &= ~f5;
		}
		this.qRot = new h3d.Quat();
		let f6 = 1;
		let b6 = this.follow != null;
		if(b6) {
			this.flags |= f6;
		} else {
			this.flags &= ~f6;
		}
		let f7 = 2;
		this.flags |= f7;
		this.children = [];
		if(parent != null) {
			parent.addChild(this);
		}
	}
	set_cullingCollider(c) {
		this.cullingCollider = c;
		let f = 4096;
		this.flags &= ~f;
		return c;
	}
	get_visible() {
		return (this.flags & 2) != 0;
	}
	get_allocated() {
		return (this.flags & 32) != 0;
	}
	get_posChanged() {
		return (this.flags & 1) != 0;
	}
	get_culled() {
		return (this.flags & 4) != 0;
	}
	get_followPositionOnly() {
		return (this.flags & 8) != 0;
	}
	get_lightCameraCenter() {
		return (this.flags & 16) != 0;
	}
	get_alwaysSyncAnimation() {
		return (this.flags & 64) != 0;
	}
	get_inheritCulled() {
		return (this.flags & 128) != 0;
	}
	get_ignoreBounds() {
		return (this.flags & 512) != 0;
	}
	get_ignoreCollide() {
		return (this.flags & 1024) != 0;
	}
	get_modelRoot() {
		return (this.flags & 256) != 0;
	}
	get_ignoreParentTransform() {
		return (this.flags & 2048) != 0;
	}
	get_cullingColliderInherited() {
		return (this.flags & 4096) != 0;
	}
	get_fixedPosition() {
		return (this.flags & 8192) != 0;
	}
	get_alwaysSync() {
		return (this.flags & 32768) != 0;
	}
	set_posChanged(b) {
		let f = 1;
		let b1 = b || this.follow != null;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b1;
	}
	set_culled(b) {
		let f = 4;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_visible(b) {
		let f = 2;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_allocated(b) {
		let f = 32;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_followPositionOnly(b) {
		let f = 8;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_lightCameraCenter(b) {
		let f = 16;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_alwaysSyncAnimation(b) {
		let f = 64;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_ignoreBounds(b) {
		let f = 512;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_inheritCulled(b) {
		let f = 128;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_ignoreCollide(b) {
		let f = 1024;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_modelRoot(b) {
		let f = 256;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_ignoreParentTransform(b) {
		if(b != ((this.flags & 2048) != 0)) {
			let f = 1;
			let b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
		}
		let f = 2048;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_cullingColliderInherited(b) {
		let f = 4096;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_fixedPosition(b) {
		let f = 8192;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	set_alwaysSync(b) {
		let f = 32768;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	playAnimation(a) {
		return this.currentAnimation = a.createInstance(this);
	}
	switchToAnimation(a) {
		return this.currentAnimation = a;
	}
	stopAnimation(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.currentAnimation = null;
		if(recursive) {
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.stopAnimation(true);
			}
		}
	}
	applyAnimationTransform(recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.defaultTransform != null) {
			let _this = this.defaultTransform;
			let x = 0.;
			let y = 0.;
			let z = 0.;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let s_x = x;
			let s_y = y;
			let s_z = z;
			s_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
			s_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
			s_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
			if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
				s_x *= -1;
				s_y *= -1;
				s_z *= -1;
			}
			let v = s_x;
			this.scaleX = v;
			let f = 1;
			let b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			let v1 = s_y;
			this.scaleY = v1;
			let f1 = 1;
			let b1 = true;
			if(b1) {
				this.flags |= f1;
			} else {
				this.flags &= ~f1;
			}
			let v2 = s_z;
			this.scaleZ = v2;
			let f2 = 1;
			let b2 = true;
			if(b2) {
				this.flags |= f2;
			} else {
				this.flags &= ~f2;
			}
			this.qRot.initRotateMatrix(this.defaultTransform);
			let v3 = this.defaultTransform._41;
			this.x = v3;
			let f3 = 1;
			let b3 = true;
			if(b3) {
				this.flags |= f3;
			} else {
				this.flags &= ~f3;
			}
			let v4 = this.defaultTransform._42;
			this.y = v4;
			let f4 = 1;
			let b4 = true;
			if(b4) {
				this.flags |= f4;
			} else {
				this.flags &= ~f4;
			}
			let v5 = this.defaultTransform._43;
			this.z = v5;
			let f5 = 1;
			let b5 = true;
			if(b5) {
				this.flags |= f5;
			} else {
				this.flags &= ~f5;
			}
			let v6 = null;
			this.defaultTransform = v6;
			let f6 = 1;
			let b6 = true;
			if(b6) {
				this.flags |= f6;
			} else {
				this.flags &= ~f6;
			}
		}
		if(recursive) {
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				c.applyAnimationTransform();
			}
		}
	}
	getObjectsCount() {
		let k = 0;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	getMaterialByName(name) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			let m = o.getMaterialByName(name);
			if(m != null) {
				return m;
			}
		}
		return null;
	}
	contains(o) {
		while(o != null) {
			o = o.parent;
			if(o == this) {
				return true;
			}
		}
		return false;
	}
	find(f) {
		let v = f(this);
		if(v != null) {
			return v;
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			let v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	findAll(f,arr) {
		if(arr == null) {
			arr = [];
		}
		let v = f(this);
		if(v != null) {
			arr.push(v);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	getMaterials(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		if(recursive) {
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let o = _g1[_g];
				++_g;
				o.getMaterials(a);
			}
		}
		return a;
	}
	localToGlobal(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d.VectorImpl(0.,0.,0.);
		}
		let m = this.absPos;
		let px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		let py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		let pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	globalToLocal(pt) {
		let m = this.getInvPos();
		let px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		let py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		let pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	getInvPos() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d.MatrixImpl();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	getBounds(b,relativeTo) {
		if(b == null) {
			b = new h3d.col.Bounds();
		}
		if(this.parent != null && this.parent != relativeTo) {
			this.parent.syncPos();
		}
		this.addBoundsRec(b,relativeTo == null ? null : relativeTo.getInvPos());
		return b;
	}
	addBoundsRec(b,relativeTo) {
		if((this.flags & 1) != 0) {
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				let f = 1;
				let b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
			let f = 1;
			let b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.addBoundsRec(b,relativeTo);
		}
	}
	getMeshes(out) {
		if(out == null) {
			out = [];
		}
		let m = ((this) instanceof h3d.scene.Mesh) ? this : null;
		if(m != null) {
			out.push(m);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.getMeshes(out);
		}
		return out;
	}
	getMeshByName(name) {
		let value = this.getObjectByName(name);
		if(((value) instanceof h3d.scene.Mesh)) {
			return value;
		} else {
			return null;
		}
	}
	getObjectByName(name) {
		if(this.name == name) {
			return this;
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	clone(o) {
		if(o == null) {
			o = new h3d.scene.Object();
		}
		let v = this.x;
		o.x = v;
		let f = 1;
		let b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		let v1 = this.y;
		o.y = v1;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			o.flags |= f1;
		} else {
			o.flags &= ~f1;
		}
		let v2 = this.z;
		o.z = v2;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		let v3 = this.scaleX;
		o.scaleX = v3;
		let f3 = 1;
		let b3 = true;
		if(b3) {
			o.flags |= f3;
		} else {
			o.flags &= ~f3;
		}
		let v4 = this.scaleY;
		o.scaleY = v4;
		let f4 = 1;
		let b4 = true;
		if(b4) {
			o.flags |= f4;
		} else {
			o.flags &= ~f4;
		}
		let v5 = this.scaleZ;
		o.scaleZ = v5;
		let f5 = 1;
		let b5 = true;
		if(b5) {
			o.flags |= f5;
		} else {
			o.flags &= ~f5;
		}
		let _this = o.qRot;
		let q = this.qRot;
		_this.x = q.x;
		_this.y = q.y;
		_this.z = q.z;
		_this.w = q.w;
		o.name = this.name;
		o.set_follow(this.follow);
		let b6 = (this.flags & 8) != 0;
		let f6 = 8;
		if(b6) {
			o.flags |= f6;
		} else {
			o.flags &= ~f6;
		}
		let b7 = (this.flags & 2) != 0;
		let f7 = 2;
		if(b7) {
			o.flags |= f7;
		} else {
			o.flags &= ~f7;
		}
		if(this.defaultTransform != null) {
			let v = this.defaultTransform.clone();
			o.defaultTransform = v;
			let f = 1;
			let b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			let c1 = c.clone();
			c1.parent = o;
			o.children.push(c1);
		}
		return o;
	}
	addChild(o) {
		this.addChildAt(o,this.children.length);
	}
	addChildAt(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		let p = this;
		while(p != null) {
			if(p == o) {
				throw haxe.Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			let old = (o.flags & 32) != 0;
			let f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			let f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		let f = 1;
		let b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	iterVisibleMeshes(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			let m = ((this) instanceof h3d.scene.Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	onParentChanged() {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	onAdd() {
		let f = 32;
		this.flags |= f;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	onRemove() {
		let f = 32;
		this.flags &= ~f;
		let i = this.children.length - 1;
		while(i >= 0) this.children[i--].onRemove();
	}
	removeChild(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			let f = 1;
			let b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	removeChildren() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	remove() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	getScene() {
		let p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d.scene.Scene)) {
			return p;
		} else {
			return null;
		}
	}
	getAbsPos() {
		this.syncPos();
		return this.absPos;
	}
	getRelPos(obj) {
		if(obj == null) {
			return this.getAbsPos();
		}
		this.syncPos();
		let m = new h3d.MatrixImpl();
		m.multiply(this.absPos,obj.getInvPos());
		return m;
	}
	isMesh() {
		return (((this) instanceof h3d.scene.Mesh) ? this : null) != null;
	}
	toMesh() {
		let m = ((this) instanceof h3d.scene.Mesh) ? this : null;
		if(m != null) {
			return m;
		}
		throw haxe.Exception.thrown(Std.string(this) + " is not a Mesh");
	}
	getCollider() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		let colliders = [];
		let col = this.getGlobalCollider();
		if(col != null) {
			colliders.push(col);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let obj = _g1[_g];
			++_g;
			let c = obj.getCollider();
			if(c == null) {
				continue;
			}
			let cgrp = ((c) instanceof h3d.col.GroupCollider) ? c : null;
			if(cgrp != null) {
				let _g = 0;
				let _g1 = cgrp.colliders;
				while(_g < _g1.length) {
					let c = _g1[_g];
					++_g;
					colliders.push(c);
				}
			} else {
				colliders.push(c);
			}
		}
		if(colliders.length == 0) {
			return null;
		}
		if(colliders.length == 1) {
			return colliders[0];
		}
		return new h3d.col.GroupCollider(colliders);
	}
	getGlobalCollider() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		let col = this.getLocalCollider();
		if(col == null) {
			return null;
		} else {
			return new h3d.col.ObjectCollider(this,col);
		}
	}
	getLocalCollider() {
		return null;
	}
	draw(ctx) {
	}
	set_follow(v) {
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return this.follow = v;
	}
	calcAbsPos() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				let _this = this.absPos;
				let a = this.absPos;
				let b = this.parent.absPos;
				let m11 = a._11;
				let m12 = a._12;
				let m13 = a._13;
				let m21 = a._21;
				let m22 = a._22;
				let m23 = a._23;
				let a31 = a._31;
				let a32 = a._32;
				let a33 = a._33;
				let a41 = a._41;
				let a42 = a._42;
				let a43 = a._43;
				let b11 = b._11;
				let b12 = b._12;
				let b13 = b._13;
				let b21 = b._21;
				let b22 = b._22;
				let b23 = b._23;
				let b31 = b._31;
				let b32 = b._32;
				let b33 = b._33;
				let b41 = b._41;
				let b42 = b._42;
				let b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			let _this = this.absPos;
			let a = this.absPos;
			let b = this.parent.absPos;
			let m11 = a._11;
			let m12 = a._12;
			let m13 = a._13;
			let m21 = a._21;
			let m22 = a._22;
			let m23 = a._23;
			let a31 = a._31;
			let a32 = a._32;
			let a33 = a._33;
			let a41 = a._41;
			let a42 = a._42;
			let a43 = a._43;
			let b11 = b._11;
			let b12 = b._12;
			let b13 = b._13;
			let b21 = b._21;
			let b22 = b._22;
			let b23 = b._23;
			let b31 = b._31;
			let b32 = b._32;
			let b33 = b._33;
			let b41 = b._41;
			let b42 = b._42;
			let b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			let _this = this.absPos;
			let a = this.defaultTransform;
			let b = this.absPos;
			let m11 = a._11;
			let m12 = a._12;
			let m13 = a._13;
			let m21 = a._21;
			let m22 = a._22;
			let m23 = a._23;
			let a31 = a._31;
			let a32 = a._32;
			let a33 = a._33;
			let a41 = a._41;
			let a42 = a._42;
			let a43 = a._43;
			let b11 = b._11;
			let b12 = b._12;
			let b13 = b._13;
			let b21 = b._21;
			let b22 = b._22;
			let b23 = b._23;
			let b31 = b._31;
			let b32 = b._32;
			let b33 = b._33;
			let b41 = b._41;
			let b42 = b._42;
			let b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	sync(ctx) {
	}
	syncRec(ctx) {
		if(this.currentAnimation != null) {
			let old = this.parent;
			let dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		if((this.flags & 32768) == 0 && ((this.flags & 4) != 0 || (this.flags & 2) == 0 || !ctx.visibleFlag)) {
			return;
		}
		let old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			let f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		let prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		let changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		if((this.flags & 8192) != 0) {
			if((this.flags & 16384) != 0 && !changed && !ctx.wasContextLost) {
				ctx.visibleFlag = old;
				ctx.cullingCollider = prevCollider;
				return;
			}
			let f = 16384;
			this.flags |= f;
		}
		this.sync(ctx);
		let f = 1;
		let b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		let p = 0;
		let len = this.children.length;
		while(p < len) {
			let c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					let f = 1;
					let b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	syncPos() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			let f = 1;
			let b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				let f = 1;
				let b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
	}
	emit(ctx) {
	}
	emitRec(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			let f = 1;
			let b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let c = _g1[_g];
				++_g;
				let f = 1;
				let b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
	set_x(v) {
		this.x = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_y(v) {
		this.y = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_z(v) {
		this.z = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_scaleX(v) {
		this.scaleX = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_scaleY(v) {
		this.scaleY = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_scaleZ(v) {
		this.scaleZ = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	set_defaultTransform(v) {
		this.defaultTransform = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	setPosition(x,y,z) {
		this.x = x;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = y;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.z = z;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		let f3 = 1;
		let b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	setTransform(mat) {
		let _this = mat;
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let s_x = x;
		let s_y = y;
		let s_z = z;
		s_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		s_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		s_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		let v = mat._41;
		this.x = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		let v1 = mat._42;
		this.y = v1;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		let v2 = mat._43;
		this.z = v2;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		let v3 = s_x;
		this.scaleX = v3;
		let f3 = 1;
		let b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
		let v4 = s_y;
		this.scaleY = v4;
		let f4 = 1;
		let b4 = true;
		if(b4) {
			this.flags |= f4;
		} else {
			this.flags &= ~f4;
		}
		let v5 = s_z;
		this.scaleZ = v5;
		let f5 = 1;
		let b5 = true;
		if(b5) {
			this.flags |= f5;
		} else {
			this.flags &= ~f5;
		}
		h3d.scene.Object.tmpMat.load(mat);
		h3d.scene.Object.tmpMat.prependScale(1.0 / s_x,1.0 / s_y,1.0 / s_z);
		this.qRot.initRotateMatrix(h3d.scene.Object.tmpMat);
		let f6 = 1;
		let b6 = true;
		if(b6) {
			this.flags |= f6;
		} else {
			this.flags &= ~f6;
		}
	}
	getTransform(mat) {
		if(mat == null) {
			mat = new h3d.MatrixImpl();
		}
		mat.initScale(this.scaleX,this.scaleY,this.scaleZ);
		this.qRot.toMatrix(h3d.scene.Object.tmpMat);
		mat.multiply3x4(mat,h3d.scene.Object.tmpMat);
		mat._41 = this.x;
		mat._42 = this.y;
		mat._43 = this.z;
		return mat;
	}
	rotate(rx,ry,rz,qTmp) {
		if(qTmp == null) {
			qTmp = new h3d.Quat();
		}
		qTmp.initRotation(rx,ry,rz);
		this.qRot.multiply(qTmp,this.qRot);
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	setRotation(rx,ry,rz) {
		this.qRot.initRotation(rx,ry,rz);
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	setRotationAxis(ax,ay,az,angle) {
		this.qRot.initRotateAxis(ax,ay,az,angle);
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	setDirection(v,up) {
		this.qRot.initDirection(v,up);
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	getLocalDirection() {
		let _this = this.qRot;
		let x = 1 - 2 * (_this.y * _this.y + _this.z * _this.z);
		let y = 2 * (_this.x * _this.y + _this.z * _this.w);
		let z = 2 * (_this.x * _this.z - _this.y * _this.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	getRotationQuat() {
		return this.qRot;
	}
	setRotationQuat(q) {
		this.qRot = q;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	scale(v) {
		let v1 = this.scaleX * v;
		this.scaleX = v1;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		let v2 = this.scaleY * v;
		this.scaleY = v2;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		let v3 = this.scaleZ * v;
		this.scaleZ = v3;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		let f3 = 1;
		let b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	setScale(v) {
		this.scaleX = v;
		let f = 1;
		let b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		let f1 = 1;
		let b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.scaleZ = v;
		let f2 = 1;
		let b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		let f3 = 1;
		let b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	toString() {
		let c = js.Boot.getClass(this);
		return c.__name__.split(".").pop() + (this.name == null ? "" : "(" + this.name + ")");
	}
	getChildAt(n) {
		return this.children[n];
	}
	getChildIndex(o) {
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	get_numChildren() {
		return this.children.length;
	}
	iterator() {
		return new hxd.impl.ArrayIterator_h3d_scene_Object(this.children);
	}
}
$hxClasses["h3d.scene.Object"] = h3d.scene.Object;
h3d.scene.Object.__name__ = "h3d.scene.Object";
Object.assign(h3d.scene.Object.prototype, {
	__class__: h3d.scene.Object
	,__properties__: {set_posChanged: "set_posChanged",get_posChanged: "get_posChanged",set_cullingColliderInherited: "set_cullingColliderInherited",get_cullingColliderInherited: "get_cullingColliderInherited",set_cullingCollider: "set_cullingCollider",set_alwaysSync: "set_alwaysSync",get_alwaysSync: "get_alwaysSync",set_fixedPosition: "set_fixedPosition",get_fixedPosition: "get_fixedPosition",set_lightCameraCenter: "set_lightCameraCenter",get_lightCameraCenter: "get_lightCameraCenter",set_ignoreParentTransform: "set_ignoreParentTransform",get_ignoreParentTransform: "get_ignoreParentTransform",set_modelRoot: "set_modelRoot",get_modelRoot: "get_modelRoot",set_ignoreCollide: "set_ignoreCollide",get_ignoreCollide: "get_ignoreCollide",set_ignoreBounds: "set_ignoreBounds",get_ignoreBounds: "get_ignoreBounds",set_inheritCulled: "set_inheritCulled",get_inheritCulled: "get_inheritCulled",set_alwaysSyncAnimation: "set_alwaysSyncAnimation",get_alwaysSyncAnimation: "get_alwaysSyncAnimation",set_culled: "set_culled",get_culled: "get_culled",set_defaultTransform: "set_defaultTransform",set_followPositionOnly: "set_followPositionOnly",get_followPositionOnly: "get_followPositionOnly",set_follow: "set_follow",set_allocated: "set_allocated",get_allocated: "get_allocated",set_visible: "set_visible",get_visible: "get_visible",set_scaleZ: "set_scaleZ",set_scaleY: "set_scaleY",set_scaleX: "set_scaleX",set_z: "set_z",set_y: "set_y",set_x: "set_x",get_numChildren: "get_numChildren"}
});
h3d.col.SkinColliderDebugObj = class h3d_col_SkinColliderDebugObj extends h3d.scene.Object {
	constructor(col) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(col);
	}
	_hx_constructor(col) {
		this.boxes = [];
		super._hx_constructor(null);
		this.col = col;
		this.skin = col.obj;
		this.box = new h3d.scene.Box(16777215,col.currentBounds);
		this.addChild(this.box);
		if(true != ((this.flags & 2048) != 0)) {
			let f = 1;
			let b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
		}
		let f = 2048;
		this.flags |= f;
		this.createJoints();
	}
	createJoints() {
		let joints = this.skin.getSkinData().allJoints;
		let _g = 0;
		while(_g < joints.length) {
			let j = joints[_g];
			++_g;
			let b = new h3d.col.Bounds();
			b.xMin = -1;
			b.yMin = -1;
			b.zMin = -1;
			b.xMax = 1;
			b.yMax = 1;
			b.zMax = 1;
			let b1 = new h3d.scene.Box(10526880,b,null,this);
			if(j.offsets != null) {
				let _this = b1.bounds;
				_this.xMin = 1e20;
				_this.xMax = -1e20;
				_this.yMin = 1e20;
				_this.yMax = -1e20;
				_this.zMin = 1e20;
				_this.zMax = -1e20;
				let _this1 = j.offsets;
				let x = _this1.xMin;
				let y = _this1.yMin;
				let z = _this1.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let pt_x = x1;
				let pt_y = y1;
				let pt_z = z1;
				let _this2 = b1.bounds;
				let x2 = pt_x;
				let y2 = pt_y;
				let z2 = pt_z;
				let r = j.offsetRay;
				if(x2 - r < _this2.xMin) {
					_this2.xMin = x2 - r;
				}
				if(x2 + r > _this2.xMax) {
					_this2.xMax = x2 + r;
				}
				if(y2 - r < _this2.yMin) {
					_this2.yMin = y2 - r;
				}
				if(y2 + r > _this2.yMax) {
					_this2.yMax = y2 + r;
				}
				if(z2 - r < _this2.zMin) {
					_this2.zMin = z2 - r;
				}
				if(z2 + r > _this2.zMax) {
					_this2.zMax = z2 + r;
				}
				let _this3 = j.offsets;
				let x3 = _this3.xMax;
				let y3 = _this3.yMax;
				let z3 = _this3.zMax;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				let x4 = x3;
				let y4 = y3;
				let z4 = z3;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				let pt_x1 = x4;
				let pt_y1 = y4;
				let pt_z1 = z4;
				let _this4 = b1.bounds;
				let x5 = pt_x1;
				let y5 = pt_y1;
				let z5 = pt_z1;
				let r1 = j.offsetRay;
				if(x5 - r1 < _this4.xMin) {
					_this4.xMin = x5 - r1;
				}
				if(x5 + r1 > _this4.xMax) {
					_this4.xMax = x5 + r1;
				}
				if(y5 - r1 < _this4.yMin) {
					_this4.yMin = y5 - r1;
				}
				if(y5 + r1 > _this4.yMax) {
					_this4.yMax = y5 + r1;
				}
				if(z5 - r1 < _this4.zMin) {
					_this4.zMin = z5 - r1;
				}
				if(z5 + r1 > _this4.zMax) {
					_this4.zMax = z5 + r1;
				}
			} else {
				let _this = b1.bounds;
				_this.xMin = 1e20;
				_this.xMax = -1e20;
				_this.yMin = 1e20;
				_this.yMax = -1e20;
				_this.zMin = 1e20;
				_this.zMax = -1e20;
				let _this1 = b1.bounds;
				if(-0.1 < _this1.xMin) {
					_this1.xMin = -0.1;
				}
				if(0.1 > _this1.xMax) {
					_this1.xMax = 0.1;
				}
				if(-0.1 < _this1.yMin) {
					_this1.yMin = -0.1;
				}
				if(0.1 > _this1.yMax) {
					_this1.yMax = 0.1;
				}
				if(-0.1 < _this1.zMin) {
					_this1.zMin = -0.1;
				}
				if(0.1 > _this1.zMax) {
					_this1.zMax = 0.1;
				}
			}
			this.boxes.push(b1);
		}
	}
	updateJoints() {
		let _g = 0;
		let _g1 = this.boxes.length;
		while(_g < _g1) {
			let i = _g++;
			let j = this.skin.skinData.allJoints[i];
			let b = this.boxes[i];
			if(j.offsets != null) {
				let m = this.skin.currentPalette[j.bindIndex];
				b.setTransform(m);
			} else {
				b.setTransform(this.skin.currentAbsPose[j.index]);
			}
		}
	}
	sync(ctx) {
		this.col.checkBounds();
		this.updateJoints();
	}
}
$hxClasses["h3d.col.SkinColliderDebugObj"] = h3d.col.SkinColliderDebugObj;
h3d.col.SkinColliderDebugObj.__name__ = "h3d.col.SkinColliderDebugObj";
h3d.col.SkinColliderDebugObj.__super__ = h3d.scene.Object;
Object.assign(h3d.col.SkinColliderDebugObj.prototype, {
	__class__: h3d.col.SkinColliderDebugObj
});
h3d.col.Sphere = class h3d_col_Sphere extends h3d.col.Collider {
	constructor(x,y,z,r) {
		if(r == null) {
			r = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		super();
		let sx = x;
		let sy = y;
		let sz = z;
		let sr = r;
		if(sr == null) {
			sr = 0.;
		}
		if(sz == null) {
			sz = 0.;
		}
		if(sy == null) {
			sy = 0.;
		}
		if(sx == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	load(sx,sy,sz,sr) {
		if(sr == null) {
			sr = 0.;
		}
		if(sz == null) {
			sz = 0.;
		}
		if(sy == null) {
			sy = 0.;
		}
		if(sx == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	getCenter() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,z);
	}
	distance(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		let dz = p.z - this.z;
		let d = dx * dx + dy * dy + dz * dz - this.r * this.r;
		if(d < 0) {
			return -Math.sqrt(-d);
		} else {
			return Math.sqrt(d);
		}
	}
	distanceSq(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		let dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz - this.r * this.r;
	}
	contains(p) {
		let dx = p.x - this.x;
		let dy = p.y - this.y;
		let dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz - this.r * this.r < 0;
	}
	rayIntersection(r,bestMatch) {
		let r2 = this.r * this.r;
		let px = r.px + r.lx;
		let py = r.py + r.ly;
		let pz = r.pz + r.lz;
		let a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		let b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		let c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		let d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		let t = (-b + d) / (2 * a);
		return 1 - t;
	}
	inFrustum(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	inFrustumMatrix(f,m) {
		let oldX = this.x;
		let oldY = this.y;
		let oldZ = this.z;
		let oldR = this.r;
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let v_x = x1;
		let v_y = y1;
		let v_z = z1;
		let px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		let py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		let pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		let _this = m;
		let x2 = 0.;
		let y2 = 0.;
		let z2 = 0.;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let scale_x = x2;
		let scale_y = y2;
		let scale_z = z2;
		scale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		scale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		scale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		this.r *= Math.max(Math.max(scale_x,scale_y),scale_z);
		let res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	transform(m) {
		let _this = m;
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let s_x = x;
		let s_y = y;
		let s_z = z;
		s_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		s_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		s_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		let f = s_x;
		let a = f < 0 ? -f : f;
		let f1 = s_y;
		let b = f1 < 0 ? -f1 : f1;
		let a1 = a < b ? b : a;
		let f2 = s_z;
		let b1 = f2 < 0 ? -f2 : f2;
		let smax = a1 < b1 ? b1 : a1;
		this.r *= smax;
		let x1 = this.x;
		let y1 = this.y;
		let z1 = this.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let x2 = x1;
		let y2 = y1;
		let z2 = z1;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let pt_x = x2;
		let pt_y = y2;
		let pt_z = z2;
		let px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
		let py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
		let pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
		pt_x = px;
		pt_y = py;
		pt_z = pz;
		this.x = pt_x;
		this.y = pt_y;
		this.z = pt_z;
	}
	inSphere(s) {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let _this_x = x1;
		let _this_y = y1;
		let _this_z = z1;
		let x2 = s.x;
		let y2 = s.y;
		let z2 = s.z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let v_x = x3;
		let v_y = y3;
		let v_z = z3;
		let dx = v_x - _this_x;
		let dy = v_y - _this_y;
		let dz = v_z - _this_z;
		return dx * dx + dy * dy + dz * dz < (s.r + this.r) * (s.r + this.r);
	}
	toString() {
		let x = this.x;
		let y = this.y;
		let z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return "Sphere{" + Std.string(new h3d.VectorImpl(x,y,z)) + "," + hxd.Math.fmt(this.r) + "}";
	}
	makeDebugObj() {
		let prim = new h3d.prim.Sphere(this.r,20,15);
		prim.translate(this.x,this.y,this.z);
		prim.addNormals();
		return new h3d.scene.Mesh(prim);
	}
}
$hxClasses["h3d.col.Sphere"] = h3d.col.Sphere;
h3d.col.Sphere.__name__ = "h3d.col.Sphere";
h3d.col.Sphere.__super__ = h3d.col.Collider;
Object.assign(h3d.col.Sphere.prototype, {
	__class__: h3d.col.Sphere
});
h3d.impl.Feature = $hxEnums["h3d.impl.Feature"] = { __ename__:true,__constructs__:null
	,StandardDerivatives: {_hx_name:"StandardDerivatives",_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_name:"FloatTextures",_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_name:"AllocDepthBuffer",_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_name:"HardwareAccelerated",_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_name:"MultipleRenderTargets",_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_name:"Queries",_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_name:"SRGBTextures",_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_name:"ShaderModel3",_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_name:"BottomLeftCoords",_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_name:"Wireframe",_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_name:"InstancedRendering",_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d.impl.Feature.__constructs__ = [h3d.impl.Feature.StandardDerivatives,h3d.impl.Feature.FloatTextures,h3d.impl.Feature.AllocDepthBuffer,h3d.impl.Feature.HardwareAccelerated,h3d.impl.Feature.MultipleRenderTargets,h3d.impl.Feature.Queries,h3d.impl.Feature.SRGBTextures,h3d.impl.Feature.ShaderModel3,h3d.impl.Feature.BottomLeftCoords,h3d.impl.Feature.Wireframe,h3d.impl.Feature.InstancedRendering];
h3d.impl.Feature.__empty_constructs__ = [h3d.impl.Feature.StandardDerivatives,h3d.impl.Feature.FloatTextures,h3d.impl.Feature.AllocDepthBuffer,h3d.impl.Feature.HardwareAccelerated,h3d.impl.Feature.MultipleRenderTargets,h3d.impl.Feature.Queries,h3d.impl.Feature.SRGBTextures,h3d.impl.Feature.ShaderModel3,h3d.impl.Feature.BottomLeftCoords,h3d.impl.Feature.Wireframe,h3d.impl.Feature.InstancedRendering];
h3d.impl.QueryKind = $hxEnums["h3d.impl.QueryKind"] = { __ename__:true,__constructs__:null
	,TimeStamp: {_hx_name:"TimeStamp",_hx_index:0,__enum__:"h3d.impl.QueryKind",toString:$estr}
	,Samples: {_hx_name:"Samples",_hx_index:1,__enum__:"h3d.impl.QueryKind",toString:$estr}
};
h3d.impl.QueryKind.__constructs__ = [h3d.impl.QueryKind.TimeStamp,h3d.impl.QueryKind.Samples];
h3d.impl.QueryKind.__empty_constructs__ = [h3d.impl.QueryKind.TimeStamp,h3d.impl.QueryKind.Samples];
h3d.impl.RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__:true,__constructs__:null
	,CameraHandness: {_hx_name:"CameraHandness",_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d.impl.RenderFlag.__constructs__ = [h3d.impl.RenderFlag.CameraHandness];
h3d.impl.RenderFlag.__empty_constructs__ = [h3d.impl.RenderFlag.CameraHandness];
h3d.impl.Driver = class h3d_impl_Driver {
	constructor() {
		if(h3d.impl.Driver._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.shaderCache = h3d.impl.Driver.SHADER_CACHE;
	}
	hasFeature(f) {
		return false;
	}
	setRenderFlag(r,value) {
	}
	isSupportedFormat(fmt) {
		return false;
	}
	isDisposed() {
		return true;
	}
	dispose() {
	}
	begin(frame) {
	}
	log(str) {
	}
	generateMipMaps(texture) {
		throw haxe.Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	getNativeShaderCode(shader) {
		return null;
	}
	logImpl(str) {
	}
	clear(color,depth,stencil) {
	}
	captureRenderBuffer(pixels) {
	}
	capturePixels(tex,layer,mipLevel,region) {
		throw haxe.Exception.thrown("Can't capture pixels on this platform");
	}
	getDriverName(details) {
		return "Not available";
	}
	init(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	resize(width,height) {
	}
	selectShader(shader) {
		return false;
	}
	selectMaterial(pass) {
	}
	uploadShaderBuffers(buffers,which) {
	}
	selectBuffer(buffer) {
	}
	selectMultiBuffers(format1,buffers) {
	}
	draw(ibuf,startIndex,ntriangles) {
	}
	drawInstanced(ibuf,commands) {
	}
	setRenderZone(x,y,width,height) {
	}
	setRenderTarget(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	setRenderTargets(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
	}
	setDepth(tex) {
	}
	allocDepthBuffer(b) {
		return null;
	}
	disposeDepthBuffer(b) {
	}
	getDefaultDepthBuffer() {
		return null;
	}
	present() {
	}
	end() {
	}
	setDebug(b) {
	}
	allocTexture(t) {
		return null;
	}
	allocBuffer(b) {
		return null;
	}
	allocInstanceBuffer(b,bytes) {
	}
	disposeTexture(t) {
	}
	disposeBuffer(b) {
	}
	disposeInstanceBuffer(b) {
	}
	uploadIndexData(i,startIndice,indiceCount,buf,bufPos) {
	}
	uploadBufferData(b,startVertex,vertexCount,buf,bufPos) {
	}
	uploadBufferBytes(b,startVertex,vertexCount,buf,bufPos) {
	}
	uploadTextureBitmap(t,bmp,mipLevel,side) {
	}
	uploadTexturePixels(t,pixels,mipLevel,side) {
	}
	readBufferBytes(b,startVertex,vertexCount,buf,bufPos) {
		throw haxe.Exception.thrown("Driver does not allow to read vertex bytes");
	}
	copyTexture(from,to) {
		return false;
	}
	allocQuery(queryKind) {
		return null;
	}
	deleteQuery(q) {
	}
	beginQuery(q) {
	}
	endQuery(q) {
	}
	queryResultAvailable(q) {
		return true;
	}
	queryResult(q) {
		return 0.;
	}
	computeDispatch(x,y,z) {
		if(z == null) {
			z = 1;
		}
		if(y == null) {
			y = 1;
		}
		if(x == null) {
			x = 1;
		}
		throw haxe.Exception.thrown("Not implemented");
	}
	static setShaderCache(cache) {
		h3d.impl.Driver.SHADER_CACHE = cache;
	}
}
$hxClasses["h3d.impl.Driver"] = h3d.impl.Driver;
h3d.impl.Driver.__name__ = "h3d.impl.Driver";
Object.assign(h3d.impl.Driver.prototype, {
	__class__: h3d.impl.Driver
});
h3d.impl._GlDriver = {};
h3d.impl._GlDriver.CompiledShader = class h3d_impl__$GlDriver_CompiledShader {
	constructor(s,kind,shader) {
		this.s = s;
		this.kind = kind;
		this.shader = shader;
	}
}
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d.impl._GlDriver.CompiledShader;
h3d.impl._GlDriver.CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
Object.assign(h3d.impl._GlDriver.CompiledShader.prototype, {
	__class__: h3d.impl._GlDriver.CompiledShader
});
h3d.impl._GlDriver.CompiledAttribute = class h3d_impl__$GlDriver_CompiledAttribute {
	constructor() {
	}
}
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d.impl._GlDriver.CompiledAttribute;
h3d.impl._GlDriver.CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
Object.assign(h3d.impl._GlDriver.CompiledAttribute.prototype, {
	__class__: h3d.impl._GlDriver.CompiledAttribute
});
h3d.impl._GlDriver.CompiledProgram = class h3d_impl__$GlDriver_CompiledProgram {
	constructor() {
	}
}
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d.impl._GlDriver.CompiledProgram;
h3d.impl._GlDriver.CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
Object.assign(h3d.impl._GlDriver.CompiledProgram.prototype, {
	__class__: h3d.impl._GlDriver.CompiledProgram
});
h3d.impl.GlDriver = class h3d_impl_GlDriver extends h3d.impl.Driver {
	constructor(antiAlias) {
		h3d.impl.Driver._hx_skip_constructor = true;
		super();
		h3d.impl.Driver._hx_skip_constructor = false;
		this._hx_constructor(antiAlias);
	}
	_hx_constructor(antiAlias) {
		if(antiAlias == null) {
			antiAlias = 0;
		}
		this.features = new haxe.ds.EnumValueMap();
		this.maxCompressedTexturesSupport = 0;
		this.hasMultiIndirect = false;
		this.rightHanded = false;
		this.firstShader = true;
		this.boundTextures = [];
		this.curTargets = [];
		let _g = [];
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		_g.push(0);
		this.currentDivisor = _g;
		this.curColorMask = -1;
		this.lastActiveIndex = 0;
		this.curStEnabled = false;
		this.curStMaskBits = -1;
		this.curStOpBits = -1;
		this.curMatBits = -1;
		this.maxIdxCurAttribs = 0;
		this.curAttribs = [];
		super._hx_constructor();
		this.canvas = hxd.Window.getInstance().canvas;
		let options = { alpha : false, stencil : true, antialias : antiAlias > 0};
		if(h3d.impl.GlDriver.ALLOW_WEBGL2) {
			this.gl = this.canvas.getContext("webgl2",options);
		}
		if(this.gl == null) {
			this.gl = js.html._CanvasElement.CanvasUtil.getContextWebGL(this.canvas,options);
		}
		if(this.gl == null) {
			throw haxe.Exception.thrown("Could not acquire GL context");
		}
		if(typeof(WebGLDebugUtils) != "undefined") {
			this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
			this.glDebug = true;
		}
		this.commonFB = this.gl.createFramebuffer();
		this.programs = new haxe.ds.IntMap();
		this.defStencil = new h3d.mat.Stencil();
		this.frame = hxd.Timer.frameCount;
		let v = this.gl.getParameter(7938);
		let reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
		if(reg.match(v)) {
			this.glES = parseFloat(reg.matched(1));
		}
		let reg1 = new EReg("[0-9]+\\.[0-9]+","");
		let v1 = this.gl.getParameter(35724);
		if(reg1.match(v1)) {
			this.glES = parseFloat(reg1.matched(0));
			this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
		}
		this.drawMode = 4;
		this.makeFeatures();
		if(this.hasFeature(h3d.impl.Feature.InstancedRendering) && this.glES < 3) {
			let extension = this.gl.getExtension("ANGLE_instanced_arrays");
			this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
			this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
		}
		hxsl.SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d.impl.Feature.ShaderModel3);
		this.gl.pixelStorei(3333,1);
		this.gl.pixelStorei(3317,1);
	}
	setRenderFlag(r,value) {
		this.rightHanded = value > 0;
	}
	logImpl(str) {
		console.log(str);
	}
	setDebug(d) {
		this.debug = d;
	}
	begin(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	makeCompiler() {
		let glout = new hxsl.GlslOut();
		glout.glES = this.glES;
		glout.version = this.shaderVersion;
		glout.intelDriverFix = this.isIntelGpu;
		return glout;
	}
	getNativeShaderCode(shader) {
		let _gthis = this;
		let sh = shader.vertex.data;
		let tmp = "// vertex:\n" + _gthis.makeCompiler().run(sh) + "// fragment:\n";
		let sh1 = shader.fragment.data;
		return tmp + _gthis.makeCompiler().run(sh1);
	}
	getDriverName(details) {
		let render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	compileShader(glout,shader) {
		let type = shader.kind == hxsl.FunctionKind.Vertex ? 35633 : 35632;
		let s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		let log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			let log = this.gl.getShaderInfoLog(s);
			let lid = Std.parseInt(HxOverrides.substr(log,9,null));
			let line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			let codeLines = shader.code.split("\n");
			let _g = 0;
			let _g1 = codeLines.length;
			while(_g < _g1) {
				let i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe.Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d.impl._GlDriver.CompiledShader(s,shader.kind,shader);
	}
	initShader(p,s,shader,rt) {
		let prefix = s.kind == hxsl.FunctionKind.Vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		let index = 0;
		let curT = null;
		let mode = 0;
		let name = "";
		let t = shader.textures;
		while(t != null) {
			let tt = t.type;
			let count = 1;
			switch(tt._hx_index) {
			case 15:
				let _g = tt.size;
				if(_g._hx_index == 0) {
					let n = _g.v;
					let t = tt.t;
					tt = t;
					count = n;
				}
				break;
			case 17:
				let _g1 = tt.size;
				tt = hxsl.Type.TSampler2D;
				break;
			default:
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe.Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			let _g2 = 0;
			let _g3 = count;
			while(_g2 < _g3) {
				let i = _g2++;
				let loc = this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]");
				if(loc == null) {
					throw haxe.Exception.thrown("Texture " + rt.spec.instances[t.instance].shader.data.name + "." + t.name + " is missing from generated shader");
				}
				s.textures.push({ u : loc, t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			let _g = [];
			let _g1 = 0;
			let _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				let i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,(shader.kind == hxsl.FunctionKind.Vertex ? "vertex_" : "") + "uniform_buffer" + i));
			}
			s.buffers = _g;
			let start = 0;
			if(s.kind == hxsl.FunctionKind.Fragment) {
				start = rt.vertex.bufferCount;
			}
			let _g3 = 0;
			let _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				let i = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i + start);
			}
		}
	}
	selectShader(shader) {
		let p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d.impl._GlDriver.CompiledProgram();
			let glout = this.makeCompiler();
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			let log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				let e = haxe.Exception.caught(_g).unwrap();
				throw haxe.Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe.Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex,shader);
			this.initShader(p,p.fragment,shader.fragment,shader);
			p.attribs = [];
			p.hasAttribIndex = 0;
			let format1 = [];
			let _g = 0;
			let _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					let t = hxd.InputFormat.fromHXSL(v.type);
					let index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						continue;
					}
					if(index >= 32) {
						throw haxe.Exception.thrown("assert");
					}
					let a = new h3d.impl._GlDriver.CompiledAttribute();
					a.type = 5126;
					a.index = index;
					a.size = t & 7;
					let _g = v.type;
					if(_g._hx_index == 9) {
						let n = _g.size;
						a.type = 5120;
						a.size = n;
					}
					a.divisor = 0;
					if(v.qualifiers != null) {
						let _g = 0;
						let _g1 = v.qualifiers;
						while(_g < _g1.length) {
							let q = _g1[_g];
							++_g;
							if(q._hx_index == 9) {
								let n = q.v;
								a.divisor = n;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex |= 1 << a.index;
					format1.push(new hxd.BufferInput(v.name,t,0));
				}
			}
			p.format = hxd.BufferFormat.make(format1);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	setProgram(p) {
		this.gl.useProgram(p.p);
		let _g = 0;
		let _g1 = p.attribs;
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		let lastIdxCurAttribTrue = 0;
		let _g2 = 0;
		let _g3 = this.maxIdxCurAttribs + 1;
		while(_g2 < _g3) {
			let i = _g2++;
			if(this.curAttribs[i] && (p.hasAttribIndex & 1 << i) == 0) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		let _g4 = 0;
		let _g5 = this.boundTextures.length;
		while(_g4 < _g5) {
			let i = _g4++;
			this.boundTextures[i] = null;
		}
	}
	uploadShaderBuffers(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
	}
	uploadBuffer(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				let a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				let a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			let tcount = s.textures.length;
			let _g = 0;
			let _g1 = s.textures.length;
			while(_g < _g1) {
				let i = _g++;
				let t = buf.tex[i];
				let pt = s.textures[i];
				if(t == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
					switch(pt.t._hx_index) {
					case 10:
						let color = h3d.mat.Defaults.loadingTextureColor;
						t = h3d.mat.Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d.mat.Texture.defaultCubeTexture();
						break;
					default:
						throw haxe.Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					let s = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s) {
						this.setProgram(s);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				let idx = s.kind == hxsl.FunctionKind.Fragment ? this.curShader.vertex.textures.length + i : i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					let mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe.Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				let mip = t.mipMap._hx_index;
				let filter = t.filter._hx_index;
				let wrap = t.wrap._hx_index;
				let bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					let flags = h3d.impl.GlDriver.TFILTERS[mip][filter];
					let mode = pt.mode;
					this.gl.texParameteri(mode,10240,flags[0]);
					this.gl.texParameteri(mode,10241,flags[1]);
					this.gl.texParameteri(mode,34892,0);
					let w = h3d.impl.GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode,10242,w);
					this.gl.texParameteri(mode,10243,w);
				}
				if(t.t.startMip != t.startingMip) {
					this.gl.texParameteri(pt.mode,33084,t.startingMip);
					t.t.startMip = t.startingMip;
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				let start = 0;
				if(s.kind == hxsl.FunctionKind.Fragment && this.curShader.vertex.buffers != null) {
					start = this.curShader.vertex.buffers.length;
				}
				let _g = 0;
				let _g1 = s.buffers.length;
				while(_g < _g1) {
					let i = _g++;
					this.gl.bindBufferBase(35345,i + start,buf.buffers[i].vbuf);
				}
			}
			break;
		}
	}
	selectMaterial(pass) {
		let bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			let m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			let mi = m >> 4;
			if(mi > 0) {
				throw haxe.Exception.thrown("GL ColorMaski support requires hlsdl 1.14+");
			}
			this.curColorMask = m;
		}
		let s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	selectMaterialBits(bits) {
		let diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		let wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			let cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d.impl.GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			let csrc = bits >> 6 & 15;
			let cdst = bits >> 10 & 15;
			let asrc = bits >> 14 & 15;
			let adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d.impl.GlDriver.BLEND[csrc],h3d.impl.GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d.impl.GlDriver.BLEND[csrc],h3d.impl.GlDriver.BLEND[cdst],h3d.impl.GlDriver.BLEND[asrc],h3d.impl.GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			let cop = bits >> 22 & 7;
			let aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d.impl.GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d.impl.GlDriver.OP[cop],h3d.impl.GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			let cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d.impl.GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	selectStencilBits(opBits,maskBits) {
		let diffOp = opBits ^ this.curStOpBits;
		let diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d.impl.GlDriver.FACES[2],h3d.impl.GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d.impl.GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d.impl.GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d.impl.GlDriver.FACES[1],h3d.impl.GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d.impl.GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d.impl.GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d.impl.GlDriver.FACES[2],h3d.impl.GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d.impl.GlDriver.FACES[1],h3d.impl.GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			let w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d.impl.GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d.impl.GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	clear(color,depth,stencil) {
		let bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
		}
	}
	resize(width,height) {
		if(this.canvas.style.width == "") {
			let tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			let tmp1 = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp1 + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	getChannels(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33322:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33324:case 33327:case 33328:
			return 33319;
		case 34836:case 34842:
			return 6408;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 32859:case 33777:case 33778:case 33779:case 36492:
			return 6408;
		case 32852:case 34837:case 34843:case 36495:
			return 6407;
		default:
			throw haxe.Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	isSupportedFormat(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d.impl.Feature.FloatTextures);
		case 14:case 15:
			return this.hasFeature(h3d.impl.Feature.SRGBTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 22:
			let n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	getBindType(t) {
		let isCube = (t.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0;
		let isArray = (t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	allocTexture(t) {
		if(h3d.impl.GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		let tt = this.gl.createTexture();
		let bind = this.getBindType(t);
		let tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0, startMip : t.startingMip};
		let _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d.impl.Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe.Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d.impl.Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe.Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			tt1.internalFmt = 33322;
			tt1.pixelFmt = 5123;
			break;
		case 19:
			tt1.internalFmt = 33324;
			tt1.pixelFmt = 5123;
			break;
		case 20:
			tt1.internalFmt = 32852;
			tt1.pixelFmt = 5123;
			break;
		case 21:
			tt1.internalFmt = 32859;
			tt1.pixelFmt = 5123;
			break;
		case 22:
			let n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe.Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				case 6:
					tt1.internalFmt = 36495;
					break;
				case 7:
					tt1.internalFmt = 36492;
					break;
				default:
					throw haxe.Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe.Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe.Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		if(tt1.pixelFmt == 5123 && !this.has16Bits) {
			throw haxe.Exception.thrown("16 bit textures requires EXT_texture_norm16 extension");
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d.mat.TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		let outOfMem = false;
		this.gl.texParameteri(bind,33084,t.startingMip);
		this.gl.texParameteri(bind,33085,t.get_mipLevels() - 1);
		let sizedFormat = tt1.internalFmt == 6408 ? 32856 : tt1.internalFmt;
		let _gthis = this;
		if((t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0 && (t.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) == 0) {
			this.gl.texStorage3D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height,t.get_layerCount());
			if(h3d.impl.GlDriver.outOfMemoryCheck) {
				let err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe.Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			this.gl.texStorage2D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height);
			if(h3d.impl.GlDriver.outOfMemoryCheck) {
				let err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe.Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	restoreBind() {
		let t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	allocDepthBuffer(t) {
		let tt = this.gl.createTexture();
		let tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : 3553, bias : 0, startMip : 0};
		let fmt = 6402;
		switch(t.format._hx_index) {
		case 23:
			tt1.internalFmt = 33189;
			break;
		case 24:
			if(this.glES >= 3) {
				tt1.internalFmt = 6402;
			} else {
				throw haxe.Exception.thrown("Unsupported depth format " + Std.string(t.format));
			}
			break;
		case 25:
			tt1.internalFmt = 35056;
			tt1.pixelFmt = 34042;
			fmt = 34041;
			break;
		default:
			throw haxe.Exception.thrown("Unsupported depth format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d.mat.TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(tt1.bind,tt1.t);
		this.gl.texParameteri(tt1.bind,10241,9728);
		this.gl.texParameteri(tt1.bind,10240,9728);
		this.gl.texParameteri(tt1.bind,10242,33071);
		this.gl.texParameteri(tt1.bind,10243,33071);
		this.gl.texImage2D(tt1.bind,0,tt1.internalFmt,tt1.width,tt1.height,0,fmt,tt1.pixelFmt,null);
		this.restoreBind();
		return tt1;
	}
	disposeDepthBuffer(b) {
		if(b.t != null && b.t.t != null) {
			this.gl.deleteTexture(b.t.t);
			b.t = null;
		}
	}
	getDefaultDepthBuffer() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d.mat.Texture(0,0,null,hxd.PixelFormat.Depth24Stencil8);
		this.defaultDepth.name = "defaultDepthBuffer";
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	discardError() {
		if(h3d.impl.GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
	}
	allocBuffer(b) {
		if(h3d.impl.GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		let vb = this.gl.createBuffer();
		let type = (b.flags & 1 << h3d.BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,vb);
		if(b.vertices * b.format.stride == 0) {
			throw haxe.Exception.thrown("assert");
		}
		this.gl.bufferData(type,b.vertices * b.format.strideBytes,(b.flags & 1 << h3d.BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		let outOfMem = h3d.impl.GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d.BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
		if(outOfMem) {
			this.gl.deleteBuffer(vb);
			return null;
		}
		return vb;
	}
	disposeTexture(t) {
		let tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		let _g = 0;
		let _g1 = this.boundTextures.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	disposeBuffer(b) {
		this.gl.deleteBuffer(b.vbuf);
	}
	generateMipMaps(t) {
		let bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	uploadTextureBitmap(t,bmp,mipLevel,side) {
		if(t.format != hxd.PixelFormat.RGBA || t.get_layerCount() != 1) {
			let pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			let img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texSubImage2D(3553,mipLevel,0,0,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	resetStream() {
	}
	streamData(data,pos,length) {
		return data;
	}
	uploadTexturePixels(t,pixels,mipLevel,side) {
		let cubic = (t.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0;
		let face = cubic ? h3d.impl.GlDriver.CUBE_FACES[side] : (t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0 ? 35866 : 3553;
		let bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		let dataLen = pixels.dataSize;
		let buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		let _g = t.format;
		let tmp;
		if(_g._hx_index == 22) {
			let _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			if((t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0) {
				this.gl.compressedTexSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,t.t.internalFmt,buffer);
			} else {
				this.gl.compressedTexSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,t.t.internalFmt,buffer);
			}
		} else if((t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,this.getChannels(t.t),t.t.pixelFmt,buffer);
		} else {
			this.gl.texSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	uploadBufferData(b,startVertex,vertexCount,buf,bufPos) {
		let stride = b.format.strideBytes;
		this.gl.bindBuffer(34962,b.vbuf);
		let buf1 = buf.array;
		let sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride >> 2);
		this.gl.bufferSubData(34962,startVertex * stride,sub);
		this.gl.bindBuffer(34962,null);
	}
	uploadBufferBytes(b,startVertex,vertexCount,buf,bufPos) {
		let stride = b.format.strideBytes;
		let type = (b.flags & 1 << h3d.BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,b.vbuf);
		let sub = new Uint8Array(buf.b.bufferValue,bufPos,vertexCount * stride);
		this.gl.bufferSubData(type,startVertex * stride,sub);
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d.BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
	}
	uploadIndexData(i,startIndice,indiceCount,buf,bufPos) {
		let bits = i.format.strideBytes >> 1;
		this.gl.bindBuffer(34963,i.vbuf);
		let buf1 = new Uint16Array(buf);
		let sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	updateDivisor(a) {
		if(this.currentDivisor[a.index] != a.divisor) {
			this.currentDivisor[a.index] = a.divisor;
			this.gl.vertexAttribDivisor(a.index,a.divisor);
		}
	}
	selectBuffer(b) {
		if(b == this.curBuffer) {
			return;
		}
		if(this.curShader == null) {
			throw haxe.Exception.thrown("No shader selected");
		}
		this.gl.bindBuffer(34962,b.vbuf);
		this.curBuffer = b;
		let strideBytes = b.format.strideBytes;
		let map = b.format.resolveMapping(this.curShader.format);
		let _g_current = 0;
		let _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			let _g_value = _g_array[_g_current];
			let _g_key = _g_current++;
			let i = _g_key;
			let a = _g_value;
			let inf = map[i];
			let norm = false;
			let tmp = this.gl;
			let a1 = a.index;
			let a2 = a.size;
			let tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	selectMultiBuffers(format1,buffers) {
		let format2 = this.curShader.format;
		let m = format1.mappings[format2.uid];
		if(m == null) {
			m = format1.makeMapping(format2);
		}
		let map = m;
		let _g_current = 0;
		let _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			let _g_value = _g_array[_g_current];
			let _g_key = _g_current++;
			let i = _g_key;
			let a = _g_value;
			let inf = map[i];
			let b = buffers[inf >> 3 & 255];
			if(this.curBuffer != b) {
				this.gl.bindBuffer(34962,b.vbuf);
				this.curBuffer = b;
			}
			let norm = false;
			let tmp = this.gl;
			let a1 = a.index;
			let a2 = a.size;
			let tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,b.format.strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	draw(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		if(ibuf.format.strideBytes == 4) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	allocInstanceBuffer(b,bytes) {
		let data = [];
		let _g = 0;
		let _g1 = b.commandCount;
		while(_g < _g1) {
			let i = _g++;
			let p = i * 5 * 4;
			let indexCount = bytes.getInt32(p);
			let instanceCount = bytes.getInt32(p + 4);
			let offIndex = bytes.getInt32(p + 8);
			let offVertex = bytes.getInt32(p + 12);
			let offInstance = bytes.getInt32(p + 16);
			if(offVertex != 0 || offInstance != 0) {
				throw haxe.Exception.thrown("baseVertex and baseInstance must be zero on this platform");
			}
			data.push(indexCount);
			data.push(offIndex);
			data.push(instanceCount);
		}
		b.data = data;
	}
	disposeInstanceBuffer(b) {
		b.data = null;
	}
	drawInstanced(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		let kind;
		let size;
		if(ibuf.format.strideBytes == 4) {
			kind = 5125;
			size = 4;
		} else {
			kind = 5123;
			size = 2;
		}
		let args = commands.data;
		if(args != null) {
			let p = 0;
			let _g = 0;
			let _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				let i = _g++;
				this.gl.drawElementsInstanced(this.drawMode,args[p++],kind,args[p++] * size,args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,kind,commands.startIndex * size,commands.commandCount);
		}
	}
	end() {
	}
	present() {
	}
	isDisposed() {
		return this.gl.isContextLost();
	}
	setRenderZone(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	setDrawBuffers(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d.impl.GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d.impl.GlDriver.CBUFFERS[k]);
		}
	}
	unbindTargets() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	capturePixels(tex,layer,mipLevel,region) {
		let x;
		let y;
		let w;
		let h;
		if(region != null) {
			if(region.xMax > tex.width) {
				region.xMax = tex.width;
			}
			if(region.yMax > tex.height) {
				region.yMax = tex.height;
			}
			if(region.xMin < 0) {
				region.xMin = 0;
			}
			if(region.yMin < 0) {
				region.yMin = 0;
			}
			w = region.xMax - region.xMin;
			h = region.yMax - region.yMin;
			x = region.xMin;
			y = region.yMin;
		} else {
			w = tex.width;
			h = tex.height;
			x = 0;
			y = 0;
		}
		w >>= mipLevel;
		h >>= mipLevel;
		if(w == 0) {
			w = 1;
		}
		if(h == 0) {
			h = 1;
		}
		let pixels = hxd.Pixels.alloc(w,h,tex.format);
		let old = this.curTarget;
		let oldCount = this.numTargets;
		let oldLayer = this.curTargetLayer;
		let oldMip = this.curTargetMip;
		if(oldCount > 1) {
			this.numTargets = 1;
			let _g = 1;
			let _g1 = oldCount;
			while(_g < _g1) {
				let i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,null,0);
				}
			}
		}
		this.setRenderTarget(tex,layer,mipLevel);
		this.captureSubRenderBuffer(pixels,x,y);
		this.setRenderTarget(old,oldLayer,oldMip);
		if(oldCount > 1) {
			let _g = 1;
			let _g1 = oldCount;
			while(_g < _g1) {
				let i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
				}
			}
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	setRenderTarget(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe.Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe.Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d.mat.TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d.mat.TextureFlags.WasCleared._hx_index) == 0) {
			let bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0 ? h3d.impl.GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null && depthBinding != h3d.DepthBinding.NotBound) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == hxd.PixelFormat.Depth24Stencil8) {
				this.gl.framebufferTexture2D(36160,33306,3553,tex.depthBuffer.t.t,0);
			} else {
				this.gl.framebufferTexture2D(36160,33306,3553,null,0);
				this.gl.framebufferTexture2D(36160,36096,3553,tex.depthBuffer.t.t,0);
				this.gl.framebufferTexture2D(36160,36128,3553,tex.depthBuffer.hasStencil() ? tex.depthBuffer.t.t : null,0);
			}
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,null,0);
			this.gl.framebufferTexture2D(36160,36128,3553,null,0);
		}
		let w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		let h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		let _g = 0;
		let _g1 = this.boundTextures.length;
		while(_g < _g1) {
			let i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d.mat.TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
			this.clear(h3d.impl.GlDriver.BLACK);
		}
		if(this.glDebug) {
			let code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe.Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	setRenderTargets(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		this.unbindTargets();
		this.setRenderTarget(textures[0],null,null,depthBinding);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		let needClear = false;
		let _g = 1;
		let _g1 = textures.length;
		while(_g < _g1) {
			let i = _g++;
			let tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d.mat.TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d.impl.GlDriver.BLACK);
		}
	}
	setDepth(depthBuffer) {
		this.unbindTargets();
		this.curTarget = depthBuffer;
		depthBuffer.set_lastFrame(this.frame);
		this.curTargetLayer = 0;
		this.curTargetMip = 0;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,3553,null,0);
		if(depthBuffer.hasStencil() && depthBuffer.format == hxd.PixelFormat.Depth24Stencil8) {
			this.gl.framebufferTexture2D(36160,33306,3553,depthBuffer.t.t,0);
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,depthBuffer.t.t,0);
			this.gl.framebufferTexture2D(36160,36128,3553,depthBuffer.hasStencil() ? depthBuffer.t.t : null,0);
		}
		let w = depthBuffer.width;
		if(w == 0) {
			w = 1;
		}
		let h = depthBuffer.height;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		let _g = 0;
		let _g1 = this.boundTextures.length;
		while(_g < _g1) {
			let i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			let code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe.Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	init(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(window.document.readyState == "complete") {
			let _g = onCreate;
			let a1 = false;
			haxe.Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			let onLoad = null;
			onLoad = function() {
				window.removeEventListener("load",onLoad);
				onCreate(false);
			};
			window.addEventListener("load",onLoad);
		}
	}
	hasFeature(f) {
		return this.features.get(f);
	}
	makeFeatures() {
		let _g = 0;
		let _g1 = h3d.impl.Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
			if(this.gl.getExtension("EXT_texture_compression_bptc") != null) {
				this.maxCompressedTexturesSupport = 7;
			}
		}
		if(this.glES < 3) {
			this.gl.getExtension("WEBGL_depth_texture");
		}
		this.has16Bits = this.gl.getExtension("EXT_texture_norm16") != null;
	}
	checkFeature(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	uploadTextureVideoElement(t,v,mipLevel,side) {
		let cubic = (t.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0;
		let bind = this.getBindType(t);
		if((t.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0) {
			throw haxe.Exception.thrown("TODO:texImage3D");
		}
		let face = cubic ? h3d.impl.GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		this.gl.texSubImage2D(face,mipLevel,0,0,v.videoWidth,v.videoHeight,this.getChannels(t.t),t.t.pixelFmt,v);
		this.restoreBind();
	}
	captureRenderBuffer(pixels) {
		this.captureSubRenderBuffer(pixels,0,0);
	}
	captureSubRenderBuffer(pixels,x,y) {
		if(this.curTarget == null) {
			throw haxe.Exception.thrown("Can't capture main render buffer in GL");
		}
		this.gl.getError();
		let buffer = pixels.bytes.b;
		switch(this.curTarget.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(buffer.buffer);
			break;
		case 16:case 17:
			buffer = new Uint32Array(buffer.buffer);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(buffer.buffer);
			break;
		default:
		}
		this.gl.readPixels(x,y,pixels.width,pixels.height,this.getChannels(this.curTarget.t),this.curTarget.t.pixelFmt,buffer);
		let error = this.gl.getError();
		if(error != 0) {
			throw haxe.Exception.thrown("Failed to capture pixels (error " + error + ")");
		}
		pixels.set_innerFormat(this.curTarget.format);
	}
}
$hxClasses["h3d.impl.GlDriver"] = h3d.impl.GlDriver;
h3d.impl.GlDriver.__name__ = "h3d.impl.GlDriver";
h3d.impl.GlDriver.__super__ = h3d.impl.Driver;
Object.assign(h3d.impl.GlDriver.prototype, {
	__class__: h3d.impl.GlDriver
});
h3d.impl.InstanceBuffer = class h3d_impl_InstanceBuffer {
	constructor() {
		this.triCount = 0;
	}
	setCommand(commandCount,indexCount,startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		this.commandCount = commandCount;
		this.indexCount = indexCount;
		this.triCount = commandCount * indexCount / 3 | 0;
		this.startIndex = startIndex;
	}
	setBuffer(commandCount,bytes) {
		this.dispose();
		let _g = 0;
		let _g1 = commandCount;
		while(_g < _g1) {
			let i = _g++;
			let idxCount = bytes.getInt32(i * 20);
			let instCount = bytes.getInt32(i * 20 + 4);
			let tri = idxCount * instCount / 3 | 0;
			this.triCount += tri;
		}
		this.commandCount = commandCount;
		this.indexCount = 0;
		this.driver = h3d.Engine.CURRENT.driver;
		this.driver.allocInstanceBuffer(this,bytes);
	}
	dispose() {
		if(this.data != null) {
			this.driver.disposeInstanceBuffer(this);
		}
	}
}
$hxClasses["h3d.impl.InstanceBuffer"] = h3d.impl.InstanceBuffer;
h3d.impl.InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
Object.assign(h3d.impl.InstanceBuffer.prototype, {
	__class__: h3d.impl.InstanceBuffer
});
h3d.impl.MemoryManager = class h3d_impl_MemoryManager {
	constructor(driver) {
		this.texMemory = 0;
		this.usedMemory = 0;
		this.driver = driver;
	}
	init() {
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	initIndexes() {
		let indices = new Array(0);
		let _g = 0;
		while(_g < 65532) {
			let i = _g++;
			indices.push(i);
		}
		this.triIndexes16 = h3d.Indexes.alloc(indices);
		let indices1 = new Array(0);
		let p = 0;
		let _g1 = 0;
		while(_g1 < 10922) {
			let i = _g1++;
			let k = i << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65532);
		this.quadIndexes16 = h3d.Indexes.alloc(indices1);
	}
	garbage() {
	}
	getTriIndexes(vertices) {
		if(vertices <= 65532) {
			return this.triIndexes16;
		}
		if(this.triIndexes32 == null || this.triIndexes32.vertices < vertices) {
			let sz = 131072;
			while(sz < vertices) sz <<= 1;
			let bytes = new haxe.io.Bytes(new ArrayBuffer(sz << 2));
			let _g = 0;
			let _g1 = sz;
			while(_g < _g1) {
				let i = _g++;
				bytes.setInt32(i << 2,i);
			}
			if(this.triIndexes32 != null) {
				this.triIndexes32.dispose();
			}
			this.triIndexes32 = h3d.Indexes._new(sz,true);
			this.triIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.triIndexes32;
	}
	getQuadIndexes(vertices) {
		let nquads = (vertices + 3 >> 2) * 6;
		if(nquads <= 65532) {
			return this.quadIndexes16;
		}
		if(this.quadIndexes32 == null || this.quadIndexes32.vertices < vertices) {
			let sz = 131072;
			while(sz < nquads) sz <<= 1;
			let bytes = new haxe.io.Bytes(new ArrayBuffer(sz << 2));
			let p = 0;
			let _g = 0;
			let _g1 = sz / 6 | 0;
			while(_g < _g1) {
				let i = _g++;
				let k = i << 2;
				bytes.setInt32(p++ << 2,k);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 3);
			}
			if(this.quadIndexes32 != null) {
				this.quadIndexes32.dispose();
			}
			this.quadIndexes32 = h3d.Indexes._new(sz,true);
			this.quadIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.quadIndexes32;
	}
	allocBuffer(b) {
		if(b.vbuf != null) {
			return;
		}
		let mem = b.vertices * b.format.strideBytes;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || (b.vbuf = this.driver.allocBuffer(b)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			let size = this.usedMemory;
			this.garbage();
			if(this.usedMemory == size) {
				throw haxe.Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.buffers.length + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.buffers.push(b);
	}
	freeBuffer(b) {
		if(b.vbuf == null) {
			return;
		}
		this.driver.disposeBuffer(b);
		b.vbuf = null;
		if(HxOverrides.remove(this.buffers,b)) {
			this.usedMemory -= b.vertices * b.format.strideBytes;
		}
	}
	memSize(t) {
		if((t.flags & 1 << h3d.mat.TextureFlags.AsyncLoading._hx_index) != 0 && (t.flags & 1 << h3d.mat.TextureFlags.Loading._hx_index) != 0) {
			return 4;
		}
		let size = hxd.Pixels.calcDataSize(t.width,t.height,t.format);
		if(t.get_mipLevels() > 0) {
			let _g = 1;
			let _g1 = t.get_mipLevels();
			while(_g < _g1) {
				let i = _g++;
				let w = t.width >> i;
				if(w == 0) {
					w = 1;
				}
				let h = t.height >> i;
				if(h == 0) {
					h = 1;
				}
				size += hxd.Pixels.calcDataSize(w,h,t.format);
			}
		}
		return size * t.get_layerCount();
	}
	cleanTextures(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		let _g = 0;
		let _g1 = this.textures;
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			if(t.realloc == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
				continue;
			}
			if((force || t._lastFrame < hxd.Timer.frameCount - 3600) && t._lastFrame != h3d.mat.Texture.PREVENT_AUTO_DISPOSE) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	sortByLRU(t1,t2) {
		return t1._lastFrame - t2._lastFrame;
	}
	deleteTexture(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= this.memSize(t);
	}
	allocTexture(t) {
		while(true) {
			let free = this.cleanTextures(false);
			t.t = this.driver.allocTexture(t);
			if(t.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe.Exception.thrown("Maximum texture memory reached");
			}
		}
		this.textures.push(t);
		this.texMemory += this.memSize(t);
	}
	allocDepth(b) {
		while(true) {
			let free = this.cleanTextures(false);
			b.t = this.driver.allocDepthBuffer(b);
			if(b.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe.Exception.thrown("Maximum texture memory reached");
			}
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	deleteDepth(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	onContextLost() {
		this.dispose();
		this.initIndexes();
	}
	dispose() {
		if(this.triIndexes16 != null) {
			this.triIndexes16.dispose();
		}
		if(this.quadIndexes16 != null) {
			this.quadIndexes16.dispose();
		}
		if(this.triIndexes32 != null) {
			this.triIndexes32.dispose();
		}
		if(this.quadIndexes32 != null) {
			this.quadIndexes32.dispose();
		}
		this.triIndexes16 = null;
		this.quadIndexes16 = null;
		this.triIndexes32 = null;
		this.quadIndexes32 = null;
		let _g = 0;
		let _g1 = this.textures.slice();
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			t.dispose();
		}
		let _g2 = 0;
		let _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			let b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		let _g4 = 0;
		let _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			let b = _g5[_g4];
			++_g4;
			b.dispose();
		}
		this.buffers = [];
		this.textures = [];
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	stats() {
		let total = 0.;
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			total += b.vertices * b.format.strideBytes;
		}
		return { bufferCount : this.buffers.length, bufferMemory : total, totalMemory : this.usedMemory + this.texMemory, textureCount : this.textures.length, textureMemory : this.texMemory};
	}
	allocStats() {
		return [];
	}
}
$hxClasses["h3d.impl.MemoryManager"] = h3d.impl.MemoryManager;
h3d.impl.MemoryManager.__name__ = "h3d.impl.MemoryManager";
Object.assign(h3d.impl.MemoryManager.prototype, {
	__class__: h3d.impl.MemoryManager
});
h3d.impl.NullDriver = class h3d_impl_NullDriver extends h3d.impl.Driver {
	constructor() {
		super();
	}
	hasFeature(f) {
		return true;
	}
	isSupportedFormat(fmt) {
		return true;
	}
	logImpl(str) {
		haxe.Log.trace(str,{ fileName : "h3d/impl/NullDriver.hx", lineNumber : 23, className : "h3d.impl.NullDriver", methodName : "logImpl"});
	}
	isDisposed() {
		return false;
	}
	getDriverName(details) {
		return "NullDriver";
	}
	init(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		onCreate(false);
	}
	selectShader(shader) {
		if(this.cur == shader) {
			return false;
		}
		this.cur = shader;
		return true;
	}
	allocTexture(t) {
		return { };
	}
	allocBuffer(b) {
		return { };
	}
}
$hxClasses["h3d.impl.NullDriver"] = h3d.impl.NullDriver;
h3d.impl.NullDriver.__name__ = "h3d.impl.NullDriver";
h3d.impl.NullDriver.__super__ = h3d.impl.Driver;
Object.assign(h3d.impl.NullDriver.prototype, {
	__class__: h3d.impl.NullDriver
});
h3d.impl.Step = $hxEnums["h3d.impl.Step"] = { __ename__:true,__constructs__:null
	,MainDraw: {_hx_name:"MainDraw",_hx_index:0,__enum__:"h3d.impl.Step",toString:$estr}
	,Decals: {_hx_name:"Decals",_hx_index:1,__enum__:"h3d.impl.Step",toString:$estr}
	,Shadows: {_hx_name:"Shadows",_hx_index:2,__enum__:"h3d.impl.Step",toString:$estr}
	,Lighting: {_hx_name:"Lighting",_hx_index:3,__enum__:"h3d.impl.Step",toString:$estr}
	,Forward: {_hx_name:"Forward",_hx_index:4,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemapping: {_hx_name:"BeforeTonemapping",_hx_index:5,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterTonemapping: {_hx_name:"AfterTonemapping",_hx_index:6,__enum__:"h3d.impl.Step",toString:$estr}
	,Overlay: {_hx_name:"Overlay",_hx_index:7,__enum__:"h3d.impl.Step",toString:$estr}
	,Custom: ($_=function(name) { return {_hx_index:8,name:name,__enum__:"h3d.impl.Step",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["name"],$_)
};
h3d.impl.Step.__constructs__ = [h3d.impl.Step.MainDraw,h3d.impl.Step.Decals,h3d.impl.Step.Shadows,h3d.impl.Step.Lighting,h3d.impl.Step.Forward,h3d.impl.Step.BeforeTonemapping,h3d.impl.Step.AfterTonemapping,h3d.impl.Step.Overlay,h3d.impl.Step.Custom];
h3d.impl.Step.__empty_constructs__ = [h3d.impl.Step.MainDraw,h3d.impl.Step.Decals,h3d.impl.Step.Shadows,h3d.impl.Step.Lighting,h3d.impl.Step.Forward,h3d.impl.Step.BeforeTonemapping,h3d.impl.Step.AfterTonemapping,h3d.impl.Step.Overlay];
h3d.impl.RendererFX = class h3d_impl_RendererFX {
}
$hxClasses["h3d.impl.RendererFX"] = h3d.impl.RendererFX;
h3d.impl.RendererFX.__name__ = "h3d.impl.RendererFX";
h3d.impl.RendererFX.__isInterface__ = true;
Object.assign(h3d.impl.RendererFX.prototype, {
	__class__: h3d.impl.RendererFX
});
h3d.impl.ShaderCache = class h3d_impl_ShaderCache {
	constructor(file,outputFile) {
		this.file = file;
		let tmp = outputFile;
		this.outputFile = tmp != null ? tmp : file;
		this.sourceFile = file + ".source";
	}
	disableSave() {
		this.outputFile = null;
	}
	initEmpty() {
		this.data = new haxe.ds.StringMap();
		this.sources = new haxe.ds.StringMap();
	}
	load() {
		this.data = new haxe.ds.StringMap();
		try {
			this.loadFile(this.file);
		} catch( _g ) {
		}
		if(this.outputFile != this.file) {
			try {
				this.loadFile(this.outputFile);
			} catch( _g ) {
			}
		}
		if(this.keepSource) {
			try {
				this.loadSources();
			} catch( _g ) {
			}
		}
	}
	loadFile(file) {
		throw haxe.Exception.thrown("Cannot load shader cache with this platform");
	}
	loadSources() {
		throw haxe.Exception.thrown("Cannot load shader cache with this platform");
	}
	resolveShaderBinary(source,configurationKey) {
		if(configurationKey == null) {
			configurationKey = "";
		}
		if(this.data == null) {
			this.load();
		}
		let this1 = this.data;
		let key = configurationKey + haxe.crypto.Md5.encode(source);
		return this1.h[key];
	}
	saveCompiledShader(source,bytes,configurationKey,saveToFile) {
		if(saveToFile == null) {
			saveToFile = true;
		}
		if(configurationKey == null) {
			configurationKey = "";
		}
		if(this.outputFile == null) {
			return;
		}
		if(this.data == null) {
			this.load();
		}
		let key = configurationKey + haxe.crypto.Md5.encode(source);
		if(this.data.h[key] == bytes && (!this.keepSource || this.sources.h[key] == source)) {
			return;
		}
		this.data.h[key] = bytes;
		if(saveToFile) {
			this.save();
		}
		if(this.keepSource) {
			this.sources.h[key] = source;
			this.saveSources();
		}
	}
	save() {
		let out = new haxe.io.BytesOutput();
		let _e = this.data;
		let keys = Lambda.array({ iterator : function() {
			return new haxe.ds._StringMap.StringMapKeyIterator(_e.h);
		}});
		keys.sort(Reflect.compare);
		let _g = 0;
		while(_g < keys.length) {
			let key = keys[_g];
			++_g;
			out.writeInt32(key.length);
			out.writeString(key);
			let b64 = haxe.crypto.Base64.encode(this.data.h[key]);
			out.writeInt32(b64.length);
			out.writeString(b64);
			out.writeByte(10);
		}
	}
	saveSources() {
		let out = new haxe.io.BytesOutput();
		let _e = this.sources;
		let keys = Lambda.array({ iterator : function() {
			return new haxe.ds._StringMap.StringMapKeyIterator(_e.h);
		}});
		keys.sort(Reflect.compare);
		let _g = 0;
		while(_g < keys.length) {
			let key = keys[_g];
			++_g;
			out.writeInt32(key.length);
			out.writeString(key);
			let src = this.sources.h[key];
			out.writeInt32(src.length);
			out.writeString(src);
			out.writeByte(10);
			out.writeByte(10);
		}
	}
}
$hxClasses["h3d.impl.ShaderCache"] = h3d.impl.ShaderCache;
h3d.impl.ShaderCache.__name__ = "h3d.impl.ShaderCache";
Object.assign(h3d.impl.ShaderCache.prototype, {
	__class__: h3d.impl.ShaderCache
});
h3d.impl.TextureCache = class h3d_impl_TextureCache {
	constructor() {
		this.position = 0;
		this.cache = [];
		let engine = h3d.Engine.CURRENT;
		this.defaultFormat = h3d.mat.Texture.nativeFormat;
		this.defaultDepthBuffer = h3d.mat.Texture.getDefaultDepth();
	}
	get(index) {
		if(index == null) {
			index = 0;
		}
		return this.cache[index];
	}
	getNamed(name) {
		let _g = 0;
		let _g1 = this.position;
		while(_g < _g1) {
			let i = _g++;
			if(this.cache[i].name == name) {
				return this.cache[i];
			}
		}
		return null;
	}
	set(t,index) {
		this.cache[index] = t;
	}
	begin() {
		while(this.cache.length > this.position) {
			let t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	lookupTarget(name,width,height,format1,flags) {
		let t = this.cache[this.position];
		let _g = this.position + 1;
		let _g1 = this.cache.length;
		while(_g < _g1) {
			let i = _g++;
			let t2 = this.cache[i];
			if(t2 != null && !(t2.isDepth() ? t2.t == null : t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format1) {
				if(flags != null) {
					let fitFlags = true;
					let _g = 0;
					while(_g < flags.length) {
						let f = flags[_g];
						++_g;
						if((t2.flags & 1 << f._hx_index) == 0) {
							fitFlags = false;
							break;
						}
					}
					if(!fitFlags) {
						continue;
					}
				}
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		if(flags == null) {
			flags = [];
		}
		if(!flags.includes(h3d.mat.TextureFlags.Target)) {
			flags.push(h3d.mat.TextureFlags.Target);
		}
		let newt = new h3d.mat.Texture(width,height,flags,format1);
		newt.realloc = function() {
		};
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	allocTarget(name,width,height,defaultDepth,format1,flags) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		let t = this.cache[this.position];
		if(format1 == null) {
			format1 = this.defaultFormat;
		}
		let alloc = false;
		if(t == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null) || t.width != width || t.height != height || t.format != format1) {
			alloc = true;
		}
		if(!alloc && flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				if((t.flags & 1 << f._hx_index) == 0) {
					alloc = true;
					break;
				}
			}
		}
		if(alloc) {
			t = this.lookupTarget(name,width,height,format1,flags);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	allocTargetScale(name,scale,defaultDepth,format1) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		let e = h3d.Engine.CURRENT;
		return this.allocTarget(name,Math.ceil(e.width * scale),Math.ceil(e.height * scale),defaultDepth,format1);
	}
	allocTileTarget(name,tile,defaultDepth,format1) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format1);
	}
	dispose() {
		let _g = 0;
		let _g1 = this.cache;
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
}
$hxClasses["h3d.impl.TextureCache"] = h3d.impl.TextureCache;
h3d.impl.TextureCache.__name__ = "h3d.impl.TextureCache";
Object.assign(h3d.impl.TextureCache.prototype, {
	__class__: h3d.impl.TextureCache
});
hxd.impl = {};
hxd.impl.AnyProps = class hxd_impl_AnyProps {
	set_props(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	setDefaultProps(kind) {
		this.set_props(this.getDefaultProps(kind));
	}
	getDefaultProps(kind) {
		return { };
	}
	refreshProps() {
	}
}
$hxClasses["hxd.impl.AnyProps"] = hxd.impl.AnyProps;
hxd.impl.AnyProps.__name__ = "hxd.impl.AnyProps";
Object.assign(hxd.impl.AnyProps.prototype, {
	__class__: hxd.impl.AnyProps
	,__properties__: {set_props: "set_props"}
});
h3d.mat = {};
h3d.mat.BaseMaterial = class h3d_mat_BaseMaterial extends hxd.impl.AnyProps {
	constructor(shader) {
		super();
		if(h3d.mat.BaseMaterial._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(shader);
	}
	_hx_constructor(shader) {
		if(shader != null) {
			this.addPass(new h3d.mat.Pass("default",null)).addShader(shader);
		}
	}
	addPass(p) {
		let prev = null;
		let cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	removePass(p) {
		let prev = null;
		let cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	get_mainPass() {
		return this.passes;
	}
	getPasses() {
		let p = this.passes;
		let out = [];
		while(p != null) {
			out.push(p);
			p = p.nextPass;
		}
		return out;
	}
	getPass(name) {
		let p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	allocPass(name,inheritMain) {
		if(inheritMain == null) {
			inheritMain = true;
		}
		let p = this.getPass(name);
		if(p != null) {
			return p;
		}
		let p1 = new h3d.mat.Pass(name,null,inheritMain ? this.passes : null);
		if(inheritMain && this.passes != null) {
			p1.set_batchMode(this.passes.batchMode);
		}
		this.addPass(p1);
		return p1;
	}
	clone(m) {
		if(m == null) {
			m = new h3d.mat.BaseMaterial();
		}
		m.passes.load(this.passes);
		m.name = this.name;
		m.set_props(this.props);
		return m;
	}
}
$hxClasses["h3d.mat.BaseMaterial"] = h3d.mat.BaseMaterial;
h3d.mat.BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d.mat.BaseMaterial.__super__ = hxd.impl.AnyProps;
Object.assign(h3d.mat.BaseMaterial.prototype, {
	__class__: h3d.mat.BaseMaterial
	,__properties__: Object.assign({}, hxd.impl.AnyProps.prototype.__properties__, {get_mainPass: "get_mainPass"})
});
h3d.mat.Face = $hxEnums["h3d.mat.Face"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_name:"Both",_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d.mat.Face.__constructs__ = [h3d.mat.Face.None,h3d.mat.Face.Back,h3d.mat.Face.Front,h3d.mat.Face.Both];
h3d.mat.Face.__empty_constructs__ = [h3d.mat.Face.None,h3d.mat.Face.Back,h3d.mat.Face.Front,h3d.mat.Face.Both];
h3d.mat.Blend = $hxEnums["h3d.mat.Blend"] = { __ename__:true,__constructs__:null
	,One: {_hx_name:"One",_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_name:"SrcAlpha",_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_name:"SrcColor",_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_name:"DstAlpha",_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_name:"DstColor",_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_name:"OneMinusSrcAlpha",_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_name:"OneMinusSrcColor",_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_name:"OneMinusDstAlpha",_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_name:"OneMinusDstColor",_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_name:"ConstantColor",_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_name:"ConstantAlpha",_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_name:"OneMinusConstantColor",_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_name:"OneMinusConstantAlpha",_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_name:"SrcAlphaSaturate",_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d.mat.Blend.__constructs__ = [h3d.mat.Blend.One,h3d.mat.Blend.Zero,h3d.mat.Blend.SrcAlpha,h3d.mat.Blend.SrcColor,h3d.mat.Blend.DstAlpha,h3d.mat.Blend.DstColor,h3d.mat.Blend.OneMinusSrcAlpha,h3d.mat.Blend.OneMinusSrcColor,h3d.mat.Blend.OneMinusDstAlpha,h3d.mat.Blend.OneMinusDstColor,h3d.mat.Blend.ConstantColor,h3d.mat.Blend.ConstantAlpha,h3d.mat.Blend.OneMinusConstantColor,h3d.mat.Blend.OneMinusConstantAlpha,h3d.mat.Blend.SrcAlphaSaturate];
h3d.mat.Blend.__empty_constructs__ = [h3d.mat.Blend.One,h3d.mat.Blend.Zero,h3d.mat.Blend.SrcAlpha,h3d.mat.Blend.SrcColor,h3d.mat.Blend.DstAlpha,h3d.mat.Blend.DstColor,h3d.mat.Blend.OneMinusSrcAlpha,h3d.mat.Blend.OneMinusSrcColor,h3d.mat.Blend.OneMinusDstAlpha,h3d.mat.Blend.OneMinusDstColor,h3d.mat.Blend.ConstantColor,h3d.mat.Blend.ConstantAlpha,h3d.mat.Blend.OneMinusConstantColor,h3d.mat.Blend.OneMinusConstantAlpha,h3d.mat.Blend.SrcAlphaSaturate];
h3d.mat.Compare = $hxEnums["h3d.mat.Compare"] = { __ename__:true,__constructs__:null
	,Always: {_hx_name:"Always",_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_name:"Never",_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_name:"Equal",_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_name:"NotEqual",_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_name:"Greater",_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_name:"GreaterEqual",_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_name:"Less",_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_name:"LessEqual",_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d.mat.Compare.__constructs__ = [h3d.mat.Compare.Always,h3d.mat.Compare.Never,h3d.mat.Compare.Equal,h3d.mat.Compare.NotEqual,h3d.mat.Compare.Greater,h3d.mat.Compare.GreaterEqual,h3d.mat.Compare.Less,h3d.mat.Compare.LessEqual];
h3d.mat.Compare.__empty_constructs__ = [h3d.mat.Compare.Always,h3d.mat.Compare.Never,h3d.mat.Compare.Equal,h3d.mat.Compare.NotEqual,h3d.mat.Compare.Greater,h3d.mat.Compare.GreaterEqual,h3d.mat.Compare.Less,h3d.mat.Compare.LessEqual];
h3d.mat.StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__:true,__constructs__:null
	,Keep: {_hx_name:"Keep",_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_name:"Replace",_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_name:"Increment",_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_name:"IncrementWrap",_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_name:"Decrement",_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_name:"DecrementWrap",_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_name:"Invert",_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d.mat.StencilOp.__constructs__ = [h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Zero,h3d.mat.StencilOp.Replace,h3d.mat.StencilOp.Increment,h3d.mat.StencilOp.IncrementWrap,h3d.mat.StencilOp.Decrement,h3d.mat.StencilOp.DecrementWrap,h3d.mat.StencilOp.Invert];
h3d.mat.StencilOp.__empty_constructs__ = [h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Zero,h3d.mat.StencilOp.Replace,h3d.mat.StencilOp.Increment,h3d.mat.StencilOp.IncrementWrap,h3d.mat.StencilOp.Decrement,h3d.mat.StencilOp.DecrementWrap,h3d.mat.StencilOp.Invert];
h3d.mat.MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_name:"Nearest",_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d.mat.MipMap.__constructs__ = [h3d.mat.MipMap.None,h3d.mat.MipMap.Nearest,h3d.mat.MipMap.Linear];
h3d.mat.MipMap.__empty_constructs__ = [h3d.mat.MipMap.None,h3d.mat.MipMap.Nearest,h3d.mat.MipMap.Linear];
h3d.mat.Filter = $hxEnums["h3d.mat.Filter"] = { __ename__:true,__constructs__:null
	,Nearest: {_hx_name:"Nearest",_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d.mat.Filter.__constructs__ = [h3d.mat.Filter.Nearest,h3d.mat.Filter.Linear];
h3d.mat.Filter.__empty_constructs__ = [h3d.mat.Filter.Nearest,h3d.mat.Filter.Linear];
h3d.mat.Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__:true,__constructs__:null
	,Clamp: {_hx_name:"Clamp",_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d.mat.Wrap.__constructs__ = [h3d.mat.Wrap.Clamp,h3d.mat.Wrap.Repeat];
h3d.mat.Wrap.__empty_constructs__ = [h3d.mat.Wrap.Clamp,h3d.mat.Wrap.Repeat];
h3d.mat.Operation = $hxEnums["h3d.mat.Operation"] = { __ename__:true,__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_name:"ReverseSub",_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d.mat.Operation.__constructs__ = [h3d.mat.Operation.Add,h3d.mat.Operation.Sub,h3d.mat.Operation.ReverseSub,h3d.mat.Operation.Min,h3d.mat.Operation.Max];
h3d.mat.Operation.__empty_constructs__ = [h3d.mat.Operation.Add,h3d.mat.Operation.Sub,h3d.mat.Operation.ReverseSub,h3d.mat.Operation.Min,h3d.mat.Operation.Max];
h3d.mat.TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__:true,__constructs__:null
	,Target: {_hx_name:"Target",_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_name:"Cube",_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_name:"MipMapped",_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_name:"ManualMipMapGen",_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_name:"IsNPOT",_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_name:"WasCleared",_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_name:"Loading",_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_name:"Serialize",_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_name:"IsArray",_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AsyncLoading: {_hx_name:"AsyncLoading",_hx_index:12,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,LazyLoading: {_hx_name:"LazyLoading",_hx_index:13,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d.mat.TextureFlags.__constructs__ = [h3d.mat.TextureFlags.Target,h3d.mat.TextureFlags.Cube,h3d.mat.TextureFlags.MipMapped,h3d.mat.TextureFlags.ManualMipMapGen,h3d.mat.TextureFlags.IsNPOT,h3d.mat.TextureFlags.NoAlloc,h3d.mat.TextureFlags.Dynamic,h3d.mat.TextureFlags.AlphaPremultiplied,h3d.mat.TextureFlags.WasCleared,h3d.mat.TextureFlags.Loading,h3d.mat.TextureFlags.Serialize,h3d.mat.TextureFlags.IsArray,h3d.mat.TextureFlags.AsyncLoading,h3d.mat.TextureFlags.LazyLoading];
h3d.mat.TextureFlags.__empty_constructs__ = [h3d.mat.TextureFlags.Target,h3d.mat.TextureFlags.Cube,h3d.mat.TextureFlags.MipMapped,h3d.mat.TextureFlags.ManualMipMapGen,h3d.mat.TextureFlags.IsNPOT,h3d.mat.TextureFlags.NoAlloc,h3d.mat.TextureFlags.Dynamic,h3d.mat.TextureFlags.AlphaPremultiplied,h3d.mat.TextureFlags.WasCleared,h3d.mat.TextureFlags.Loading,h3d.mat.TextureFlags.Serialize,h3d.mat.TextureFlags.IsArray,h3d.mat.TextureFlags.AsyncLoading,h3d.mat.TextureFlags.LazyLoading];
h3d.mat.Defaults = class h3d_mat_Defaults {
	static get_shadowShader() {
		let s = h3d.mat.Defaults.shadowShader;
		if(s == null) {
			s = new h3d.shader.Shadow();
			h3d.mat.Defaults.set_shadowShader(s);
			h3d.mat.Defaults.shadowShader.setPriority(-1);
		}
		return s;
	}
	static set_shadowShader(s) {
		return h3d.mat.Defaults.shadowShader = s;
	}
	static makeVolumeDecal(bounds) {
		return new h3d.shader.VolumeDecal(bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
	}
}
$hxClasses["h3d.mat.Defaults"] = h3d.mat.Defaults;
h3d.mat.Defaults.__name__ = "h3d.mat.Defaults";
h3d.mat.Defaults.__properties__ = {set_shadowShader: "set_shadowShader",get_shadowShader: "get_shadowShader"};
h3d.mat.Material = class h3d_mat_Material extends h3d.mat.BaseMaterial {
	constructor(texture) {
		h3d.mat.BaseMaterial._hx_skip_constructor = true;
		super();
		h3d.mat.BaseMaterial._hx_skip_constructor = false;
		this._hx_constructor(texture);
	}
	_hx_constructor(texture) {
		this.mshader = new h3d.shader.BaseMesh();
		this.set_blendMode(h2d.BlendMode.None);
		super._hx_constructor(this.mshader);
		this.set_texture(texture);
	}
	get_specularPower() {
		return this.mshader.specularPower__;
	}
	set_specularPower(v) {
		return this.mshader.specularPower__ = v;
	}
	get_specularAmount() {
		return this.mshader.specularAmount__;
	}
	set_specularAmount(v) {
		return this.mshader.specularAmount__ = v;
	}
	get_color() {
		return this.mshader.color__;
	}
	set_color(v) {
		return this.mshader.color__ = v;
	}
	get_shadows() {
		if(this.castShadows) {
			return this.receiveShadows;
		} else {
			return false;
		}
	}
	set_shadows(v) {
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		return v;
	}
	set_castShadows(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d.mat.Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	set_receiveShadows(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			let shadows = h3d.mat.Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	set_staticShadows(v) {
		let p = this.getPass("shadow");
		if(p != null) {
			p.set_isStatic(v);
		}
		return this.staticShadows = v;
	}
	clone(m) {
		let m1 = m == null ? new h3d.mat.Material() : m;
		super.clone(m1);
		m1.set_castShadows(this.castShadows);
		m1.set_receiveShadows(this.receiveShadows);
		m1.set_texture(this.get_texture());
		m1.set_specularTexture(this.get_specularTexture());
		m1.set_normalMap(this.get_normalMap());
		if(this.textureShader != null) {
			let _this = m1.textureShader;
			_this.constModified = true;
			_this.additive__ = this.textureShader.additive__;
			let _this1 = m1.textureShader;
			_this1.constModified = true;
			_this1.killAlpha__ = this.textureShader.killAlpha__;
			m1.textureShader.killAlphaThreshold__ = this.textureShader.killAlphaThreshold__;
		}
		m1.mshader.color__ = this.mshader.color__;
		m1.set_blendMode(this.blendMode);
		return m1;
	}
	set_blendMode(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	get_specularTexture() {
		if(this.specularShader == null) {
			return null;
		} else {
			return this.specularShader.texture__;
		}
	}
	get_texture() {
		if(this.textureShader == null) {
			return null;
		} else {
			return this.textureShader.texture__;
		}
	}
	set_texture(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d.shader.Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	get_normalMap() {
		if(this.normalShader == null) {
			return null;
		} else {
			return this.normalShader.texture__;
		}
	}
	set_normalMap(t) {
		if(t == null) {
			if(this.normalShader != null) {
				this.passes.removeShader(this.normalShader);
				this.normalShader = null;
			}
		} else {
			if(this.normalShader == null) {
				this.normalShader = new h3d.shader.NormalMap();
				if(this.textureShader != null) {
					this.passes.addShaderAtIndex(this.normalShader,this.passes.getShaderIndex(this.textureShader) + 1);
				} else {
					this.passes.addShader(this.normalShader);
				}
			}
			this.normalShader.texture__ = t;
		}
		return t;
	}
	set_specularTexture(t) {
		if(t == null) {
			if(this.specularShader != null) {
				this.passes.removeShader(this.specularShader);
				this.specularShader = null;
			}
		} else {
			if(this.specularShader == null) {
				this.specularShader = new h3d.shader.SpecularTexture();
				this.passes.addShader(this.specularShader);
			}
			this.specularShader.texture__ = t;
		}
		return t;
	}
	getDefaultModelProps() {
		let props = this.getDefaultProps();
		switch(this.blendMode._hx_index) {
		case 0:
			break;
		case 1:
			props.kind = "Alpha";
			break;
		case 2:
			props.kind = "Add";
			props.culling = false;
			props.shadows = false;
			props.light = false;
			break;
		default:
			throw haxe.Exception.thrown("Unsupported HMD material " + Std.string(this.blendMode));
		}
		return props;
	}
	getDefaultProps(type) {
		let props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	refreshProps() {
		if(this.props == null || this.passes == null) {
			return;
		}
		let props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d.BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d.BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d.BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d.BlendMode.SoftAdd);
			break;
		}
		let tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d.mat.Face.Both : props.culling ? h3d.mat.Face.Back : h3d.mat.Face.None);
		this.passes.set_enableLights(props.light);
		let v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	static create(tex) {
		let mat = h3d.mat.MaterialSetup.current.createMaterial();
		mat.set_texture(tex);
		mat.set_props(mat.getDefaultProps());
		return mat;
	}
}
$hxClasses["h3d.mat.Material"] = h3d.mat.Material;
h3d.mat.Material.__name__ = "h3d.mat.Material";
h3d.mat.Material.__super__ = h3d.mat.BaseMaterial;
Object.assign(h3d.mat.Material.prototype, {
	__class__: h3d.mat.Material
	,__properties__: Object.assign({}, h3d.mat.BaseMaterial.prototype.__properties__, {set_blendMode: "set_blendMode",set_specularPower: "set_specularPower",get_specularPower: "get_specularPower",set_specularAmount: "set_specularAmount",get_specularAmount: "get_specularAmount",set_color: "set_color",get_color: "get_color",set_normalMap: "set_normalMap",get_normalMap: "get_normalMap",set_specularTexture: "set_specularTexture",get_specularTexture: "get_specularTexture",set_texture: "set_texture",get_texture: "get_texture",set_staticShadows: "set_staticShadows",set_receiveShadows: "set_receiveShadows",set_castShadows: "set_castShadows",set_shadows: "set_shadows",get_shadows: "get_shadows"})
});
h3d.mat.MaterialDatabase = class h3d_mat_MaterialDatabase {
	constructor() {
		this.db = new haxe.ds.StringMap();
	}
	getFilePath(model) {
		let dir = model.entry.get_directory();
		let filename = "materials.props";
		if(dir == null || dir == "") {
			return filename;
		} else {
			return model.entry.get_directory() + "/" + filename;
		}
	}
	getModelData(model) {
		if(model == null) {
			return null;
		}
		let this1 = this.db;
		let key = model.entry.get_directory();
		let cached = this1.h[key];
		if(cached != null) {
			return cached.v;
		}
		let file = this.getFilePath(model);
		let value;
		try {
			value = JSON.parse(hxd.res.Loader.currentInstance.load(file).toText());
		} catch( _g ) {
			if(((haxe.Exception.caught(_g).unwrap()) instanceof hxd.fs.NotFound)) {
				value = { };
			} else {
				throw _g;
			}
		}
		let this2 = this.db;
		let key1 = model.entry.get_directory();
		this2.h[key1] = { v : value};
		return value;
	}
	saveData(model,data) {
		let file = this.getFilePath(model);
		throw haxe.Exception.thrown("Can't save material props database " + file);
	}
	loadMatProps(material,setup) {
		let p = this.getModelData(material.model);
		if(p == null) {
			return p;
		}
		p = p.materials;
		if(p == null) {
			return p;
		}
		p = Reflect.field(p,setup.name);
		if(p == null) {
			return p;
		}
		if(material.model != null) {
			let specData = Reflect.field(p,material.name + "/" + material.model.entry.name);
			if(specData != null) {
				return specData;
			}
		}
		return Reflect.field(p,material.name);
	}
	saveMatProps(material,setup,defaultProps) {
		let path = ["materials",setup.name,material.name];
		let root = this.getModelData(material.model);
		if(root == null) {
			return;
		}
		let realRoot = root;
		let prevs = [];
		let _g = 0;
		let _g1 = path.length - 1;
		while(_g < _g1) {
			let i = _g++;
			let next = Reflect.field(root,path[i]);
			if(next == null) {
				next = { };
				root[path[i]] = next;
			}
			prevs.push(root);
			root = next;
		}
		let currentProps = material.props;
		let modelSpec = currentProps.__refMode == "modelSpec";
		let name = path.pop();
		if(!modelSpec) {
			Reflect.deleteField(root,name);
		}
		let specName = name + "/" + (material.model != null ? material.model.entry.name : "");
		Reflect.deleteField(root,specName);
		if(defaultProps == null) {
			defaultProps = material.getDefaultProps();
		}
		if(currentProps == null || (defaultProps == null ? "null" : Std.string(defaultProps)) == (currentProps == null ? "null" : Std.string(currentProps))) {
			while(path.length > 0) {
				let name = path.pop();
				let root = prevs.pop();
				if(Reflect.fields(Reflect.field(root,name)).length != 0) {
					break;
				}
				Reflect.deleteField(root,name);
			}
		} else {
			root[modelSpec ? specName : name] = currentProps;
		}
		let file = this.getFilePath(material.model);
		if(Reflect.fields(realRoot).length == 0) {
			realRoot = null;
		}
		this.saveData(material.model,realRoot);
	}
}
$hxClasses["h3d.mat.MaterialDatabase"] = h3d.mat.MaterialDatabase;
h3d.mat.MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
Object.assign(h3d.mat.MaterialDatabase.prototype, {
	__class__: h3d.mat.MaterialDatabase
});
h3d.mat.MaterialSetup = class h3d_mat_MaterialSetup {
	constructor(name) {
		if(this.database == null) {
			this.database = new h3d.mat.MaterialDatabase();
		}
		this.name = name;
	}
	createRenderer() {
		return new h3d.scene.fwd.Renderer();
	}
	createLightSystem() {
		return new h3d.scene.fwd.LightSystem();
	}
	createMaterial() {
		return new h3d.mat.Material();
	}
	getDefaults(kind) {
		if(this.emptyMat == null) {
			this.emptyMat = this.createMaterial();
		}
		return this.emptyMat.getDefaultProps(kind);
	}
	loadMaterialProps(material) {
		return this.database.loadMatProps(material,this);
	}
	saveMaterialProps(material,defaultProps) {
		this.database.saveMatProps(material,this,defaultProps);
	}
	customMeshInit(mesh) {
	}
}
$hxClasses["h3d.mat.MaterialSetup"] = h3d.mat.MaterialSetup;
h3d.mat.MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
Object.assign(h3d.mat.MaterialSetup.prototype, {
	__class__: h3d.mat.MaterialSetup
});
h3d.mat.Pass = class h3d_mat_Pass {
	constructor(name,shaders,parent) {
		this.layer = 0;
		this.rendererFlags = 0;
		this.culled = false;
		this.bits = 0;
		this.parentPass = parent;
		this.shaders = shaders;
		this.setPassName(name);
		this.set_culling(h3d.mat.Face.Back);
		let src = h3d.mat.Blend.One;
		let dst = h3d.mat.Blend.Zero;
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
		this.depth(true,h3d.mat.Compare.Less);
		this.set_blendOp(this.set_blendAlphaOp(h3d.mat.Operation.Add));
		this.colorMask = 15;
	}
	load(p) {
		this.name = p.name;
		this.passId = p.passId;
		this.bits = p.bits;
		this.set_enableLights(p.enableLights);
		this.set_dynamicParameters(p.dynamicParameters);
		this.set_culling(p.culling);
		this.set_depthWrite(p.depthWrite);
		this.set_depthTest(p.depthTest);
		this.set_blendSrc(p.blendSrc);
		this.set_blendDst(p.blendDst);
		this.set_blendOp(p.blendOp);
		this.set_blendAlphaSrc(p.blendAlphaSrc);
		this.set_blendAlphaDst(p.blendAlphaDst);
		this.set_blendAlphaOp(p.blendAlphaOp);
		this.colorMask = p.colorMask;
		if(p.stencil != null) {
			if(this.stencil == null) {
				this.stencil = new h3d.mat.Stencil();
			}
			this.stencil.load(p.stencil);
		}
	}
	setPassName(name) {
		this.name = name;
		this.passId = hxsl.Globals.allocID(name);
	}
	blend(src,dst) {
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
	}
	setBlendMode(b) {
		this.set_blendOp(h3d.mat.Operation.Add);
		this.set_blendAlphaOp(h3d.mat.Operation.Add);
		switch(b._hx_index) {
		case 0:
			let src = h3d.mat.Blend.One;
			let dst = h3d.mat.Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			let src1 = h3d.mat.Blend.SrcAlpha;
			let dst1 = h3d.mat.Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendAlphaSrc(h3d.mat.Blend.One);
			break;
		case 2:
			let src2 = h3d.mat.Blend.SrcAlpha;
			let dst2 = h3d.mat.Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendAlphaSrc(h3d.mat.Blend.One);
			break;
		case 3:
			let src3 = h3d.mat.Blend.One;
			let dst3 = h3d.mat.Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			break;
		case 4:
			let src4 = h3d.mat.Blend.OneMinusDstColor;
			let dst4 = h3d.mat.Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendAlphaSrc(h3d.mat.Blend.One);
			break;
		case 5:
			let src5 = h3d.mat.Blend.DstColor;
			let dst5 = h3d.mat.Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendAlphaSrc(h3d.mat.Blend.One);
			break;
		case 6:
			let src6 = h3d.mat.Blend.DstColor;
			let dst6 = h3d.mat.Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			break;
		case 7:
			let src7 = h3d.mat.Blend.Zero;
			let dst7 = h3d.mat.Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			break;
		case 8:
			let src8 = h3d.mat.Blend.One;
			let dst8 = h3d.mat.Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			break;
		case 9:
			let src9 = h3d.mat.Blend.SrcAlpha;
			let dst9 = h3d.mat.Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d.mat.Operation.ReverseSub);
			this.set_blendAlphaOp(h3d.mat.Operation.ReverseSub);
			break;
		case 10:
			let src10 = h3d.mat.Blend.One;
			let dst10 = h3d.mat.Blend.One;
			this.set_blendSrc(src10);
			this.set_blendAlphaSrc(src10);
			this.set_blendDst(dst10);
			this.set_blendAlphaDst(dst10);
			this.set_blendAlphaOp(h3d.mat.Operation.Max);
			this.set_blendOp(h3d.mat.Operation.Max);
			break;
		case 11:
			let src11 = h3d.mat.Blend.One;
			let dst11 = h3d.mat.Blend.One;
			this.set_blendSrc(src11);
			this.set_blendAlphaSrc(src11);
			this.set_blendDst(dst11);
			this.set_blendAlphaDst(dst11);
			this.set_blendAlphaOp(h3d.mat.Operation.Min);
			this.set_blendOp(h3d.mat.Operation.Min);
			break;
		}
	}
	depth(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	setColorMask(r,g,b,a) {
		this.colorMask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
	}
	setColorChannel(c) {
		switch(c._hx_index) {
		case 1:
			this.setColorMask(true,false,false,false);
			break;
		case 2:
			this.setColorMask(false,true,false,false);
			break;
		case 3:
			this.setColorMask(false,false,true,false);
			break;
		case 4:
			this.setColorMask(false,false,false,true);
			break;
		default:
			throw haxe.Exception.thrown("Unsupported channel " + Std.string(c));
		}
	}
	setColorMaski(r,g,b,a,i) {
		if(i > 8) {
			throw haxe.Exception.thrown("Color mask i supports 8 Render target");
		}
		let mask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
		mask <<= i * 4;
		this.colorMask |= mask;
	}
	resetRendererFlags() {
		this.rendererFlags = 0;
	}
	addShader(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl.ShaderList.addSort(s,this.shaders);
		this.resetRendererFlags();
		return s;
	}
	addSelfShader(s) {
		if(s == null) {
			return null;
		}
		this.selfShadersChanged = true;
		this.selfShaders = hxsl.ShaderList.addSort(s,this.selfShaders);
		this.resetRendererFlags();
		return s;
	}
	addShaderAtIndex(s,index) {
		let prev = null;
		let cur = this.shaders;
		while(index > 0 && cur != this.parentShaders) {
			prev = cur;
			cur = cur.next;
			--index;
		}
		if(prev == null) {
			this.shaders = new hxsl.ShaderList(s,cur);
		} else {
			prev.next = new hxsl.ShaderList(s,cur);
		}
		return s;
	}
	getShaderIndex(s) {
		let index = 0;
		let cur = this.shaders;
		while(cur != this.parentShaders) {
			if(cur.s == s) {
				return index;
			}
			cur = cur.next;
			++index;
		}
		return -1;
	}
	removeShader(s) {
		let sl = this.shaders;
		let prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	removeShaders(t) {
		let sl = this.shaders;
		let prev = null;
		while(sl != null) {
			if(js.Boot.__instanceof(sl.s,t)) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
			} else {
				prev = sl;
			}
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(js.Boot.__instanceof(sl.s,t)) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
			} else {
				prev = sl;
			}
			sl = sl.next;
		}
	}
	getShader(t) {
		let s = this._getShader(t,this.shaders);
		if(s != null) {
			return s;
		} else {
			return this._getShader(t,this.selfShaders);
		}
	}
	_getShader(t,s) {
		while(s != null && s != this.parentShaders) {
			let value = s.s;
			let sh = js.Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	getShaderByName(name) {
		let s = this._getShaderByName(name,this.shaders);
		if(s != null) {
			return s;
		} else {
			return this._getShaderByName(name,this.selfShaders);
		}
	}
	_getShaderByName(name,sl) {
		while(sl != null && sl != this.parentShaders) {
			if(sl.s.shader.data.name == name) {
				return sl.s;
			}
			sl = sl.next;
		}
		return null;
	}
	getShaders() {
		return new hxsl._ShaderList.ShaderIterator(this.shaders,this.parentShaders);
	}
	checkInfiniteLoop() {
		let shaderList = [];
		let s = this.selfShaders;
		while(s != null) {
			let _g = 0;
			while(_g < shaderList.length) {
				let already = shaderList[_g];
				++_g;
				if(already == s) {
					throw haxe.Exception.thrown("infinite loop");
				}
			}
			shaderList.push(s);
			s = s.next;
		}
	}
	selfShadersRec(rebuild) {
		if(this.selfShaders == null) {
			return this.shaders;
		}
		if(!this.selfShadersChanged && !rebuild && this.shaders == this.selfShadersCache) {
			return this.selfShaders;
		}
		let sl = this.selfShaders;
		let prev = null;
		while(sl != null && sl != this.selfShadersCache) {
			prev = sl;
			sl = sl.next;
		}
		this.selfShadersCache = this.shaders;
		if(prev != null) {
			prev.next = this.selfShadersCache;
		} else {
			this.selfShaders = this.shaders;
		}
		return this.selfShaders;
	}
	getShadersRec() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.selfShadersRec(false);
		}
		let s = this.shaders;
		let prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.selfShadersRec(true);
	}
	clone() {
		let p = new h3d.mat.Pass(this.name,this.shaders.clone());
		p.selfShaders = this.selfShaders;
		p.bits = this.bits;
		p.set_enableLights(this.enableLights);
		if(this.stencil != null) {
			p.stencil = this.stencil.clone();
		}
		return p;
	}
	set_enableLights(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	set_dynamicParameters(v) {
		this.flags = this.flags & -3 | (v ? 1 : 0) << 1;
		return this.dynamicParameters = v;
	}
	set_isStatic(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	set_batchMode(v) {
		this.flags = this.flags & -9 | (v ? 1 : 0) << 3;
		return this.batchMode = v;
	}
	set_culling(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	set_depthWrite(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	set_depthTest(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	set_blendSrc(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	set_blendDst(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	set_blendAlphaSrc(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	set_blendAlphaDst(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	set_blendOp(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	set_blendAlphaOp(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	set_wireframe(v) {
		this.bits = this.bits & -268435457 | (v ? 1 : 0) << 28;
		return this.wireframe = v;
	}
	set_reserved(v) {
		this.bits = this.bits & -536870913 | (v ? 1 : 0) << 29;
		return this.reserved = v;
	}
	loadFlags(bits) {
		this.flags = bits;
		this.set_enableLights((this.flags & 1) != 0);
		this.set_dynamicParameters((this.flags >> 1 & 1) != 0);
		this.set_isStatic((this.flags >> 2 & 1) != 0);
		this.set_batchMode((this.flags >> 3 & 1) != 0);
	}
	loadBits(bits) {
		this.bits = bits;
		this.set_culling(Type.createEnumIndex(h3d.mat.Face,this.bits & 3));
		this.set_depthWrite((this.bits >> 2 & 1) != 0);
		this.set_depthTest(Type.createEnumIndex(h3d.mat.Compare,this.bits >> 3 & 7));
		this.set_blendSrc(Type.createEnumIndex(h3d.mat.Blend,this.bits >> 6 & 15));
		this.set_blendDst(Type.createEnumIndex(h3d.mat.Blend,this.bits >> 10 & 15));
		this.set_blendAlphaSrc(Type.createEnumIndex(h3d.mat.Blend,this.bits >> 14 & 15));
		this.set_blendAlphaDst(Type.createEnumIndex(h3d.mat.Blend,this.bits >> 18 & 15));
		this.set_blendOp(Type.createEnumIndex(h3d.mat.Operation,this.bits >> 22 & 7));
		this.set_blendAlphaOp(Type.createEnumIndex(h3d.mat.Operation,this.bits >> 25 & 7));
		this.set_wireframe((this.bits >> 28 & 1) != 0);
		this.set_reserved((this.bits >> 29 & 1) != 0);
	}
	static getEnableLights(v) {
		return v & 1;
	}
	static getDynamicParameters(v) {
		return v >> 1 & 1;
	}
	static getIsStatic(v) {
		return v >> 2 & 1;
	}
	static getBatchMode(v) {
		return v >> 3 & 1;
	}
	static getCulling(v) {
		return v & 3;
	}
	static getDepthWrite(v) {
		return v >> 2 & 1;
	}
	static getDepthTest(v) {
		return v >> 3 & 7;
	}
	static getBlendSrc(v) {
		return v >> 6 & 15;
	}
	static getBlendDst(v) {
		return v >> 10 & 15;
	}
	static getBlendAlphaSrc(v) {
		return v >> 14 & 15;
	}
	static getBlendAlphaDst(v) {
		return v >> 18 & 15;
	}
	static getBlendOp(v) {
		return v >> 22 & 7;
	}
	static getBlendAlphaOp(v) {
		return v >> 25 & 7;
	}
	static getWireframe(v) {
		return v >> 28 & 1;
	}
	static getReserved(v) {
		return v >> 29 & 1;
	}
}
$hxClasses["h3d.mat.Pass"] = h3d.mat.Pass;
h3d.mat.Pass.__name__ = "h3d.mat.Pass";
Object.assign(h3d.mat.Pass.prototype, {
	__class__: h3d.mat.Pass
	,__properties__: {set_reserved: "set_reserved",set_wireframe: "set_wireframe",set_blendAlphaOp: "set_blendAlphaOp",set_blendOp: "set_blendOp",set_blendAlphaDst: "set_blendAlphaDst",set_blendAlphaSrc: "set_blendAlphaSrc",set_blendDst: "set_blendDst",set_blendSrc: "set_blendSrc",set_depthTest: "set_depthTest",set_depthWrite: "set_depthWrite",set_culling: "set_culling",set_batchMode: "set_batchMode",set_isStatic: "set_isStatic",set_dynamicParameters: "set_dynamicParameters",set_enableLights: "set_enableLights"}
});
h3d.mat.Stencil = class h3d_mat_Stencil {
	constructor() {
		this.opBits = 0;
		this.maskBits = 0;
		this.setOp(h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Keep,h3d.mat.StencilOp.Keep);
		this.setFunc(h3d.mat.Compare.Always);
	}
	setFront(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	setBack(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	setOp(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	setFunc(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	clone() {
		let s = new h3d.mat.Stencil();
		s.opBits = this.opBits;
		s.maskBits = this.maskBits;
		return s;
	}
	load(s) {
		this.opBits = s.opBits;
		this.maskBits = s.maskBits;
	}
	set_readMask(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	set_writeMask(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	set_reference(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	set_frontTest(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	set_frontPass(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	set_frontSTfail(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	set_frontDPfail(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	set_backTest(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	set_backPass(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	set_backSTfail(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	set_backDPfail(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	loadOpBits(bits) {
		this.opBits = bits;
		this.set_frontTest(Type.createEnumIndex(h3d.mat.Compare,this.opBits & 7));
		this.set_frontPass(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 3 & 7));
		this.set_frontSTfail(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 6 & 7));
		this.set_frontDPfail(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 9 & 7));
		this.set_backTest(Type.createEnumIndex(h3d.mat.Compare,this.opBits >> 12 & 7));
		this.set_backPass(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 15 & 7));
		this.set_backSTfail(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 18 & 7));
		this.set_backDPfail(Type.createEnumIndex(h3d.mat.StencilOp,this.opBits >> 21 & 7));
	}
	loadMaskBits(bits) {
		this.maskBits = bits;
		this.set_readMask(this.maskBits & 255);
		this.set_writeMask(this.maskBits >> 8 & 255);
		this.set_reference(this.maskBits >> 16 & 255);
	}
	static getReadMask(v) {
		return v & 255;
	}
	static getWriteMask(v) {
		return v >> 8 & 255;
	}
	static getReference(v) {
		return v >> 16 & 255;
	}
	static getFrontTest(v) {
		return v & 7;
	}
	static getFrontPass(v) {
		return v >> 3 & 7;
	}
	static getFrontSTfail(v) {
		return v >> 6 & 7;
	}
	static getFrontDPfail(v) {
		return v >> 9 & 7;
	}
	static getBackTest(v) {
		return v >> 12 & 7;
	}
	static getBackPass(v) {
		return v >> 15 & 7;
	}
	static getBackSTfail(v) {
		return v >> 18 & 7;
	}
	static getBackDPfail(v) {
		return v >> 21 & 7;
	}
}
$hxClasses["h3d.mat.Stencil"] = h3d.mat.Stencil;
h3d.mat.Stencil.__name__ = "h3d.mat.Stencil";
Object.assign(h3d.mat.Stencil.prototype, {
	__class__: h3d.mat.Stencil
	,__properties__: {set_backDPfail: "set_backDPfail",set_backSTfail: "set_backSTfail",set_backPass: "set_backPass",set_backTest: "set_backTest",set_frontDPfail: "set_frontDPfail",set_frontSTfail: "set_frontSTfail",set_frontPass: "set_frontPass",set_frontTest: "set_frontTest",set_reference: "set_reference",set_writeMask: "set_writeMask",set_readMask: "set_readMask"}
});
hxd.PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__:true,__constructs__:null
	,ARGB: {_hx_name:"ARGB",_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_name:"BGRA",_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_name:"RGBA",_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_name:"RGBA16F",_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_name:"RGBA32F",_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_name:"R8",_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_name:"R16F",_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_name:"R32F",_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_name:"RG8",_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_name:"RG16F",_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_name:"RG32F",_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_name:"RGB8",_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_name:"RGB16F",_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_name:"RGB32F",_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_name:"SRGB",_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_name:"SRGB_ALPHA",_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_name:"RGB10A2",_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_name:"RG11B10UF",_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_name:"R16U",_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16U: {_hx_name:"RG16U",_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_name:"RGB16U",_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_name:"RGBA16U",_hx_index:21,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:22,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_._hx_name="S3TC",$_.__params__ = ["v"],$_)
	,Depth16: {_hx_name:"Depth16",_hx_index:23,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24: {_hx_name:"Depth24",_hx_index:24,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24Stencil8: {_hx_name:"Depth24Stencil8",_hx_index:25,__enum__:"hxd.PixelFormat",toString:$estr}
};
hxd.PixelFormat.__constructs__ = [hxd.PixelFormat.ARGB,hxd.PixelFormat.BGRA,hxd.PixelFormat.RGBA,hxd.PixelFormat.RGBA16F,hxd.PixelFormat.RGBA32F,hxd.PixelFormat.R8,hxd.PixelFormat.R16F,hxd.PixelFormat.R32F,hxd.PixelFormat.RG8,hxd.PixelFormat.RG16F,hxd.PixelFormat.RG32F,hxd.PixelFormat.RGB8,hxd.PixelFormat.RGB16F,hxd.PixelFormat.RGB32F,hxd.PixelFormat.SRGB,hxd.PixelFormat.SRGB_ALPHA,hxd.PixelFormat.RGB10A2,hxd.PixelFormat.RG11B10UF,hxd.PixelFormat.R16U,hxd.PixelFormat.RG16U,hxd.PixelFormat.RGB16U,hxd.PixelFormat.RGBA16U,hxd.PixelFormat.S3TC,hxd.PixelFormat.Depth16,hxd.PixelFormat.Depth24,hxd.PixelFormat.Depth24Stencil8];
hxd.PixelFormat.__empty_constructs__ = [hxd.PixelFormat.ARGB,hxd.PixelFormat.BGRA,hxd.PixelFormat.RGBA,hxd.PixelFormat.RGBA16F,hxd.PixelFormat.RGBA32F,hxd.PixelFormat.R8,hxd.PixelFormat.R16F,hxd.PixelFormat.R32F,hxd.PixelFormat.RG8,hxd.PixelFormat.RG16F,hxd.PixelFormat.RG32F,hxd.PixelFormat.RGB8,hxd.PixelFormat.RGB16F,hxd.PixelFormat.RGB32F,hxd.PixelFormat.SRGB,hxd.PixelFormat.SRGB_ALPHA,hxd.PixelFormat.RGB10A2,hxd.PixelFormat.RG11B10UF,hxd.PixelFormat.R16U,hxd.PixelFormat.RG16U,hxd.PixelFormat.RGB16U,hxd.PixelFormat.RGBA16U,hxd.PixelFormat.Depth16,hxd.PixelFormat.Depth24,hxd.PixelFormat.Depth24Stencil8];
h3d.mat.Texture = class h3d_mat_Texture {
	constructor(w,h,flags,format1) {
		if(h3d.mat.Texture._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(w,h,flags,format1);
	}
	_hx_constructor(w,h,flags,format1) {
		this.lodBias = 0.;
		this.startingMip = 0;
		if(format1 == null) {
			format1 = h3d.mat.Texture.nativeFormat;
		}
		this.id = ++h3d.mat.Texture.UID;
		this.format = format1;
		this.flags = 0;
		if(flags != null) {
			let _g = 0;
			while(_g < flags.length) {
				let f = flags[_g];
				++_g;
				this.flags |= 1 << f._hx_index;
			}
		}
		if(!this.isDepth()) {
			let engine = h3d.Engine.CURRENT;
			this.mem = engine.mem;
		}
		let tw = 1;
		let th = 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(tw != w || th != h) {
			this.flags |= 1 << h3d.mat.TextureFlags.IsNPOT._hx_index;
		}
		this.width = w;
		this.height = h;
		if((this.flags & 1 << h3d.mat.TextureFlags.MipMapped._hx_index) != 0) {
			this.set_mipMap(h3d.mat.Texture.TRILINEAR_FILTERING_ENABLED ? h3d.mat.MipMap.Linear : h3d.mat.MipMap.Nearest);
		} else {
			this.set_mipMap(h3d.mat.MipMap.None);
		}
		this.set_filter(h3d.mat.Filter.Linear);
		this.set_wrap(h3d.mat.Texture.DEFAULT_WRAP);
		this.bits &= 32767;
		if((this.flags & 1 << h3d.mat.TextureFlags.NoAlloc._hx_index) == 0 && (!this.isDepth() || this.width > 0)) {
			this.alloc();
		}
	}
	set_lastFrame(lf) {
		if(this._lastFrame != h3d.mat.Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	get_lastFrame() {
		return this._lastFrame;
	}
	get_mipLevels() {
		if((this.flags & 1 << h3d.mat.TextureFlags.MipMapped._hx_index) == 0) {
			return 1;
		}
		if(this.customMipLevels > 0) {
			return this.customMipLevels;
		}
		let lv = 1;
		let w = this.width;
		let h = this.height;
		while(w >> lv >= 1 || h >> lv >= 1) ++lv;
		return lv;
	}
	get_layerCount() {
		if((this.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	alloc() {
		if(this.isDepth()) {
			h3d.Engine.CURRENT.mem.allocDepth(this);
		} else if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	isSRGB() {
		switch(this.format._hx_index) {
		case 14:case 15:
			return true;
		default:
			return false;
		}
	}
	checkAlloc() {
		if(this.t == null && this.realloc != null) {
			this.alloc();
			this.realloc();
		}
	}
	clone() {
		this.checkAlloc();
		if(this.t == null) {
			throw haxe.Exception.thrown("Can't clone disposed texture");
		}
		let old = this._lastFrame;
		this.preventAutoDispose();
		let flags = [];
		let f = h3d.mat.TextureFlags.Target;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		let f1 = h3d.mat.TextureFlags.Cube;
		if((this.flags & 1 << f1._hx_index) != 0) {
			flags.push(f1);
		}
		let f2 = h3d.mat.TextureFlags.MipMapped;
		if((this.flags & 1 << f2._hx_index) != 0) {
			flags.push(f2);
		}
		let f3 = h3d.mat.TextureFlags.IsArray;
		if((this.flags & 1 << f3._hx_index) != 0) {
			flags.push(f3);
		}
		let t = new h3d.mat.Texture(this.width,this.height,flags,this.format);
		t.name = this.name;
		if((this.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0) {
			h3d.pass.CubeCopy.run(this,t);
		} else {
			h3d.pass.Copy.run(this,t);
		}
		this.set_lastFrame(old);
		return t;
	}
	preventAutoDispose() {
		this.set_lastFrame(h3d.mat.Texture.PREVENT_AUTO_DISPOSE);
	}
	preventForcedDispose() {
		this.set_lastFrame(h3d.mat.Texture.PREVENT_FORCED_DISPOSE);
	}
	waitLoad(f) {
		if((this.flags & 1 << h3d.mat.TextureFlags.Loading._hx_index) == 0) {
			f();
			return;
		}
		if(this.waitLoads == null) {
			this.waitLoads = [];
		}
		this.waitLoads.push(f);
	}
	toString() {
		let str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	setName(n) {
		this.name = n;
	}
	set_mipMap(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	set_filter(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	set_wrap(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	isDisposed() {
		if(this.isDepth()) {
			return this.t == null;
		} else if(this.t == null) {
			return this.realloc == null;
		} else {
			return false;
		}
	}
	resize(width,height) {
		this.dispose();
		let tw = 1;
		let th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d.mat.TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d.mat.TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d.mat.TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	clearF(r,g,b,a,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(a == null) {
			a = 0.;
		}
		if(b == null) {
			b = 0.;
		}
		if(g == null) {
			g = 0.;
		}
		if(r == null) {
			r = 0.;
		}
		this.alloc();
		if((this.flags & 1 << h3d.mat.TextureFlags.Target._hx_index) == 0) {
			throw haxe.Exception.thrown("Texture should be target");
		}
		let engine = h3d.Engine.CURRENT;
		let x = r;
		let y = g;
		let z = b;
		let w = a;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let color = new h3d.Vector4Impl(x,y,z,w);
		if(layer < 0) {
			let _g = 0;
			let _g1 = this.get_layerCount();
			while(_g < _g1) {
				let i = _g++;
				engine.pushTarget(this,i);
				engine.clearF(color);
				engine.popTarget();
			}
		} else {
			engine.pushTarget(this,layer);
			engine.clearF(color);
			engine.popTarget();
		}
	}
	clear(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			let engine = h3d.Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				let _g = 0;
				let _g1 = this.get_layerCount();
				while(_g < _g1) {
					let i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			let p = hxd.Pixels.alloc(this.width,this.height,h3d.mat.Texture.nativeFormat);
			let k = 0;
			let b = color & 255;
			let g = color >> 8 & 255;
			let r = color >> 16 & 255;
			let a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d.mat.Texture.nativeFormat._hx_index) {
			case 1:
				let tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe.Exception.thrown("TODO");
			}
			let _g = 0;
			let _g1 = this.width * this.height;
			while(_g < _g1) {
				let i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				let _g = 0;
				let _g1 = this.get_layerCount();
				while(_g < _g1) {
					let i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	checkSize(width,height,mip) {
		let mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		let mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe.Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	checkMipMapGen(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d.mat.TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d.mat.TextureFlags.ManualMipMapGen._hx_index) == 0 && layer == this.get_layerCount() - 1) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	uploadBitmap(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	uploadPixels(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d.mat.TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	dispose() {
		if(this.t != null) {
			if(this.isDepth()) {
				h3d.Engine.CURRENT.mem.deleteDepth(this);
			} else {
				this.mem.deleteTexture(this);
			}
		}
	}
	capturePixels(face,mipLevel,region) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		let old = this._lastFrame;
		this.preventAutoDispose();
		let pix = this.mem.driver.capturePixels(this,face,mipLevel,region);
		this.set_lastFrame(old);
		return pix;
	}
	hasStencil() {
		if(this.format._hx_index == 25) {
			return true;
		} else {
			return false;
		}
	}
	isDepth() {
		switch(this.format._hx_index) {
		case 23:case 24:case 25:
			return true;
		default:
			return false;
		}
	}
	static fromBitmap(bmp) {
		let t = new h3d.mat.Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
		t.uploadBitmap(bmp);
		return t;
	}
	static fromPixels(pixels,format1) {
		let t = new h3d.mat.Texture(pixels.width,pixels.height,null,format1 != null ? format1 : pixels.innerFormat);
		t.uploadPixels(pixels);
		return t;
	}
	static fromColor(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		let engine = h3d.Engine.CURRENT;
		let aval = alpha * 255 | 0;
		if(aval < 0) {
			aval = 0;
		} else if(aval > 255) {
			aval = 255;
		}
		let key = color & 16777215 | aval << 24;
		let t = engine.textureColorCache.h[key];
		if(t != null) {
			return t;
		}
		let t1 = new h3d.mat.Texture(1,1,null);
		t1.clear(color,alpha);
		t1.realloc = function() {
			t1.clear(color,alpha);
		};
		engine.textureColorCache.h[key] = t1;
		return t1;
	}
	static genDisc(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		return h3d.mat.Texture.genTexture(0,size,color,alpha);
	}
	static genTexture(mode,size,color,alpha) {
		let engine = h3d.Engine.CURRENT;
		let aval = alpha * 255 | 0;
		if(aval < 0) {
			aval = 0;
		} else if(aval > 255) {
			aval = 255;
		}
		color = color & 16777215 | aval << 24;
		let key = (size << 16 | mode) + "," + color;
		let k = h3d.mat.Texture.genTextureKeys.h[key];
		let t = k == null ? null : engine.resCache.h[k.__id__];
		if(t != null) {
			return t;
		}
		if(k == null) {
			k = { };
			h3d.mat.Texture.genTextureKeys.h[key] = k;
		}
		t = new h3d.mat.Texture(size,size,[h3d.mat.TextureFlags.Target]);
		t.realloc = function() {
			h3d.mat.Texture.drawGenTexture(t,color,mode);
		};
		h3d.mat.Texture.drawGenTexture(t,color,mode);
		engine.resCache.set(k,t);
		return t;
	}
	static drawGenTexture(t,color,mode) {
		let s = new h3d.pass.ScreenFx(new h3d.shader.GenTexture());
		let engine = h3d.Engine.CURRENT;
		let _this = s.shader;
		_this.constModified = true;
		_this.mode__ = mode;
		let _this1 = s.shader.color__;
		_this1.x = (color >> 16 & 255) / 255;
		_this1.y = (color >> 8 & 255) / 255;
		_this1.z = (color & 255) / 255;
		_this1.w = (color >>> 24) / 255;
		engine.pushTarget(t);
		s.render();
		engine.popTarget();
	}
	static defaultCubeTexture() {
		let engine = h3d.Engine.CURRENT;
		let t = engine.resCache.h[h3d.mat.Texture.__id__];
		if(t != null) {
			return t;
		}
		t = new h3d.mat.Texture(1,1,[h3d.mat.TextureFlags.Cube]);
		t.clear(2105376);
		t.realloc = function() {
			t.clear(2105376);
		};
		engine.resCache.set(h3d.mat.Texture,t);
		return t;
	}
	static genChecker(size) {
		let engine = h3d.Engine.CURRENT;
		let k = h3d.mat.Texture.checkerTextureKeys.h[size];
		let t = k == null ? null : engine.resCache.h[k.__id__];
		if(t != null && !(t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
			return t;
		}
		if(k == null) {
			k = { };
			h3d.mat.Texture.checkerTextureKeys.h[size] = k;
		}
		let t1 = new h3d.mat.Texture(size,size,[h3d.mat.TextureFlags.NoAlloc]);
		let t2 = t1;
		let size1 = size;
		t1.realloc = function() {
			h3d.mat.Texture.allocChecker(t2,size1);
		};
		engine.resCache.set(k,t1);
		return t1;
	}
	static genNoise(size) {
		let engine = h3d.Engine.CURRENT;
		let k = h3d.mat.Texture.noiseTextureKeys.h[size];
		let t = k == null ? null : engine.resCache.h[k.__id__];
		if(t != null && !(t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
			return t;
		}
		if(k == null) {
			k = { };
			h3d.mat.Texture.noiseTextureKeys.h[size] = k;
		}
		let t1 = new h3d.mat.Texture(size,size,[h3d.mat.TextureFlags.NoAlloc]);
		let t2 = t1;
		let size1 = size;
		t1.realloc = function() {
			h3d.mat.Texture.allocNoise(t2,size1);
		};
		engine.resCache.set(k,t1);
		return t1;
	}
	static allocNoise(t,size) {
		let b = new hxd.BitmapData(size,size);
		let _g = 0;
		let _g1 = size;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = size;
			while(_g1 < _g2) {
				let y = _g1++;
				let n = Std.random(256);
				b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
			}
		}
		t.uploadBitmap(b);
		b.ctx = null;
		b.pixel = null;
	}
	static allocChecker(t,size) {
		let b = new hxd.BitmapData(size,size);
		b.clear(-1);
		let _g = 0;
		let _g1 = size >> 1;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = size >> 1;
			while(_g1 < _g2) {
				let y = _g1++;
				b.setPixel(x,y,-16777216);
				b.setPixel(x + (size >> 1),y + (size >> 1),-16777216);
			}
		}
		t.uploadBitmap(b);
		b.ctx = null;
		b.pixel = null;
	}
	static getDefaultDepth() {
		return h3d.Engine.CURRENT.driver.getDefaultDepthBuffer();
	}
}
$hxClasses["h3d.mat.Texture"] = h3d.mat.Texture;
h3d.mat.Texture.__name__ = "h3d.mat.Texture";
Object.assign(h3d.mat.Texture.prototype, {
	__class__: h3d.mat.Texture
	,__properties__: {get_mipLevels: "get_mipLevels",get_layerCount: "get_layerCount",set_wrap: "set_wrap",set_filter: "set_filter",set_mipMap: "set_mipMap",set_lastFrame: "set_lastFrame",get_lastFrame: "get_lastFrame"}
});
h3d.mat.TextureArray = class h3d_mat_TextureArray extends h3d.mat.Texture {
	constructor(w,h,layers,flags,format1) {
		h3d.mat.Texture._hx_skip_constructor = true;
		super();
		h3d.mat.Texture._hx_skip_constructor = false;
		this._hx_constructor(w,h,layers,flags,format1);
	}
	_hx_constructor(w,h,layers,flags,format1) {
		this.layers = layers;
		if(flags == null) {
			flags = [];
		}
		flags.push(h3d.mat.TextureFlags.IsArray);
		super._hx_constructor(w,h,flags,format1);
	}
	get_layerCount() {
		return this.layers;
	}
	clone() {
		let old = this._lastFrame;
		this.preventAutoDispose();
		let t = new h3d.mat.TextureArray(this.width,this.height,this.layers,null,this.format);
		h3d.pass.Copy.run(this,t);
		this.set_lastFrame(old);
		return t;
	}
	toString() {
		return super.toString() + "[" + this.layers + "]";
	}
}
$hxClasses["h3d.mat.TextureArray"] = h3d.mat.TextureArray;
h3d.mat.TextureArray.__name__ = "h3d.mat.TextureArray";
h3d.mat.TextureArray.__super__ = h3d.mat.Texture;
Object.assign(h3d.mat.TextureArray.prototype, {
	__class__: h3d.mat.TextureArray
});
h3d.pass = {};
h3d.pass.ScreenFx = class h3d_pass_ScreenFx {
	constructor(shader,output) {
		if(h3d.pass.ScreenFx._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(shader,output);
	}
	_hx_constructor(shader,output) {
		this.shader = shader;
		this.output = new h3d.pass.OutputShader(output);
		this.pass = new h3d.mat.Pass("screenfx",new hxsl.ShaderList(shader));
		this.pass.set_culling(h3d.mat.Face.None);
		this.pass.depth(false,h3d.mat.Compare.Always);
	}
	get_engine() {
		if(this._engine == null) {
			this._engine = h3d.Engine.CURRENT;
		}
		return this._engine;
	}
	copy(src,dst) {
		h3d.pass.Copy.run(src,dst);
	}
	addShader(s) {
		return this.pass.addShader(s);
	}
	removeShader(s) {
		return this.pass.removeShader(s);
	}
	getShader(cl) {
		return this.pass.getShader(cl);
	}
	render() {
		if(this.primitive == null) {
			this.primitive = h3d.prim.Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d.impl.Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		let shaders = this.pass.shaders;
		let ctx = h3d.impl.RenderContext.get();
		let isNewCtx = false;
		if(ctx == null) {
			isNewCtx = true;
			ctx = new h3d.impl.RenderContext();
			ctx.setCurrent();
		}
		let rts = this.output.compileShaders(ctx.globals,shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d.shader.Buffers(rts);
		} else {
			let _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		ctx.fillGlobals(this.buffers,rts);
		ctx.fillParams(this.buffers,rts,shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.get_engine().uploadShaderBuffers(this.buffers,3);
		this.primitive.render(this.get_engine());
		if(isNewCtx) {
			ctx.clearCurrent();
		}
	}
	dispose() {
	}
	static run(shader,output,layer) {
		let engine = h3d.Engine.CURRENT;
		engine.pushTarget(output,layer);
		new h3d.pass.ScreenFx(shader).render();
		engine.popTarget();
	}
}
$hxClasses["h3d.pass.ScreenFx"] = h3d.pass.ScreenFx;
h3d.pass.ScreenFx.__name__ = "h3d.pass.ScreenFx";
Object.assign(h3d.pass.ScreenFx.prototype, {
	__class__: h3d.pass.ScreenFx
	,__properties__: {get_engine: "get_engine"}
});
h3d.pass.Blur = class h3d_pass_Blur extends h3d.pass.ScreenFx {
	constructor(radius,gain,linear,quality) {
		h3d.pass.ScreenFx._hx_skip_constructor = true;
		super();
		h3d.pass.ScreenFx._hx_skip_constructor = false;
		this._hx_constructor(radius,gain,linear,quality);
	}
	_hx_constructor(radius,gain,linear,quality) {
		if(quality == null) {
			quality = 1.;
		}
		if(linear == null) {
			linear = 0.;
		}
		if(gain == null) {
			gain = 1.;
		}
		if(radius == null) {
			radius = 1.;
		}
		this.cubeDir = [h3d.Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d.Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d.Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d.Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d.Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d.Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
		super._hx_constructor(new h3d.shader.Blur());
		this.set_radius(radius);
		this.set_quality(quality);
		this.set_gain(gain);
		this.set_linear(linear);
	}
	set_radius(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	set_quality(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	set_gain(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	set_linear(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	gauss(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		let sq = s * s;
		let p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	calcValues() {
		this.values = [];
		this.offsets = [];
		let tot = 0.;
		let f = this.quality;
		let qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		let width;
		if(this.radius > 0) {
			let a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		let sigma = Math.sqrt(this.radius);
		let _g = 0;
		let _g1 = width + 1;
		while(_g < _g1) {
			let i = _g++;
			let i1 = i * 2;
			let i2 = i == 0 ? 0 : i * 2 - 1;
			let g1 = this.gauss(i1,sigma);
			let g2 = this.gauss(i2,sigma);
			let g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		let minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			let last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		let _g2 = 0;
		let _g3 = this.values.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			let m = this.gain / (this.values.length * 2 - 1);
			let _g = 0;
			let _g1 = this.values.length;
			while(_g < _g1) {
				let i = _g++;
				let a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				let a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	getKernelSize() {
		if(this.values == null) {
			this.calcValues();
		}
		if(this.radius <= 0) {
			return 0;
		} else {
			return this.values.length * 2 - 1;
		}
	}
	apply(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d.pass.Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		let isCube = (src.flags & 1 << h3d.mat.TextureFlags.Cube._hx_index) != 0;
		let faceCount = isCube ? 6 : 1;
		let tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube ? [h3d.mat.TextureFlags.Cube] : null);
		let _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			let _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			let _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		let _this1 = this.shader.pixel__;
		let x = 1 / src.width;
		let y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		let _g = 0;
		let _g1 = faceCount;
		while(_g < _g1) {
			let i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		let _this2 = this.shader.pixel__;
		let x1 = 0;
		let y1 = 1 / src.height;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = 0.;
		let outDepth = output.depthBuffer;
		output.depthBuffer = null;
		let _g2 = 0;
		let _g3 = faceCount;
		while(_g2 < _g3) {
			let i = _g2++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
}
$hxClasses["h3d.pass.Blur"] = h3d.pass.Blur;
h3d.pass.Blur.__name__ = "h3d.pass.Blur";
h3d.pass.Blur.__super__ = h3d.pass.ScreenFx;
Object.assign(h3d.pass.Blur.prototype, {
	__class__: h3d.pass.Blur
	,__properties__: Object.assign({}, h3d.pass.ScreenFx.prototype.__properties__, {set_quality: "set_quality",set_linear: "set_linear",set_gain: "set_gain",set_radius: "set_radius"})
});
var hxsl = {};
hxsl.Shader = class hxsl_Shader {
	constructor() {
		if(hxsl.Shader._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.priority = 0;
		this.initialize();
	}
	initialize() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		let cl = js.Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			let curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe.Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl.SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	setPriority(v) {
		this.priority = v;
	}
	getParamValue(index) {
		throw haxe.Exception.thrown("assert");
	}
	getParamFloatValue(index) {
		throw haxe.Exception.thrown("assert");
	}
	setParamIndexValue(index,val) {
		throw haxe.Exception.thrown("assert");
	}
	setParamIndexFloatValue(index,val) {
		throw haxe.Exception.thrown("assert");
	}
	updateConstants(globals) {
		throw haxe.Exception.thrown("assert");
	}
	updateConstantsFinal(globals) {
		let c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			let v = globals.map.h[c.globalId];
			let _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				let v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe.Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				let v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				let count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				let v3 = v;
				let sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl.Channel.Unknown;
				} else if(sel == null || sel == hxsl.Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d.mat.Texture.nativeFormat) {
							sel = hxsl.Channel.PackedFloat;
						} else {
							throw haxe.Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d.mat.Texture.nativeFormat) {
							sel = hxsl.Channel.PackedNormal;
						} else {
							throw haxe.Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe.Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			c = c.next;
		}
		let _this = this.shader;
		let constBits = this.constBits;
		let i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	clone() {
		return this;
	}
	toString() {
		let c = js.Boot.getClass(this);
		return c.__name__;
	}
}
$hxClasses["hxsl.Shader"] = hxsl.Shader;
hxsl.Shader.__name__ = "hxsl.Shader";
Object.assign(hxsl.Shader.prototype, {
	__class__: hxsl.Shader
});
h3d.shader = {};
h3d.shader.ScreenShader = class h3d_shader_ScreenShader extends hxsl.Shader {
	constructor() {
		if(hxsl.Shader._hx_skip_constructor) {
			super();
			return;
		}
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.flipY__ = 0;
		super._hx_constructor();
	}
	get_flipY() {
		return this.flipY__;
	}
	set_flipY(_v) {
		return this.flipY__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.flipY__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
		if(index == 0) {
			this.flipY__ = val;
		}
	}
	clone() {
		let s = Object.create(h3d.shader.ScreenShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		return s;
	}
}
$hxClasses["h3d.shader.ScreenShader"] = h3d.shader.ScreenShader;
h3d.shader.ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d.shader.ScreenShader.__super__ = hxsl.Shader;
Object.assign(h3d.shader.ScreenShader.prototype, {
	__class__: h3d.shader.ScreenShader
	,__properties__: {set_flipY: "set_flipY",get_flipY: "get_flipY"}
});
h3d.pass._Border = {};
h3d.pass._Border.BorderShader = class h3d_pass__$Border_BorderShader extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.color__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		super._hx_constructor();
	}
	get_color() {
		return this.color__;
	}
	set_color(_v) {
		return this.color__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.pass._Border.BorderShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.color__ = this.color__;
		return s;
	}
}
$hxClasses["h3d.pass._Border.BorderShader"] = h3d.pass._Border.BorderShader;
h3d.pass._Border.BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d.pass._Border.BorderShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.pass._Border.BorderShader.prototype, {
	__class__: h3d.pass._Border.BorderShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_color: "set_color",get_color: "get_color"})
});
h3d.pass.Border = class h3d_pass_Border extends h3d.pass.ScreenFx {
	constructor(width,height,size) {
		if(size == null) {
			size = 1;
		}
		super(new h3d.pass._Border.BorderShader());
		let bbuf = hxd._FloatBuffer.Float32Expand._new(0);
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - size / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - size / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = size / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = size / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = width / width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			let newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = 1 - height / height * 2;
		this.primitive = new h3d.prim.RawPrimitive({ vbuf : bbuf, format : hxd.BufferFormat.make([new hxd.BufferInput("position",2,0)])},true);
		let _this = this.shader.color__;
		let x = 1;
		let y = 1;
		let z = 1;
		let w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
	}
	dispose() {
		super.dispose();
		this.primitive.dispose();
	}
}
$hxClasses["h3d.pass.Border"] = h3d.pass.Border;
h3d.pass.Border.__name__ = "h3d.pass.Border";
h3d.pass.Border.__super__ = h3d.pass.ScreenFx;
Object.assign(h3d.pass.Border.prototype, {
	__class__: h3d.pass.Border
});
h3d.pass._Copy = {};
h3d.pass._Copy.ArrayCopyShader = class h3d_pass__$Copy_ArrayCopyShader extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.layer__ = 0;
		super._hx_constructor();
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	get_layer() {
		return this.layer__;
	}
	set_layer(_v) {
		return this.layer__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.pass._Copy.ArrayCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.layer__ = this.layer__;
		return s;
	}
}
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d.pass._Copy.ArrayCopyShader;
h3d.pass._Copy.ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d.pass._Copy.ArrayCopyShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.pass._Copy.ArrayCopyShader.prototype, {
	__class__: h3d.pass._Copy.ArrayCopyShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_layer: "set_layer",get_layer: "get_layer",set_texture: "set_texture",get_texture: "get_texture"})
});
h3d.pass.ArrayCopy = class h3d_pass_ArrayCopy extends h3d.pass.ScreenFx {
	constructor() {
		super(new h3d.pass._Copy.ArrayCopyShader());
	}
	apply(from,fromLayer,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		this.shader.layer__ = fromLayer;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			let h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			let old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		this.shader.layer__ = 0;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	static run(from,fromLayer,to,blend,pass,layer) {
		let engine = h3d.Engine.CURRENT;
		if(to != null && from != null && (blend == null || blend == h2d.BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
			return;
		}
		let inst = engine.resCache.h[h3d.pass.ArrayCopy.__id__];
		if(inst == null) {
			inst = new h3d.pass.ArrayCopy();
			engine.resCache.set(h3d.pass.ArrayCopy,inst);
		}
		inst.apply(from,fromLayer,to,blend,pass,layer);
	}
}
$hxClasses["h3d.pass.ArrayCopy"] = h3d.pass.ArrayCopy;
h3d.pass.ArrayCopy.__name__ = "h3d.pass.ArrayCopy";
h3d.pass.ArrayCopy.__super__ = h3d.pass.ScreenFx;
Object.assign(h3d.pass.ArrayCopy.prototype, {
	__class__: h3d.pass.ArrayCopy
});
h3d.pass._Copy.CopyShader = class h3d_pass__$Copy_CopyShader extends h3d.shader.ScreenShader {
	constructor() {
		super();
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.pass._Copy.CopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		return s;
	}
}
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d.pass._Copy.CopyShader;
h3d.pass._Copy.CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d.pass._Copy.CopyShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.pass._Copy.CopyShader.prototype, {
	__class__: h3d.pass._Copy.CopyShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_texture: "set_texture",get_texture: "get_texture"})
});
h3d.pass.Copy = class h3d_pass_Copy extends h3d.pass.ScreenFx {
	constructor() {
		super(new h3d.pass._Copy.CopyShader());
	}
	apply(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			let h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			let old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	static run(from,to,blend,pass,layer) {
		let engine = h3d.Engine.CURRENT;
		if(to != null && from != null && (blend == null || blend == h2d.BlendMode.None) && pass == null && layer == null && engine.driver.copyTexture(from,to)) {
			return;
		}
		let inst = engine.resCache.h[h3d.pass.Copy.__id__];
		if(inst == null) {
			inst = new h3d.pass.Copy();
			engine.resCache.set(h3d.pass.Copy,inst);
		}
		inst.apply(from,to,blend,pass,layer);
	}
}
$hxClasses["h3d.pass.Copy"] = h3d.pass.Copy;
h3d.pass.Copy.__name__ = "h3d.pass.Copy";
h3d.pass.Copy.__super__ = h3d.pass.ScreenFx;
Object.assign(h3d.pass.Copy.prototype, {
	__class__: h3d.pass.Copy
});
h3d.pass._CubeCopy = {};
h3d.pass._CubeCopy.CubeCopyShader = class h3d_pass__$CubeCopy_CubeCopyShader extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.mat__ = new h3d.MatrixImpl();
		super._hx_constructor();
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	get_mat() {
		return this.mat__;
	}
	set_mat(_v) {
		return this.mat__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.pass._CubeCopy.CubeCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.mat__ = this.mat__;
		return s;
	}
}
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d.pass._CubeCopy.CubeCopyShader;
h3d.pass._CubeCopy.CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d.pass._CubeCopy.CubeCopyShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.pass._CubeCopy.CubeCopyShader.prototype, {
	__class__: h3d.pass._CubeCopy.CubeCopyShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_mat: "set_mat",get_mat: "get_mat",set_texture: "set_texture",get_texture: "get_texture"})
});
h3d.pass.CubeCopy = class h3d_pass_CubeCopy extends h3d.pass.ScreenFx {
	constructor() {
		h3d.pass.ScreenFx._hx_skip_constructor = true;
		super();
		h3d.pass.ScreenFx._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.cubeDir = [h3d.Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d.Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d.Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d.Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d.Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d.Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
		super._hx_constructor(new h3d.pass._CubeCopy.CubeCopyShader());
	}
	apply(from,to,blend,mip) {
		if(mip == null) {
			mip = 0;
		}
		this.shader.texture__ = from;
		if(to != null) {
			this.get_engine().pushTarget(to,0,mip);
		}
		this.shader.mat__ = this.cubeDir[0];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,1,mip);
		}
		this.shader.mat__ = this.cubeDir[1];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,2,mip);
		}
		this.shader.mat__ = this.cubeDir[2];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,3,mip);
		}
		this.shader.mat__ = this.cubeDir[3];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,4,mip);
		}
		this.shader.mat__ = this.cubeDir[4];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,5,mip);
		}
		this.shader.mat__ = this.cubeDir[5];
		this.pass.setBlendMode(blend == null ? h2d.BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		this.shader.texture__ = null;
	}
	static run(from,to,blend,mip) {
		if(mip == null) {
			mip = 0;
		}
		let engine = h3d.Engine.CURRENT;
		if(to != null && from != null && (blend == null || blend == h2d.BlendMode.None) && mip == 0 && engine.driver.copyTexture(from,to)) {
			return;
		}
		let inst = engine.resCache.h[h3d.pass.CubeCopy.__id__];
		if(inst == null) {
			inst = new h3d.pass.CubeCopy();
			engine.resCache.set(h3d.pass.CubeCopy,inst);
		}
		inst.apply(from,to,blend,mip);
	}
}
$hxClasses["h3d.pass.CubeCopy"] = h3d.pass.CubeCopy;
h3d.pass.CubeCopy.__name__ = "h3d.pass.CubeCopy";
h3d.pass.CubeCopy.__super__ = h3d.pass.ScreenFx;
Object.assign(h3d.pass.CubeCopy.prototype, {
	__class__: h3d.pass.CubeCopy
});
h3d.pass.Output = class h3d_pass_Output {
	constructor(name,output) {
		if(h3d.pass.Output._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(name,output);
	}
	_hx_constructor(name,output) {
		this.defaultSort = ($_=new h3d.pass.SortByMaterial(),$bind($_,$_.sort));
		this.name = name;
		this.output = new h3d.pass.OutputShader(output);
	}
	get_globals() {
		return this.ctx.globals;
	}
	setContext(ctx) {
		this.ctx = ctx;
	}
	dispose() {
	}
	processShaders(p,shaders) {
		let p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	setupShaders(passes) {
		let lightInit = false;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let p = tmp;
			let shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.ctx.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.output.compileShaders(this.ctx.globals,shaders,p.pass.batchMode ? hxsl.LinkMode.Batch : hxsl.LinkMode.Default);
			p.shaders = shaders;
			let t = p.shader.fragment.textures;
			let tmp1;
			if(t != null) {
				let _g = t.type;
				if(_g._hx_index == 15) {
					let _g1 = _g.t;
					let _g2 = _g.size;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				p.texture = 0;
			} else {
				let _this = this.ctx;
				let opt = true;
				if(opt == null) {
					opt = false;
				}
				let t1;
				if(t.perObjectGlobal != null) {
					let v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe.Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					let _g = t.type;
					let t2;
					if(_g._hx_index == 17) {
						let _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					let si = shaders;
					let n = t.instance;
					while(--n > 0) si = si.next;
					let v = si.s.getParamValue(t.index);
					if(v == null && !opt) {
						throw haxe.Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	log(str) {
	}
	drawObject(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	draw(passes,sort) {
		if(passes.current == null) {
			return;
		}
		this.ctx.setupTarget();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		let buf = this.ctx.shaderBuffers;
		let prevShader = null;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let p = tmp;
			let _this = this.ctx;
			let v = p.obj.absPos;
			_this.globals.map.h[_this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.ctx.globalModelViewInverse_id)) {
				let _this = this.ctx;
				let v = p.obj.getInvPos();
				_this.globals.map.h[_this.globalModelViewInverse_id] = v;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				if(h3d.pass.Output.onShaderError != null) {
					try {
						this.ctx.engine.selectShader(p.shader);
					} catch( _g ) {
						let e = haxe.Exception.caught(_g).unwrap();
						h3d.pass.Output.onShaderError(e,p);
						continue;
					}
				} else {
					this.ctx.engine.selectShader(p.shader);
				}
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d.shader.Buffers(p.shader);
				} else {
					let s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.ctx.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.ctx.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		let _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
}
$hxClasses["h3d.pass.Output"] = h3d.pass.Output;
h3d.pass.Output.__name__ = "h3d.pass.Output";
Object.assign(h3d.pass.Output.prototype, {
	__class__: h3d.pass.Output
	,__properties__: {get_globals: "get_globals"}
});
h3d.pass.Shadows = class h3d_pass_Shadows extends h3d.pass.Output {
	constructor(light) {
		if(h3d.pass.Output._hx_skip_constructor) {
			super();
			return;
		}
		h3d.pass.Output._hx_skip_constructor = true;
		super();
		h3d.pass.Output._hx_skip_constructor = false;
		this._hx_constructor(light);
	}
	_hx_constructor(light) {
		this.pcfScale = 1.0;
		this.pcfQuality = 1;
		this.bias = 0.01;
		this.power = 30.0;
		this.samplingKind = h3d.pass.ShadowSamplingKind.None;
		this.size = 1024;
		this.mode = h3d.pass.RenderMode.None;
		this.enabled = true;
		if(this.format == null) {
			this.format = hxd.PixelFormat.R16F;
		}
		if(!h3d.Engine.CURRENT.driver.isSupportedFormat(this.format)) {
			this.format = h3d.mat.Texture.nativeFormat;
		}
		super._hx_constructor("shadow",this.getOutputs());
		this.light = light;
		this.blur = new h3d.pass.Blur(5);
		this.blur.set_quality(0.5);
		let _this = this.blur.shader;
		_this.constModified = true;
		_this.isDepth__ = this.format == h3d.mat.Texture.nativeFormat;
	}
	set_mode(m) {
		if(m != h3d.pass.RenderMode.None) {
			throw haxe.Exception.thrown("Shadow mode " + Std.string(m) + " not supported for " + Std.string(this.light));
		}
		return this.mode = m;
	}
	set_enabled(b) {
		return this.enabled = b;
	}
	set_size(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	dispose() {
		super.dispose();
		this.blur.dispose();
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
	}
	getShadowProj() {
		return this.lightCamera.m;
	}
	getShadowTex() {
		return null;
	}
	isUsingWorldDist() {
		return false;
	}
	getOutputs() {
		if(this.isUsingWorldDist()) {
			return [hxsl.Output.Swiz(hxsl.Output.Value("output.worldDist",1),[hxsl.Component.X,hxsl.Component.X,hxsl.Component.X,hxsl.Component.X])];
		}
		if(this.format == h3d.mat.Texture.nativeFormat) {
			return [hxsl.Output.PackFloat(hxsl.Output.Value("output.depth"))];
		}
		return [hxsl.Output.Swiz(hxsl.Output.Value("output.depth",1),[hxsl.Component.X,hxsl.Component.X,hxsl.Component.X,hxsl.Component.X])];
	}
	loadStaticData(bytes) {
		return false;
	}
	saveStaticData() {
		return null;
	}
	computeStatic(passes) {
		throw haxe.Exception.thrown("Not implemented");
	}
	createDefaultShadowMap() {
		let tex = h3d.mat.Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	syncShader(texture) {
	}
	filterPasses(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				let tmp;
				if(this.staticTexture != null) {
					let _this = this.staticTexture;
					tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				let tmp1;
				if(this.staticTexture != null) {
					let _this = this.staticTexture;
					tmp1 = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				let head = null;
				let prev = null;
				let disc = passes.discarded;
				let discQueue = passes.lastDisc;
				let cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == false) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				let head1 = null;
				let prev1 = null;
				let disc1 = passes.discarded;
				let discQueue1 = passes.lastDisc;
				let cur1 = passes.current;
				while(cur1 != null) {
					if(cur1.pass.isStatic == true) {
						if(head1 == null) {
							prev1 = cur1;
							head1 = prev1;
						} else {
							prev1.next = cur1;
							prev1 = cur1;
						}
					} else if(disc1 == null) {
						discQueue1 = cur1;
						disc1 = discQueue1;
					} else {
						discQueue1.next = cur1;
						discQueue1 = cur1;
					}
					cur1 = cur1.next;
				}
				if(prev1 != null) {
					prev1.next = null;
				}
				if(discQueue1 != null) {
					discQueue1.next = null;
				}
				passes.current = head1;
				passes.discarded = disc1;
				passes.lastDisc = discQueue1;
				return true;
			case 2:
				return false;
			case 3:
				let head2 = null;
				let prev2 = null;
				let disc2 = passes.discarded;
				let discQueue2 = passes.lastDisc;
				let cur2 = passes.current;
				while(cur2 != null) {
					if(cur2.pass.isStatic == true) {
						if(head2 == null) {
							prev2 = cur2;
							head2 = prev2;
						} else {
							prev2.next = cur2;
							prev2 = cur2;
						}
					} else if(disc2 == null) {
						discQueue2 = cur2;
						disc2 = discQueue2;
					} else {
						discQueue2.next = cur2;
						discQueue2 = cur2;
					}
					cur2 = cur2.next;
				}
				if(prev2 != null) {
					prev2.next = null;
				}
				if(discQueue2 != null) {
					discQueue2.next = null;
				}
				passes.current = head2;
				passes.discarded = disc2;
				passes.lastDisc = discQueue2;
				return true;
			}
		}
	}
	cullPasses(passes,f) {
		let prevCollider = null;
		let prevResult = true;
		let head = null;
		let prev = null;
		let disc = passes.discarded;
		let discQueue = passes.lastDisc;
		let cur = passes.current;
		while(cur != null) {
			let col = cur.obj.cullingCollider;
			let tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
	}
}
$hxClasses["h3d.pass.Shadows"] = h3d.pass.Shadows;
h3d.pass.Shadows.__name__ = "h3d.pass.Shadows";
h3d.pass.Shadows.__super__ = h3d.pass.Output;
Object.assign(h3d.pass.Shadows.prototype, {
	__class__: h3d.pass.Shadows
	,__properties__: Object.assign({}, h3d.pass.Output.prototype.__properties__, {set_size: "set_size",set_mode: "set_mode",set_enabled: "set_enabled"})
});
h3d.pass.DirShadowMap = class h3d_pass_DirShadowMap extends h3d.pass.Shadows {
	constructor(light) {
		if(h3d.pass.Output._hx_skip_constructor) {
			super();
			return;
		}
		h3d.pass.Output._hx_skip_constructor = true;
		super();
		h3d.pass.Output._hx_skip_constructor = false;
		this._hx_constructor(light);
	}
	_hx_constructor(light) {
		this.minDist = -1.0;
		this.maxDist = -1.0;
		this.autoZPlanes = false;
		this.autoShrink = true;
		this.mergePass = new h3d.pass.ScreenFx(new h3d.shader.MinMaxShader());
		super._hx_constructor(light);
		this.lightCamera = new h3d.Camera();
		this.lightCamera.orthoBounds = new h3d.col.Bounds();
		this.shader = this.dshader = new h3d.shader.DirShadow();
		this.border = new h3d.pass.Border(this.size,this.size);
	}
	set_mode(m) {
		let _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d.pass.RenderMode.None;
		return this.mode = m;
	}
	set_enabled(b) {
		let _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d.pass.RenderMode.None;
		return this.enabled = b;
	}
	set_size(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d.pass.Border(s,s);
		}
		return super.set_size(s);
	}
	dispose() {
		super.dispose();
		if(this.depth != null) {
			this.depth.dispose();
		}
		if(this.border != null) {
			this.border.dispose();
		}
	}
	getShadowTex() {
		return this.dshader.shadowMap__;
	}
	calcShadowBounds(camera) {
		let bounds = camera.orthoBounds;
		let zMax = -1e9;
		let zMin = 1e9;
		let _gthis = this;
		if(this.autoShrink) {
			let mtmp = new h3d.MatrixImpl();
			let identity = h3d.Matrix.I();
			let btmp = this.autoZPlanes ? new h3d.col.Bounds() : null;
			let obj = this.boundingObject != null ? this.boundingObject : this.ctx.scene;
			obj.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				let b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				let absPos = ((m.primitive) instanceof h3d.prim.Instanced) ? identity : m.getAbsPos();
				if(_gthis.autoZPlanes) {
					btmp.load(b);
					btmp.transform(absPos);
					if(btmp.zMax > zMax) {
						zMax = btmp.zMax;
					}
					if(btmp.zMin < zMin) {
						zMin = btmp.zMin;
					}
				}
				mtmp.multiply3x4(absPos,camera.mcam);
				let x = b.xMin;
				let y = b.yMin;
				let z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p_x = x1;
				let p_y = y1;
				let p_z = z1;
				let px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				let py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				let pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				let x2 = b.xMin;
				let y2 = b.yMin;
				let z2 = b.zMax;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let x3 = x2;
				let y3 = y2;
				let z3 = z2;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				let p_x1 = x3;
				let p_y1 = y3;
				let p_z1 = z3;
				let px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
				let py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
				let pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
				p_x1 = px1;
				p_y1 = py1;
				p_z1 = pz1;
				if(p_x1 < bounds.xMin) {
					bounds.xMin = p_x1;
				}
				if(p_x1 > bounds.xMax) {
					bounds.xMax = p_x1;
				}
				if(p_y1 < bounds.yMin) {
					bounds.yMin = p_y1;
				}
				if(p_y1 > bounds.yMax) {
					bounds.yMax = p_y1;
				}
				if(p_z1 < bounds.zMin) {
					bounds.zMin = p_z1;
				}
				if(p_z1 > bounds.zMax) {
					bounds.zMax = p_z1;
				}
				let x4 = b.xMin;
				let y4 = b.yMax;
				let z4 = b.zMin;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				let x5 = x4;
				let y5 = y4;
				let z5 = z4;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				let p_x2 = x5;
				let p_y2 = y5;
				let p_z2 = z5;
				let px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
				let py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
				let pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
				p_x2 = px2;
				p_y2 = py2;
				p_z2 = pz2;
				if(p_x2 < bounds.xMin) {
					bounds.xMin = p_x2;
				}
				if(p_x2 > bounds.xMax) {
					bounds.xMax = p_x2;
				}
				if(p_y2 < bounds.yMin) {
					bounds.yMin = p_y2;
				}
				if(p_y2 > bounds.yMax) {
					bounds.yMax = p_y2;
				}
				if(p_z2 < bounds.zMin) {
					bounds.zMin = p_z2;
				}
				if(p_z2 > bounds.zMax) {
					bounds.zMax = p_z2;
				}
				let x6 = b.xMin;
				let y6 = b.yMax;
				let z6 = b.zMax;
				if(z6 == null) {
					z6 = 0.;
				}
				if(y6 == null) {
					y6 = 0.;
				}
				if(x6 == null) {
					x6 = 0.;
				}
				let x7 = x6;
				let y7 = y6;
				let z7 = z6;
				if(z7 == null) {
					z7 = 0.;
				}
				if(y7 == null) {
					y7 = 0.;
				}
				if(x7 == null) {
					x7 = 0.;
				}
				let p_x3 = x7;
				let p_y3 = y7;
				let p_z3 = z7;
				let px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
				let py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
				let pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
				p_x3 = px3;
				p_y3 = py3;
				p_z3 = pz3;
				if(p_x3 < bounds.xMin) {
					bounds.xMin = p_x3;
				}
				if(p_x3 > bounds.xMax) {
					bounds.xMax = p_x3;
				}
				if(p_y3 < bounds.yMin) {
					bounds.yMin = p_y3;
				}
				if(p_y3 > bounds.yMax) {
					bounds.yMax = p_y3;
				}
				if(p_z3 < bounds.zMin) {
					bounds.zMin = p_z3;
				}
				if(p_z3 > bounds.zMax) {
					bounds.zMax = p_z3;
				}
				let x8 = b.xMax;
				let y8 = b.yMin;
				let z8 = b.zMin;
				if(z8 == null) {
					z8 = 0.;
				}
				if(y8 == null) {
					y8 = 0.;
				}
				if(x8 == null) {
					x8 = 0.;
				}
				let x9 = x8;
				let y9 = y8;
				let z9 = z8;
				if(z9 == null) {
					z9 = 0.;
				}
				if(y9 == null) {
					y9 = 0.;
				}
				if(x9 == null) {
					x9 = 0.;
				}
				let p_x4 = x9;
				let p_y4 = y9;
				let p_z4 = z9;
				let px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
				let py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
				let pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
				p_x4 = px4;
				p_y4 = py4;
				p_z4 = pz4;
				if(p_x4 < bounds.xMin) {
					bounds.xMin = p_x4;
				}
				if(p_x4 > bounds.xMax) {
					bounds.xMax = p_x4;
				}
				if(p_y4 < bounds.yMin) {
					bounds.yMin = p_y4;
				}
				if(p_y4 > bounds.yMax) {
					bounds.yMax = p_y4;
				}
				if(p_z4 < bounds.zMin) {
					bounds.zMin = p_z4;
				}
				if(p_z4 > bounds.zMax) {
					bounds.zMax = p_z4;
				}
				let x10 = b.xMax;
				let y10 = b.yMin;
				let z10 = b.zMax;
				if(z10 == null) {
					z10 = 0.;
				}
				if(y10 == null) {
					y10 = 0.;
				}
				if(x10 == null) {
					x10 = 0.;
				}
				let x11 = x10;
				let y11 = y10;
				let z11 = z10;
				if(z11 == null) {
					z11 = 0.;
				}
				if(y11 == null) {
					y11 = 0.;
				}
				if(x11 == null) {
					x11 = 0.;
				}
				let p_x5 = x11;
				let p_y5 = y11;
				let p_z5 = z11;
				let px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
				let py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
				let pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
				p_x5 = px5;
				p_y5 = py5;
				p_z5 = pz5;
				if(p_x5 < bounds.xMin) {
					bounds.xMin = p_x5;
				}
				if(p_x5 > bounds.xMax) {
					bounds.xMax = p_x5;
				}
				if(p_y5 < bounds.yMin) {
					bounds.yMin = p_y5;
				}
				if(p_y5 > bounds.yMax) {
					bounds.yMax = p_y5;
				}
				if(p_z5 < bounds.zMin) {
					bounds.zMin = p_z5;
				}
				if(p_z5 > bounds.zMax) {
					bounds.zMax = p_z5;
				}
				let x12 = b.xMax;
				let y12 = b.yMax;
				let z12 = b.zMin;
				if(z12 == null) {
					z12 = 0.;
				}
				if(y12 == null) {
					y12 = 0.;
				}
				if(x12 == null) {
					x12 = 0.;
				}
				let x13 = x12;
				let y13 = y12;
				let z13 = z12;
				if(z13 == null) {
					z13 = 0.;
				}
				if(y13 == null) {
					y13 = 0.;
				}
				if(x13 == null) {
					x13 = 0.;
				}
				let p_x6 = x13;
				let p_y6 = y13;
				let p_z6 = z13;
				let px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
				let py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
				let pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
				p_x6 = px6;
				p_y6 = py6;
				p_z6 = pz6;
				if(p_x6 < bounds.xMin) {
					bounds.xMin = p_x6;
				}
				if(p_x6 > bounds.xMax) {
					bounds.xMax = p_x6;
				}
				if(p_y6 < bounds.yMin) {
					bounds.yMin = p_y6;
				}
				if(p_y6 > bounds.yMax) {
					bounds.yMax = p_y6;
				}
				if(p_z6 < bounds.zMin) {
					bounds.zMin = p_z6;
				}
				if(p_z6 > bounds.zMax) {
					bounds.zMax = p_z6;
				}
				let x14 = b.xMax;
				let y14 = b.yMax;
				let z14 = b.zMax;
				if(z14 == null) {
					z14 = 0.;
				}
				if(y14 == null) {
					y14 = 0.;
				}
				if(x14 == null) {
					x14 = 0.;
				}
				let x15 = x14;
				let y15 = y14;
				let z15 = z14;
				if(z15 == null) {
					z15 = 0.;
				}
				if(y15 == null) {
					y15 = 0.;
				}
				if(x15 == null) {
					x15 = 0.;
				}
				let p_x7 = x15;
				let p_y7 = y15;
				let p_z7 = z15;
				let px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
				let py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
				let pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
				p_x7 = px7;
				p_y7 = py7;
				p_z7 = pz7;
				if(p_x7 < bounds.xMin) {
					bounds.xMin = p_x7;
				}
				if(p_x7 > bounds.xMax) {
					bounds.xMax = p_x7;
				}
				if(p_y7 < bounds.yMin) {
					bounds.yMin = p_y7;
				}
				if(p_y7 > bounds.yMax) {
					bounds.yMax = p_y7;
				}
				if(p_z7 < bounds.zMin) {
					bounds.zMin = p_z7;
				}
				if(p_z7 > bounds.zMax) {
					bounds.zMax = p_z7;
				}
			});
		} else if(this.mode == h3d.pass.RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d.pass.RenderMode.Dynamic) {
			let cameraBounds = new h3d.col.Bounds();
			let minDist = this.minDist < 0 ? this.ctx.camera.zNear : this.minDist;
			let maxDist = this.maxDist < 0 ? this.ctx.camera.zFar : this.maxDist;
			let dist = minDist;
			let this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			let x = this1.x;
			let y = this1.y;
			let z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let _this_x = x1;
			let _this_y = y1;
			let _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMax;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			let m = camera.mcam;
			let px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			let py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			let pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			let x2 = _this_x;
			let y2 = _this_y;
			let z2 = _this_z;
			if(x2 < cameraBounds.xMin) {
				cameraBounds.xMin = x2;
			}
			if(x2 > cameraBounds.xMax) {
				cameraBounds.xMax = x2;
			}
			if(y2 < cameraBounds.yMin) {
				cameraBounds.yMin = y2;
			}
			if(y2 > cameraBounds.yMax) {
				cameraBounds.yMax = y2;
			}
			if(z2 < cameraBounds.zMin) {
				cameraBounds.zMin = z2;
			}
			if(z2 > cameraBounds.zMax) {
				cameraBounds.zMax = z2;
			}
			let dist1 = minDist;
			let this2 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist1));
			let x3 = this2.x;
			let y3 = this2.y;
			let z3 = this2.z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let x4 = x3;
			let y4 = y3;
			let z4 = z3;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let _this_x1 = x4;
			let _this_y1 = y4;
			let _this_z1 = z4;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x1 - p1_x;
				r.ly = _this_y1 - p1_y;
				r.lz = _this_z1 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMax;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = 1;
				if(d2 > 0 && d2 * k > dist1 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x1 = v_x;
					_this_y1 = v_y;
					_this_z1 = v_z;
				}
			}
			let m1 = camera.mcam;
			let px1 = _this_x1 * m1._11 + _this_y1 * m1._21 + _this_z1 * m1._31 + m1._41;
			let py1 = _this_x1 * m1._12 + _this_y1 * m1._22 + _this_z1 * m1._32 + m1._42;
			let pz1 = _this_x1 * m1._13 + _this_y1 * m1._23 + _this_z1 * m1._33 + m1._43;
			_this_x1 = px1;
			_this_y1 = py1;
			_this_z1 = pz1;
			let x5 = _this_x1;
			let y5 = _this_y1;
			let z5 = _this_z1;
			if(x5 < cameraBounds.xMin) {
				cameraBounds.xMin = x5;
			}
			if(x5 > cameraBounds.xMax) {
				cameraBounds.xMax = x5;
			}
			if(y5 < cameraBounds.yMin) {
				cameraBounds.yMin = y5;
			}
			if(y5 > cameraBounds.yMax) {
				cameraBounds.yMax = y5;
			}
			if(z5 < cameraBounds.zMin) {
				cameraBounds.zMin = z5;
			}
			if(z5 > cameraBounds.zMax) {
				cameraBounds.zMax = z5;
			}
			let dist2 = minDist;
			let this3 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist2));
			let x6 = this3.x;
			let y6 = this3.y;
			let z6 = this3.z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let x7 = x6;
			let y7 = y6;
			let z7 = z6;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let _this_x2 = x7;
			let _this_y2 = y7;
			let _this_z2 = z7;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x2 - p1_x;
				r.ly = _this_y2 - p1_y;
				r.lz = _this_z2 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMax;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = 1;
				if(d2 > 0 && d2 * k > dist2 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x2 = v_x;
					_this_y2 = v_y;
					_this_z2 = v_z;
				}
			}
			let m2 = camera.mcam;
			let px2 = _this_x2 * m2._11 + _this_y2 * m2._21 + _this_z2 * m2._31 + m2._41;
			let py2 = _this_x2 * m2._12 + _this_y2 * m2._22 + _this_z2 * m2._32 + m2._42;
			let pz2 = _this_x2 * m2._13 + _this_y2 * m2._23 + _this_z2 * m2._33 + m2._43;
			_this_x2 = px2;
			_this_y2 = py2;
			_this_z2 = pz2;
			let x8 = _this_x2;
			let y8 = _this_y2;
			let z8 = _this_z2;
			if(x8 < cameraBounds.xMin) {
				cameraBounds.xMin = x8;
			}
			if(x8 > cameraBounds.xMax) {
				cameraBounds.xMax = x8;
			}
			if(y8 < cameraBounds.yMin) {
				cameraBounds.yMin = y8;
			}
			if(y8 > cameraBounds.yMax) {
				cameraBounds.yMax = y8;
			}
			if(z8 < cameraBounds.zMin) {
				cameraBounds.zMin = z8;
			}
			if(z8 > cameraBounds.zMax) {
				cameraBounds.zMax = z8;
			}
			let dist3 = minDist;
			let this4 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist3));
			let x9 = this4.x;
			let y9 = this4.y;
			let z9 = this4.z;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			let x10 = x9;
			let y10 = y9;
			let z10 = z9;
			if(z10 == null) {
				z10 = 0.;
			}
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			let _this_x3 = x10;
			let _this_y3 = y10;
			let _this_z3 = z10;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x3 - p1_x;
				r.ly = _this_y3 - p1_y;
				r.lz = _this_z3 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMax;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = 1;
				if(d2 > 0 && d2 * k > dist3 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x3 = v_x;
					_this_y3 = v_y;
					_this_z3 = v_z;
				}
			}
			let m3 = camera.mcam;
			let px3 = _this_x3 * m3._11 + _this_y3 * m3._21 + _this_z3 * m3._31 + m3._41;
			let py3 = _this_x3 * m3._12 + _this_y3 * m3._22 + _this_z3 * m3._32 + m3._42;
			let pz3 = _this_x3 * m3._13 + _this_y3 * m3._23 + _this_z3 * m3._33 + m3._43;
			_this_x3 = px3;
			_this_y3 = py3;
			_this_z3 = pz3;
			let x11 = _this_x3;
			let y11 = _this_y3;
			let z11 = _this_z3;
			if(x11 < cameraBounds.xMin) {
				cameraBounds.xMin = x11;
			}
			if(x11 > cameraBounds.xMax) {
				cameraBounds.xMax = x11;
			}
			if(y11 < cameraBounds.yMin) {
				cameraBounds.yMin = y11;
			}
			if(y11 > cameraBounds.yMax) {
				cameraBounds.yMax = y11;
			}
			if(z11 < cameraBounds.zMin) {
				cameraBounds.zMin = z11;
			}
			if(z11 > cameraBounds.zMax) {
				cameraBounds.zMax = z11;
			}
			let dist4 = maxDist;
			let this5 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist4));
			let x12 = this5.x;
			let y12 = this5.y;
			let z12 = this5.z;
			if(z12 == null) {
				z12 = 0.;
			}
			if(y12 == null) {
				y12 = 0.;
			}
			if(x12 == null) {
				x12 = 0.;
			}
			let x13 = x12;
			let y13 = y12;
			let z13 = z12;
			if(z13 == null) {
				z13 = 0.;
			}
			if(y13 == null) {
				y13 = 0.;
			}
			if(x13 == null) {
				x13 = 0.;
			}
			let _this_x4 = x13;
			let _this_y4 = y13;
			let _this_z4 = z13;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x4 - p1_x;
				r.ly = _this_y4 - p1_y;
				r.lz = _this_z4 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMin;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = -1;
				if(d2 > 0 && d2 * k > dist4 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x4 = v_x;
					_this_y4 = v_y;
					_this_z4 = v_z;
				}
			}
			let m4 = camera.mcam;
			let px4 = _this_x4 * m4._11 + _this_y4 * m4._21 + _this_z4 * m4._31 + m4._41;
			let py4 = _this_x4 * m4._12 + _this_y4 * m4._22 + _this_z4 * m4._32 + m4._42;
			let pz4 = _this_x4 * m4._13 + _this_y4 * m4._23 + _this_z4 * m4._33 + m4._43;
			_this_x4 = px4;
			_this_y4 = py4;
			_this_z4 = pz4;
			let x14 = _this_x4;
			let y14 = _this_y4;
			let z14 = _this_z4;
			if(x14 < cameraBounds.xMin) {
				cameraBounds.xMin = x14;
			}
			if(x14 > cameraBounds.xMax) {
				cameraBounds.xMax = x14;
			}
			if(y14 < cameraBounds.yMin) {
				cameraBounds.yMin = y14;
			}
			if(y14 > cameraBounds.yMax) {
				cameraBounds.yMax = y14;
			}
			if(z14 < cameraBounds.zMin) {
				cameraBounds.zMin = z14;
			}
			if(z14 > cameraBounds.zMax) {
				cameraBounds.zMax = z14;
			}
			let dist5 = maxDist;
			let this6 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist5));
			let x15 = this6.x;
			let y15 = this6.y;
			let z15 = this6.z;
			if(z15 == null) {
				z15 = 0.;
			}
			if(y15 == null) {
				y15 = 0.;
			}
			if(x15 == null) {
				x15 = 0.;
			}
			let x16 = x15;
			let y16 = y15;
			let z16 = z15;
			if(z16 == null) {
				z16 = 0.;
			}
			if(y16 == null) {
				y16 = 0.;
			}
			if(x16 == null) {
				x16 = 0.;
			}
			let _this_x5 = x16;
			let _this_y5 = y16;
			let _this_z5 = z16;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x5 - p1_x;
				r.ly = _this_y5 - p1_y;
				r.lz = _this_z5 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMin;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = -1;
				if(d2 > 0 && d2 * k > dist5 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x5 = v_x;
					_this_y5 = v_y;
					_this_z5 = v_z;
				}
			}
			let m5 = camera.mcam;
			let px5 = _this_x5 * m5._11 + _this_y5 * m5._21 + _this_z5 * m5._31 + m5._41;
			let py5 = _this_x5 * m5._12 + _this_y5 * m5._22 + _this_z5 * m5._32 + m5._42;
			let pz5 = _this_x5 * m5._13 + _this_y5 * m5._23 + _this_z5 * m5._33 + m5._43;
			_this_x5 = px5;
			_this_y5 = py5;
			_this_z5 = pz5;
			let x17 = _this_x5;
			let y17 = _this_y5;
			let z17 = _this_z5;
			if(x17 < cameraBounds.xMin) {
				cameraBounds.xMin = x17;
			}
			if(x17 > cameraBounds.xMax) {
				cameraBounds.xMax = x17;
			}
			if(y17 < cameraBounds.yMin) {
				cameraBounds.yMin = y17;
			}
			if(y17 > cameraBounds.yMax) {
				cameraBounds.yMax = y17;
			}
			if(z17 < cameraBounds.zMin) {
				cameraBounds.zMin = z17;
			}
			if(z17 > cameraBounds.zMax) {
				cameraBounds.zMax = z17;
			}
			let dist6 = maxDist;
			let this7 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist6));
			let x18 = this7.x;
			let y18 = this7.y;
			let z18 = this7.z;
			if(z18 == null) {
				z18 = 0.;
			}
			if(y18 == null) {
				y18 = 0.;
			}
			if(x18 == null) {
				x18 = 0.;
			}
			let x19 = x18;
			let y19 = y18;
			let z19 = z18;
			if(z19 == null) {
				z19 = 0.;
			}
			if(y19 == null) {
				y19 = 0.;
			}
			if(x19 == null) {
				x19 = 0.;
			}
			let _this_x6 = x19;
			let _this_y6 = y19;
			let _this_z6 = z19;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x6 - p1_x;
				r.ly = _this_y6 - p1_y;
				r.lz = _this_z6 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMin;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = -1;
				if(d2 > 0 && d2 * k > dist6 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x6 = v_x;
					_this_y6 = v_y;
					_this_z6 = v_z;
				}
			}
			let m6 = camera.mcam;
			let px6 = _this_x6 * m6._11 + _this_y6 * m6._21 + _this_z6 * m6._31 + m6._41;
			let py6 = _this_x6 * m6._12 + _this_y6 * m6._22 + _this_z6 * m6._32 + m6._42;
			let pz6 = _this_x6 * m6._13 + _this_y6 * m6._23 + _this_z6 * m6._33 + m6._43;
			_this_x6 = px6;
			_this_y6 = py6;
			_this_z6 = pz6;
			let x20 = _this_x6;
			let y20 = _this_y6;
			let z20 = _this_z6;
			if(x20 < cameraBounds.xMin) {
				cameraBounds.xMin = x20;
			}
			if(x20 > cameraBounds.xMax) {
				cameraBounds.xMax = x20;
			}
			if(y20 < cameraBounds.yMin) {
				cameraBounds.yMin = y20;
			}
			if(y20 > cameraBounds.yMax) {
				cameraBounds.yMax = y20;
			}
			if(z20 < cameraBounds.zMin) {
				cameraBounds.zMin = z20;
			}
			if(z20 > cameraBounds.zMax) {
				cameraBounds.zMax = z20;
			}
			let dist7 = maxDist;
			let this8 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist7));
			let x21 = this8.x;
			let y21 = this8.y;
			let z21 = this8.z;
			if(z21 == null) {
				z21 = 0.;
			}
			if(y21 == null) {
				y21 = 0.;
			}
			if(x21 == null) {
				x21 = 0.;
			}
			let x22 = x21;
			let y22 = y21;
			let z22 = z21;
			if(z22 == null) {
				z22 = 0.;
			}
			if(y22 == null) {
				y22 = 0.;
			}
			if(x22 == null) {
				x22 = 0.;
			}
			let _this_x7 = x22;
			let _this_y7 = y22;
			let _this_z7 = z22;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				let this1 = _gthis.ctx.camera.pos;
				let x = this1.x;
				let y = this1.y;
				let z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let p1_x = x1;
				let p1_y = y1;
				let p1_z = z1;
				let r = new h3d.col.Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x7 - p1_x;
				r.ly = _this_y7 - p1_y;
				r.lz = _this_z7 - p1_z;
				r.normalize();
				let r1 = r;
				let v = zMin;
				if(v == null) {
					v = 0.0;
				}
				let p_nx = 0;
				let p_ny = 0;
				let p_nz = 1;
				let p_d = v;
				let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				let d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				let k = -1;
				if(d2 > 0 && d2 * k > dist7 * k) {
					let x = r1.px + d2 * r1.lx;
					let y = r1.py + d2 * r1.ly;
					let z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let v_x = x1;
					let v_y = y1;
					let v_z = z1;
					_this_x7 = v_x;
					_this_y7 = v_y;
					_this_z7 = v_z;
				}
			}
			let m7 = camera.mcam;
			let px7 = _this_x7 * m7._11 + _this_y7 * m7._21 + _this_z7 * m7._31 + m7._41;
			let py7 = _this_x7 * m7._12 + _this_y7 * m7._22 + _this_z7 * m7._32 + m7._42;
			let pz7 = _this_x7 * m7._13 + _this_y7 * m7._23 + _this_z7 * m7._33 + m7._43;
			_this_x7 = px7;
			_this_y7 = py7;
			_this_z7 = pz7;
			let x23 = _this_x7;
			let y23 = _this_y7;
			let z23 = _this_z7;
			if(x23 < cameraBounds.xMin) {
				cameraBounds.xMin = x23;
			}
			if(x23 > cameraBounds.xMax) {
				cameraBounds.xMax = x23;
			}
			if(y23 < cameraBounds.yMin) {
				cameraBounds.yMin = y23;
			}
			if(y23 > cameraBounds.yMax) {
				cameraBounds.yMax = y23;
			}
			if(z23 < cameraBounds.zMin) {
				cameraBounds.zMin = z23;
			}
			if(z23 > cameraBounds.zMax) {
				cameraBounds.zMax = z23;
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
				if(this.autoZPlanes) {
					let this1 = camera.target;
					let v = camera.pos;
					let x = this1.x - v.x;
					let y = this1.y - v.y;
					let z = this1.z - v.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let _this_x = x1;
					let _this_y = y1;
					let _this_z = z1;
					let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					let x2 = _this_x * k;
					let y2 = _this_y * k;
					let z2 = _this_z * k;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					let x3 = x2;
					let y3 = y2;
					let z3 = z2;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					let v_x = x3;
					let v_y = y3;
					let v_z = z3;
					let dMin = 1e9;
					let px = bounds.xMin;
					let py = bounds.yMin;
					let x4 = px;
					let y4 = py;
					let z4 = bounds.zMin;
					if(z4 == null) {
						z4 = 0.;
					}
					if(y4 == null) {
						y4 = 0.;
					}
					if(x4 == null) {
						x4 = 0.;
					}
					let x5 = x4;
					let y5 = y4;
					let z5 = z4;
					if(z5 == null) {
						z5 = 0.;
					}
					if(y5 == null) {
						y5 = 0.;
					}
					if(x5 == null) {
						x5 = 0.;
					}
					let this_x = x5;
					let this_y = y5;
					let this_z = z5;
					let m = camera.getInverseView();
					let px1 = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					let py1 = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					let pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					let x6 = px1;
					let y6 = py1;
					let z6 = pz;
					if(z6 == null) {
						z6 = 0.;
					}
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					let x7 = x6;
					let y7 = y6;
					let z7 = z6;
					if(z7 == null) {
						z7 = 0.;
					}
					if(y7 == null) {
						y7 = 0.;
					}
					if(x7 == null) {
						x7 = 0.;
					}
					let r0_x = x7;
					let r0_y = y7;
					let r0_z = z7;
					let r = new h3d.col.Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					let r1 = r;
					let v1 = zMax;
					if(v1 == null) {
						v1 = 0.0;
					}
					let p_nx = 0;
					let p_ny = 0;
					let p_nz = 1;
					let p_d = v1;
					let d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					let nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					let d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					let px2 = bounds.xMin;
					let py2 = bounds.yMax;
					let x8 = px2;
					let y8 = py2;
					let z8 = bounds.zMin;
					if(z8 == null) {
						z8 = 0.;
					}
					if(y8 == null) {
						y8 = 0.;
					}
					if(x8 == null) {
						x8 = 0.;
					}
					let x9 = x8;
					let y9 = y8;
					let z9 = z8;
					if(z9 == null) {
						z9 = 0.;
					}
					if(y9 == null) {
						y9 = 0.;
					}
					if(x9 == null) {
						x9 = 0.;
					}
					let this_x1 = x9;
					let this_y1 = y9;
					let this_z1 = z9;
					let m1 = camera.getInverseView();
					let px3 = this_x1 * m1._11 + this_y1 * m1._21 + this_z1 * m1._31 + m1._41;
					let py3 = this_x1 * m1._12 + this_y1 * m1._22 + this_z1 * m1._32 + m1._42;
					let pz1 = this_x1 * m1._13 + this_y1 * m1._23 + this_z1 * m1._33 + m1._43;
					let x10 = px3;
					let y10 = py3;
					let z10 = pz1;
					if(z10 == null) {
						z10 = 0.;
					}
					if(y10 == null) {
						y10 = 0.;
					}
					if(x10 == null) {
						x10 = 0.;
					}
					let x11 = x10;
					let y11 = y10;
					let z11 = z10;
					if(z11 == null) {
						z11 = 0.;
					}
					if(y11 == null) {
						y11 = 0.;
					}
					if(x11 == null) {
						x11 = 0.;
					}
					let r0_x1 = x11;
					let r0_y1 = y11;
					let r0_z1 = z11;
					let r2 = new h3d.col.Ray();
					r2.px = r0_x1;
					r2.py = r0_y1;
					r2.pz = r0_z1;
					r2.lx = v_x;
					r2.ly = v_y;
					r2.lz = v_z;
					r2.normalize();
					let r3 = r2;
					let v2 = zMax;
					if(v2 == null) {
						v2 = 0.0;
					}
					let p_nx1 = 0;
					let p_ny1 = 0;
					let p_nz1 = 1;
					let p_d1 = v2;
					let d2 = r3.lx * p_nx1 + r3.ly * p_ny1 + r3.lz * p_nz1;
					let nd1 = p_d1 - (r3.px * p_nx1 + r3.py * p_ny1 + r3.pz * p_nz1);
					let d3 = (d2 < 0 ? -d2 : d2) < 1e-10 ? (nd1 < 0 ? -nd1 : nd1) < 1e-10 ? 0. : -1 : nd1 / d2;
					if(d3 < dMin) {
						dMin = d3;
					}
					let px4 = bounds.xMax;
					let py4 = bounds.yMin;
					let x12 = px4;
					let y12 = py4;
					let z12 = bounds.zMin;
					if(z12 == null) {
						z12 = 0.;
					}
					if(y12 == null) {
						y12 = 0.;
					}
					if(x12 == null) {
						x12 = 0.;
					}
					let x13 = x12;
					let y13 = y12;
					let z13 = z12;
					if(z13 == null) {
						z13 = 0.;
					}
					if(y13 == null) {
						y13 = 0.;
					}
					if(x13 == null) {
						x13 = 0.;
					}
					let this_x2 = x13;
					let this_y2 = y13;
					let this_z2 = z13;
					let m2 = camera.getInverseView();
					let px5 = this_x2 * m2._11 + this_y2 * m2._21 + this_z2 * m2._31 + m2._41;
					let py5 = this_x2 * m2._12 + this_y2 * m2._22 + this_z2 * m2._32 + m2._42;
					let pz2 = this_x2 * m2._13 + this_y2 * m2._23 + this_z2 * m2._33 + m2._43;
					let x14 = px5;
					let y14 = py5;
					let z14 = pz2;
					if(z14 == null) {
						z14 = 0.;
					}
					if(y14 == null) {
						y14 = 0.;
					}
					if(x14 == null) {
						x14 = 0.;
					}
					let x15 = x14;
					let y15 = y14;
					let z15 = z14;
					if(z15 == null) {
						z15 = 0.;
					}
					if(y15 == null) {
						y15 = 0.;
					}
					if(x15 == null) {
						x15 = 0.;
					}
					let r0_x2 = x15;
					let r0_y2 = y15;
					let r0_z2 = z15;
					let r4 = new h3d.col.Ray();
					r4.px = r0_x2;
					r4.py = r0_y2;
					r4.pz = r0_z2;
					r4.lx = v_x;
					r4.ly = v_y;
					r4.lz = v_z;
					r4.normalize();
					let r5 = r4;
					let v3 = zMax;
					if(v3 == null) {
						v3 = 0.0;
					}
					let p_nx2 = 0;
					let p_ny2 = 0;
					let p_nz2 = 1;
					let p_d2 = v3;
					let d4 = r5.lx * p_nx2 + r5.ly * p_ny2 + r5.lz * p_nz2;
					let nd2 = p_d2 - (r5.px * p_nx2 + r5.py * p_ny2 + r5.pz * p_nz2);
					let d5 = (d4 < 0 ? -d4 : d4) < 1e-10 ? (nd2 < 0 ? -nd2 : nd2) < 1e-10 ? 0. : -1 : nd2 / d4;
					if(d5 < dMin) {
						dMin = d5;
					}
					let px6 = bounds.xMax;
					let py6 = bounds.yMax;
					let x16 = px6;
					let y16 = py6;
					let z16 = bounds.zMin;
					if(z16 == null) {
						z16 = 0.;
					}
					if(y16 == null) {
						y16 = 0.;
					}
					if(x16 == null) {
						x16 = 0.;
					}
					let x17 = x16;
					let y17 = y16;
					let z17 = z16;
					if(z17 == null) {
						z17 = 0.;
					}
					if(y17 == null) {
						y17 = 0.;
					}
					if(x17 == null) {
						x17 = 0.;
					}
					let this_x3 = x17;
					let this_y3 = y17;
					let this_z3 = z17;
					let m3 = camera.getInverseView();
					let px7 = this_x3 * m3._11 + this_y3 * m3._21 + this_z3 * m3._31 + m3._41;
					let py7 = this_x3 * m3._12 + this_y3 * m3._22 + this_z3 * m3._32 + m3._42;
					let pz3 = this_x3 * m3._13 + this_y3 * m3._23 + this_z3 * m3._33 + m3._43;
					let x18 = px7;
					let y18 = py7;
					let z18 = pz3;
					if(z18 == null) {
						z18 = 0.;
					}
					if(y18 == null) {
						y18 = 0.;
					}
					if(x18 == null) {
						x18 = 0.;
					}
					let x19 = x18;
					let y19 = y18;
					let z19 = z18;
					if(z19 == null) {
						z19 = 0.;
					}
					if(y19 == null) {
						y19 = 0.;
					}
					if(x19 == null) {
						x19 = 0.;
					}
					let r0_x3 = x19;
					let r0_y3 = y19;
					let r0_z3 = z19;
					let r6 = new h3d.col.Ray();
					r6.px = r0_x3;
					r6.py = r0_y3;
					r6.pz = r0_z3;
					r6.lx = v_x;
					r6.ly = v_y;
					r6.lz = v_z;
					r6.normalize();
					let r7 = r6;
					let v4 = zMax;
					if(v4 == null) {
						v4 = 0.0;
					}
					let p_nx3 = 0;
					let p_ny3 = 0;
					let p_nz3 = 1;
					let p_d3 = v4;
					let d6 = r7.lx * p_nx3 + r7.ly * p_ny3 + r7.lz * p_nz3;
					let nd3 = p_d3 - (r7.px * p_nx3 + r7.py * p_ny3 + r7.pz * p_nz3);
					let d7 = (d6 < 0 ? -d6 : d6) < 1e-10 ? (nd3 < 0 ? -nd3 : nd3) < 1e-10 ? 0. : -1 : nd3 / d6;
					if(d7 < dMin) {
						dMin = d7;
					}
					bounds.zMin += dMin;
				}
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	syncShader(texture) {
		let _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		let _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d.mat.Texture.nativeFormat ? hxsl.Channel.PackedFloat : hxsl.Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		let _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d.pass.ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		let _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d.pass.ShadowSamplingKind.PCF;
		let _this4 = this.dshader.shadowRes__;
		let x = texture.width;
		let y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		this.dshader.pcfScale__ = this.pcfScale;
		this.dshader.set_pcfQuality(this.pcfQuality);
	}
	saveStaticData() {
		if(this.mode != h3d.pass.RenderMode.Mixed && this.mode != h3d.pass.RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw haxe.Exception.thrown("Data not computed");
		}
		let bytes = haxe.zip.Compress.run(this.staticTexture.capturePixels().bytes,9);
		let buffer = new haxe.io.BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		buffer.addFloat(this.lightCamera.pos.x);
		buffer.addFloat(this.lightCamera.pos.y);
		buffer.addFloat(this.lightCamera.pos.z);
		buffer.addFloat(this.lightCamera.target.x);
		buffer.addFloat(this.lightCamera.target.y);
		buffer.addFloat(this.lightCamera.target.z);
		buffer.addFloat(this.lightCamera.orthoBounds.xMin);
		buffer.addFloat(this.lightCamera.orthoBounds.yMin);
		buffer.addFloat(this.lightCamera.orthoBounds.zMin);
		buffer.addFloat(this.lightCamera.orthoBounds.xMax);
		buffer.addFloat(this.lightCamera.orthoBounds.yMax);
		buffer.addFloat(this.lightCamera.orthoBounds.zMax);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	loadStaticData(bytes) {
		if(this.mode != h3d.pass.RenderMode.Mixed && this.mode != h3d.pass.RenderMode.Static || bytes == null) {
			return false;
		}
		let buffer = new haxe.io.BytesInput(bytes);
		let size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.lightCamera.pos.x = buffer.readFloat();
		this.lightCamera.pos.y = buffer.readFloat();
		this.lightCamera.pos.z = buffer.readFloat();
		this.lightCamera.target.x = buffer.readFloat();
		this.lightCamera.target.y = buffer.readFloat();
		this.lightCamera.target.z = buffer.readFloat();
		this.lightCamera.orthoBounds.xMin = buffer.readFloat();
		this.lightCamera.orthoBounds.yMin = buffer.readFloat();
		this.lightCamera.orthoBounds.zMin = buffer.readFloat();
		this.lightCamera.orthoBounds.xMax = buffer.readFloat();
		this.lightCamera.orthoBounds.yMax = buffer.readFloat();
		this.lightCamera.orthoBounds.zMax = buffer.readFloat();
		this.lightCamera.update();
		let len = buffer.readInt32();
		let pixels = new hxd.Pixels(size,size,haxe.zip.Uncompress.run(buffer.read(len)),this.format);
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d.mat.Texture(size,size,[h3d.mat.TextureFlags.Target],this.format);
		this.staticTexture.uploadPixels(pixels);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.syncShader(this.staticTexture);
		return true;
	}
	processShadowMap(passes,tex,sort) {
		let _this = this.ctx;
		let prevViewProj = _this.globals.map.h[_this.cameraViewProj_id];
		let _this1 = this.ctx;
		let v = this.getShadowProj();
		_this1.globals.map.h[_this1.cameraViewProj_id] = v;
		if(tex.isDepth()) {
			this.ctx.engine.pushDepth(tex);
			this.ctx.engine.clear(null,1.0);
		} else {
			this.ctx.engine.pushTarget(tex);
			this.ctx.engine.clear(16777215);
		}
		super.draw(passes,sort);
		let doBlur = this.blur.radius > 0 && (this.mode != h3d.pass.RenderMode.Mixed || !this.ctx.computingStatic);
		if(this.border != null && !doBlur) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d.pass.RenderMode.Mixed && !this.ctx.computingStatic) {
			let merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = tex;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			tex = merge;
		}
		if(doBlur) {
			if(tex.isDepth()) {
				let tmp = this.ctx.textures.allocTarget("dirShadowMapFloat",this.size,this.size,false,this.format);
				h3d.pass.Copy.run(tex,tmp);
				tex = tmp;
			}
			this.blur.apply(this.ctx,tex);
			if(this.border != null) {
				this.ctx.engine.pushTarget(tex);
				this.border.render();
				this.ctx.engine.popTarget();
			}
		}
		let _this2 = this.ctx;
		_this2.globals.map.h[_this2.cameraViewProj_id] = prevViewProj;
		return tex;
	}
	draw(passes,sort) {
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		if(this.mode != h3d.pass.RenderMode.Mixed || this.ctx.computingStatic) {
			let ct = this.ctx.camera.target;
			let slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			let ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				let _this = this.lightCamera.target;
				let x = 0;
				let y = 0;
				let z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				let _this = this.lightCamera.target;
				let x = ldir.x;
				let y = ldir.y;
				let z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				let _this1 = this.lightCamera.target;
				let k = _this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z;
				if(k < 1e-20) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this1.x *= k;
				_this1.y *= k;
				_this1.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			let _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			this.lightCamera.update();
			let _this1 = this.lightCamera.orthoBounds;
			_this1.xMin = 1e20;
			_this1.xMax = -1e20;
			_this1.yMin = 1e20;
			_this1.yMax = -1e20;
			_this1.zMin = 1e20;
			_this1.zMax = -1e20;
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			this.lightCamera.update();
		}
		let _gthis = this;
		let f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		let prevCollider = null;
		let prevResult = true;
		let head = null;
		let prev = null;
		let disc = passes.discarded;
		let discQueue = passes.lastDisc;
		let cur = passes.current;
		while(cur != null) {
			let col = cur.obj.cullingCollider;
			let tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		let texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		let tmp;
		if(!(this.depth == null || this.depth.width != this.size || this.depth.height != this.size)) {
			let _this = this.depth;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d.mat.Texture(this.size,this.size,null,hxd.PixelFormat.Depth24Stencil8);
			this.depth.name = "dirShadowMapDepth";
		}
		texture.depthBuffer = this.depth;
		texture = this.processShadowMap(passes,texture,sort);
		this.syncShader(texture);
	}
	computeStatic(passes) {
		if(this.mode != h3d.pass.RenderMode.Static && this.mode != h3d.pass.RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
		let texture = this.dshader.shadowMap__;
		let old = this.staticTexture;
		this.staticTexture = texture.clone();
		this.staticTexture.name = "StaticDirShadowMap";
		this.staticTexture.preventAutoDispose();
		let _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = this.staticTexture;
		if(old != null) {
			old.dispose();
		}
	}
	drawDebug() {
		if(this.g == null) {
			this.g = new h3d.scene.Graphics(this.ctx.scene);
			this.g.name = "frustumDebug";
			this.g.material.passes.setPassName("overlay");
			let _this = this.g;
			let f = 512;
			_this.flags |= f;
		}
		if(!this.debug) {
			return;
		}
		this.g.clear();
		this.drawBounds(this.lightCamera,16777215);
	}
	drawBounds(camera,color) {
		let nearPlaneCorner = [camera.unproject(-1,1,0),camera.unproject(1,1,0),camera.unproject(1,-1,0),camera.unproject(-1,-1,0)];
		let farPlaneCorner = [camera.unproject(-1,1,1),camera.unproject(1,1,1),camera.unproject(1,-1,1),camera.unproject(-1,-1,1)];
		this.g.lineStyle(1,color);
		let last = nearPlaneCorner[nearPlaneCorner.length - 1];
		this.g.moveTo(last.x,last.y,last.z);
		let _g = 0;
		while(_g < nearPlaneCorner.length) {
			let fc = nearPlaneCorner[_g];
			++_g;
			this.g.lineTo(fc.x,fc.y,fc.z);
		}
		let last1 = farPlaneCorner[farPlaneCorner.length - 1];
		this.g.moveTo(last1.x,last1.y,last1.z);
		let _g1 = 0;
		while(_g1 < farPlaneCorner.length) {
			let fc = farPlaneCorner[_g1];
			++_g1;
			this.g.lineTo(fc.x,fc.y,fc.z);
		}
		let np = nearPlaneCorner[0];
		let fp = farPlaneCorner[0];
		this.g.moveTo(np.x,np.y,np.z);
		this.g.lineTo(fp.x,fp.y,fp.z);
		let np1 = nearPlaneCorner[1];
		let fp1 = farPlaneCorner[1];
		this.g.moveTo(np1.x,np1.y,np1.z);
		this.g.lineTo(fp1.x,fp1.y,fp1.z);
		let np2 = nearPlaneCorner[2];
		let fp2 = farPlaneCorner[2];
		this.g.moveTo(np2.x,np2.y,np2.z);
		this.g.lineTo(fp2.x,fp2.y,fp2.z);
		let np3 = nearPlaneCorner[3];
		let fp3 = farPlaneCorner[3];
		this.g.moveTo(np3.x,np3.y,np3.z);
		this.g.lineTo(fp3.x,fp3.y,fp3.z);
	}
}
$hxClasses["h3d.pass.DirShadowMap"] = h3d.pass.DirShadowMap;
h3d.pass.DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d.pass.DirShadowMap.__super__ = h3d.pass.Shadows;
Object.assign(h3d.pass.DirShadowMap.prototype, {
	__class__: h3d.pass.DirShadowMap
});
h3d.pass.DefaultShadowMap = class h3d_pass_DefaultShadowMap extends h3d.pass.DirShadowMap {
	constructor(size,format1) {
		h3d.pass.Output._hx_skip_constructor = true;
		super();
		h3d.pass.Output._hx_skip_constructor = false;
		this._hx_constructor(size,format1);
	}
	_hx_constructor(size,format1) {
		if(size == null) {
			size = 1024;
		}
		if(format1 != null) {
			this.format = format1;
		}
		super._hx_constructor(null);
		this.set_size(size);
		this.color = new h3d.VectorImpl(0.,0.,0.);
		this.set_mode(h3d.pass.RenderMode.Dynamic);
		this.shadowMapId = hxsl.Globals.allocID("shadow.map");
		this.shadowProjId = hxsl.Globals.allocID("shadow.proj");
		this.shadowColorId = hxsl.Globals.allocID("shadow.color");
		this.shadowPowerId = hxsl.Globals.allocID("shadow.power");
		this.shadowBiasId = hxsl.Globals.allocID("shadow.bias");
	}
	draw(passes,sort) {
		super.draw(passes,sort);
		this.ctx.globals.map.h[this.shadowMapId] = { texture : this.dshader.shadowMap__, channel : this.format == h3d.mat.Texture.nativeFormat ? hxsl.Channel.PackedFloat : hxsl.Channel.R};
		let _this = this.ctx.globals;
		let id = this.shadowProjId;
		let v = this.getShadowProj();
		_this.map.h[id] = v;
		this.ctx.globals.map.h[this.shadowColorId] = this.color;
		this.ctx.globals.map.h[this.shadowPowerId] = this.power;
		this.ctx.globals.map.h[this.shadowBiasId] = this.bias;
	}
}
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d.pass.DefaultShadowMap;
h3d.pass.DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d.pass.DefaultShadowMap.__super__ = h3d.pass.DirShadowMap;
Object.assign(h3d.pass.DefaultShadowMap.prototype, {
	__class__: h3d.pass.DefaultShadowMap
});
h3d.pass.OutputShader = class h3d_pass_OutputShader {
	constructor(output) {
		this.shaderCache = hxsl.Cache.get();
		this.currentOutput = new hxsl.ShaderList(null);
		this.setOutput(output);
	}
	setOutput(output) {
		if(output == null) {
			output = [hxsl.Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	compileShaders(globals,shaders,mode) {
		if(mode == null) {
			mode = hxsl.LinkMode.Default;
		}
		globals.maxChannels = 0;
		let _g_l = shaders;
		let _g_last = null;
		while(_g_l != _g_last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			let s1 = s;
			s1.updateConstants(globals);
		}
		this.currentOutput.next = shaders;
		let s = this.shaderCache.link(this.currentOutput,mode);
		this.currentOutput.next = null;
		return s;
	}
}
$hxClasses["h3d.pass.OutputShader"] = h3d.pass.OutputShader;
h3d.pass.OutputShader.__name__ = "h3d.pass.OutputShader";
Object.assign(h3d.pass.OutputShader.prototype, {
	__class__: h3d.pass.OutputShader
});
h3d.pass.PassListIterator = class h3d_pass_PassListIterator {
	constructor(o) {
		this.o = o;
	}
	hasNext() {
		return this.o != null;
	}
	next() {
		let tmp = this.o;
		this.o = this.o.next;
		return tmp;
	}
}
$hxClasses["h3d.pass.PassListIterator"] = h3d.pass.PassListIterator;
h3d.pass.PassListIterator.__name__ = "h3d.pass.PassListIterator";
Object.assign(h3d.pass.PassListIterator.prototype, {
	__class__: h3d.pass.PassListIterator
});
h3d.pass.PassList = class h3d_pass_PassList {
	constructor(current) {
		this.current = current;
		this.discarded = this.lastDisc = null;
	}
	init(pass) {
		this.current = pass;
		this.discarded = this.lastDisc = null;
	}
	reset() {
		if(this.discarded != null) {
			this.lastDisc.next = this.current;
			this.current = this.discarded;
			this.discarded = this.lastDisc = null;
		}
	}
	count() {
		let c = this.current;
		let n = 0;
		while(c != null) {
			++n;
			c = c.next;
		}
		return n;
	}
	save() {
		return this.lastDisc;
	}
	load(p) {
		if(this.lastDisc != p) {
			this.lastDisc.next = this.current;
			if(p == null) {
				this.current = this.discarded;
				this.discarded = null;
			} else {
				this.current = p.next;
				p.next = null;
			}
			this.lastDisc = p;
		}
	}
	isEmpty() {
		return this.current == null;
	}
	clear() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		let p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	sort(f) {
		let list = this.current;
		let tmp;
		if(list == null) {
			tmp = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						let i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || f(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.current = tmp;
	}
	filter(f) {
		let head = null;
		let prev = null;
		let disc = this.discarded;
		let discQueue = this.lastDisc;
		let cur = this.current;
		while(cur != null) {
			if(f(cur)) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		this.current = head;
		this.discarded = disc;
		this.lastDisc = discQueue;
	}
	iterator() {
		return new h3d.pass.PassListIterator(this.current);
	}
	getFiltered() {
		return new h3d.pass.PassListIterator(this.discarded);
	}
}
$hxClasses["h3d.pass.PassList"] = h3d.pass.PassList;
h3d.pass.PassList.__name__ = "h3d.pass.PassList";
Object.assign(h3d.pass.PassList.prototype, {
	__class__: h3d.pass.PassList
});
h3d.pass.PassObject = class h3d_pass_PassObject {
	constructor() {
		this.texture = 0;
	}
}
$hxClasses["h3d.pass.PassObject"] = h3d.pass.PassObject;
h3d.pass.PassObject.__name__ = "h3d.pass.PassObject";
Object.assign(h3d.pass.PassObject.prototype, {
	__class__: h3d.pass.PassObject
});
h3d.pass.RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_name:"Static",_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_name:"Mixed",_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d.pass.RenderMode.__constructs__ = [h3d.pass.RenderMode.None,h3d.pass.RenderMode.Static,h3d.pass.RenderMode.Dynamic,h3d.pass.RenderMode.Mixed];
h3d.pass.RenderMode.__empty_constructs__ = [h3d.pass.RenderMode.None,h3d.pass.RenderMode.Static,h3d.pass.RenderMode.Dynamic,h3d.pass.RenderMode.Mixed];
h3d.pass.ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_name:"PCF",_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_name:"ESM",_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d.pass.ShadowSamplingKind.__constructs__ = [h3d.pass.ShadowSamplingKind.None,h3d.pass.ShadowSamplingKind.PCF,h3d.pass.ShadowSamplingKind.ESM];
h3d.pass.ShadowSamplingKind.__empty_constructs__ = [h3d.pass.ShadowSamplingKind.None,h3d.pass.ShadowSamplingKind.PCF,h3d.pass.ShadowSamplingKind.ESM];
h3d.pass.SortByMaterial = class h3d_pass_SortByMaterial {
	constructor() {
		this.textureCount = 1;
		this.shaderCount = 1;
		this.shaderIdMap = [];
		this.textureIdMap = [];
	}
	sort(passes) {
		let shaderStart = this.shaderCount;
		let textureStart = this.textureCount;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		let _gthis = this;
		let list = passes.current;
		let tmp;
		if(list == null) {
			tmp = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						let i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							let tmp;
							if(!(qsize == 0 || q == null)) {
								let tmp1;
								if(p.pass.layer != q.pass.layer) {
									tmp1 = p.pass.layer - q.pass.layer;
								} else {
									let d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
									tmp1 = d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture];
								}
								tmp = tmp1 <= 0;
							} else {
								tmp = true;
							}
							if(tmp) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
}
$hxClasses["h3d.pass.SortByMaterial"] = h3d.pass.SortByMaterial;
h3d.pass.SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
Object.assign(h3d.pass.SortByMaterial.prototype, {
	__class__: h3d.pass.SortByMaterial
});
h3d.prim.BigPrimitive = class h3d_prim_BigPrimitive extends h3d.prim.Primitive {
	constructor(format1,alloc) {
		h3d.prim.Primitive._hx_skip_constructor = true;
		super();
		h3d.prim.Primitive._hx_skip_constructor = false;
		this._hx_constructor(format1,alloc);
	}
	_hx_constructor(format1,alloc) {
		this.isStatic = true;
		this.hasTangents = false;
		this.startIndex = 0;
		this.idxPos = 0;
		this.bufPos = 0;
		super._hx_constructor();
		this.format = format1;
		this.buffers = [];
		this.allIndexes = [];
		this.bounds = new h3d.col.Bounds();
		this.allocator = alloc;
		if(format1.stride < 3) {
			throw haxe.Exception.thrown("Minimum stride = 3");
		}
	}
	begin(vcount,icount) {
		this.startIndex = this.bufPos / this.format.stride | 0;
		if(this.startIndex + vcount >= 65535) {
			if(vcount >= 65535) {
				throw haxe.Exception.thrown("Too many vertices in begin()");
			}
			this.flush();
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = h3d.prim.BigPrimitive.PREV_BUFFER;
			if(this.tmpBuf == null) {
				this.tmpBuf = hxd._FloatBuffer.Float32Expand._new(0);
			} else {
				h3d.prim.BigPrimitive.PREV_BUFFER = null;
			}
			if(this.isStatic) {
				let this1 = this.tmpBuf;
				let _g = this1.pos;
				let _g1 = 65535 * this.format.stride;
				while(_g < _g1) {
					let i = _g++;
					if(this1.pos == this1.array.length) {
						let newSize = this1.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(this1.array);
						this1.array = newArray;
					}
					this1.array[this1.pos++] = 0.;
				}
			}
		}
		if(!this.isStatic) {
			let this1 = this.tmpBuf;
			let _g = this1.pos;
			let _g1 = vcount * this.format.stride + this.bufPos;
			while(_g < _g1) {
				let i = _g++;
				if(this1.pos == this1.array.length) {
					let newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = 0.;
			}
		}
		if(this.tmpIdx == null) {
			this.tmpIdx = h3d.prim.BigPrimitive.PREV_INDEX;
			if(this.tmpIdx == null) {
				this.tmpIdx = new Array(0);
			} else {
				h3d.prim.BigPrimitive.PREV_INDEX = null;
			}
		}
		if(this.idxPos + icount > this.tmpIdx.length) {
			let size = this.tmpIdx.length == 0 ? 1024 : this.tmpIdx.length;
			let req = this.idxPos + icount;
			while(size < req) size <<= 1;
			let this1 = this.tmpIdx;
			while(this1.length < size) this1.push(0);
		}
	}
	addPoint(x,y,z) {
		this.tmpBuf.array[this.bufPos++] = x;
		this.tmpBuf.array[this.bufPos++] = y;
		this.tmpBuf.array[this.bufPos++] = z;
		let _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	addBounds(x,y,z) {
		let _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	addVertexValue(v) {
		this.tmpBuf.array[this.bufPos++] = v;
	}
	addIndex(i) {
		this.tmpIdx[this.idxPos++] = i + this.startIndex;
	}
	triCount() {
		let count = 0;
		let _g = 0;
		let _g1 = this.allIndexes;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			count += i.vertices;
		}
		count += this.idxPos;
		return count / 3 | 0;
	}
	vertexCount() {
		let count = 0;
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			count += b.vertices;
		}
		count += this.bufPos / this.format.stride | 0;
		return count;
	}
	flush() {
		if(this.tmpBuf != null) {
			if(this.bufPos > 0 && this.idxPos > 0) {
				this.flushing = true;
				let b;
				if(this.allocator != null) {
					b = this.allocator.ofSubFloats(this.tmpBuf,this.bufPos / this.format.stride | 0,this.format);
				} else {
					b = h3d.Buffer.ofSubFloats(this.tmpBuf,this.bufPos / this.format.stride | 0,this.format);
				}
				this.buffers.push(b);
				let idx = this.allocator != null ? this.allocator.ofIndexes(this.tmpIdx,this.idxPos) : h3d.Indexes.alloc(this.tmpIdx,0,this.idxPos);
				this.allIndexes.push(idx);
				this.flushing = false;
			}
			if(h3d.prim.BigPrimitive.PREV_BUFFER == null || h3d.prim.BigPrimitive.PREV_BUFFER.pos < this.tmpBuf.pos) {
				h3d.prim.BigPrimitive.PREV_BUFFER = this.tmpBuf;
			}
			if(h3d.prim.BigPrimitive.PREV_INDEX == null || h3d.prim.BigPrimitive.PREV_INDEX.length < this.tmpIdx.length) {
				h3d.prim.BigPrimitive.PREV_INDEX = this.tmpIdx;
			}
			this.tmpBuf = null;
			this.tmpIdx = null;
			this.bufPos = 0;
			this.idxPos = 0;
			this.startIndex = 0;
		}
	}
	render(engine) {
		if(this.tmpBuf != null) {
			this.flush();
		}
		let _g = 0;
		let _g1 = this.buffers.length;
		while(_g < _g1) {
			let i = _g++;
			engine.renderIndexed(this.buffers[i],this.allIndexes[i]);
		}
	}
	getBounds() {
		return this.bounds;
	}
	dispose() {
		this.clear();
	}
	clear() {
		if(this.flushing) {
			throw haxe.Exception.thrown("Cannot clear() BigPrimitive while it's flushing");
		}
		let _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(this.allocator != null) {
				this.allocator.disposeBuffer(b);
			} else {
				b.dispose();
			}
		}
		let _g2 = 0;
		let _g3 = this.allIndexes;
		while(_g2 < _g3.length) {
			let i = _g3[_g2];
			++_g2;
			if(this.allocator != null) {
				this.allocator.disposeIndexBuffer(i);
			} else {
				i.dispose();
			}
		}
		this.buffers = [];
		this.allIndexes = [];
		this.bufPos = 0;
		this.idxPos = 0;
		this.tmpBuf = null;
		this.tmpIdx = null;
	}
	add(buf,idx,dx,dy,dz,rotation,scale,stride) {
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.addSub(buf,idx,0,0,buf.pos / (stride < 0 ? this.format.stride : stride) | 0,idx.length / 3 | 0,dx,dy,dz,rotation,scale,stride);
	}
	addSub(buf,idx,startVert,startTri,nvert,triCount,dx,dy,dz,rotation,scale,stride,deltaU,deltaV,color,mat) {
		if(color == null) {
			color = 1.;
		}
		if(deltaV == null) {
			deltaV = 0.;
		}
		if(deltaU == null) {
			deltaU = 0.;
		}
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		if(stride < 0) {
			stride = this.format.stride;
		}
		if(stride < this.format.stride) {
			throw haxe.Exception.thrown("only stride >= " + this.format.stride + " allowed");
		}
		this.begin(nvert,triCount * 3);
		let start = this.startIndex;
		let cr = Math.cos(rotation);
		let sr = Math.sin(rotation);
		let pos = this.bufPos;
		let tmpBuf = this.tmpBuf;
		let _g = 0;
		let _g1 = nvert;
		while(_g < _g1) {
			let i = _g++;
			let p = (i + startVert) * stride;
			let x = buf.array[p++];
			let y = buf.array[p++];
			let z = buf.array[p++];
			if(mat != null) {
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let x2 = x1;
				let y2 = y1;
				let z2 = z1;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let pt_x = x2;
				let pt_y = y2;
				let pt_z = z2;
				let px = pt_x * mat._11 + pt_y * mat._21 + pt_z * mat._31 + mat._41;
				let py = pt_x * mat._12 + pt_y * mat._22 + pt_z * mat._32 + mat._42;
				let pz = pt_x * mat._13 + pt_y * mat._23 + pt_z * mat._33 + mat._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				tmpBuf.array[pos++] = pt_x;
				tmpBuf.array[pos++] = pt_y;
				tmpBuf.array[pos++] = pt_z;
				let _this = this.bounds;
				if(pt_x < _this.xMin) {
					_this.xMin = pt_x;
				}
				if(pt_x > _this.xMax) {
					_this.xMax = pt_x;
				}
				if(pt_y < _this.yMin) {
					_this.yMin = pt_y;
				}
				if(pt_y > _this.yMax) {
					_this.yMax = pt_y;
				}
				if(pt_z < _this.zMin) {
					_this.zMin = pt_z;
				}
				if(pt_z > _this.zMax) {
					_this.zMax = pt_z;
				}
			} else {
				let tx = (x * cr - y * sr) * scale;
				let ty = (x * sr + y * cr) * scale;
				let vx = dx + tx;
				let vy = dy + ty;
				let vz = dz + z * scale;
				tmpBuf.array[pos++] = vx;
				tmpBuf.array[pos++] = vy;
				tmpBuf.array[pos++] = vz;
				let _this = this.bounds;
				if(vx < _this.xMin) {
					_this.xMin = vx;
				}
				if(vx > _this.xMax) {
					_this.xMax = vx;
				}
				if(vy < _this.yMin) {
					_this.yMin = vy;
				}
				if(vy > _this.yMax) {
					_this.yMax = vy;
				}
				if(vz < _this.zMin) {
					_this.zMin = vz;
				}
				if(vz > _this.zMax) {
					_this.zMax = vz;
				}
			}
			let stride1 = this.format.stride;
			if(stride1 >= 6) {
				let nx = buf.array[p++];
				let ny = buf.array[p++];
				let nz = buf.array[p++];
				if(mat != null) {
					let x = nx;
					let y = ny;
					let z = nz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let _this_x = x1;
					let _this_y = y1;
					let _this_z = z1;
					let px = _this_x * mat._11 + _this_y * mat._21 + _this_z * mat._31;
					let py = _this_x * mat._12 + _this_y * mat._22 + _this_z * mat._32;
					let pz = _this_x * mat._13 + _this_y * mat._23 + _this_z * mat._33;
					_this_x = px;
					_this_y = py;
					_this_z = pz;
					let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					_this_x *= k;
					_this_y *= k;
					_this_z *= k;
					tmpBuf.array[pos++] = _this_x;
					tmpBuf.array[pos++] = _this_y;
					tmpBuf.array[pos++] = _this_z;
				} else {
					let tnx = nx * cr - ny * sr;
					let tny = nx * sr + ny * cr;
					tmpBuf.array[pos++] = tnx;
					tmpBuf.array[pos++] = tny;
					tmpBuf.array[pos++] = nz;
				}
			}
			if(this.hasTangents) {
				let tx = buf.array[p++];
				let ty = buf.array[p++];
				let tz = buf.array[p++];
				if(mat != null) {
					let x = tx;
					let y = ty;
					let z = tz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let _this_x = x1;
					let _this_y = y1;
					let _this_z = z1;
					let len = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					let px = _this_x * mat._11 + _this_y * mat._21 + _this_z * mat._31;
					let py = _this_x * mat._12 + _this_y * mat._22 + _this_z * mat._32;
					let pz = _this_x * mat._13 + _this_y * mat._23 + _this_z * mat._33;
					_this_x = px;
					_this_y = py;
					_this_z = pz;
					let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					_this_x *= k;
					_this_y *= k;
					_this_z *= k;
					if(len < 0.5) {
						_this_x *= 0.5;
						_this_y *= 0.5;
						_this_z *= 0.5;
					}
					tmpBuf.array[pos++] = _this_x;
					tmpBuf.array[pos++] = _this_y;
					tmpBuf.array[pos++] = _this_z;
				} else {
					let tnx = tx * cr - ty * sr;
					let tny = tx * sr + ty * cr;
					tmpBuf.array[pos++] = tnx;
					tmpBuf.array[pos++] = tny;
					tmpBuf.array[pos++] = tz;
				}
				stride1 -= 3;
			}
			switch(stride1) {
			case 3:case 6:
				continue;
			case 4:case 7:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				break;
			case 5:case 8:case 9:case 10:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				let _g1 = 8;
				let _g2 = stride1;
				while(_g1 < _g2) {
					let i = _g1++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
				break;
			default:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				let _g3 = 11;
				let _g4 = stride1;
				while(_g3 < _g4) {
					let i = _g3++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
			}
		}
		this.bufPos = pos;
		start -= startVert;
		let _g2 = 0;
		let _g3 = triCount * 3;
		while(_g2 < _g3) {
			let i = _g2++;
			let tmp = idx[i + startTri * 3] + start;
			this.tmpIdx[this.idxPos++] = tmp;
		}
	}
}
$hxClasses["h3d.prim.BigPrimitive"] = h3d.prim.BigPrimitive;
h3d.prim.BigPrimitive.__name__ = "h3d.prim.BigPrimitive";
h3d.prim.BigPrimitive.__super__ = h3d.prim.Primitive;
Object.assign(h3d.prim.BigPrimitive.prototype, {
	__class__: h3d.prim.BigPrimitive
});
h3d.prim.MeshPrimitive = class h3d_prim_MeshPrimitive extends h3d.prim.Primitive {
	_hx_constructor() {
		super._hx_constructor();
	}
	hasInput(name) {
		return this.resolveBuffer(name) != null;
	}
	resolveBuffer(name) {
		if(this.buffers != null) {
			let _g = 0;
			let _g1 = this.buffers;
			while(_g < _g1.length) {
				let b = _g1[_g];
				++_g;
				if(b.format.hasInput(name)) {
					return b;
				}
			}
			return null;
		}
		if(this.buffer != null && this.buffer.format.hasInput(name)) {
			return this.buffer;
		}
		return null;
	}
	removeBuffer(buf) {
		if(this.buffers != null) {
			HxOverrides.remove(this.buffers,buf);
			if(buf == this.buffer) {
				this.buffer = this.buffers[this.buffers.length - 1];
			}
			if(this.buffers.length == 1) {
				this.buffers = null;
				this.formats = null;
			}
		} else if(this.buffer == buf) {
			this.buffer = null;
		}
	}
	addBuffer(buf) {
		if(this.buffer == null) {
			this.buffer = buf;
		} else {
			if(this.buffers == null) {
				if(buf == this.buffer) {
					throw haxe.Exception.thrown("Duplicate addBuffer()");
				}
				this.buffers = [this.buffer];
			} else if(this.buffers.indexOf(buf) >= 0) {
				throw haxe.Exception.thrown("Duplicate addBuffer()");
			}
			this.buffers.unshift(buf);
			let _g = [];
			let _g1 = 0;
			let _g2 = this.buffers;
			while(_g1 < _g2.length) {
				let b = _g2[_g1];
				++_g1;
				_g.push(b.format);
			}
			this.formats = hxd.MultiFormat.make(_g);
		}
	}
	dispose() {
		super.dispose();
		if(this.buffers != null) {
			let _g = 0;
			let _g1 = this.buffers;
			while(_g < _g1.length) {
				let b = _g1[_g];
				++_g;
				b.dispose();
			}
			this.buffers = null;
			this.formats = null;
		}
	}
	render(engine) {
		if(this.indexes == null || this.indexes.vbuf == null || this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
}
$hxClasses["h3d.prim.MeshPrimitive"] = h3d.prim.MeshPrimitive;
h3d.prim.MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d.prim.MeshPrimitive.__super__ = h3d.prim.Primitive;
Object.assign(h3d.prim.MeshPrimitive.prototype, {
	__class__: h3d.prim.MeshPrimitive
});
h3d.prim.Polygon = class h3d_prim_Polygon extends h3d.prim.MeshPrimitive {
	constructor(points,idx) {
		if(h3d.prim.Primitive._hx_skip_constructor) {
			super();
			return;
		}
		h3d.prim.Primitive._hx_skip_constructor = true;
		super();
		h3d.prim.Primitive._hx_skip_constructor = false;
		this._hx_constructor(points,idx);
	}
	_hx_constructor(points,idx) {
		this.translatedZ = 0.;
		this.translatedY = 0.;
		this.translatedX = 0.;
		this.scaled = 1.;
		super._hx_constructor();
		this.points = points;
		this.idx = idx;
	}
	getBounds() {
		let b = new h3d.col.Bounds();
		let _g = 0;
		let _g1 = this.points;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	alloc(engine) {
		this.dispose();
		let format1 = hxd.BufferFormat.get_POS3D();
		if(this.normals != null) {
			format1 = format1.append("normal",3);
		}
		if(this.tangents != null) {
			format1 = format1.append("tangent",3);
		}
		if(this.uvs != null) {
			format1 = format1.append("uv",2);
		}
		if(this.colors != null) {
			format1 = format1.append("color",3);
		}
		let buf = hxd._FloatBuffer.Float32Expand._new(0);
		let _g = 0;
		let _g1 = this.points.length;
		while(_g < _g1) {
			let k = _g++;
			let p = this.points[k];
			let v = p.x;
			if(buf.pos == buf.array.length) {
				let newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v;
			let v1 = p.y;
			if(buf.pos == buf.array.length) {
				let newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v1;
			let v2 = p.z;
			if(buf.pos == buf.array.length) {
				let newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v2;
			if(this.normals != null) {
				let n = this.normals[k];
				let v = n.x;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v;
				let v1 = n.y;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v1;
				let v2 = n.z;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v2;
			}
			if(this.tangents != null) {
				let t = this.tangents[k];
				let v = t.x;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v;
				let v1 = t.y;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v1;
				let v2 = t.z;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v2;
			}
			if(this.uvs != null) {
				let t = this.uvs[k];
				let v = t.u;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v;
				let v1 = t.v;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v1;
			}
			if(this.colors != null) {
				let c = this.colors[k];
				let v = c.x;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v;
				let v1 = c.y;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v1;
				let v2 = c.z;
				if(buf.pos == buf.array.length) {
					let newSize = buf.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(buf.array);
					buf.array = newArray;
				}
				buf.array[buf.pos++] = v2;
			}
		}
		this.buffer = h3d.Buffer.ofFloats(buf,format1);
		if(this.idx != null) {
			this.indexes = h3d.Indexes.alloc(this.idx);
		}
	}
	unindex() {
		if(this.idx != null && this.points.length != this.idx.length) {
			let p = [];
			let _g = 0;
			let _g1 = this.idx.length;
			while(_g < _g1) {
				let i = _g++;
				let _this = this.points[this.idx[i]];
				let x = _this.x;
				let y = _this.y;
				let z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				p.push(new h3d.VectorImpl(x,y,z));
			}
			if(this.normals != null) {
				let n = [];
				let _g = 0;
				let _g1 = this.idx.length;
				while(_g < _g1) {
					let i = _g++;
					let _this = this.normals[this.idx[i]];
					let x = _this.x;
					let y = _this.y;
					let z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					n.push(new h3d.VectorImpl(x,y,z));
				}
				this.normals = n;
			}
			if(this.tangents != null) {
				let t = [];
				let _g = 0;
				let _g1 = this.idx.length;
				while(_g < _g1) {
					let i = _g++;
					let _this = this.tangents[this.idx[i]];
					let x = _this.x;
					let y = _this.y;
					let z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					t.push(new h3d.VectorImpl(x,y,z));
				}
				this.tangents = t;
			}
			if(this.colors != null) {
				let n = [];
				let _g = 0;
				let _g1 = this.idx.length;
				while(_g < _g1) {
					let i = _g++;
					let _this = this.colors[this.idx[i]];
					let x = _this.x;
					let y = _this.y;
					let z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					n.push(new h3d.VectorImpl(x,y,z));
				}
				this.colors = n;
			}
			if(this.uvs != null) {
				let t = [];
				let _g = 0;
				let _g1 = this.idx.length;
				while(_g < _g1) {
					let i = _g++;
					t.push(this.uvs[this.idx[i]].clone());
				}
				this.uvs = t;
			}
			this.points = p;
			this.idx = null;
		}
	}
	translate(dx,dy,dz) {
		this.translatedX += dx;
		this.translatedY += dy;
		this.translatedZ += dz;
		let _g = 0;
		let _g1 = this.points;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	scale(s) {
		this.scaled *= s;
		let _g = 0;
		let _g1 = this.points;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			p.x *= s;
			p.y *= s;
			p.z *= s;
		}
	}
	addNormals() {
		this.normals = [];
		let _g = 0;
		let _g1 = this.points.length;
		while(_g < _g1) {
			let i = _g++;
			this.normals[i] = new h3d.VectorImpl(0.,0.,0.);
		}
		let pos = 0;
		let _g2 = 0;
		let _g3 = this.triCount();
		while(_g2 < _g3) {
			let i = _g2++;
			let i0;
			let i1;
			let i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			let p0 = this.points[i0];
			let p1 = this.points[i1];
			let p2 = this.points[i2];
			let x = p1.x - p0.x;
			let y = p1.y - p0.y;
			let z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let _this_x = x1;
			let _this_y = y1;
			let _this_z = z1;
			let x2 = p2.x - p0.x;
			let y2 = p2.y - p0.y;
			let z2 = p2.z - p0.z;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let x3 = x2;
			let y3 = y2;
			let z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let v_x = x3;
			let v_y = y3;
			let v_z = z3;
			let x4 = _this_y * v_z - _this_z * v_y;
			let y4 = _this_z * v_x - _this_x * v_z;
			let z4 = _this_x * v_y - _this_y * v_x;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let x5 = x4;
			let y5 = y4;
			let z5 = z4;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let n_x = x5;
			let n_y = y5;
			let n_z = z5;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i1].x += n_x;
			this.normals[i1].y += n_y;
			this.normals[i1].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
		}
		let _g4 = 0;
		let _g5 = this.normals;
		while(_g4 < _g5.length) {
			let n = _g5[_g4];
			++_g4;
			let _this = n;
			let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			_this.x *= k;
			_this.y *= k;
			_this.z *= k;
		}
	}
	addTangents() {
		if(this.normals == null) {
			this.addNormals();
		}
		if(this.uvs == null) {
			this.addUVs();
		}
		this.tangents = [];
		let _g = 0;
		let _g1 = this.points.length;
		while(_g < _g1) {
			let i = _g++;
			this.tangents[i] = new h3d.VectorImpl(0.,0.,0.);
		}
		let pos = 0;
		let _g2 = 0;
		let _g3 = this.triCount();
		while(_g2 < _g3) {
			let i = _g2++;
			let i0;
			let i1;
			let i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			let p0 = this.points[i0];
			let p1 = this.points[i1];
			let p2 = this.points[i2];
			let uv0 = this.uvs[i0];
			let uv1 = this.uvs[i1];
			let uv2 = this.uvs[i2];
			let n = this.normals[i0];
			let x = p1.x - p0.x;
			let y = p1.y - p0.y;
			let z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let k0_x = x1;
			let k0_y = y1;
			let k0_z = z1;
			let x2 = p2.x - p0.x;
			let y2 = p2.y - p0.y;
			let z2 = p2.z - p0.z;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let x3 = x2;
			let y3 = y2;
			let z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let k1_x = x3;
			let k1_y = y3;
			let k1_z = z3;
			let v = uv2.v - uv0.v;
			k0_x *= v;
			k0_y *= v;
			k0_z *= v;
			let v1 = uv1.v - uv0.v;
			k1_x *= v1;
			k1_y *= v1;
			k1_z *= v1;
			let x4 = k0_x - k1_x;
			let y4 = k0_y - k1_y;
			let z4 = k0_z - k1_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let t = new h3d.VectorImpl(x4,y4,z4);
			let _this = n;
			let x5 = _this.y * t.z - _this.z * t.y;
			let y5 = _this.z * t.x - _this.x * t.z;
			let z5 = _this.x * t.y - _this.y * t.x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let x6 = x5;
			let y6 = y5;
			let z6 = z5;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let _this_x = x6;
			let _this_y = y6;
			let _this_z = z6;
			let k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			_this_x *= k;
			_this_y *= k;
			_this_z *= k;
			let x7 = _this_y * n.z - _this_z * n.y;
			let y7 = _this_z * n.x - _this_x * n.z;
			let z7 = _this_x * n.y - _this_y * n.x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			t = new h3d.VectorImpl(x7,y7,z7);
			let _this1 = t;
			let k1 = _this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z;
			if(k1 < 1e-20) {
				k1 = 0;
			} else {
				k1 = 1. / Math.sqrt(k1);
			}
			_this1.x *= k1;
			_this1.y *= k1;
			_this1.z *= k1;
			this.tangents[i0].x += t.x;
			this.tangents[i0].y += t.y;
			this.tangents[i0].z += t.z;
			this.tangents[i1].x += t.x;
			this.tangents[i1].y += t.y;
			this.tangents[i1].z += t.z;
			this.tangents[i2].x += t.x;
			this.tangents[i2].y += t.y;
			this.tangents[i2].z += t.z;
		}
		let _g4 = 0;
		let _g5 = this.tangents;
		while(_g4 < _g5.length) {
			let t = _g5[_g4];
			++_g4;
			let _this = t;
			let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			_this.x *= k;
			_this.y *= k;
			_this.z *= k;
		}
	}
	addUVs() {
		this.uvs = [];
		let _g = 0;
		let _g1 = this.points.length;
		while(_g < _g1) {
			let i = _g++;
			this.uvs[i] = new h3d.prim.UV(this.points[i].x,this.points[i].y);
		}
	}
	uvScale(su,sv) {
		if(this.uvs == null) {
			throw haxe.Exception.thrown("Missing UVs");
		}
		let m = new haxe.ds.ObjectMap();
		let _g = 0;
		let _g1 = this.uvs;
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			if(m.h.__keys__[t.__id__] != null) {
				continue;
			}
			m.set(t,true);
			t.u *= su;
			t.v *= sv;
		}
	}
	triCount() {
		let n = super.triCount();
		if(n != 0) {
			return n;
		}
		return (this.idx == null ? this.points.length : this.idx.length) / 3 | 0;
	}
	vertexCount() {
		return this.points.length;
	}
	getCollider() {
		let vertexes = new Array(this.points.length * 3);
		let indexes = new Array(this.idx.length);
		let vid = 0;
		let _g = 0;
		let _g1 = this.points;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			vertexes[vid++] = p.x;
			vertexes[vid++] = p.y;
			vertexes[vid++] = p.z;
		}
		let _g2 = 0;
		let _g3 = this.idx.length;
		while(_g2 < _g3) {
			let i = _g2++;
			indexes[i] = this.idx[i];
		}
		let poly = new h3d.col.Polygon();
		poly.addBuffers(vertexes,indexes);
		return poly;
	}
	render(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		let indexes = this.indexes;
		let count = this.triCount();
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(count * 3);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,indexes,0,count);
		} else {
			engine.renderIndexed(this.buffer,indexes,0,count);
		}
	}
}
$hxClasses["h3d.prim.Polygon"] = h3d.prim.Polygon;
h3d.prim.Polygon.__name__ = "h3d.prim.Polygon";
h3d.prim.Polygon.__super__ = h3d.prim.MeshPrimitive;
Object.assign(h3d.prim.Polygon.prototype, {
	__class__: h3d.prim.Polygon
});
h3d.prim.Cube = class h3d_prim_Cube extends h3d.prim.Polygon {
	constructor(x,y,z,centered) {
		h3d.prim.Primitive._hx_skip_constructor = true;
		super();
		h3d.prim.Primitive._hx_skip_constructor = false;
		this._hx_constructor(x,y,z,centered);
	}
	_hx_constructor(x,y,z,centered) {
		if(centered == null) {
			centered = false;
		}
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this.sizeX = x;
		this.sizeY = y;
		this.sizeZ = z;
		let x1 = 0;
		let y1 = 0;
		let z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let this1 = new h3d.VectorImpl(x1,y1,z1);
		let x2 = x;
		let y2 = 0;
		let z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let this2 = new h3d.VectorImpl(x2,y2,z2);
		let x3 = 0;
		let y3 = y;
		let z3 = 0;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let this3 = new h3d.VectorImpl(x3,y3,z3);
		let x4 = 0;
		let y4 = 0;
		let z4 = z;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let this4 = new h3d.VectorImpl(x4,y4,z4);
		let x5 = x;
		let y5 = y;
		let z5 = 0;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		let this5 = new h3d.VectorImpl(x5,y5,z5);
		let x6 = x;
		let y6 = 0;
		let z6 = z;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		let this6 = new h3d.VectorImpl(x6,y6,z6);
		let x7 = 0;
		let y7 = y;
		let z7 = z;
		if(z7 == null) {
			z7 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		let this7 = new h3d.VectorImpl(x7,y7,z7);
		let x8 = x;
		let y8 = y;
		let z8 = z;
		if(z8 == null) {
			z8 = 0.;
		}
		if(y8 == null) {
			y8 = 0.;
		}
		if(x8 == null) {
			x8 = 0.;
		}
		let p = [this1,this2,this3,this4,this5,this6,this7,new h3d.VectorImpl(x8,y8,z8)];
		let idx = new Array(0);
		idx.push(0);
		idx.push(1);
		idx.push(5);
		idx.push(0);
		idx.push(5);
		idx.push(3);
		idx.push(1);
		idx.push(4);
		idx.push(7);
		idx.push(1);
		idx.push(7);
		idx.push(5);
		idx.push(3);
		idx.push(5);
		idx.push(7);
		idx.push(3);
		idx.push(7);
		idx.push(6);
		idx.push(0);
		idx.push(6);
		idx.push(2);
		idx.push(0);
		idx.push(3);
		idx.push(6);
		idx.push(2);
		idx.push(7);
		idx.push(4);
		idx.push(2);
		idx.push(6);
		idx.push(7);
		idx.push(0);
		idx.push(4);
		idx.push(1);
		idx.push(0);
		idx.push(2);
		idx.push(4);
		super._hx_constructor(p,idx);
		if(centered) {
			this.translate(-x * 0.5,-y * 0.5,-z * 0.5);
		}
	}
	addUVs() {
		this.unindex();
		let z = new h3d.prim.UV(0,1);
		let x = new h3d.prim.UV(1,1);
		let y = new h3d.prim.UV(0,0);
		let o = new h3d.prim.UV(1,0);
		this.uvs = [x,z,y,x,y,o,x,z,y,x,y,o,x,z,y,x,y,o,z,o,x,z,y,o,z,o,x,z,y,o,z,o,x,z,y,o];
	}
	addUniformUVs(scale) {
		if(scale == null) {
			scale = 1.;
		}
		this.unindex();
		let v = scale;
		this.uvs = [new h3d.prim.UV(v * this.sizeX,v * this.sizeZ),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,0),new h3d.prim.UV(v * this.sizeY,v * this.sizeZ),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeY,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeY,0),new h3d.prim.UV(v * this.sizeX,v * this.sizeY),new h3d.prim.UV(0,v * this.sizeY),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,v * this.sizeY),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,0),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(v * this.sizeY,0),new h3d.prim.UV(v * this.sizeY,v * this.sizeZ),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeY,0),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(v * this.sizeX,0),new h3d.prim.UV(v * this.sizeX,v * this.sizeZ),new h3d.prim.UV(0,v * this.sizeZ),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,0),new h3d.prim.UV(0,v * this.sizeY),new h3d.prim.UV(v * this.sizeX,0),new h3d.prim.UV(v * this.sizeX,v * this.sizeY),new h3d.prim.UV(0,v * this.sizeY),new h3d.prim.UV(0,0),new h3d.prim.UV(v * this.sizeX,0)];
	}
	getCollider() {
		let x = this.translatedX;
		let y = this.translatedY;
		let z = this.translatedZ;
		let dx = this.sizeX * this.scaled;
		let dy = this.sizeY * this.scaled;
		let dz = this.sizeZ * this.scaled;
		let b = new h3d.col.Bounds();
		b.xMin = x;
		b.yMin = y;
		b.zMin = z;
		b.xMax = x + dx;
		b.yMax = y + dy;
		b.zMax = z + dz;
		return b;
	}
	static defaultUnitCube() {
		let engine = h3d.Engine.CURRENT;
		let c = engine.resCache.h[h3d.prim.Cube.__id__];
		if(c != null) {
			return c;
		}
		c = new h3d.prim.Cube(1,1,1);
		c.translate(-0.5,-0.5,-0.5);
		c.unindex();
		c.addNormals();
		c.addUniformUVs(1.0);
		c.addTangents();
		engine.resCache.set(h3d.prim.Cube,c);
		return c;
	}
}
$hxClasses["h3d.prim.Cube"] = h3d.prim.Cube;
h3d.prim.Cube.__name__ = "h3d.prim.Cube";
h3d.prim.Cube.__super__ = h3d.prim.Polygon;
Object.assign(h3d.prim.Cube.prototype, {
	__class__: h3d.prim.Cube
});
h3d.prim.HMDModel = class h3d_prim_HMDModel extends h3d.prim.MeshPrimitive {
	constructor(data,dataPos,lib) {
		super();
		this.data = data;
		this.dataPosition = dataPos;
		this.lib = lib;
	}
	hasInput(name) {
		if(!super.hasInput(name)) {
			return this.data.vertexFormat.hasInput(name);
		} else {
			return true;
		}
	}
	triCount() {
		return this.data.get_indexCount() / 3 | 0;
	}
	vertexCount() {
		return this.data.vertexCount;
	}
	getBounds() {
		return this.data.bounds;
	}
	selectMaterial(i) {
		this.curMaterial = i;
	}
	getMaterialIndexes(material) {
		return { start : this.indexesTriPos[material] * 3, count : this.data.indexCounts[material]};
	}
	getDataBuffers(fmt,defaults,material) {
		return this.lib.getBuffers(this.data,fmt,defaults,material);
	}
	loadSkin(skin) {
		this.lib.loadSkin(this.data,skin);
	}
	alloc(engine) {
		this.dispose();
		this.buffer = new h3d.Buffer(this.data.vertexCount,this.data.vertexFormat);
		let entry = this.lib.resource.entry;
		let size = this.data.vertexCount * this.data.vertexFormat.strideBytes;
		let bytes = entry.fetchBytes(this.dataPosition + this.data.vertexPosition,size);
		this.buffer.uploadBytes(bytes,0,this.data.vertexCount);
		this.indexCount = 0;
		this.indexesTriPos = [];
		let _g = 0;
		let _g1 = this.data.indexCounts;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			this.indexesTriPos.push(this.indexCount / 3 | 0);
			this.indexCount += n;
		}
		let is32 = this.data.vertexCount > 65536;
		this.indexes = h3d.Indexes._new(this.indexCount,is32);
		let size1 = (is32 ? 4 : 2) * this.indexCount;
		let bytes1 = entry.fetchBytes(this.dataPosition + this.data.indexPosition,size1);
		this.indexes.uploadBytes(bytes1,0,this.indexCount);
		if(this.normalsRecomputed != null) {
			let name = this.normalsRecomputed;
			this.normalsRecomputed = null;
			this.recomputeNormals(name);
		}
	}
	recomputeNormals(name) {
		if(this.normalsRecomputed != null) {
			return;
		}
		if(name != null && this.data.vertexFormat.hasInput(name)) {
			return;
		}
		if(name == null) {
			name = "normal";
		}
		let pos = this.lib.getBuffers(this.data,hxd.BufferFormat.get_POS3D());
		let ids = [];
		let pts = [];
		let mpts_h = { };
		let _g = 0;
		let _g1 = this.data.vertexCount;
		while(_g < _g1) {
			let i = _g++;
			let added = false;
			let px = pos.vertexes[i * 3];
			let py = pos.vertexes[i * 3 + 1];
			let pz = pos.vertexes[i * 3 + 2];
			let pid = (px + py + pz) * 10.01 | 0;
			let arr = mpts_h[pid];
			if(arr == null) {
				arr = [];
				mpts_h[pid] = arr;
			} else {
				let _g = 0;
				while(_g < arr.length) {
					let idx = arr[_g];
					++_g;
					let p = pts[idx];
					if(p.x == px && p.y == py && p.z == pz) {
						ids.push(idx);
						added = true;
						break;
					}
				}
			}
			if(!added) {
				ids.push(pts.length);
				arr.push(pts.length);
				let x = px;
				let y = py;
				let z = pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pts.push(new h3d.VectorImpl(x,y,z));
			}
		}
		let idx = new Array(0);
		let _g2 = 0;
		let _g3 = pos.indexes;
		while(_g2 < _g3.length) {
			let i = _g3[_g2];
			++_g2;
			idx.push(ids[i]);
		}
		let pol = new h3d.prim.Polygon(pts,idx);
		pol.addNormals();
		let v = hxd._FloatBuffer.Float32Expand._new(0);
		let _g4 = v.pos;
		let _g5 = this.data.vertexCount * 3;
		while(_g4 < _g5) {
			let i = _g4++;
			if(v.pos == v.array.length) {
				let newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		let k = 0;
		let _g6 = 0;
		let _g7 = this.data.vertexCount;
		while(_g6 < _g7) {
			let i = _g6++;
			let n = pol.normals[ids[i]];
			v.array[k++] = n.x;
			v.array[k++] = n.y;
			v.array[k++] = n.z;
		}
		let buf = h3d.Buffer.ofFloats(v,hxd.BufferFormat.make([new hxd.BufferInput(name,3,0)]));
		this.addBuffer(buf);
		this.normalsRecomputed = name;
	}
	addTangents() {
		if(this.hasInput("tangent")) {
			return;
		}
		let pos = this.lib.getBuffers(this.data,hxd.BufferFormat.get_POS3D());
		let ids = [];
		let pts = [];
		let _g = 0;
		let _g1 = this.data.vertexCount;
		while(_g < _g1) {
			let i = _g++;
			let added = false;
			let px = pos.vertexes[i * 3];
			let py = pos.vertexes[i * 3 + 1];
			let pz = pos.vertexes[i * 3 + 2];
			let _g1 = 0;
			let _g2 = pts.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let p = pts[i];
				if(p.x == px && p.y == py && p.z == pz) {
					ids.push(i);
					added = true;
					break;
				}
			}
			if(!added) {
				ids.push(pts.length);
				let x = px;
				let y = py;
				let z = pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pts.push(new h3d.VectorImpl(x,y,z));
			}
		}
		let idx = new Array(0);
		let _g2 = 0;
		let _g3 = pos.indexes;
		while(_g2 < _g3.length) {
			let i = _g3[_g2];
			++_g2;
			idx.push(ids[i]);
		}
		let pol = new h3d.prim.Polygon(pts,idx);
		pol.addNormals();
		pol.addTangents();
		let v = hxd._FloatBuffer.Float32Expand._new(0);
		let _g4 = v.pos;
		let _g5 = this.data.vertexCount * 3;
		while(_g4 < _g5) {
			let i = _g4++;
			if(v.pos == v.array.length) {
				let newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		let k = 0;
		let _g6 = 0;
		let _g7 = this.data.vertexCount;
		while(_g6 < _g7) {
			let i = _g6++;
			let t = pol.tangents[ids[i]];
			v.array[k++] = t.x;
			v.array[k++] = t.y;
			v.array[k++] = t.z;
		}
		let buf = h3d.Buffer.ofFloats(v,hxd.BufferFormat.make([new hxd.BufferInput("tangent",3,0)]));
		this.addBuffer(buf);
	}
	render(engine) {
		if(this.curMaterial < 0) {
			super.render(engine);
			return;
		}
		if(this.indexes == null || this.indexes.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers == null) {
			engine.renderIndexed(this.buffer,this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		} else {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		}
		this.curMaterial = -1;
	}
	initCollider(poly) {
		let buf = this.lib.getBuffers(this.data,hxd.BufferFormat.get_POS3D());
		poly.setData(buf.vertexes,buf.indexes);
		if(this.collider == null) {
			let _this = this.data.bounds;
			let dx = _this.xMax - _this.xMin;
			let dy = _this.yMax - _this.yMin;
			let dz = _this.zMax - _this.zMin;
			let sphere = new h3d.col.Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
			this.collider = new h3d.col.OptimizedCollider(sphere,poly);
		}
	}
	getCollider() {
		if(this.collider != null) {
			return this.collider;
		}
		let poly = new h3d.col.PolygonBuffer();
		poly.source = { entry : this.lib.resource.entry, geometryName : null};
		let _g = 0;
		let _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			let h = _g1[_g];
			++_g;
			if(this.lib.header.geometries[h.geometry] == this.data) {
				poly.source.geometryName = h.name;
				break;
			}
		}
		this.initCollider(poly);
		return this.collider;
	}
}
$hxClasses["h3d.prim.HMDModel"] = h3d.prim.HMDModel;
h3d.prim.HMDModel.__name__ = "h3d.prim.HMDModel";
h3d.prim.HMDModel.__super__ = h3d.prim.MeshPrimitive;
Object.assign(h3d.prim.HMDModel.prototype, {
	__class__: h3d.prim.HMDModel
});
h3d.prim.Instanced = class h3d_prim_Instanced extends h3d.prim.Primitive {
	constructor() {
		super();
		this.bounds = new h3d.col.Bounds();
		let _this = this.bounds;
		if(0 < _this.xMin) {
			_this.xMin = 0;
		}
		if(0 > _this.xMax) {
			_this.xMax = 0;
		}
		if(0 < _this.yMin) {
			_this.yMin = 0;
		}
		if(0 > _this.yMax) {
			_this.yMax = 0;
		}
		if(0 < _this.zMin) {
			_this.zMin = 0;
		}
		if(0 > _this.zMax) {
			_this.zMax = 0;
		}
		this.tmpBounds = new h3d.col.Bounds();
	}
	setMesh(m) {
		if(this.refCount > 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			m.incref();
		}
		this.primitive = m;
		this.baseBounds = m.getBounds();
		if(m.buffer == null || m.indexes == null) {
			m.alloc(h3d.Engine.CURRENT);
		}
	}
	initBounds() {
		let _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
	}
	addInstanceBounds(absPos) {
		this.tmpBounds.load(this.baseBounds);
		this.tmpBounds.transform(absPos);
		let _this = this.bounds;
		let b = this.tmpBounds;
		if(b.xMin < _this.xMin) {
			_this.xMin = b.xMin;
		}
		if(b.xMax > _this.xMax) {
			_this.xMax = b.xMax;
		}
		if(b.yMin < _this.yMin) {
			_this.yMin = b.yMin;
		}
		if(b.yMax > _this.yMax) {
			_this.yMax = b.yMax;
		}
		if(b.zMin < _this.zMin) {
			_this.zMin = b.zMin;
		}
		if(b.zMax > _this.zMax) {
			_this.zMax = b.zMax;
		}
	}
	dispose() {
	}
	incref() {
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.incref();
		}
		super.incref();
	}
	decref() {
		super.decref();
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.decref();
		}
	}
	getBounds() {
		return this.bounds;
	}
	render(engine) {
		if(this.primitive.indexes == null || this.primitive.buffer.vbuf == null) {
			this.primitive.alloc(engine);
		}
		if(engine.needFlushTarget) {
			engine.doFlushTarget();
		}
		if(this.primitive.buffers == null) {
			engine.driver.selectBuffer(this.primitive.buffer);
		} else {
			engine.driver.selectMultiBuffers(this.primitive.formats,this.primitive.buffers);
		}
		let indexes = this.primitive.indexes;
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(this.triCount() * 3);
		}
		engine.renderInstanced(indexes,this.commands);
	}
}
$hxClasses["h3d.prim.Instanced"] = h3d.prim.Instanced;
h3d.prim.Instanced.__name__ = "h3d.prim.Instanced";
h3d.prim.Instanced.__super__ = h3d.prim.Primitive;
Object.assign(h3d.prim.Instanced.prototype, {
	__class__: h3d.prim.Instanced
});
h3d.prim.Plane2D = class h3d_prim_Plane2D extends h3d.prim.Primitive {
	constructor() {
		super();
	}
	triCount() {
		return 2;
	}
	vertexCount() {
		return 4;
	}
	alloc(engine) {
		let v = hxd._FloatBuffer.Float32Expand._new(0);
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			let newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d.Buffer.ofFloats(v,hxd.BufferFormat.get_XY_UV());
	}
	render(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		let b = this.buffer;
		engine.renderBuffer(b,engine.mem.getQuadIndexes(b.vertices),2,0,-1);
	}
	static get() {
		let engine = h3d.Engine.CURRENT;
		let inst = engine.resCache.h[h3d.prim.Plane2D.__id__];
		if(inst == null) {
			inst = new h3d.prim.Plane2D();
			engine.resCache.set(h3d.prim.Plane2D,inst);
		}
		return inst;
	}
}
$hxClasses["h3d.prim.Plane2D"] = h3d.prim.Plane2D;
h3d.prim.Plane2D.__name__ = "h3d.prim.Plane2D";
h3d.prim.Plane2D.__super__ = h3d.prim.Primitive;
Object.assign(h3d.prim.Plane2D.prototype, {
	__class__: h3d.prim.Plane2D
});
h3d.prim.RawPrimitive = class h3d_prim_RawPrimitive extends h3d.prim.Primitive {
	constructor(inf,persist) {
		if(persist == null) {
			persist = false;
		}
		super();
		this.onContextLost = function() {
			return inf;
		};
		this.bounds = inf.bounds;
		this.alloc(null);
		if(!persist) {
			this.onContextLost = null;
		}
	}
	alloc(engine) {
		if(this.onContextLost == null) {
			throw haxe.Exception.thrown("Cannot realloc " + Std.string(this));
		}
		let inf = this.onContextLost();
		this.buffer = h3d.Buffer.ofFloats(inf.vbuf,inf.format);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d.Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	getBounds() {
		if(this.bounds == null) {
			throw haxe.Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	triCount() {
		return this.tcount;
	}
	vertexCount() {
		return this.vcount;
	}
}
$hxClasses["h3d.prim.RawPrimitive"] = h3d.prim.RawPrimitive;
h3d.prim.RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d.prim.RawPrimitive.__super__ = h3d.prim.Primitive;
Object.assign(h3d.prim.RawPrimitive.prototype, {
	__class__: h3d.prim.RawPrimitive
});
h3d.prim.Sphere = class h3d_prim_Sphere extends h3d.prim.Polygon {
	constructor(ray,segsW,segsH,portion) {
		h3d.prim.Primitive._hx_skip_constructor = true;
		super();
		h3d.prim.Primitive._hx_skip_constructor = false;
		this._hx_constructor(ray,segsW,segsH,portion);
	}
	_hx_constructor(ray,segsW,segsH,portion) {
		if(portion == null) {
			portion = 1.;
		}
		if(segsH == null) {
			segsH = 6;
		}
		if(segsW == null) {
			segsW = 8;
		}
		if(ray == null) {
			ray = 1.;
		}
		this.ray = ray;
		this.segsH = segsH;
		this.segsW = segsW;
		this.portion = portion;
		let dp = Math.PI * 2 / segsW;
		let pts = [];
		let idx = new Array(0);
		let _g = 0;
		let _g1 = segsH + 1;
		while(_g < _g1) {
			let y = _g++;
			let t = y / segsH * Math.PI * portion;
			let st = Math.sin(t);
			let pz = Math.cos(t);
			let p = 0.;
			let _g1 = 0;
			let _g2 = segsW + 1;
			while(_g1 < _g2) {
				let x = _g1++;
				let px = st * Math.cos(p);
				let py = st * Math.sin(p);
				let x1 = px * ray;
				let y = py * ray;
				let z = pz * ray;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				pts.push(new h3d.VectorImpl(x1,y,z));
				p += dp;
			}
		}
		let _g2 = 0;
		let _g3 = segsH;
		while(_g2 < _g3) {
			let y = _g2++;
			let _g = 0;
			let _g1 = segsW;
			while(_g < _g1) {
				let x = _g++;
				let v1 = x + 1 + y * (segsW + 1);
				let v2 = x + y * (segsW + 1);
				let v3 = x + (y + 1) * (segsW + 1);
				let v4 = x + 1 + (y + 1) * (segsW + 1);
				if(y != 0) {
					idx.push(v1);
					idx.push(v2);
					idx.push(v4);
				}
				if(y != segsH - 1 || portion != 1.) {
					idx.push(v2);
					idx.push(v3);
					idx.push(v4);
				}
			}
		}
		super._hx_constructor(pts,idx);
	}
	getCollider() {
		return new h3d.col.Sphere(this.translatedX,this.translatedY,this.translatedZ,this.ray * this.scaled);
	}
	addNormals() {
		this.normals = this.points;
	}
	addUVs() {
		this.uvs = [];
		let _g = 0;
		let _g1 = this.segsH + 1;
		while(_g < _g1) {
			let y = _g++;
			let _g1 = 0;
			let _g2 = this.segsW + 1;
			while(_g1 < _g2) {
				let x = _g1++;
				this.uvs.push(new h3d.prim.UV(1 - x / this.segsW,y / this.segsH));
			}
		}
	}
	static defaultUnitSphere() {
		let engine = h3d.Engine.CURRENT;
		let s = engine.resCache.h[h3d.prim.Sphere.__id__];
		if(s != null) {
			return s;
		}
		s = new h3d.prim.Sphere(1,16,16);
		s.addNormals();
		s.addUVs();
		engine.resCache.set(h3d.prim.Sphere,s);
		return s;
	}
}
$hxClasses["h3d.prim.Sphere"] = h3d.prim.Sphere;
h3d.prim.Sphere.__name__ = "h3d.prim.Sphere";
h3d.prim.Sphere.__super__ = h3d.prim.Polygon;
Object.assign(h3d.prim.Sphere.prototype, {
	__class__: h3d.prim.Sphere
});
h3d.prim.UV = class h3d_prim_UV {
	constructor(u,v) {
		this.u = u;
		this.v = v;
	}
	clone() {
		return new h3d.prim.UV(this.u,this.v);
	}
	toString() {
		return "{" + hxd.Math.fmt(this.u) + "," + hxd.Math.fmt(this.v) + "}";
	}
}
$hxClasses["h3d.prim.UV"] = h3d.prim.UV;
h3d.prim.UV.__name__ = "h3d.prim.UV";
Object.assign(h3d.prim.UV.prototype, {
	__class__: h3d.prim.UV
});
h3d.scene.Mesh = class h3d_scene_Mesh extends h3d.scene.Object {
	constructor(primitive,material,parent) {
		if(h3d.scene.Object._hx_skip_constructor) {
			super();
			return;
		}
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(primitive,material,parent);
	}
	_hx_constructor(primitive,material,parent) {
		super._hx_constructor(parent);
		this.set_primitive(primitive);
		if(material == null) {
			material = h3d.mat.MaterialSetup.current.createMaterial();
			material.set_props(material.getDefaultProps());
		}
		this.material = material;
	}
	getMeshMaterials() {
		return [this.material];
	}
	addBoundsRec(b,relativeTo) {
		super.addBoundsRec(b,relativeTo);
		if(this.primitive == null || (this.flags & 512) != 0) {
			return;
		}
		let bounds = this.primitive.getBounds();
		if(relativeTo == null) {
			let m = this.absPos;
			let b1 = new h3d.col.Bounds();
			b1.xMin = bounds.xMin;
			b1.xMax = bounds.xMax;
			b1.yMin = bounds.yMin;
			b1.yMax = bounds.yMax;
			b1.zMin = bounds.zMin;
			b1.zMax = bounds.zMax;
			let tmp = b1;
			tmp.transform(m);
			if(tmp.xMin < b.xMin) {
				b.xMin = tmp.xMin;
			}
			if(tmp.xMax > b.xMax) {
				b.xMax = tmp.xMax;
			}
			if(tmp.yMin < b.yMin) {
				b.yMin = tmp.yMin;
			}
			if(tmp.yMax > b.yMax) {
				b.yMax = tmp.yMax;
			}
			if(tmp.zMin < b.zMin) {
				b.zMin = tmp.zMin;
			}
			if(tmp.zMax > b.zMax) {
				b.zMax = tmp.zMax;
			}
		} else {
			h3d.scene.Mesh.tmpMat.multiply(this.absPos,relativeTo);
			let m = h3d.scene.Mesh.tmpMat;
			let b1 = new h3d.col.Bounds();
			b1.xMin = bounds.xMin;
			b1.xMax = bounds.xMax;
			b1.yMin = bounds.yMin;
			b1.yMax = bounds.yMax;
			b1.zMin = bounds.zMin;
			b1.zMax = bounds.zMax;
			let tmp = b1;
			tmp.transform(m);
			if(tmp.xMin < b.xMin) {
				b.xMin = tmp.xMin;
			}
			if(tmp.xMax > b.xMax) {
				b.xMax = tmp.xMax;
			}
			if(tmp.yMin < b.yMin) {
				b.yMin = tmp.yMin;
			}
			if(tmp.yMax > b.yMax) {
				b.yMax = tmp.yMax;
			}
			if(tmp.zMin < b.zMin) {
				b.zMin = tmp.zMin;
			}
			if(tmp.zMax > b.zMax) {
				b.zMax = tmp.zMax;
			}
		}
	}
	clone(o) {
		let m = o == null ? new h3d.scene.Mesh(null,this.material) : o;
		m.set_primitive(this.primitive);
		m.material = this.material.clone();
		super.clone(m);
		return m;
	}
	getLocalCollider() {
		return this.primitive.getCollider();
	}
	draw(ctx) {
		this.primitive.render(ctx.engine);
	}
	emit(ctx) {
		let p = this.material.passes;
		while(p != null) {
			if(!p.culled) {
				ctx.emitPass(p,this).index = 0;
			}
			p = p.nextPass;
		}
	}
	getMaterialByName(name) {
		if(this.material != null && this.material.name == name) {
			return this.material;
		}
		return super.getMaterialByName(name);
	}
	getMaterials(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		if(this.material != null && a.indexOf(this.material) < 0) {
			a.push(this.material);
		}
		return super.getMaterials(a,recursive);
	}
	onAdd() {
		super.onAdd();
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	onRemove() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		super.onRemove();
	}
	set_primitive(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
}
$hxClasses["h3d.scene.Mesh"] = h3d.scene.Mesh;
h3d.scene.Mesh.__name__ = "h3d.scene.Mesh";
h3d.scene.Mesh.__super__ = h3d.scene.Object;
Object.assign(h3d.scene.Mesh.prototype, {
	__class__: h3d.scene.Mesh
	,__properties__: Object.assign({}, h3d.scene.Object.prototype.__properties__, {set_primitive: "set_primitive"})
});
h3d.scene.Graphics = class h3d_scene_Graphics extends h3d.scene.Mesh {
	constructor(parent) {
		if(h3d.scene.Object._hx_skip_constructor) {
			super();
			return;
		}
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(parent);
	}
	_hx_constructor(parent) {
		this.lineSize = 0.;
		this.curR = 0.;
		this.curZ = 0.;
		this.curY = 0.;
		this.curX = 0.;
		this.bprim = new h3d.prim.BigPrimitive(hxd.BufferFormat.get_POS3D_NORMAL_UV_RGBA());
		this.bprim.isStatic = false;
		super._hx_constructor(this.bprim,null,parent);
		this.tmpPoints = [];
		this.lineShader = new h3d.shader.LineShader();
		this.lineShader.setPriority(-100);
		let _this = this.material;
		_this.set_castShadows(false);
		_this.set_receiveShadows(false);
		this.material.passes.set_enableLights(false);
		this.material.passes.addShader(this.lineShader);
		let vcolor = new h3d.shader.VertexColorAlpha();
		vcolor.setPriority(-100);
		this.material.passes.addShader(vcolor);
		this.material.passes.set_culling(h3d.mat.Face.None);
	}
	onRemove() {
		super.onRemove();
		this.bprim.clear();
	}
	set_is3D(v) {
		if(this.is3D == v) {
			return v;
		}
		if(v) {
			this.material.set_texture(h3d.mat.Texture.fromColor(-1));
			this.material.passes.removeShader(this.lineShader);
		} else {
			this.material.set_texture(null);
			this.material.passes.addShader(this.lineShader);
		}
		this.bprim.clear();
		this.tmpPoints = [];
		return this.is3D = v;
	}
	flushLine() {
		let pts = this.tmpPoints;
		let last = pts.length - 1;
		let prev = pts[last];
		let p = pts[0];
		let closed = p.x == prev.x && p.y == prev.y && p.z == prev.z;
		let count = pts.length;
		if(!closed) {
			let prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h3d.scene._Graphics.GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,prev.z * 2 - prevLast.z,0,0,0,0));
			let pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h3d.scene._Graphics.GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,p.z * 2 - pNext.z,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		let start = this.bprim.vertexCount();
		let pindex = start;
		let v = 0.;
		let _gthis = this;
		let _g = 0;
		let _g1 = count;
		while(_g < _g1) {
			let i = _g++;
			let next = pts[(i + 1) % pts.length];
			let nx1 = prev.y - p.y;
			let ny1 = p.x - prev.x;
			let ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			let nx2 = p.y - next.y;
			let ny2 = next.x - p.x;
			let ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			let nx = nx1 * ns1 + nx2 * ns2;
			let ny = ny1 * ns1 + ny2 * ns2;
			let ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			let size = nx * nx1 * ns1 + ny * ny1 * ns1;
			let d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			let hasIndex = i < count - 1 || closed;
			this.bprim.begin(2,hasIndex ? 6 : 0);
			let _this = _gthis.bprim;
			_this.tmpBuf.array[_this.bufPos++] = p.x + nx;
			let _this1 = _gthis.bprim;
			_this1.tmpBuf.array[_this1.bufPos++] = p.y + ny;
			let _this2 = _gthis.bprim;
			_this2.tmpBuf.array[_this2.bufPos++] = p.z;
			let _this3 = _gthis.bprim;
			_this3.tmpBuf.array[_this3.bufPos++] = 0;
			let _this4 = _gthis.bprim;
			_this4.tmpBuf.array[_this4.bufPos++] = 0;
			let _this5 = _gthis.bprim;
			_this5.tmpBuf.array[_this5.bufPos++] = 1;
			let _this6 = _gthis.bprim;
			_this6.tmpBuf.array[_this6.bufPos++] = 0;
			let _this7 = _gthis.bprim;
			_this7.tmpBuf.array[_this7.bufPos++] = v;
			let _this8 = _gthis.bprim;
			_this8.tmpBuf.array[_this8.bufPos++] = p.r;
			let _this9 = _gthis.bprim;
			_this9.tmpBuf.array[_this9.bufPos++] = p.g;
			let _this10 = _gthis.bprim;
			_this10.tmpBuf.array[_this10.bufPos++] = p.b;
			let _this11 = _gthis.bprim;
			_this11.tmpBuf.array[_this11.bufPos++] = p.a;
			let _this12 = _gthis.bprim;
			_this12.tmpBuf.array[_this12.bufPos++] = p.x - nx;
			let _this13 = _gthis.bprim;
			_this13.tmpBuf.array[_this13.bufPos++] = p.y - ny;
			let _this14 = _gthis.bprim;
			_this14.tmpBuf.array[_this14.bufPos++] = p.z;
			let _this15 = _gthis.bprim;
			_this15.tmpBuf.array[_this15.bufPos++] = 0;
			let _this16 = _gthis.bprim;
			_this16.tmpBuf.array[_this16.bufPos++] = 0;
			let _this17 = _gthis.bprim;
			_this17.tmpBuf.array[_this17.bufPos++] = 1;
			let _this18 = _gthis.bprim;
			_this18.tmpBuf.array[_this18.bufPos++] = 1;
			let _this19 = _gthis.bprim;
			_this19.tmpBuf.array[_this19.bufPos++] = v;
			let _this20 = _gthis.bprim;
			_this20.tmpBuf.array[_this20.bufPos++] = p.r;
			let _this21 = _gthis.bprim;
			_this21.tmpBuf.array[_this21.bufPos++] = p.g;
			let _this22 = _gthis.bprim;
			_this22.tmpBuf.array[_this22.bufPos++] = p.b;
			let _this23 = _gthis.bprim;
			_this23.tmpBuf.array[_this23.bufPos++] = p.a;
			v = 1 - v;
			if(hasIndex) {
				let pnext = i == last ? start - pindex : 2;
				let _this = this.bprim;
				_this.tmpIdx[_this.idxPos++] = _this.startIndex;
				let _this1 = this.bprim;
				_this1.tmpIdx[_this1.idxPos++] = 1 + _this1.startIndex;
				let _this2 = this.bprim;
				_this2.tmpIdx[_this2.idxPos++] = pnext + _this2.startIndex;
				let _this3 = this.bprim;
				_this3.tmpIdx[_this3.idxPos++] = pnext + _this3.startIndex;
				let _this4 = this.bprim;
				_this4.tmpIdx[_this4.idxPos++] = 1 + _this4.startIndex;
				let _this5 = this.bprim;
				_this5.tmpIdx[_this5.idxPos++] = pnext + 1 + _this5.startIndex;
			}
			pindex += 2;
			prev = p;
			p = next;
		}
	}
	flush() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.is3D) {
			this.flushLine();
			this.tmpPoints = [];
		}
	}
	sync(ctx) {
		super.sync(ctx);
		this.flush();
		this.bprim.flush();
	}
	draw(ctx) {
		this.flush();
		this.bprim.flush();
		super.draw(ctx);
	}
	clear() {
		this.flush();
		this.bprim.clear();
	}
	lineStyle(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0.;
		}
		this.flush();
		if(size > 0 && this.lineSize != size) {
			this.lineSize = size;
			if(!this.is3D) {
				this.lineShader.width__ = this.lineSize;
			}
		}
		this.setColor(color,alpha);
	}
	setColorF(r,g,b,a) {
		if(a == null) {
			a = 1.;
		}
		this.curA = a;
		this.curR = r;
		this.curG = g;
		this.curB = b;
	}
	setColor(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	drawLine(p1,p2) {
		this.moveTo(p1.x,p1.y,p1.z);
		this.lineTo(p2.x,p2.y,p2.z);
	}
	moveTo(x,y,z) {
		if(this.is3D) {
			this.flush();
			this.lineTo(x,y,z);
		} else {
			this.curX = x;
			this.curY = y;
			this.curZ = z;
		}
	}
	addVertex(x,y,z,r,g,b,a) {
		this.tmpPoints.push(new h3d.scene._Graphics.GPoint(x,y,z,r,g,b,a));
	}
	lineTo(x,y,z) {
		if(this.is3D) {
			let x1 = this.curX;
			let y1 = this.curY;
			let z1 = this.curZ;
			let _this = this.bprim.bounds;
			if(x1 < _this.xMin) {
				_this.xMin = x1;
			}
			if(x1 > _this.xMax) {
				_this.xMax = x1;
			}
			if(y1 < _this.yMin) {
				_this.yMin = y1;
			}
			if(y1 > _this.yMax) {
				_this.yMax = y1;
			}
			if(z1 < _this.zMin) {
				_this.zMin = z1;
			}
			if(z1 > _this.zMax) {
				_this.zMax = z1;
			}
			let _this1 = this.bprim.bounds;
			if(x < _this1.xMin) {
				_this1.xMin = x;
			}
			if(x > _this1.xMax) {
				_this1.xMax = x;
			}
			if(y < _this1.yMin) {
				_this1.yMin = y;
			}
			if(y > _this1.yMax) {
				_this1.yMax = y;
			}
			if(z < _this1.zMin) {
				_this1.zMin = z;
			}
			if(z > _this1.zMax) {
				_this1.zMax = z;
			}
			this.tmpPoints.push(new h3d.scene._Graphics.GPoint(x,y,z,this.curR,this.curG,this.curB,this.curA));
			return;
		}
		this.bprim.begin(4,6);
		let nx = x - this.curX;
		let ny = y - this.curY;
		let nz = z - this.curZ;
		let x1 = this.curX;
		let y1 = this.curY;
		let z1 = this.curZ;
		let _this = this.bprim.bounds;
		if(x1 < _this.xMin) {
			_this.xMin = x1;
		}
		if(x1 > _this.xMax) {
			_this.xMax = x1;
		}
		if(y1 < _this.yMin) {
			_this.yMin = y1;
		}
		if(y1 > _this.yMax) {
			_this.yMax = y1;
		}
		if(z1 < _this.zMin) {
			_this.zMin = z1;
		}
		if(z1 > _this.zMax) {
			_this.zMax = z1;
		}
		let _this1 = this.bprim.bounds;
		if(x < _this1.xMin) {
			_this1.xMin = x;
		}
		if(x > _this1.xMax) {
			_this1.xMax = x;
		}
		if(y < _this1.yMin) {
			_this1.yMin = y;
		}
		if(y > _this1.yMax) {
			_this1.yMax = y;
		}
		if(z < _this1.zMin) {
			_this1.zMin = z;
		}
		if(z > _this1.zMax) {
			_this1.zMax = z;
		}
		let _gthis = this;
		let _this2 = _gthis.bprim;
		_this2.tmpBuf.array[_this2.bufPos++] = _gthis.curX;
		let _this3 = _gthis.bprim;
		_this3.tmpBuf.array[_this3.bufPos++] = _gthis.curY;
		let _this4 = _gthis.bprim;
		_this4.tmpBuf.array[_this4.bufPos++] = _gthis.curZ;
		let _this5 = _gthis.bprim;
		_this5.tmpBuf.array[_this5.bufPos++] = nx;
		let _this6 = _gthis.bprim;
		_this6.tmpBuf.array[_this6.bufPos++] = ny;
		let _this7 = _gthis.bprim;
		_this7.tmpBuf.array[_this7.bufPos++] = nz;
		let _this8 = _gthis.bprim;
		_this8.tmpBuf.array[_this8.bufPos++] = 0;
		let _this9 = _gthis.bprim;
		_this9.tmpBuf.array[_this9.bufPos++] = 0;
		let _this10 = _gthis.bprim;
		_this10.tmpBuf.array[_this10.bufPos++] = _gthis.curR;
		let _this11 = _gthis.bprim;
		_this11.tmpBuf.array[_this11.bufPos++] = _gthis.curG;
		let _this12 = _gthis.bprim;
		_this12.tmpBuf.array[_this12.bufPos++] = _gthis.curB;
		let _this13 = _gthis.bprim;
		_this13.tmpBuf.array[_this13.bufPos++] = _gthis.curA;
		let _this14 = _gthis.bprim;
		_this14.tmpBuf.array[_this14.bufPos++] = _gthis.curX;
		let _this15 = _gthis.bprim;
		_this15.tmpBuf.array[_this15.bufPos++] = _gthis.curY;
		let _this16 = _gthis.bprim;
		_this16.tmpBuf.array[_this16.bufPos++] = _gthis.curZ;
		let _this17 = _gthis.bprim;
		_this17.tmpBuf.array[_this17.bufPos++] = nx;
		let _this18 = _gthis.bprim;
		_this18.tmpBuf.array[_this18.bufPos++] = ny;
		let _this19 = _gthis.bprim;
		_this19.tmpBuf.array[_this19.bufPos++] = nz;
		let _this20 = _gthis.bprim;
		_this20.tmpBuf.array[_this20.bufPos++] = 0;
		let _this21 = _gthis.bprim;
		_this21.tmpBuf.array[_this21.bufPos++] = 1;
		let _this22 = _gthis.bprim;
		_this22.tmpBuf.array[_this22.bufPos++] = _gthis.curR;
		let _this23 = _gthis.bprim;
		_this23.tmpBuf.array[_this23.bufPos++] = _gthis.curG;
		let _this24 = _gthis.bprim;
		_this24.tmpBuf.array[_this24.bufPos++] = _gthis.curB;
		let _this25 = _gthis.bprim;
		_this25.tmpBuf.array[_this25.bufPos++] = _gthis.curA;
		let _this26 = _gthis.bprim;
		_this26.tmpBuf.array[_this26.bufPos++] = _gthis.curX;
		let _this27 = _gthis.bprim;
		_this27.tmpBuf.array[_this27.bufPos++] = _gthis.curY;
		let _this28 = _gthis.bprim;
		_this28.tmpBuf.array[_this28.bufPos++] = _gthis.curZ;
		let _this29 = _gthis.bprim;
		_this29.tmpBuf.array[_this29.bufPos++] = nx;
		let _this30 = _gthis.bprim;
		_this30.tmpBuf.array[_this30.bufPos++] = ny;
		let _this31 = _gthis.bprim;
		_this31.tmpBuf.array[_this31.bufPos++] = nz;
		let _this32 = _gthis.bprim;
		_this32.tmpBuf.array[_this32.bufPos++] = 1;
		let _this33 = _gthis.bprim;
		_this33.tmpBuf.array[_this33.bufPos++] = 0;
		let _this34 = _gthis.bprim;
		_this34.tmpBuf.array[_this34.bufPos++] = _gthis.curR;
		let _this35 = _gthis.bprim;
		_this35.tmpBuf.array[_this35.bufPos++] = _gthis.curG;
		let _this36 = _gthis.bprim;
		_this36.tmpBuf.array[_this36.bufPos++] = _gthis.curB;
		let _this37 = _gthis.bprim;
		_this37.tmpBuf.array[_this37.bufPos++] = _gthis.curA;
		let _this38 = _gthis.bprim;
		_this38.tmpBuf.array[_this38.bufPos++] = _gthis.curX;
		let _this39 = _gthis.bprim;
		_this39.tmpBuf.array[_this39.bufPos++] = _gthis.curY;
		let _this40 = _gthis.bprim;
		_this40.tmpBuf.array[_this40.bufPos++] = _gthis.curZ;
		let _this41 = _gthis.bprim;
		_this41.tmpBuf.array[_this41.bufPos++] = nx;
		let _this42 = _gthis.bprim;
		_this42.tmpBuf.array[_this42.bufPos++] = ny;
		let _this43 = _gthis.bprim;
		_this43.tmpBuf.array[_this43.bufPos++] = nz;
		let _this44 = _gthis.bprim;
		_this44.tmpBuf.array[_this44.bufPos++] = 1;
		let _this45 = _gthis.bprim;
		_this45.tmpBuf.array[_this45.bufPos++] = 1;
		let _this46 = _gthis.bprim;
		_this46.tmpBuf.array[_this46.bufPos++] = _gthis.curR;
		let _this47 = _gthis.bprim;
		_this47.tmpBuf.array[_this47.bufPos++] = _gthis.curG;
		let _this48 = _gthis.bprim;
		_this48.tmpBuf.array[_this48.bufPos++] = _gthis.curB;
		let _this49 = _gthis.bprim;
		_this49.tmpBuf.array[_this49.bufPos++] = _gthis.curA;
		let _this50 = this.bprim;
		_this50.tmpIdx[_this50.idxPos++] = _this50.startIndex;
		let _this51 = this.bprim;
		_this51.tmpIdx[_this51.idxPos++] = 1 + _this51.startIndex;
		let _this52 = this.bprim;
		_this52.tmpIdx[_this52.idxPos++] = 2 + _this52.startIndex;
		let _this53 = this.bprim;
		_this53.tmpIdx[_this53.idxPos++] = 2 + _this53.startIndex;
		let _this54 = this.bprim;
		_this54.tmpIdx[_this54.idxPos++] = 3 + _this54.startIndex;
		let _this55 = this.bprim;
		_this55.tmpIdx[_this55.idxPos++] = 1 + _this55.startIndex;
		this.curX = x;
		this.curY = y;
		this.curZ = z;
	}
}
$hxClasses["h3d.scene.Graphics"] = h3d.scene.Graphics;
h3d.scene.Graphics.__name__ = "h3d.scene.Graphics";
h3d.scene.Graphics.__super__ = h3d.scene.Mesh;
Object.assign(h3d.scene.Graphics.prototype, {
	__class__: h3d.scene.Graphics
	,__properties__: Object.assign({}, h3d.scene.Mesh.prototype.__properties__, {set_is3D: "set_is3D"})
});
h3d.scene.Box = class h3d_scene_Box extends h3d.scene.Graphics {
	constructor(color,bounds,depth,parent) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(color,bounds,depth,parent);
	}
	_hx_constructor(color,bounds,depth,parent) {
		if(depth == null) {
			depth = true;
		}
		if(color == null) {
			color = -65536;
		}
		this.prevZMax = -1e9;
		this.prevYMax = -1e9;
		this.prevXMax = -1e9;
		this.prevZMin = 1e9;
		this.prevYMin = 1e9;
		this.prevXMin = 1e9;
		this.thickness = 1.0;
		super._hx_constructor(parent);
		this.color = color;
		this.bounds = bounds;
		if(!depth) {
			this.material.passes.depth(true,h3d.mat.Compare.Always);
		}
	}
	clone(o) {
		let b;
		if(o == null) {
			let b1 = this.color;
			let _this = this.bounds;
			let b2 = new h3d.col.Bounds();
			b2.xMin = _this.xMin;
			b2.xMax = _this.xMax;
			b2.yMin = _this.yMin;
			b2.yMax = _this.yMax;
			b2.zMin = _this.zMin;
			b2.zMax = _this.zMax;
			b = new h3d.scene.Box(b1,b2,this.material.passes.depthWrite,null);
		} else {
			b = o;
		}
		super.clone(b);
		let _this = this.bounds;
		let b1 = new h3d.col.Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		b.bounds = b1;
		b.prevXMin = this.prevXMin;
		b.prevYMin = this.prevYMin;
		b.prevZMin = this.prevZMin;
		b.prevXMax = this.prevXMax;
		b.prevYMax = this.prevYMax;
		b.prevZMax = this.prevZMax;
		return b;
	}
	getLocalCollider() {
		return null;
	}
	sync(ctx) {
		if(this.bounds == null) {
			if(this.prevXMin == -0.5 && this.prevYMin == -0.5 && this.prevZMin == -0.5 && this.prevXMax == 0.5 && this.prevYMax == 0.5 && this.prevZMax == 0.5) {
				return;
			}
			this.prevXMin = -0.5;
			this.prevYMin = -0.5;
			this.prevZMin = -0.5;
			this.prevXMax = 0.5;
			this.prevYMax = 0.5;
			this.prevZMax = 0.5;
		} else {
			if(this.prevXMin == this.bounds.xMin && this.prevYMin == this.bounds.yMin && this.prevZMin == this.bounds.zMin && this.prevXMax == this.bounds.xMax && this.prevYMax == this.bounds.yMax && this.prevZMax == this.bounds.zMax) {
				return;
			}
			this.prevXMin = this.bounds.xMin;
			this.prevYMin = this.bounds.yMin;
			this.prevZMin = this.bounds.zMin;
			this.prevXMax = this.bounds.xMax;
			this.prevYMax = this.bounds.yMax;
			this.prevZMax = this.bounds.zMax;
		}
		this.clear();
		this.lineStyle(this.thickness,this.color);
		this.moveTo(this.prevXMin,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMax);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMax);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMax);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMax);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMax);
		this.moveTo(this.prevXMax,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMax);
		this.moveTo(this.prevXMin,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMax);
		this.moveTo(this.prevXMax,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMax);
		super.sync(ctx);
	}
}
$hxClasses["h3d.scene.Box"] = h3d.scene.Box;
h3d.scene.Box.__name__ = "h3d.scene.Box";
h3d.scene.Box.__super__ = h3d.scene.Graphics;
Object.assign(h3d.scene.Box.prototype, {
	__class__: h3d.scene.Box
});
h3d.scene._Graphics = {};
h3d.scene._Graphics.GPoint = class h3d_scene__$Graphics_GPoint {
	constructor(x,y,z,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
}
$hxClasses["h3d.scene._Graphics.GPoint"] = h3d.scene._Graphics.GPoint;
h3d.scene._Graphics.GPoint.__name__ = "h3d.scene._Graphics.GPoint";
Object.assign(h3d.scene._Graphics.GPoint.prototype, {
	__class__: h3d.scene._Graphics.GPoint
});
h3d.scene.Interactive = class h3d_scene_Interactive extends h3d.scene.Object {
	constructor(shape,parent) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(shape,parent);
	}
	_hx_constructor(shape,parent) {
		this.hitPoint = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.lastClickFrame = -1;
		this.mouseDownButton = -1;
		this.isAbsoluteShape = false;
		this.allowMultiClick = false;
		this.enableRightButton = false;
		this.propagateEvents = false;
		this.cancelEvents = false;
		super._hx_constructor(parent);
		this.shape = shape;
		this.set_cursor(hxd.Cursor.Button);
	}
	getPoint(ray,bestMatch) {
		let rold_px = ray.px;
		let rold_py = ray.py;
		let rold_pz = ray.pz;
		let rold_lx = ray.lx;
		let rold_ly = ray.ly;
		let rold_lz = ray.lz;
		let m = this.getInvPos();
		let x = ray.px;
		let y = ray.py;
		let z = ray.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let x1 = x;
		let y1 = y;
		let z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		let p_x = x1;
		let p_y = y1;
		let p_z = z1;
		let px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		let py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		let pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		ray.px = p_x;
		ray.py = p_y;
		ray.pz = p_z;
		let x2 = ray.lx;
		let y2 = ray.ly;
		let z2 = ray.lz;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		let x3 = x2;
		let y3 = y2;
		let z3 = z2;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		let _this_x = x3;
		let _this_y = y3;
		let _this_z = z3;
		let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
		let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
		let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
		_this_x = px1;
		_this_y = py1;
		_this_z = pz1;
		ray.lx = _this_x;
		ray.ly = _this_y;
		ray.lz = _this_z;
		ray.normalize();
		let d = this.shape.rayIntersection(ray,bestMatch);
		if(d < 0) {
			ray.px = rold_px;
			ray.py = rold_py;
			ray.pz = rold_pz;
			ray.lx = rold_lx;
			ray.ly = rold_ly;
			ray.lz = rold_lz;
			return null;
		}
		let x4 = ray.px + d * ray.lx;
		let y4 = ray.py + d * ray.ly;
		let z4 = ray.pz + d * ray.lz;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		let pt = new h3d.VectorImpl(x4,y4,z4);
		let m1 = this.getAbsPos();
		let px2 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + m1._41;
		let py2 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + m1._42;
		let pz2 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + m1._43;
		pt.x = px2;
		pt.y = py2;
		pt.z = pz2;
		ray.px = rold_px;
		ray.py = rold_py;
		ray.pz = rold_pz;
		ray.lx = rold_lx;
		ray.ly = rold_ly;
		ray.lz = rold_lz;
		return pt;
	}
	get_showDebug() {
		return this.debugObj != null;
	}
	set_showDebug(val) {
		if(!val) {
			if(this.debugObj != null) {
				let _this = this.debugObj;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
			}
			this.debugObj = null;
			return false;
		}
		if(this.debugObj != null) {
			return true;
		}
		this.debugObj = this.shape.makeDebugObj();
		if(this.debugObj != null) {
			h3d.scene.Interactive.setupDebugMaterial(this.debugObj);
			let _this = this.debugObj;
			let b = this.isAbsoluteShape;
			if(b != ((_this.flags & 2048) != 0)) {
				let f = 1;
				let b = true;
				if(b) {
					_this.flags |= f;
				} else {
					_this.flags &= ~f;
				}
			}
			let f = 2048;
			if(b) {
				_this.flags |= f;
			} else {
				_this.flags &= ~f;
			}
			this.addChild(this.debugObj);
		}
		return this.debugObj != null;
	}
	onAdd() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		super.onAdd();
	}
	onRemove() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		super.onRemove();
	}
	preventClick() {
		this.mouseDownButton = -1;
	}
	getInteractiveScene() {
		return this.scene;
	}
	handleEvent(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				let frame = hxd.Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	set_cursor(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	focus() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	blur() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	isOver() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	hasFocus() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	onOver(e) {
	}
	onOut(e) {
	}
	onPush(e) {
	}
	onRelease(e) {
	}
	onReleaseOutside(e) {
	}
	onClick(e) {
	}
	onMove(e) {
	}
	onWheel(e) {
	}
	onFocus(e) {
	}
	onFocusLost(e) {
	}
	onKeyUp(e) {
	}
	onKeyDown(e) {
	}
	onCheck(e) {
	}
	onTextInput(e) {
	}
	static setupDebugMaterial(debugObj) {
		let materials = debugObj.getMaterials();
		let _g = 0;
		while(_g < materials.length) {
			let m = materials[_g];
			++_g;
			let engine = h3d.Engine.CURRENT;
			if(engine.driver.hasFeature(h3d.impl.Feature.Wireframe)) {
				m.passes.set_wireframe(true);
			}
			m.set_castShadows(false);
			m.set_receiveShadows(false);
			m.mshader.color__.w = 0.7;
			m.set_blendMode(h2d.BlendMode.Alpha);
		}
	}
}
$hxClasses["h3d.scene.Interactive"] = h3d.scene.Interactive;
h3d.scene.Interactive.__name__ = "h3d.scene.Interactive";
h3d.scene.Interactive.__interfaces__ = [hxd.Interactive];
h3d.scene.Interactive.__super__ = h3d.scene.Object;
Object.assign(h3d.scene.Interactive.prototype, {
	__class__: h3d.scene.Interactive
	,__properties__: Object.assign({}, h3d.scene.Object.prototype.__properties__, {set_showDebug: "set_showDebug",get_showDebug: "get_showDebug",set_cursor: "set_cursor"})
});
h3d.scene.Light = class h3d_scene_Light extends h3d.scene.Object {
	constructor(shader,parent) {
		if(h3d.scene.Object._hx_skip_constructor) {
			super();
			return;
		}
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(shader,parent);
	}
	_hx_constructor(shader,parent) {
		super._hx_constructor(parent);
		this.shader = shader;
	}
	get_color() {
		return new h3d.VectorImpl(0.,0.,0.);
	}
	set_color(v) {
		return v;
	}
	emit(ctx) {
		ctx.emitLight(this);
	}
	getShadowDirection() {
		return null;
	}
}
$hxClasses["h3d.scene.Light"] = h3d.scene.Light;
h3d.scene.Light.__name__ = "h3d.scene.Light";
h3d.scene.Light.__super__ = h3d.scene.Object;
Object.assign(h3d.scene.Light.prototype, {
	__class__: h3d.scene.Light
	,__properties__: Object.assign({}, h3d.scene.Object.prototype.__properties__, {set_color: "set_color",get_color: "get_color"})
});
h3d.scene.LightSystem = class h3d_scene_LightSystem {
	constructor() {
		if(h3d.scene.LightSystem._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.drawPasses = 0;
	}
	initGlobals(globals) {
	}
	initLights(ctx) {
		this.ctx = ctx;
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			let l = ctx.lights;
			while(l != null) {
				let dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	computeLight(obj,shaders) {
		return shaders;
	}
	dispose() {
	}
}
$hxClasses["h3d.scene.LightSystem"] = h3d.scene.LightSystem;
h3d.scene.LightSystem.__name__ = "h3d.scene.LightSystem";
Object.assign(h3d.scene.LightSystem.prototype, {
	__class__: h3d.scene.LightSystem
});
h3d.scene.MultiMaterial = class h3d_scene_MultiMaterial extends h3d.scene.Mesh {
	_hx_constructor(prim,mats,parent) {
		super._hx_constructor(prim,mats == null ? null : mats[0],parent);
		this.materials = mats == null ? [this.material] : mats;
	}
	getMeshMaterials() {
		return this.materials.slice();
	}
	clone(o) {
		let m = o == null ? new h3d.scene.MultiMaterial(null,this.materials) : o;
		m.materials = [];
		let _g = 0;
		let _g1 = this.materials;
		while(_g < _g1.length) {
			let mat = _g1[_g];
			++_g;
			m.materials.push(mat == null ? null : mat.clone());
		}
		super.clone(m);
		m.material = m.materials[0];
		return m;
	}
	emit(ctx) {
		let _g = 0;
		let _g1 = this.materials.length;
		while(_g < _g1) {
			let i = _g++;
			let m = this.materials[i];
			if(m != null) {
				let index = i;
				if(index == null) {
					index = 0;
				}
				let p = m.passes;
				while(p != null) {
					if(!p.culled) {
						ctx.emitPass(p,this).index = index;
					}
					p = p.nextPass;
				}
			}
		}
	}
	getMaterialByName(name) {
		let _g = 0;
		let _g1 = this.materials;
		while(_g < _g1.length) {
			let m = _g1[_g];
			++_g;
			if(m != null && m.name == name) {
				return m;
			}
		}
		return super.getMaterialByName(name);
	}
	getMaterials(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		let _g = 0;
		let _g1 = this.materials;
		while(_g < _g1.length) {
			let m = _g1[_g];
			++_g;
			if(m != null && a.indexOf(m) < 0) {
				a.push(m);
			}
		}
		if(recursive) {
			let _g = 0;
			let _g1 = this.children;
			while(_g < _g1.length) {
				let o = _g1[_g];
				++_g;
				o.getMaterials(a);
			}
		}
		return a;
	}
	draw(ctx) {
		if(this.materials.length > 1) {
			this.primitive.selectMaterial(ctx.drawPass.index);
		}
		super.draw(ctx);
	}
}
$hxClasses["h3d.scene.MultiMaterial"] = h3d.scene.MultiMaterial;
h3d.scene.MultiMaterial.__name__ = "h3d.scene.MultiMaterial";
h3d.scene.MultiMaterial.__super__ = h3d.scene.Mesh;
Object.assign(h3d.scene.MultiMaterial.prototype, {
	__class__: h3d.scene.MultiMaterial
});
h3d.scene.ObjectFlags = class h3d_scene_ObjectFlags {
	static _new(value) {
		return value;
	}
	static toInt(this1) {
		return this1;
	}
	static has(this1,f) {
		return (this1 & f) != 0;
	}
	static set(this1,f,b) {
		if(b) {
			this1 |= f;
		} else {
			this1 &= ~f;
		}
		return b;
	}
}
h3d.scene._RenderContext = {};
h3d.scene._RenderContext.SharedGlobal = class h3d_scene__$RenderContext_SharedGlobal {
	constructor(gid,value) {
		this.gid = gid;
		this.value = value;
	}
}
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d.scene._RenderContext.SharedGlobal;
h3d.scene._RenderContext.SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
Object.assign(h3d.scene._RenderContext.SharedGlobal.prototype, {
	__class__: h3d.scene._RenderContext.SharedGlobal
});
h3d.scene.RenderContext = class h3d_scene_RenderContext extends h3d.impl.RenderContext {
	constructor() {
		super();
		this.cachedShaderList = [];
		this.cachedPassObjects = [];
		this.initGlobals();
	}
	setCamera(cam) {
		let v = cam.mcam;
		this.globals.map.h[this.cameraView_id] = v;
		let v1 = cam.zNear;
		this.globals.map.h[this.cameraNear_id] = v1;
		let v2 = cam.zFar;
		this.globals.map.h[this.cameraFar_id] = v2;
		let v3 = cam.mproj;
		this.globals.map.h[this.cameraProj_id] = v3;
		let v4 = cam.pos;
		this.globals.map.h[this.cameraPos_id] = v4;
		let x = cam.mproj._11;
		let y = cam.mproj._22;
		let z = cam.mproj._33;
		let w = cam.mproj._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let v5 = new h3d.Vector4Impl(x,y,z,w);
		this.globals.map.h[this.cameraProjDiag_id] = v5;
		let v6 = cam.m;
		this.globals.map.h[this.cameraViewProj_id] = v6;
		let v7 = this.camera.getInverseViewProj();
		this.globals.map.h[this.cameraInverseViewProj_id] = v7;
	}
	setupTarget() {
		let v = this.engine.driver.hasFeature(h3d.impl.Feature.BottomLeftCoords) && this.engine.getCurrentTarget() != null ? -1 : 1;
		this.globals.map.h[this.cameraProjFlip_id] = v;
	}
	getCurrentPixelSize() {
		let t = this.engine.getCurrentTarget();
		let x = 2 / (t == null ? this.engine.width : t.width);
		let y = 2 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d.VectorImpl(x,y,0.);
	}
	emit(mat,obj,index) {
		if(index == null) {
			index = 0;
		}
		let p = mat.passes;
		while(p != null) {
			if(!p.culled) {
				this.emitPass(p,obj).index = index;
			}
			p = p.nextPass;
		}
	}
	start() {
		this.lights = null;
		this.drawPass = null;
		this.passes = [];
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
		this.setCurrent();
		let v = this.time;
		this.globals.map.h[this.globalTime_id] = v;
		let v1 = this.getCurrentPixelSize();
		this.globals.map.h[this.pixelSize_id] = v1;
		this.setCamera(this.camera);
	}
	nextPass() {
		this.cachedPos = 0;
		this.drawPass = null;
	}
	getGlobal(name) {
		return this.globals.get(name);
	}
	setGlobal(name,v) {
		this.globals.set(name,v);
	}
	emitPass(pass,obj) {
		if((pass.rendererFlags & 1) == 0) {
			this.scene.renderer.setPassFlags(pass);
		}
		let o = this.allocPool;
		if(o == null) {
			o = new h3d.pass.PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		if(this.passes.length <= pass.passId) {
			this.passes.length = pass.passId;
		}
		o.next = this.passes[pass.passId];
		this.passes[pass.passId] = o;
		return o;
	}
	allocShaderList(s,next) {
		let sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl.ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	emitLight(l) {
		l.next = this.lights;
		this.lights = l;
	}
	uploadParams() {
		this.fillParams(this.shaderBuffers,this.drawPass.shader,this.drawPass.shaders);
		this.engine.uploadShaderBuffers(this.shaderBuffers,1);
		this.engine.uploadShaderBuffers(this.shaderBuffers,2);
		this.engine.uploadShaderBuffers(this.shaderBuffers,3);
	}
	done() {
		this.drawPass = null;
		let p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		let _g = 0;
		let _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = [];
		this.lights = null;
		this.clearCurrent();
	}
	get_cameraView() {
		return this.globals.map.h[this.cameraView_id];
	}
	set_cameraView(v) {
		this.globals.map.h[this.cameraView_id] = v;
		return v;
	}
	get_cameraNear() {
		return this.globals.map.h[this.cameraNear_id];
	}
	set_cameraNear(v) {
		this.globals.map.h[this.cameraNear_id] = v;
		return v;
	}
	get_cameraFar() {
		return this.globals.map.h[this.cameraFar_id];
	}
	set_cameraFar(v) {
		this.globals.map.h[this.cameraFar_id] = v;
		return v;
	}
	get_cameraProj() {
		return this.globals.map.h[this.cameraProj_id];
	}
	set_cameraProj(v) {
		this.globals.map.h[this.cameraProj_id] = v;
		return v;
	}
	get_cameraPos() {
		return this.globals.map.h[this.cameraPos_id];
	}
	set_cameraPos(v) {
		this.globals.map.h[this.cameraPos_id] = v;
		return v;
	}
	get_cameraProjDiag() {
		return this.globals.map.h[this.cameraProjDiag_id];
	}
	set_cameraProjDiag(v) {
		this.globals.map.h[this.cameraProjDiag_id] = v;
		return v;
	}
	get_cameraProjFlip() {
		return this.globals.map.h[this.cameraProjFlip_id];
	}
	set_cameraProjFlip(v) {
		this.globals.map.h[this.cameraProjFlip_id] = v;
		return v;
	}
	get_cameraViewProj() {
		return this.globals.map.h[this.cameraViewProj_id];
	}
	set_cameraViewProj(v) {
		this.globals.map.h[this.cameraViewProj_id] = v;
		return v;
	}
	get_cameraInverseViewProj() {
		return this.globals.map.h[this.cameraInverseViewProj_id];
	}
	set_cameraInverseViewProj(v) {
		this.globals.map.h[this.cameraInverseViewProj_id] = v;
		return v;
	}
	get_globalTime() {
		return this.globals.map.h[this.globalTime_id];
	}
	set_globalTime(v) {
		this.globals.map.h[this.globalTime_id] = v;
		return v;
	}
	get_pixelSize() {
		return this.globals.map.h[this.pixelSize_id];
	}
	set_pixelSize(v) {
		this.globals.map.h[this.pixelSize_id] = v;
		return v;
	}
	get_globalModelView() {
		return this.globals.map.h[this.globalModelView_id];
	}
	set_globalModelView(v) {
		this.globals.map.h[this.globalModelView_id] = v;
		return v;
	}
	get_globalModelViewInverse() {
		return this.globals.map.h[this.globalModelViewInverse_id];
	}
	set_globalModelViewInverse(v) {
		this.globals.map.h[this.globalModelViewInverse_id] = v;
		return v;
	}
	initGlobals() {
		this.cameraView_id = hxsl.Globals.allocID("camera.view");
		this.cameraNear_id = hxsl.Globals.allocID("camera.zNear");
		this.cameraFar_id = hxsl.Globals.allocID("camera.zFar");
		this.cameraProj_id = hxsl.Globals.allocID("camera.proj");
		this.cameraPos_id = hxsl.Globals.allocID("camera.position");
		this.cameraProjDiag_id = hxsl.Globals.allocID("camera.projDiag");
		this.cameraProjFlip_id = hxsl.Globals.allocID("camera.projFlip");
		this.cameraViewProj_id = hxsl.Globals.allocID("camera.viewProj");
		this.cameraInverseViewProj_id = hxsl.Globals.allocID("camera.inverseViewProj");
		this.globalTime_id = hxsl.Globals.allocID("global.time");
		this.pixelSize_id = hxsl.Globals.allocID("global.pixelSize");
		this.globalModelView_id = hxsl.Globals.allocID("global.modelView");
		this.globalModelViewInverse_id = hxsl.Globals.allocID("global.modelViewInverse");
	}
}
$hxClasses["h3d.scene.RenderContext"] = h3d.scene.RenderContext;
h3d.scene.RenderContext.__name__ = "h3d.scene.RenderContext";
h3d.scene.RenderContext.__super__ = h3d.impl.RenderContext;
Object.assign(h3d.scene.RenderContext.prototype, {
	__class__: h3d.scene.RenderContext
	,__properties__: {set_globalModelViewInverse: "set_globalModelViewInverse",get_globalModelViewInverse: "get_globalModelViewInverse",set_globalModelView: "set_globalModelView",get_globalModelView: "get_globalModelView",set_pixelSize: "set_pixelSize",get_pixelSize: "get_pixelSize",set_globalTime: "set_globalTime",get_globalTime: "get_globalTime",set_cameraInverseViewProj: "set_cameraInverseViewProj",get_cameraInverseViewProj: "get_cameraInverseViewProj",set_cameraViewProj: "set_cameraViewProj",get_cameraViewProj: "get_cameraViewProj",set_cameraProjFlip: "set_cameraProjFlip",get_cameraProjFlip: "get_cameraProjFlip",set_cameraProjDiag: "set_cameraProjDiag",get_cameraProjDiag: "get_cameraProjDiag",set_cameraPos: "set_cameraPos",get_cameraPos: "get_cameraPos",set_cameraProj: "set_cameraProj",get_cameraProj: "get_cameraProj",set_cameraFar: "set_cameraFar",get_cameraFar: "get_cameraFar",set_cameraNear: "set_cameraNear",get_cameraNear: "get_cameraNear",set_cameraView: "set_cameraView",get_cameraView: "get_cameraView"}
});
h3d.scene.PassObjects = class h3d_scene_PassObjects {
	constructor() {
		this.passes = new h3d.pass.PassList();
	}
}
$hxClasses["h3d.scene.PassObjects"] = h3d.scene.PassObjects;
h3d.scene.PassObjects.__name__ = "h3d.scene.PassObjects";
Object.assign(h3d.scene.PassObjects.prototype, {
	__class__: h3d.scene.PassObjects
});
h3d.scene.RenderMode = $hxEnums["h3d.scene.RenderMode"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"h3d.scene.RenderMode",toString:$estr}
	,LightProbe: {_hx_name:"LightProbe",_hx_index:1,__enum__:"h3d.scene.RenderMode",toString:$estr}
};
h3d.scene.RenderMode.__constructs__ = [h3d.scene.RenderMode.Default,h3d.scene.RenderMode.LightProbe];
h3d.scene.RenderMode.__empty_constructs__ = [h3d.scene.RenderMode.Default,h3d.scene.RenderMode.LightProbe];
h3d.scene.Renderer = class h3d_scene_Renderer extends hxd.impl.AnyProps {
	constructor() {
		super();
		if(h3d.scene.Renderer._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.shadows = true;
		this.renderMode = h3d.scene.RenderMode.Default;
		this.effects = [];
		this.debugging = false;
		this.hasSetTarget = false;
		this.emptyPasses = new h3d.pass.PassList();
		this.allPasses = [];
		this.passObjects = new haxe.ds.StringMap();
		this.set_props(this.getDefaultProps());
		let _g = this;
		let frontToBack = true;
		this.frontToBack = function(passes) {
			_g.depthSort(frontToBack,passes);
		};
		let _g1 = this;
		let frontToBack1 = false;
		this.backToFront = function(passes) {
			_g1.depthSort(frontToBack1,passes);
		};
	}
	getEffect(cl) {
		let _g = 0;
		let _g1 = this.effects;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			let f1 = js.Boot.__downcastCheck(f,cl) ? f : null;
			if(f1 != null) {
				return f1;
			}
		}
		return null;
	}
	dispose() {
		let _g = 0;
		let _g1 = this.allPasses;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			p.dispose();
		}
		let _g2 = 0;
		let _g3 = this.effects;
		while(_g2 < _g3.length) {
			let f = _g3[_g2];
			++_g2;
			f.dispose();
		}
		if(this.ctx.lightSystem != null) {
			this.ctx.lightSystem.dispose();
		}
		this.passObjects = new haxe.ds.StringMap();
	}
	mark(id) {
	}
	addShader(s) {
	}
	getPass(c) {
		let _g = 0;
		let _g1 = this.allPasses;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(p,c)) {
				return p;
			}
		}
		return null;
	}
	getPassByName(name) {
		let _g = 0;
		let _g1 = this.allPasses;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.name == name) {
				return p;
			}
		}
		return null;
	}
	hasFeature(f) {
		return h3d.Engine.CURRENT.driver.hasFeature(f);
	}
	getLightSystem() {
		return this.ctx.scene.lightSystem;
	}
	depthSort(frontToBack,passes) {
		let cam = this.ctx.camera.m;
		let _g_o = passes.current;
		while(_g_o != null) {
			let tmp = _g_o;
			_g_o = _g_o.next;
			let p = tmp;
			let z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			let w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			let list = passes.current;
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							let i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			let list = passes.current;
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							let i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	clear(color,depth,stencil) {
		this.ctx.engine.clear(color,depth,stencil);
	}
	allocTarget(name,depth,size,format1) {
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		return this.ctx.textures.allocTarget(name,Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,format1);
	}
	copy(from,to,blend) {
		h3d.pass.Copy.run(from,to,blend);
	}
	setTarget(tex,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTarget(tex,null,null,depthBinding);
		this.hasSetTarget = true;
	}
	setTargets(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d.DepthBinding.ReadWrite;
		}
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTargets(textures,depthBinding);
		this.hasSetTarget = true;
	}
	setDepth(depthBuffer) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushDepth(depthBuffer);
		this.hasSetTarget = true;
	}
	resetTarget() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	has(name) {
		return this.passObjects.h[name] != null;
	}
	setPassFlags(pass) {
		pass.rendererFlags |= 1;
	}
	get(name) {
		let p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	draw(name) {
		this.defaultPass.draw(this.get(name));
	}
	render() {
		throw haxe.Exception.thrown("Not implemented");
	}
	computeStatic() {
		throw haxe.Exception.thrown("Not implemented");
	}
	start() {
	}
	process(passes) {
		this.hasSetTarget = false;
		let _g = 0;
		let _g1 = this.allPasses;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		let _g2 = 0;
		while(_g2 < passes.length) {
			let p = passes[_g2];
			++_g2;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		let _g3 = 0;
		while(_g3 < passes.length) {
			let p = passes[_g3];
			++_g3;
			this.passObjects.h[p.name] = null;
		}
	}
}
$hxClasses["h3d.scene.Renderer"] = h3d.scene.Renderer;
h3d.scene.Renderer.__name__ = "h3d.scene.Renderer";
h3d.scene.Renderer.__super__ = hxd.impl.AnyProps;
Object.assign(h3d.scene.Renderer.prototype, {
	__class__: h3d.scene.Renderer
});
h3d.scene.Scene = class h3d_scene_Scene extends h3d.scene.Object {
	constructor(createRenderer,createLightSystem) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(createRenderer,createLightSystem);
	}
	_hx_constructor(createRenderer,createLightSystem) {
		if(createLightSystem == null) {
			createLightSystem = true;
		}
		if(createRenderer == null) {
			createRenderer = true;
		}
		this.prevEngine = null;
		super._hx_constructor(null);
		this.window = hxd.Window.getInstance();
		this.eventListeners = [];
		this.hitInteractives = [];
		this.interactives = [];
		this.camera = new h3d.Camera();
		let engine = h3d.Engine.CURRENT;
		if(engine != null) {
			this.camera.screenRatio = engine.width / engine.height;
		}
		this.ctx = new h3d.scene.RenderContext();
		if(createRenderer) {
			this.set_renderer(h3d.mat.MaterialSetup.current.createRenderer());
		}
		if(createLightSystem) {
			this.lightSystem = h3d.mat.MaterialSetup.current.createLightSystem();
		}
	}
	setEvents(events) {
		this.events = events;
	}
	addEventListener(f) {
		this.eventListeners.push(f);
	}
	removeEventListener(f) {
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			if(e == f) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	dispatchListeners(event) {
		let _g = 0;
		let _g1 = this.eventListeners;
		while(_g < _g1.length) {
			let l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	set_renderer(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	sortHitPointByCameraDistance(i1,i2) {
		let z1 = i1.hitPoint.w;
		let z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	dispatchEvent(event,to) {
		let i = to;
		i.handleEvent(event);
	}
	isInteractiveVisible(i) {
		let o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	handleEvent(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			let screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			let screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			let p0 = this.camera.unproject(screenX,screenY,0);
			let p1 = this.camera.unproject(screenX,screenY,1);
			let x = p0.x;
			let y = p0.y;
			let z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let p1_x = x1;
			let p1_y = y1;
			let p1_z = z1;
			let x2 = p1.x;
			let y2 = p1.y;
			let z2 = p1.z;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let x3 = x2;
			let y3 = y2;
			let z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let p2_x = x3;
			let p2_y = y3;
			let p2_z = z3;
			let r = new h3d.col.Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			let r1 = r;
			let saveR_px = r1.px;
			let saveR_py = r1.py;
			let saveR_pz = r1.pz;
			let saveR_lx = r1.lx;
			let saveR_ly = r1.ly;
			let saveR_lz = r1.lz;
			let priority = -2147483648;
			let _g = 0;
			let _g1 = this.interactives;
			while(_g < _g1.length) {
				let i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				let p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				if(!i.isAbsoluteShape) {
					let minv = i.getInvPos();
					let x = r1.px;
					let y = r1.py;
					let z = r1.pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let p_x = x1;
					let p_y = y1;
					let p_z = z1;
					let px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + minv._41;
					let py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + minv._42;
					let pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + minv._43;
					p_x = px;
					p_y = py;
					p_z = pz;
					r1.px = p_x;
					r1.py = p_y;
					r1.pz = p_z;
					let x2 = r1.lx;
					let y2 = r1.ly;
					let z2 = r1.lz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					let x3 = x2;
					let y3 = y2;
					let z3 = z2;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					let _this_x = x3;
					let _this_y = y3;
					let _this_z = z3;
					let px1 = _this_x * minv._11 + _this_y * minv._21 + _this_z * minv._31;
					let py1 = _this_x * minv._12 + _this_y * minv._22 + _this_z * minv._32;
					let pz1 = _this_x * minv._13 + _this_y * minv._23 + _this_z * minv._33;
					_this_x = px1;
					_this_y = py1;
					_this_z = pz1;
					r1.lx = _this_x;
					r1.ly = _this_y;
					r1.lz = _this_z;
					r1.normalize();
				}
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				let hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				let x = r1.px + hit * r1.lx;
				let y = r1.py + hit * r1.ly;
				let z = r1.pz + hit * r1.lz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let x1 = x;
				let y1 = y;
				let z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let hitPoint_x = x1;
				let hitPoint_y = y1;
				let hitPoint_z = z1;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				let _g = 0;
				let _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					let i = _g1[_g];
					++_g;
					let m = i.invPos;
					let wfactor = 0.;
					if(i.preciseShape != null) {
						let x = r1.px;
						let y = r1.py;
						let z = r1.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						let x1 = x;
						let y1 = y;
						let z1 = z;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						let p_x = x1;
						let p_y = y1;
						let p_z = z1;
						let px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
						let py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
						let pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r1.px = p_x;
						r1.py = p_y;
						r1.pz = p_z;
						let x2 = r1.lx;
						let y2 = r1.ly;
						let z2 = r1.lz;
						if(z2 == null) {
							z2 = 0.;
						}
						if(y2 == null) {
							y2 = 0.;
						}
						if(x2 == null) {
							x2 = 0.;
						}
						let x3 = x2;
						let y3 = y2;
						let z3 = z2;
						if(z3 == null) {
							z3 = 0.;
						}
						if(y3 == null) {
							y3 = 0.;
						}
						if(x3 == null) {
							x3 = 0.;
						}
						let _this_x = x3;
						let _this_y = y3;
						let _this_z = z3;
						let px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
						let py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
						let pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
						_this_x = px1;
						_this_y = py1;
						_this_z = pz1;
						r1.lx = _this_x;
						r1.ly = _this_y;
						r1.lz = _this_z;
						r1.normalize();
						let hit = i.preciseShape.rayIntersection(r1,i.bestMatch);
						if(hit > 0) {
							let x = r1.px + hit * r1.lx;
							let y = r1.py + hit * r1.ly;
							let z = r1.pz + hit * r1.lz;
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							let x1 = x;
							let y1 = y;
							let z1 = z;
							if(z1 == null) {
								z1 = 0.;
							}
							if(y1 == null) {
								y1 = 0.;
							}
							if(x1 == null) {
								x1 = 0.;
							}
							let hitPoint_x = x1;
							let hitPoint_y = y1;
							let hitPoint_z = z1;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					let _this = i.hitPoint;
					let x = _this.x;
					let y = _this.y;
					let z = _this.z;
					let w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					let x1 = x;
					let y1 = y;
					let z1 = z;
					let w1 = w;
					if(w1 == null) {
						w1 = 1.;
					}
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					let _this_x = x1;
					let _this_y = y1;
					let _this_z = z1;
					let _this_w = w1;
					_this_w = 1;
					let m1 = i.absPos;
					let px = _this_x * m1._11 + _this_y * m1._21 + _this_z * m1._31 + _this_w * m1._41;
					let py = _this_x * m1._12 + _this_y * m1._22 + _this_z * m1._32 + _this_w * m1._42;
					let pz = _this_x * m1._13 + _this_y * m1._23 + _this_z * m1._33 + _this_w * m1._43;
					_this_x = px;
					_this_y = py;
					_this_z = pz;
					let m2 = this.camera.m;
					let px1 = _this_x * m2._11 + _this_y * m2._21 + _this_z * m2._31 + _this_w * m2._41;
					let py1 = _this_x * m2._12 + _this_y * m2._22 + _this_z * m2._32 + _this_w * m2._42;
					let pz1 = _this_x * m2._13 + _this_y * m2._23 + _this_z * m2._33 + _this_w * m2._43;
					let iw = 1 / (_this_x * m2._14 + _this_y * m2._24 + _this_z * m2._34 + _this_w * m2._44);
					_this_x = px1 * iw;
					_this_y = py1 * iw;
					_this_z = pz1 * iw;
					_this_w = 1;
					i.hitPoint.w = _this_z + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			let i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	clone(o) {
		let s = o == null ? new h3d.scene.Scene() : o;
		s.camera = this.camera.clone();
		super.clone(s);
		return s;
	}
	dispose() {
		if((this.flags & 32) != 0) {
			this.onRemove();
		}
		this.ctx.dispose();
		if(this.renderer != null) {
			this.renderer.dispose();
			this.set_renderer(new h3d.scene.Renderer());
		}
	}
	addEventTarget(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe.Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	removeEventTarget(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	setElapsedTime(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	syncOnly(et) {
		let engine = h3d.Engine.CURRENT;
		this.setElapsedTime(et);
		let t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
	}
	computeStatic() {
		let old = this.ctx.elapsedTime;
		this.ctx.elapsedTime = 0;
		this.ctx.computingStatic = true;
		this.render(h3d.Engine.CURRENT);
		this.ctx.computingStatic = false;
		this.ctx.elapsedTime = old;
	}
	onContextLost() {
		this.ctx.wasContextLost = true;
	}
	render(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		let t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d.impl.RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		let passes = [];
		let passIndex = -1;
		let _g = 0;
		let _g1 = this.ctx.passes.length;
		while(_g < _g1) {
			let passId = _g++;
			let curPass = this.ctx.passes[passId];
			if(curPass == null) {
				continue;
			}
			let pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d.scene.PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			let _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d.impl.RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.wasContextLost = false;
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		let _g2 = 0;
		let _g3 = passIndex;
		while(_g2 < _g3) {
			let i = _g2++;
			let p = this.ctx.cachedPassObjects[i];
			p.name = null;
			let _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	setOutputTarget(engine,tex) {
		if(tex != null) {
			if(this.prevDB != null) {
				throw haxe.Exception.thrown("missing setOutputTarget()");
			}
			engine.pushTarget(tex);
			engine.width = tex.width;
			engine.height = tex.height;
			this.prevDB = this.ctx.textures.defaultDepthBuffer;
			this.prevEngine = engine;
			this.ctx.textures.defaultDepthBuffer = tex.depthBuffer;
		} else {
			this.prevEngine.popTarget();
			this.prevEngine.width = this.prevDB.width;
			this.prevEngine.height = this.prevDB.height;
			this.ctx.textures.defaultDepthBuffer = this.prevDB;
			this.prevDB = null;
			this.prevEngine = null;
		}
	}
}
$hxClasses["h3d.scene.Scene"] = h3d.scene.Scene;
h3d.scene.Scene.__name__ = "h3d.scene.Scene";
h3d.scene.Scene.__interfaces__ = [hxd.InteractiveScene,h3d.IDrawable];
h3d.scene.Scene.__super__ = h3d.scene.Object;
Object.assign(h3d.scene.Scene.prototype, {
	__class__: h3d.scene.Scene
	,__properties__: Object.assign({}, h3d.scene.Object.prototype.__properties__, {set_renderer: "set_renderer"})
});
h3d.scene.Joint = class h3d_scene_Joint extends h3d.scene.Object {
	constructor(skin,j) {
		super(null);
		this.name = j.name;
		this.skin = skin;
		this.parent = skin;
		this.index = j.index;
	}
	getObjectByName(name) {
		let sk = this.skin.getSkinData();
		let j = sk.namedJoints.h[name];
		if(j == null) {
			return null;
		}
		let cur = sk.allJoints[this.index];
		if(cur.index != this.index) {
			throw haxe.Exception.thrown("assert");
		}
		let jp = j.parent;
		while(jp != null) {
			if(jp == cur) {
				let jo = new h3d.scene.Joint(this.skin,j);
				jo.parent = this;
				return jo;
			}
			jp = jp.parent;
		}
		return null;
	}
	syncPos() {
		let p = this.parent;
		while(p != null) {
			if((p.flags & 1) != 0) {
				if(this.skin.jointsAbsPosInv == null) {
					let this1 = new h3d.MatrixImpl();
					this.skin.jointsAbsPosInv = this1;
					this.skin.jointsAbsPosInv.zero();
				}
				if(this.skin.jointsAbsPosInv._44 == 0) {
					this.skin.jointsAbsPosInv.inverse3x4(this.parent.absPos);
				}
				this.parent.syncPos();
				this.lastFrame = -1;
				break;
			}
			p = p.parent;
		}
		if(this.lastFrame != this.skin.lastFrame) {
			this.lastFrame = this.skin.lastFrame;
			this.absPos.load(this.skin.currentAbsPose[this.index]);
			if(this.skin.jointsAbsPosInv != null && this.skin.jointsAbsPosInv._44 != 0) {
				this.absPos.multiply3x4(this.absPos,this.skin.jointsAbsPosInv);
				this.absPos.multiply3x4(this.absPos,this.parent.absPos);
			}
		}
	}
}
$hxClasses["h3d.scene.Joint"] = h3d.scene.Joint;
h3d.scene.Joint.__name__ = "h3d.scene.Joint";
h3d.scene.Joint.__super__ = h3d.scene.Object;
Object.assign(h3d.scene.Joint.prototype, {
	__class__: h3d.scene.Joint
});
h3d.scene.Skin = class h3d_scene_Skin extends h3d.scene.MultiMaterial {
	constructor(s,mat,parent) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(s,mat,parent);
	}
	_hx_constructor(s,mat,parent) {
		this.enableRetargeting = true;
		super._hx_constructor(null,mat,parent);
		if(s != null) {
			this.setSkinData(s);
		}
	}
	clone(o) {
		let s = o == null ? new h3d.scene.Skin(null,this.materials.slice()) : o;
		super.clone(s);
		s.setSkinData(this.skinData);
		s.currentRelPose = this.currentRelPose.slice();
		return s;
	}
	addBoundsRec(b,relativeTo) {
		let old = this.primitive;
		this.set_primitive(null);
		super.addBoundsRec(b,relativeTo);
		this.set_primitive(old);
		if((this.flags & 512) != 0) {
			return;
		}
		this.syncJoints();
		if(this.skinData.vertexWeights == null) {
			(js.Boot.__cast(this.primitive , h3d.prim.HMDModel)).loadSkin(this.skinData);
		}
		let _this = this.getAbsPos();
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let absScale_x = x;
		let absScale_y = y;
		let absScale_z = z;
		absScale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		absScale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		absScale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			absScale_x *= -1;
			absScale_y *= -1;
			absScale_z *= -1;
		}
		let scale = Math.max(Math.max(absScale_x,absScale_y),absScale_z);
		let _g = 0;
		let _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			let j = _g1[_g];
			++_g;
			if(j.offsetRay < 0) {
				continue;
			}
			let m = this.currentPalette[j.bindIndex];
			let _this = j.offsets;
			let x = _this.xMin;
			let y = _this.yMin;
			let z = _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let pt_x = x1;
			let pt_y = y1;
			let pt_z = z1;
			if(m != null) {
				let px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
				let py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
				let pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				let x = pt_x;
				let y = pt_y;
				let z = pt_z;
				let r = j.offsetRay * scale;
				if(x - r < b.xMin) {
					b.xMin = x - r;
				}
				if(x + r > b.xMax) {
					b.xMax = x + r;
				}
				if(y - r < b.yMin) {
					b.yMin = y - r;
				}
				if(y + r > b.yMax) {
					b.yMax = y + r;
				}
				if(z - r < b.zMin) {
					b.zMin = z - r;
				}
				if(z + r > b.zMax) {
					b.zMax = z + r;
				}
				let _this = j.offsets;
				let x1 = _this.xMax;
				let y1 = _this.yMax;
				let z1 = _this.zMax;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				let x2 = x1;
				let y2 = y1;
				let z2 = z1;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				let pt_x1 = x2;
				let pt_y1 = y2;
				let pt_z1 = z2;
				let px1 = pt_x1 * m._11 + pt_y1 * m._21 + pt_z1 * m._31 + m._41;
				let py1 = pt_x1 * m._12 + pt_y1 * m._22 + pt_z1 * m._32 + m._42;
				let pz1 = pt_x1 * m._13 + pt_y1 * m._23 + pt_z1 * m._33 + m._43;
				pt_x1 = px1;
				pt_y1 = py1;
				pt_z1 = pz1;
				let x3 = pt_x1;
				let y3 = pt_y1;
				let z3 = pt_z1;
				let r1 = j.offsetRay * scale;
				if(x3 - r1 < b.xMin) {
					b.xMin = x3 - r1;
				}
				if(x3 + r1 > b.xMax) {
					b.xMax = x3 + r1;
				}
				if(y3 - r1 < b.yMin) {
					b.yMin = y3 - r1;
				}
				if(y3 + r1 > b.yMax) {
					b.yMax = y3 + r1;
				}
				if(z3 - r1 < b.zMin) {
					b.zMin = z3 - r1;
				}
				if(z3 + r1 > b.zMax) {
					b.zMax = z3 + r1;
				}
			}
		}
	}
	getCurrentSkeletonBounds() {
		this.syncJoints();
		let b = new h3d.col.Bounds();
		let _g = 0;
		let _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			let j = _g1[_g];
			++_g;
			if(j.bindIndex < 0) {
				continue;
			}
			let r = this.currentAbsPose[j.index];
			let x = r._41;
			let y = r._42;
			let z = r._43;
			if(x < b.xMin) {
				b.xMin = x;
			}
			if(x > b.xMax) {
				b.xMax = x;
			}
			if(y < b.yMin) {
				b.yMin = y;
			}
			if(y > b.yMax) {
				b.yMax = y;
			}
			if(z < b.zMin) {
				b.zMin = z;
			}
			if(z > b.zMax) {
				b.zMax = z;
			}
		}
		return b;
	}
	getObjectByName(name) {
		if(this.skinData != null && this.skinData.name == name) {
			return this;
		}
		let o = super.getObjectByName(name);
		if(o != null) {
			return o;
		}
		if(this.skinData != null) {
			let j = this.skinData.namedJoints.h[name];
			if(j != null) {
				return new h3d.scene.Joint(this,j);
			}
		}
		return null;
	}
	getLocalCollider() {
		throw haxe.Exception.thrown("Not implemented");
	}
	getGlobalCollider() {
		let col = js.Boot.__cast(this.primitive.getCollider() , h3d.col.OptimizedCollider);
		(js.Boot.__cast(this.primitive , h3d.prim.HMDModel)).loadSkin(this.skinData);
		return new h3d.col.SkinCollider(this,js.Boot.__cast(col.b , h3d.col.PolygonBuffer));
	}
	calcAbsPos() {
		super.calcAbsPos();
		this.jointsUpdated = true;
	}
	getSkinData() {
		return this.skinData;
	}
	setSkinData(s,shaderInit) {
		if(shaderInit == null) {
			shaderInit = true;
		}
		this.skinData = s;
		this.jointsUpdated = true;
		this.set_primitive(s.primitive);
		if(shaderInit) {
			let hasNormalMap = false;
			let _g = 0;
			let _g1 = this.materials;
			while(_g < _g1.length) {
				let m = _g1[_g];
				++_g;
				if(m != null && m.get_normalMap() != null) {
					hasNormalMap = true;
					break;
				}
			}
			this.skinShader = hasNormalMap ? new h3d.shader.SkinTangent() : new h3d.shader.Skin();
			let _this = this.skinShader;
			_this.constModified = true;
			_this.fourBonesByVertex__ = this.skinData.bonesPerVertex == 4;
			let maxBones = 0;
			if(this.skinData.splitJoints != null) {
				let _g = 0;
				let _g1 = this.skinData.splitJoints;
				while(_g < _g1.length) {
					let s = _g1[_g];
					++_g;
					if(s.joints.length > maxBones) {
						maxBones = s.joints.length;
					}
				}
			} else {
				maxBones = this.skinData.boundJoints.length;
			}
			if(this.skinShader.MaxBones__ < maxBones) {
				let _this = this.skinShader;
				_this.constModified = true;
				_this.MaxBones__ = maxBones;
			}
			let _g2 = 0;
			let _g3 = this.materials;
			while(_g2 < _g3.length) {
				let m = _g3[_g2];
				++_g2;
				if(m != null) {
					let s = m.passes.getShader(h3d.shader.SkinTangent);
					if(s != null) {
						m.passes.removeShader(s);
					}
					if(m.get_normalMap() != null) {
						m.passes.addShaderAtIndex(this.skinShader,m.passes.getShaderIndex(m.normalShader) + 1);
					} else {
						m.passes.addShader(this.skinShader);
					}
					if(this.skinData.splitJoints != null) {
						m.passes.set_dynamicParameters(true);
					}
				}
			}
		}
		this.currentRelPose = [];
		this.currentAbsPose = [];
		this.currentPalette = [];
		this.paletteChanged = true;
		let _g = 0;
		let _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			let j = _g1[_g];
			++_g;
			this.currentAbsPose.push(h3d.Matrix.I());
		}
		let _g2 = 0;
		let _g3 = this.skinData.boundJoints.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.currentPalette.push(h3d.Matrix.I());
		}
		if(this.skinData.splitJoints != null) {
			this.splitPalette = [];
			let _g = 0;
			let _g1 = this.skinData.splitJoints;
			while(_g < _g1.length) {
				let a = _g1[_g];
				++_g;
				let tmp = this.splitPalette;
				let _g2 = [];
				let _g3 = 0;
				let _g4 = a.joints;
				while(_g3 < _g4.length) {
					let j = _g4[_g3];
					++_g3;
					_g2.push(this.currentPalette[j.bindIndex]);
				}
				tmp.push(_g2);
			}
		} else {
			this.splitPalette = null;
		}
	}
	sync(ctx) {
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			return;
		}
		this.syncJoints();
	}
	syncJoints() {
		if(!this.jointsUpdated) {
			return;
		}
		let tmpMat = h3d.scene.Skin.TMP_MAT;
		let _g = 0;
		let _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			let j = _g1[_g];
			++_g;
			if(j.follow != null) {
				continue;
			}
			let id = j.index;
			let m = this.currentAbsPose[id];
			let r = this.currentRelPose[id];
			let bid = j.bindIndex;
			if(r == null) {
				r = j.defMat;
			} else if(j.retargetAnim && this.enableRetargeting) {
				tmpMat.load(r);
				r = tmpMat;
				r._41 = j.defMat._41;
				r._42 = j.defMat._42;
				r._43 = j.defMat._43;
			}
			if(j.parent == null) {
				let _this = m;
				let b = this.absPos;
				let m11 = r._11;
				let m12 = r._12;
				let m13 = r._13;
				let m21 = r._21;
				let m22 = r._22;
				let m23 = r._23;
				let a31 = r._31;
				let a32 = r._32;
				let a33 = r._33;
				let a41 = r._41;
				let a42 = r._42;
				let a43 = r._43;
				let b11 = b._11;
				let b12 = b._12;
				let b13 = b._13;
				let b21 = b._21;
				let b22 = b._22;
				let b23 = b._23;
				let b31 = b._31;
				let b32 = b._32;
				let b33 = b._33;
				let b41 = b._41;
				let b42 = b._42;
				let b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
			} else {
				let _this = m;
				let b = this.currentAbsPose[j.parent.index];
				let m11 = r._11;
				let m12 = r._12;
				let m13 = r._13;
				let m21 = r._21;
				let m22 = r._22;
				let m23 = r._23;
				let a31 = r._31;
				let a32 = r._32;
				let a33 = r._33;
				let a41 = r._41;
				let a42 = r._42;
				let a43 = r._43;
				let b11 = b._11;
				let b12 = b._12;
				let b13 = b._13;
				let b21 = b._21;
				let b22 = b._22;
				let b23 = b._23;
				let b31 = b._31;
				let b32 = b._32;
				let b33 = b._33;
				let b41 = b._41;
				let b42 = b._42;
				let b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
			}
			if(bid >= 0) {
				let _this = this.currentPalette[bid];
				let a = j.transPos;
				let m11 = a._11;
				let m12 = a._12;
				let m13 = a._13;
				let m21 = a._21;
				let m22 = a._22;
				let m23 = a._23;
				let a31 = a._31;
				let a32 = a._32;
				let a33 = a._33;
				let a41 = a._41;
				let a42 = a._42;
				let a43 = a._43;
				let b11 = m._11;
				let b12 = m._12;
				let b13 = m._13;
				let b21 = m._21;
				let b22 = m._22;
				let b23 = m._23;
				let b31 = m._31;
				let b32 = m._32;
				let b33 = m._33;
				let b41 = m._41;
				let b42 = m._42;
				let b43 = m._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
			}
		}
		this.skinShader.bonesMatrixes__ = this.currentPalette;
		if(this.jointsAbsPosInv != null) {
			this.jointsAbsPosInv._44 = 0;
		}
		this.jointsUpdated = false;
	}
	emit(ctx) {
		this.syncJoints();
		if(this.splitPalette == null) {
			super.emit(ctx);
		} else {
			let _g = 0;
			let _g1 = this.splitPalette.length;
			while(_g < _g1) {
				let i = _g++;
				let m = this.materials[this.skinData.splitJoints[i].material];
				if(m != null) {
					let index = i;
					if(index == null) {
						index = 0;
					}
					let p = m.passes;
					while(p != null) {
						if(!p.culled) {
							ctx.emitPass(p,this).index = index;
						}
						p = p.nextPass;
					}
				}
			}
		}
		if(this.showJoints) {
			if(this.jointsGraphics == null) {
				this.jointsGraphics = new h3d.scene.Graphics(this);
				this.jointsGraphics.material.passes.depth(false,h3d.mat.Compare.Always);
				this.jointsGraphics.material.passes.setPassName("alpha");
			}
			let topParent = this;
			while(topParent.parent != null) topParent = topParent.parent;
			this.jointsGraphics.set_follow(topParent);
			let g = this.jointsGraphics;
			g.clear();
			let _g = 0;
			let _g1 = this.skinData.allJoints;
			while(_g < _g1.length) {
				let j = _g1[_g];
				++_g;
				let m = this.currentAbsPose[j.index];
				let mp = j.parent == null ? this.absPos : this.currentAbsPose[j.parent.index];
				g.lineStyle(1,j.parent == null ? -16776961 : -256);
				g.moveTo(mp._41,mp._42,mp._43);
				g.lineTo(m._41,m._42,m._43);
			}
		} else if(this.jointsGraphics != null) {
			let _this = this.jointsGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.jointsGraphics = null;
		}
	}
	draw(ctx) {
		if(this.splitPalette == null) {
			super.draw(ctx);
		} else {
			let i = ctx.drawPass.index;
			this.skinShader.bonesMatrixes__ = this.splitPalette[i];
			this.primitive.selectMaterial(i);
			ctx.uploadParams();
			this.primitive.render(ctx.engine);
		}
	}
}
$hxClasses["h3d.scene.Skin"] = h3d.scene.Skin;
h3d.scene.Skin.__name__ = "h3d.scene.Skin";
h3d.scene.Skin.__super__ = h3d.scene.MultiMaterial;
Object.assign(h3d.scene.Skin.prototype, {
	__class__: h3d.scene.Skin
});
h3d.scene.fwd = {};
h3d.scene.fwd.Light = class h3d_scene_fwd_Light extends h3d.scene.Light {
	constructor(shader,parent) {
		h3d.scene.Object._hx_skip_constructor = true;
		super();
		h3d.scene.Object._hx_skip_constructor = false;
		this._hx_constructor(shader,parent);
	}
	_hx_constructor(shader,parent) {
		this.priority = 0;
		this.cullingDistance = -1;
		super._hx_constructor(shader,parent);
	}
	get_enableSpecular() {
		return false;
	}
	set_enableSpecular(b) {
		if(b) {
			throw haxe.Exception.thrown("Not implemented for this light");
		}
		return false;
	}
}
$hxClasses["h3d.scene.fwd.Light"] = h3d.scene.fwd.Light;
h3d.scene.fwd.Light.__name__ = "h3d.scene.fwd.Light";
h3d.scene.fwd.Light.__super__ = h3d.scene.Light;
Object.assign(h3d.scene.fwd.Light.prototype, {
	__class__: h3d.scene.fwd.Light
	,__properties__: Object.assign({}, h3d.scene.Light.prototype.__properties__, {set_enableSpecular: "set_enableSpecular",get_enableSpecular: "get_enableSpecular"})
});
h3d.scene.fwd.LightSystem = class h3d_scene_fwd_LightSystem extends h3d.scene.LightSystem {
	constructor() {
		h3d.scene.LightSystem._hx_skip_constructor = true;
		super();
		h3d.scene.LightSystem._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.perPixelLighting = true;
		this.maxLightsPerObject = 6;
		super._hx_constructor();
		let x = 0.5;
		let y = 0.5;
		let z = 0.5;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.ambientLight = new h3d.VectorImpl(x,y,z);
		this.ambientShader = new h3d.shader.AmbientLight();
		this.set_additiveLighting(true);
	}
	get_additiveLighting() {
		let value = this.ambientShader;
		return (((value) instanceof h3d.shader.AmbientLight) ? value : null).additive__;
	}
	set_additiveLighting(b) {
		let value = this.ambientShader;
		let _this = ((value) instanceof h3d.shader.AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	initLights(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		super.initLights(ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			let list = ctx.lights;
			let cmp = $bind(this,this.sortLight);
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							let i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	initGlobals(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	cullLights() {
		let ll = this.ctx.lights;
		let prev = null;
		let s = new h3d.col.Sphere();
		while(ll != null) {
			let l = ((ll) instanceof h3d.scene.fwd.Light) ? ll : null;
			if(l != null) {
				s.x = l.absPos._41;
				s.y = l.absPos._42;
				s.z = l.absPos._43;
				s.r = l.cullingDistance;
			}
			if(l == null || l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = ll.next;
				} else {
					prev.next = ll.next;
				}
				ll = ll.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = ll;
			ll = ll.next;
		}
	}
	sortLight(l1,l2) {
		let p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	computeLight(obj,shaders) {
		if(this.lightCount > this.maxLightsPerObject) {
			let ll = this.ctx.lights;
			while(ll != null) {
				let l = ((ll) instanceof h3d.scene.fwd.Light) ? ll : null;
				if((obj.flags & 16) != 0) {
					let dx = l.absPos._41 - this.ctx.camera.target.x;
					let dy = l.absPos._42 - this.ctx.camera.target.y;
					let dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					let dx = l.absPos._41 - obj.absPos._41;
					let dy = l.absPos._42 - obj.absPos._42;
					let dz = l.absPos._43 - obj.absPos._43;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				}
				ll = ll.next;
			}
			let list = this.ctx.lights;
			let cmp = $bind(this,this.sortLight);
			let tmp;
			if(list == null) {
				tmp = null;
			} else {
				let insize = 1;
				let nmerges;
				let psize = 0;
				let qsize = 0;
				let p;
				let q;
				let e;
				let tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						let _g = 0;
						let _g1 = insize;
						while(_g < _g1) {
							let i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		let _gthis = this;
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		let l = this.ctx.lights;
		let i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
}
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d.scene.fwd.LightSystem;
h3d.scene.fwd.LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d.scene.fwd.LightSystem.__super__ = h3d.scene.LightSystem;
Object.assign(h3d.scene.fwd.LightSystem.prototype, {
	__class__: h3d.scene.fwd.LightSystem
	,__properties__: {set_additiveLighting: "set_additiveLighting",get_additiveLighting: "get_additiveLighting"}
});
h3d.scene.fwd.DepthPass = class h3d_scene_fwd_DepthPass extends h3d.pass.Output {
	constructor() {
		h3d.pass.Output._hx_skip_constructor = true;
		super();
		h3d.pass.Output._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.enableSky = false;
		super._hx_constructor("depth",[hxsl.Output.PackFloat(hxsl.Output.Value("output.depth"))]);
		this.depthMapId = hxsl.Globals.allocID("depthMap");
	}
	draw(passes,sort) {
		let texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		super.draw(passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.depthMapId] = { texture : texture};
	}
}
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d.scene.fwd.DepthPass;
h3d.scene.fwd.DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d.scene.fwd.DepthPass.__super__ = h3d.pass.Output;
Object.assign(h3d.scene.fwd.DepthPass.prototype, {
	__class__: h3d.scene.fwd.DepthPass
});
h3d.scene.fwd.NormalPass = class h3d_scene_fwd_NormalPass extends h3d.pass.Output {
	constructor() {
		super("normal",[hxsl.Output.PackNormal(hxsl.Output.Value("output.normal"))]);
		this.normalMapId = hxsl.Globals.allocID("normalMap");
	}
	draw(passes,sort) {
		let texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		super.draw(passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.normalMapId] = texture;
	}
}
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d.scene.fwd.NormalPass;
h3d.scene.fwd.NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d.scene.fwd.NormalPass.__super__ = h3d.pass.Output;
Object.assign(h3d.scene.fwd.NormalPass.prototype, {
	__class__: h3d.scene.fwd.NormalPass
});
h3d.scene.fwd.Renderer = class h3d_scene_fwd_Renderer extends h3d.scene.Renderer {
	constructor() {
		h3d.scene.Renderer._hx_skip_constructor = true;
		super();
		h3d.scene.Renderer._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.shadow = new h3d.pass.DefaultShadowMap(1024);
		this.normal = new h3d.scene.fwd.NormalPass();
		this.depth = new h3d.scene.fwd.DepthPass();
		super._hx_constructor();
		this.defaultPass = new h3d.pass.Output("default");
		this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
	}
	get_def() {
		return this.defaultPass;
	}
	renderPass(p,passes,sort) {
		p.draw(passes,sort);
	}
	getPassByName(name) {
		if(name == "alpha" || name == "additive") {
			return this.defaultPass;
		}
		return super.getPassByName(name);
	}
	render() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
}
$hxClasses["h3d.scene.fwd.Renderer"] = h3d.scene.fwd.Renderer;
h3d.scene.fwd.Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d.scene.fwd.Renderer.__super__ = h3d.scene.Renderer;
Object.assign(h3d.scene.fwd.Renderer.prototype, {
	__class__: h3d.scene.fwd.Renderer
	,__properties__: Object.assign({}, h3d.scene.Renderer.prototype.__properties__, {get_def: "get_def"})
});
h3d.shader.AmbientLight = class h3d_shader_AmbientLight extends hxsl.Shader {
	constructor() {
		super();
	}
	get_additive() {
		return this.additive__;
	}
	set_additive(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.additive__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.AmbientLight.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
}
$hxClasses["h3d.shader.AmbientLight"] = h3d.shader.AmbientLight;
h3d.shader.AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d.shader.AmbientLight.__super__ = hxsl.Shader;
Object.assign(h3d.shader.AmbientLight.prototype, {
	__class__: h3d.shader.AmbientLight
	,__properties__: {set_additive: "set_additive",get_additive: "get_additive"}
});
h3d.shader.Base2d = class h3d_shader_Base2d extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.viewportB__ = new h3d.VectorImpl(0.,0.,0.);
		this.viewportA__ = new h3d.VectorImpl(0.,0.,0.);
		this.halfPixelInverse__ = new h3d.VectorImpl(0.,0.,0.);
		this.uvPos__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.filterMatrixB__ = new h3d.VectorImpl(0.,0.,0.);
		this.filterMatrixA__ = new h3d.VectorImpl(0.,0.,0.);
		this.absoluteMatrixB__ = new h3d.VectorImpl(0.,0.,0.);
		this.absoluteMatrixA__ = new h3d.VectorImpl(0.,0.,0.);
		this.color__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.zValue__ = 0;
		super._hx_constructor();
	}
	get_zValue() {
		return this.zValue__;
	}
	set_zValue(_v) {
		return this.zValue__ = _v;
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	get_isRelative() {
		return this.isRelative__;
	}
	set_isRelative(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	get_color() {
		return this.color__;
	}
	set_color(_v) {
		return this.color__ = _v;
	}
	get_absoluteMatrixA() {
		return this.absoluteMatrixA__;
	}
	set_absoluteMatrixA(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	get_absoluteMatrixB() {
		return this.absoluteMatrixB__;
	}
	set_absoluteMatrixB(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	get_filterMatrixA() {
		return this.filterMatrixA__;
	}
	set_filterMatrixA(_v) {
		return this.filterMatrixA__ = _v;
	}
	get_filterMatrixB() {
		return this.filterMatrixB__;
	}
	set_filterMatrixB(_v) {
		return this.filterMatrixB__ = _v;
	}
	get_hasUVPos() {
		return this.hasUVPos__;
	}
	set_hasUVPos(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	get_uvPos() {
		return this.uvPos__;
	}
	set_uvPos(_v) {
		return this.uvPos__ = _v;
	}
	get_killAlpha() {
		return this.killAlpha__;
	}
	set_killAlpha(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	get_pixelAlign() {
		return this.pixelAlign__;
	}
	set_pixelAlign(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	get_halfPixelInverse() {
		return this.halfPixelInverse__;
	}
	set_halfPixelInverse(_v) {
		return this.halfPixelInverse__ = _v;
	}
	get_viewportA() {
		return this.viewportA__;
	}
	set_viewportA(_v) {
		return this.viewportA__ = _v;
	}
	get_viewportB() {
		return this.viewportB__;
	}
	set_viewportB(_v) {
		return this.viewportB__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.zValue__ = val;
			break;
		case 1:
			this.texture__ = val;
			break;
		case 2:
			this.isRelative__ = val;
			break;
		case 3:
			this.color__ = val;
			break;
		case 4:
			this.absoluteMatrixA__ = val;
			break;
		case 5:
			this.absoluteMatrixB__ = val;
			break;
		case 6:
			this.filterMatrixA__ = val;
			break;
		case 7:
			this.filterMatrixB__ = val;
			break;
		case 8:
			this.hasUVPos__ = val;
			break;
		case 9:
			this.uvPos__ = val;
			break;
		case 10:
			this.killAlpha__ = val;
			break;
		case 11:
			this.pixelAlign__ = val;
			break;
		case 12:
			this.halfPixelInverse__ = val;
			break;
		case 13:
			this.viewportA__ = val;
			break;
		case 14:
			this.viewportB__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		if(index == 0) {
			this.zValue__ = val;
		}
	}
	clone() {
		let s = Object.create(h3d.shader.Base2d.prototype);
		s.shader = this.shader;
		s.zValue__ = this.zValue__;
		s.texture__ = this.texture__;
		s.isRelative__ = this.isRelative__;
		s.color__ = this.color__;
		s.absoluteMatrixA__ = this.absoluteMatrixA__;
		s.absoluteMatrixB__ = this.absoluteMatrixB__;
		s.filterMatrixA__ = this.filterMatrixA__;
		s.filterMatrixB__ = this.filterMatrixB__;
		s.hasUVPos__ = this.hasUVPos__;
		s.uvPos__ = this.uvPos__;
		s.killAlpha__ = this.killAlpha__;
		s.pixelAlign__ = this.pixelAlign__;
		s.halfPixelInverse__ = this.halfPixelInverse__;
		s.viewportA__ = this.viewportA__;
		s.viewportB__ = this.viewportB__;
		return s;
	}
}
$hxClasses["h3d.shader.Base2d"] = h3d.shader.Base2d;
h3d.shader.Base2d.__name__ = "h3d.shader.Base2d";
h3d.shader.Base2d.__super__ = hxsl.Shader;
Object.assign(h3d.shader.Base2d.prototype, {
	__class__: h3d.shader.Base2d
	,__properties__: {set_viewportB: "set_viewportB",get_viewportB: "get_viewportB",set_viewportA: "set_viewportA",get_viewportA: "get_viewportA",set_halfPixelInverse: "set_halfPixelInverse",get_halfPixelInverse: "get_halfPixelInverse",set_pixelAlign: "set_pixelAlign",get_pixelAlign: "get_pixelAlign",set_killAlpha: "set_killAlpha",get_killAlpha: "get_killAlpha",set_uvPos: "set_uvPos",get_uvPos: "get_uvPos",set_hasUVPos: "set_hasUVPos",get_hasUVPos: "get_hasUVPos",set_filterMatrixB: "set_filterMatrixB",get_filterMatrixB: "get_filterMatrixB",set_filterMatrixA: "set_filterMatrixA",get_filterMatrixA: "get_filterMatrixA",set_absoluteMatrixB: "set_absoluteMatrixB",get_absoluteMatrixB: "get_absoluteMatrixB",set_absoluteMatrixA: "set_absoluteMatrixA",get_absoluteMatrixA: "get_absoluteMatrixA",set_color: "set_color",get_color: "get_color",set_isRelative: "set_isRelative",get_isRelative: "get_isRelative",set_texture: "set_texture",get_texture: "get_texture",set_zValue: "set_zValue",get_zValue: "get_zValue"}
});
h3d.shader.BaseMesh = class h3d_shader_BaseMesh extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.specularColor__ = new h3d.VectorImpl(0.,0.,0.);
		this.specularAmount__ = 0;
		this.specularPower__ = 0;
		this.color__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		super._hx_constructor();
		let _this = this.color__;
		let x = 1;
		let y = 1;
		let z = 1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		let _this1 = this.specularColor__;
		let x1 = 1;
		let y1 = 1;
		let z1 = 1;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		this.specularPower__ = 50;
		this.specularAmount__ = 1;
	}
	get_color() {
		return this.color__;
	}
	set_color(_v) {
		return this.color__ = _v;
	}
	get_specularPower() {
		return this.specularPower__;
	}
	set_specularPower(_v) {
		return this.specularPower__ = _v;
	}
	get_specularAmount() {
		return this.specularAmount__;
	}
	set_specularAmount(_v) {
		return this.specularAmount__ = _v;
	}
	get_specularColor() {
		return this.specularColor__;
	}
	set_specularColor(_v) {
		return this.specularColor__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.color__ = val;
			break;
		case 1:
			this.specularPower__ = val;
			break;
		case 2:
			this.specularAmount__ = val;
			break;
		case 3:
			this.specularColor__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		switch(index) {
		case 1:
			this.specularPower__ = val;
			break;
		case 2:
			this.specularAmount__ = val;
			break;
		default:
		}
	}
	clone() {
		let s = Object.create(h3d.shader.BaseMesh.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specularPower__ = this.specularPower__;
		s.specularAmount__ = this.specularAmount__;
		s.specularColor__ = this.specularColor__;
		return s;
	}
}
$hxClasses["h3d.shader.BaseMesh"] = h3d.shader.BaseMesh;
h3d.shader.BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d.shader.BaseMesh.__super__ = hxsl.Shader;
Object.assign(h3d.shader.BaseMesh.prototype, {
	__class__: h3d.shader.BaseMesh
	,__properties__: {set_specularColor: "set_specularColor",get_specularColor: "get_specularColor",set_specularAmount: "set_specularAmount",get_specularAmount: "get_specularAmount",set_specularPower: "set_specularPower",get_specularPower: "get_specularPower",set_color: "set_color",get_color: "get_color"}
});
h3d.shader.Blur = class h3d_shader_Blur extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.cubeDir__ = new h3d.MatrixImpl();
		this.fixedColor__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.pixel__ = new h3d.VectorImpl(0.,0.,0.);
		this.offsets__ = [];
		this.values__ = [];
		this.Quality__ = 0;
		this.cameraInverseViewProj__ = new h3d.MatrixImpl();
		super._hx_constructor();
	}
	get_cameraInverseViewProj() {
		return this.cameraInverseViewProj__;
	}
	set_cameraInverseViewProj(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	get_depthTexture() {
		return this.depthTexture__;
	}
	set_depthTexture(_v) {
		return this.depthTexture__ = _v;
	}
	get_Quality() {
		return this.Quality__;
	}
	set_Quality(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	get_isDepth() {
		return this.isDepth__;
	}
	set_isDepth(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	get_values() {
		return this.values__;
	}
	set_values(_v) {
		return this.values__ = _v;
	}
	get_offsets() {
		return this.offsets__;
	}
	set_offsets(_v) {
		return this.offsets__ = _v;
	}
	get_pixel() {
		return this.pixel__;
	}
	set_pixel(_v) {
		return this.pixel__ = _v;
	}
	get_hasFixedColor() {
		return this.hasFixedColor__;
	}
	set_hasFixedColor(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	get_smoothFixedColor() {
		return this.smoothFixedColor__;
	}
	set_smoothFixedColor(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	get_fixedColor() {
		return this.fixedColor__;
	}
	set_fixedColor(_v) {
		return this.fixedColor__ = _v;
	}
	get_isDepthDependant() {
		return this.isDepthDependant__;
	}
	set_isDepthDependant(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	get_hasNormal() {
		return this.hasNormal__;
	}
	set_hasNormal(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	get_normalTexture() {
		return this.normalTexture__;
	}
	set_normalTexture(_v) {
		return this.normalTexture__ = _v;
	}
	get_isCube() {
		return this.isCube__;
	}
	set_isCube(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	get_cubeTexture() {
		return this.cubeTexture__;
	}
	set_cubeTexture(_v) {
		return this.cubeTexture__ = _v;
	}
	get_cubeDir() {
		return this.cubeDir__;
	}
	set_cubeDir(_v) {
		return this.cubeDir__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.Blur.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.texture__ = this.texture__;
		s.depthTexture__ = this.depthTexture__;
		s.Quality__ = this.Quality__;
		s.isDepth__ = this.isDepth__;
		s.values__ = this.values__;
		s.offsets__ = this.offsets__;
		s.pixel__ = this.pixel__;
		s.hasFixedColor__ = this.hasFixedColor__;
		s.smoothFixedColor__ = this.smoothFixedColor__;
		s.fixedColor__ = this.fixedColor__;
		s.isDepthDependant__ = this.isDepthDependant__;
		s.hasNormal__ = this.hasNormal__;
		s.normalTexture__ = this.normalTexture__;
		s.isCube__ = this.isCube__;
		s.cubeTexture__ = this.cubeTexture__;
		s.cubeDir__ = this.cubeDir__;
		return s;
	}
}
$hxClasses["h3d.shader.Blur"] = h3d.shader.Blur;
h3d.shader.Blur.__name__ = "h3d.shader.Blur";
h3d.shader.Blur.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.shader.Blur.prototype, {
	__class__: h3d.shader.Blur
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_cubeDir: "set_cubeDir",get_cubeDir: "get_cubeDir",set_cubeTexture: "set_cubeTexture",get_cubeTexture: "get_cubeTexture",set_isCube: "set_isCube",get_isCube: "get_isCube",set_normalTexture: "set_normalTexture",get_normalTexture: "get_normalTexture",set_hasNormal: "set_hasNormal",get_hasNormal: "get_hasNormal",set_isDepthDependant: "set_isDepthDependant",get_isDepthDependant: "get_isDepthDependant",set_fixedColor: "set_fixedColor",get_fixedColor: "get_fixedColor",set_smoothFixedColor: "set_smoothFixedColor",get_smoothFixedColor: "get_smoothFixedColor",set_hasFixedColor: "set_hasFixedColor",get_hasFixedColor: "get_hasFixedColor",set_pixel: "set_pixel",get_pixel: "get_pixel",set_offsets: "set_offsets",get_offsets: "get_offsets",set_values: "set_values",get_values: "get_values",set_isDepth: "set_isDepth",get_isDepth: "get_isDepth",set_Quality: "set_Quality",get_Quality: "get_Quality",set_depthTexture: "set_depthTexture",get_depthTexture: "get_depthTexture",set_texture: "set_texture",get_texture: "get_texture",set_cameraInverseViewProj: "set_cameraInverseViewProj",get_cameraInverseViewProj: "get_cameraInverseViewProj"})
});
h3d.shader.ShaderBuffers = class h3d_shader_ShaderBuffers {
	constructor(s) {
		this.globals = new Float32Array(s.globalsSize << 2);
		this.params = new Float32Array(s.paramsSize << 2);
		this.tex = new Array(s.texturesCount);
		this.buffers = s.bufferCount > 0 ? new Array(s.bufferCount) : null;
	}
	grow(s) {
		let ng = s.globalsSize << 2;
		let np = s.paramsSize << 2;
		let nt = s.texturesCount;
		let nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			this.tex = new Array(nt);
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			this.buffers = new Array(nb);
		}
	}
}
$hxClasses["h3d.shader.ShaderBuffers"] = h3d.shader.ShaderBuffers;
h3d.shader.ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
Object.assign(h3d.shader.ShaderBuffers.prototype, {
	__class__: h3d.shader.ShaderBuffers
});
h3d.shader.Buffers = class h3d_shader_Buffers {
	constructor(s) {
		this.vertex = new h3d.shader.ShaderBuffers(s.vertex);
		this.fragment = new h3d.shader.ShaderBuffers(s.fragment);
	}
	grow(s) {
		this.vertex.grow(s.vertex);
		this.fragment.grow(s.fragment);
	}
}
$hxClasses["h3d.shader.Buffers"] = h3d.shader.Buffers;
h3d.shader.Buffers.__name__ = "h3d.shader.Buffers";
Object.assign(h3d.shader.Buffers.prototype, {
	__class__: h3d.shader.Buffers
});
h3d.shader.ColorAdd = class h3d_shader_ColorAdd extends hxsl.Shader {
	constructor(color) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(color);
	}
	_hx_constructor(color) {
		if(color == null) {
			color = 0;
		}
		this.color__ = new h3d.VectorImpl(0.,0.,0.);
		super._hx_constructor();
		let _this = this.color__;
		_this.x = (color >> 16 & 255) / 255;
		_this.y = (color >> 8 & 255) / 255;
		_this.z = (color & 255) / 255;
	}
	get_color() {
		return this.color__;
	}
	set_color(_v) {
		return this.color__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.color__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.ColorAdd.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
}
$hxClasses["h3d.shader.ColorAdd"] = h3d.shader.ColorAdd;
h3d.shader.ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d.shader.ColorAdd.__super__ = hxsl.Shader;
Object.assign(h3d.shader.ColorAdd.prototype, {
	__class__: h3d.shader.ColorAdd
	,__properties__: {set_color: "set_color",get_color: "get_color"}
});
h3d.shader.ColorKey = class h3d_shader_ColorKey extends hxsl.Shader {
	constructor(v) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(v);
	}
	_hx_constructor(v) {
		if(v == null) {
			v = 0;
		}
		this.colorKey__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		super._hx_constructor();
		let _this = this.colorKey__;
		_this.x = (v >> 16 & 255) / 255;
		_this.y = (v >> 8 & 255) / 255;
		_this.z = (v & 255) / 255;
		_this.w = (v >>> 24) / 255;
	}
	get_colorKey() {
		return this.colorKey__;
	}
	set_colorKey(_v) {
		return this.colorKey__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.colorKey__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.ColorKey.prototype);
		s.shader = this.shader;
		s.colorKey__ = this.colorKey__;
		return s;
	}
}
$hxClasses["h3d.shader.ColorKey"] = h3d.shader.ColorKey;
h3d.shader.ColorKey.__name__ = "h3d.shader.ColorKey";
h3d.shader.ColorKey.__super__ = hxsl.Shader;
Object.assign(h3d.shader.ColorKey.prototype, {
	__class__: h3d.shader.ColorKey
	,__properties__: {set_colorKey: "set_colorKey",get_colorKey: "get_colorKey"}
});
h3d.shader.ColorMatrix = class h3d_shader_ColorMatrix extends hxsl.Shader {
	constructor(m) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(m);
	}
	_hx_constructor(m) {
		this.enabled__ = true;
		this.matrix__ = new h3d.MatrixImpl();
		super._hx_constructor();
		if(m != null) {
			this.matrix__.loadValues(m);
		} else {
			this.matrix__.identity();
		}
	}
	get_matrix() {
		return this.matrix__;
	}
	set_matrix(_v) {
		return this.matrix__ = _v;
	}
	get_enabled() {
		return this.enabled__;
	}
	set_enabled(_v) {
		this.constModified = true;
		return this.enabled__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.enabled__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.matrix__;
		case 1:
			return this.enabled__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.matrix__ = val;
			break;
		case 1:
			this.enabled__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.ColorMatrix.prototype);
		s.shader = this.shader;
		s.matrix__ = this.matrix__;
		s.enabled__ = this.enabled__;
		return s;
	}
}
$hxClasses["h3d.shader.ColorMatrix"] = h3d.shader.ColorMatrix;
h3d.shader.ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d.shader.ColorMatrix.__super__ = hxsl.Shader;
Object.assign(h3d.shader.ColorMatrix.prototype, {
	__class__: h3d.shader.ColorMatrix
	,__properties__: {set_enabled: "set_enabled",get_enabled: "get_enabled",set_matrix: "set_matrix",get_matrix: "get_matrix"}
});
h3d.shader.DirShadow = class h3d_shader_DirShadow extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.poissonDisk__ = [];
		this.shadowBias__ = 0;
		this.shadowProj__ = new h3d.MatrixImpl();
		this.shadowMapChannel__ = hxsl.Channel.Unknown;
		this.shadowRes__ = new h3d.VectorImpl(0.,0.,0.);
		this.pcfScale__ = 0;
		this.PCF_SAMPLES__ = 0;
		this.shadowPower__ = 0;
		super._hx_constructor();
		this.set_pcfQuality(1);
	}
	set_pcfQuality(q) {
		let _v;
		switch(q) {
		case 2:
			let x = -0.326;
			let y = -0.406;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let this1 = new h3d.Vector4Impl(x,y,0.,1.);
			let x1 = -0.840;
			let y1 = -0.074;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let this2 = new h3d.Vector4Impl(x1,y1,0.,1.);
			let x2 = -0.696;
			let y2 = 0.457;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			let this3 = new h3d.Vector4Impl(x2,y2,0.,1.);
			let x3 = -0.203;
			let y3 = 0.621;
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			let this4 = new h3d.Vector4Impl(x3,y3,0.,1.);
			let x4 = 0.962;
			let y4 = -0.195;
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			let this5 = new h3d.Vector4Impl(x4,y4,0.,1.);
			let x5 = 0.473;
			let y5 = -0.480;
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			let this6 = new h3d.Vector4Impl(x5,y5,0.,1.);
			let x6 = 0.519;
			let y6 = 0.767;
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			let this7 = new h3d.Vector4Impl(x6,y6,0.,1.);
			let x7 = 0.185;
			let y7 = -0.893;
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			let this8 = new h3d.Vector4Impl(x7,y7,0.,1.);
			let x8 = 0.507;
			let y8 = 0.064;
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			let this9 = new h3d.Vector4Impl(x8,y8,0.,1.);
			let x9 = 0.896;
			let y9 = 0.412;
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			let this10 = new h3d.Vector4Impl(x9,y9,0.,1.);
			let x10 = -0.322;
			let y10 = -0.933;
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			let this11 = new h3d.Vector4Impl(x10,y10,0.,1.);
			let x11 = -0.792;
			let y11 = -0.598;
			if(y11 == null) {
				y11 = 0.;
			}
			if(x11 == null) {
				x11 = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,new h3d.Vector4Impl(x11,y11,0.,1.)];
			break;
		case 3:
			let x12 = -0.613392;
			let y12 = 0.617481;
			if(y12 == null) {
				y12 = 0.;
			}
			if(x12 == null) {
				x12 = 0.;
			}
			let this12 = new h3d.Vector4Impl(x12,y12,0.,1.);
			let x13 = 0.170019;
			let y13 = -0.040254;
			if(y13 == null) {
				y13 = 0.;
			}
			if(x13 == null) {
				x13 = 0.;
			}
			let this13 = new h3d.Vector4Impl(x13,y13,0.,1.);
			let x14 = -0.299417;
			let y14 = 0.791925;
			if(y14 == null) {
				y14 = 0.;
			}
			if(x14 == null) {
				x14 = 0.;
			}
			let this14 = new h3d.Vector4Impl(x14,y14,0.,1.);
			let x15 = 0.645680;
			let y15 = 0.493210;
			if(y15 == null) {
				y15 = 0.;
			}
			if(x15 == null) {
				x15 = 0.;
			}
			let this15 = new h3d.Vector4Impl(x15,y15,0.,1.);
			let x16 = -0.651784;
			let y16 = 0.717887;
			if(y16 == null) {
				y16 = 0.;
			}
			if(x16 == null) {
				x16 = 0.;
			}
			let this16 = new h3d.Vector4Impl(x16,y16,0.,1.);
			let x17 = 0.421003;
			let y17 = 0.027070;
			if(y17 == null) {
				y17 = 0.;
			}
			if(x17 == null) {
				x17 = 0.;
			}
			let this17 = new h3d.Vector4Impl(x17,y17,0.,1.);
			let x18 = -0.817194;
			let y18 = -0.271096;
			if(y18 == null) {
				y18 = 0.;
			}
			if(x18 == null) {
				x18 = 0.;
			}
			let this18 = new h3d.Vector4Impl(x18,y18,0.,1.);
			let x19 = -0.705374;
			let y19 = -0.668203;
			if(y19 == null) {
				y19 = 0.;
			}
			if(x19 == null) {
				x19 = 0.;
			}
			let this19 = new h3d.Vector4Impl(x19,y19,0.,1.);
			let x20 = 0.977050;
			let y20 = -0.108615;
			if(y20 == null) {
				y20 = 0.;
			}
			if(x20 == null) {
				x20 = 0.;
			}
			let this20 = new h3d.Vector4Impl(x20,y20,0.,1.);
			let x21 = 0.063326;
			let y21 = 0.142369;
			if(y21 == null) {
				y21 = 0.;
			}
			if(x21 == null) {
				x21 = 0.;
			}
			let this21 = new h3d.Vector4Impl(x21,y21,0.,1.);
			let x22 = 0.203528;
			let y22 = 0.214331;
			if(y22 == null) {
				y22 = 0.;
			}
			if(x22 == null) {
				x22 = 0.;
			}
			let this22 = new h3d.Vector4Impl(x22,y22,0.,1.);
			let x23 = -0.667531;
			let y23 = 0.326090;
			if(y23 == null) {
				y23 = 0.;
			}
			if(x23 == null) {
				x23 = 0.;
			}
			let this23 = new h3d.Vector4Impl(x23,y23,0.,1.);
			let x24 = -0.098422;
			let y24 = -0.295755;
			if(y24 == null) {
				y24 = 0.;
			}
			if(x24 == null) {
				x24 = 0.;
			}
			let this24 = new h3d.Vector4Impl(x24,y24,0.,1.);
			let x25 = -0.885922;
			let y25 = 0.215369;
			if(y25 == null) {
				y25 = 0.;
			}
			if(x25 == null) {
				x25 = 0.;
			}
			let this25 = new h3d.Vector4Impl(x25,y25,0.,1.);
			let x26 = 0.566637;
			let y26 = 0.605213;
			if(y26 == null) {
				y26 = 0.;
			}
			if(x26 == null) {
				x26 = 0.;
			}
			let this26 = new h3d.Vector4Impl(x26,y26,0.,1.);
			let x27 = 0.039766;
			let y27 = -0.396100;
			if(y27 == null) {
				y27 = 0.;
			}
			if(x27 == null) {
				x27 = 0.;
			}
			let this27 = new h3d.Vector4Impl(x27,y27,0.,1.);
			let x28 = 0.751946;
			let y28 = 0.453352;
			if(y28 == null) {
				y28 = 0.;
			}
			if(x28 == null) {
				x28 = 0.;
			}
			let this28 = new h3d.Vector4Impl(x28,y28,0.,1.);
			let x29 = 0.078707;
			let y29 = -0.715323;
			if(y29 == null) {
				y29 = 0.;
			}
			if(x29 == null) {
				x29 = 0.;
			}
			let this29 = new h3d.Vector4Impl(x29,y29,0.,1.);
			let x30 = -0.075838;
			let y30 = -0.529344;
			if(y30 == null) {
				y30 = 0.;
			}
			if(x30 == null) {
				x30 = 0.;
			}
			let this30 = new h3d.Vector4Impl(x30,y30,0.,1.);
			let x31 = 0.724479;
			let y31 = -0.580798;
			if(y31 == null) {
				y31 = 0.;
			}
			if(x31 == null) {
				x31 = 0.;
			}
			let this31 = new h3d.Vector4Impl(x31,y31,0.,1.);
			let x32 = 0.222999;
			let y32 = -0.215125;
			if(y32 == null) {
				y32 = 0.;
			}
			if(x32 == null) {
				x32 = 0.;
			}
			let this32 = new h3d.Vector4Impl(x32,y32,0.,1.);
			let x33 = -0.467574;
			let y33 = -0.405438;
			if(y33 == null) {
				y33 = 0.;
			}
			if(x33 == null) {
				x33 = 0.;
			}
			let this33 = new h3d.Vector4Impl(x33,y33,0.,1.);
			let x34 = -0.248268;
			let y34 = -0.814753;
			if(y34 == null) {
				y34 = 0.;
			}
			if(x34 == null) {
				x34 = 0.;
			}
			let this34 = new h3d.Vector4Impl(x34,y34,0.,1.);
			let x35 = 0.354411;
			let y35 = -0.887570;
			if(y35 == null) {
				y35 = 0.;
			}
			if(x35 == null) {
				x35 = 0.;
			}
			let this35 = new h3d.Vector4Impl(x35,y35,0.,1.);
			let x36 = 0.175817;
			let y36 = 0.382366;
			if(y36 == null) {
				y36 = 0.;
			}
			if(x36 == null) {
				x36 = 0.;
			}
			let this36 = new h3d.Vector4Impl(x36,y36,0.,1.);
			let x37 = 0.487472;
			let y37 = -0.063082;
			if(y37 == null) {
				y37 = 0.;
			}
			if(x37 == null) {
				x37 = 0.;
			}
			let this37 = new h3d.Vector4Impl(x37,y37,0.,1.);
			let x38 = -0.084078;
			let y38 = 0.898312;
			if(y38 == null) {
				y38 = 0.;
			}
			if(x38 == null) {
				x38 = 0.;
			}
			let this38 = new h3d.Vector4Impl(x38,y38,0.,1.);
			let x39 = 0.488876;
			let y39 = -0.783441;
			if(y39 == null) {
				y39 = 0.;
			}
			if(x39 == null) {
				x39 = 0.;
			}
			let this39 = new h3d.Vector4Impl(x39,y39,0.,1.);
			let x40 = 0.470016;
			let y40 = 0.217933;
			if(y40 == null) {
				y40 = 0.;
			}
			if(x40 == null) {
				x40 = 0.;
			}
			let this40 = new h3d.Vector4Impl(x40,y40,0.,1.);
			let x41 = -0.696890;
			let y41 = -0.549791;
			if(y41 == null) {
				y41 = 0.;
			}
			if(x41 == null) {
				x41 = 0.;
			}
			let this41 = new h3d.Vector4Impl(x41,y41,0.,1.);
			let x42 = -0.149693;
			let y42 = 0.605762;
			if(y42 == null) {
				y42 = 0.;
			}
			if(x42 == null) {
				x42 = 0.;
			}
			let this42 = new h3d.Vector4Impl(x42,y42,0.,1.);
			let x43 = 0.034211;
			let y43 = 0.979980;
			if(y43 == null) {
				y43 = 0.;
			}
			if(x43 == null) {
				x43 = 0.;
			}
			let this43 = new h3d.Vector4Impl(x43,y43,0.,1.);
			let x44 = 0.503098;
			let y44 = -0.308878;
			if(y44 == null) {
				y44 = 0.;
			}
			if(x44 == null) {
				x44 = 0.;
			}
			let this44 = new h3d.Vector4Impl(x44,y44,0.,1.);
			let x45 = -0.016205;
			let y45 = -0.872921;
			if(y45 == null) {
				y45 = 0.;
			}
			if(x45 == null) {
				x45 = 0.;
			}
			let this45 = new h3d.Vector4Impl(x45,y45,0.,1.);
			let x46 = 0.385784;
			let y46 = -0.393902;
			if(y46 == null) {
				y46 = 0.;
			}
			if(x46 == null) {
				x46 = 0.;
			}
			let this46 = new h3d.Vector4Impl(x46,y46,0.,1.);
			let x47 = -0.146886;
			let y47 = -0.859249;
			if(y47 == null) {
				y47 = 0.;
			}
			if(x47 == null) {
				x47 = 0.;
			}
			let this47 = new h3d.Vector4Impl(x47,y47,0.,1.);
			let x48 = 0.643361;
			let y48 = 0.164098;
			if(y48 == null) {
				y48 = 0.;
			}
			if(x48 == null) {
				x48 = 0.;
			}
			let this48 = new h3d.Vector4Impl(x48,y48,0.,1.);
			let x49 = 0.634388;
			let y49 = -0.049471;
			if(y49 == null) {
				y49 = 0.;
			}
			if(x49 == null) {
				x49 = 0.;
			}
			let this49 = new h3d.Vector4Impl(x49,y49,0.,1.);
			let x50 = -0.688894;
			let y50 = 0.007843;
			if(y50 == null) {
				y50 = 0.;
			}
			if(x50 == null) {
				x50 = 0.;
			}
			let this50 = new h3d.Vector4Impl(x50,y50,0.,1.);
			let x51 = 0.464034;
			let y51 = -0.188818;
			if(y51 == null) {
				y51 = 0.;
			}
			if(x51 == null) {
				x51 = 0.;
			}
			let this51 = new h3d.Vector4Impl(x51,y51,0.,1.);
			let x52 = -0.440840;
			let y52 = 0.137486;
			if(y52 == null) {
				y52 = 0.;
			}
			if(x52 == null) {
				x52 = 0.;
			}
			let this52 = new h3d.Vector4Impl(x52,y52,0.,1.);
			let x53 = 0.364483;
			let y53 = 0.511704;
			if(y53 == null) {
				y53 = 0.;
			}
			if(x53 == null) {
				x53 = 0.;
			}
			let this53 = new h3d.Vector4Impl(x53,y53,0.,1.);
			let x54 = 0.034028;
			let y54 = 0.325968;
			if(y54 == null) {
				y54 = 0.;
			}
			if(x54 == null) {
				x54 = 0.;
			}
			let this54 = new h3d.Vector4Impl(x54,y54,0.,1.);
			let x55 = 0.099094;
			let y55 = -0.308023;
			if(y55 == null) {
				y55 = 0.;
			}
			if(x55 == null) {
				x55 = 0.;
			}
			let this55 = new h3d.Vector4Impl(x55,y55,0.,1.);
			let x56 = 0.693960;
			let y56 = -0.366253;
			if(y56 == null) {
				y56 = 0.;
			}
			if(x56 == null) {
				x56 = 0.;
			}
			let this56 = new h3d.Vector4Impl(x56,y56,0.,1.);
			let x57 = 0.678884;
			let y57 = -0.204688;
			if(y57 == null) {
				y57 = 0.;
			}
			if(x57 == null) {
				x57 = 0.;
			}
			let this57 = new h3d.Vector4Impl(x57,y57,0.,1.);
			let x58 = 0.001801;
			let y58 = 0.780328;
			if(y58 == null) {
				y58 = 0.;
			}
			if(x58 == null) {
				x58 = 0.;
			}
			let this58 = new h3d.Vector4Impl(x58,y58,0.,1.);
			let x59 = 0.145177;
			let y59 = -0.898984;
			if(y59 == null) {
				y59 = 0.;
			}
			if(x59 == null) {
				x59 = 0.;
			}
			let this59 = new h3d.Vector4Impl(x59,y59,0.,1.);
			let x60 = 0.062655;
			let y60 = -0.611866;
			if(y60 == null) {
				y60 = 0.;
			}
			if(x60 == null) {
				x60 = 0.;
			}
			let this60 = new h3d.Vector4Impl(x60,y60,0.,1.);
			let x61 = 0.315226;
			let y61 = -0.604297;
			if(y61 == null) {
				y61 = 0.;
			}
			if(x61 == null) {
				x61 = 0.;
			}
			let this61 = new h3d.Vector4Impl(x61,y61,0.,1.);
			let x62 = -0.780145;
			let y62 = 0.486251;
			if(y62 == null) {
				y62 = 0.;
			}
			if(x62 == null) {
				x62 = 0.;
			}
			let this62 = new h3d.Vector4Impl(x62,y62,0.,1.);
			let x63 = -0.371868;
			let y63 = 0.882138;
			if(y63 == null) {
				y63 = 0.;
			}
			if(x63 == null) {
				x63 = 0.;
			}
			let this63 = new h3d.Vector4Impl(x63,y63,0.,1.);
			let x64 = 0.200476;
			let y64 = 0.494430;
			if(y64 == null) {
				y64 = 0.;
			}
			if(x64 == null) {
				x64 = 0.;
			}
			let this64 = new h3d.Vector4Impl(x64,y64,0.,1.);
			let x65 = -0.494552;
			let y65 = -0.711051;
			if(y65 == null) {
				y65 = 0.;
			}
			if(x65 == null) {
				x65 = 0.;
			}
			let this65 = new h3d.Vector4Impl(x65,y65,0.,1.);
			let x66 = 0.612476;
			let y66 = 0.705252;
			if(y66 == null) {
				y66 = 0.;
			}
			if(x66 == null) {
				x66 = 0.;
			}
			let this66 = new h3d.Vector4Impl(x66,y66,0.,1.);
			let x67 = -0.578845;
			let y67 = -0.768792;
			if(y67 == null) {
				y67 = 0.;
			}
			if(x67 == null) {
				x67 = 0.;
			}
			let this67 = new h3d.Vector4Impl(x67,y67,0.,1.);
			let x68 = -0.772454;
			let y68 = -0.090976;
			if(y68 == null) {
				y68 = 0.;
			}
			if(x68 == null) {
				x68 = 0.;
			}
			let this68 = new h3d.Vector4Impl(x68,y68,0.,1.);
			let x69 = 0.504440;
			let y69 = 0.372295;
			if(y69 == null) {
				y69 = 0.;
			}
			if(x69 == null) {
				x69 = 0.;
			}
			let this69 = new h3d.Vector4Impl(x69,y69,0.,1.);
			let x70 = 0.155736;
			let y70 = 0.065157;
			if(y70 == null) {
				y70 = 0.;
			}
			if(x70 == null) {
				x70 = 0.;
			}
			let this70 = new h3d.Vector4Impl(x70,y70,0.,1.);
			let x71 = 0.391522;
			let y71 = 0.849605;
			if(y71 == null) {
				y71 = 0.;
			}
			if(x71 == null) {
				x71 = 0.;
			}
			let this71 = new h3d.Vector4Impl(x71,y71,0.,1.);
			let x72 = -0.620106;
			let y72 = -0.328104;
			if(y72 == null) {
				y72 = 0.;
			}
			if(x72 == null) {
				x72 = 0.;
			}
			let this72 = new h3d.Vector4Impl(x72,y72,0.,1.);
			let x73 = 0.789239;
			let y73 = -0.419965;
			if(y73 == null) {
				y73 = 0.;
			}
			if(x73 == null) {
				x73 = 0.;
			}
			let this73 = new h3d.Vector4Impl(x73,y73,0.,1.);
			let x74 = -0.545396;
			let y74 = 0.538133;
			if(y74 == null) {
				y74 = 0.;
			}
			if(x74 == null) {
				x74 = 0.;
			}
			let this74 = new h3d.Vector4Impl(x74,y74,0.,1.);
			let x75 = -0.178564;
			let y75 = -0.596057;
			if(y75 == null) {
				y75 = 0.;
			}
			if(x75 == null) {
				x75 = 0.;
			}
			_v = [this12,this13,this14,this15,this16,this17,this18,this19,this20,this21,this22,this23,this24,this25,this26,this27,this28,this29,this30,this31,this32,this33,this34,this35,this36,this37,this38,this39,this40,this41,this42,this43,this44,this45,this46,this47,this48,this49,this50,this51,this52,this53,this54,this55,this56,this57,this58,this59,this60,this61,this62,this63,this64,this65,this66,this67,this68,this69,this70,this71,this72,this73,this74,new h3d.Vector4Impl(x75,y75,0.,1.)];
			break;
		default:
			let x76 = -0.942;
			let y76 = -0.399;
			if(y76 == null) {
				y76 = 0.;
			}
			if(x76 == null) {
				x76 = 0.;
			}
			let this75 = new h3d.Vector4Impl(x76,y76,0.,1.);
			let x77 = 0.945;
			let y77 = -0.768;
			if(y77 == null) {
				y77 = 0.;
			}
			if(x77 == null) {
				x77 = 0.;
			}
			let this76 = new h3d.Vector4Impl(x77,y77,0.,1.);
			let x78 = -0.094;
			let y78 = -0.929;
			if(y78 == null) {
				y78 = 0.;
			}
			if(x78 == null) {
				x78 = 0.;
			}
			let this77 = new h3d.Vector4Impl(x78,y78,0.,1.);
			let x79 = 0.344;
			let y79 = 0.293;
			if(y79 == null) {
				y79 = 0.;
			}
			if(x79 == null) {
				x79 = 0.;
			}
			_v = [this75,this76,this77,new h3d.Vector4Impl(x79,y79,0.,1.)];
		}
		this.poissonDisk__ = _v;
		this.constModified = true;
		this.PCF_SAMPLES__ = this.poissonDisk__.length;
		return q;
	}
	get_enable() {
		return this.enable__;
	}
	set_enable(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	get_USE_ESM() {
		return this.USE_ESM__;
	}
	set_USE_ESM(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	get_shadowPower() {
		return this.shadowPower__;
	}
	set_shadowPower(_v) {
		return this.shadowPower__ = _v;
	}
	get_USE_PCF() {
		return this.USE_PCF__;
	}
	set_USE_PCF(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	get_PCF_SAMPLES() {
		return this.PCF_SAMPLES__;
	}
	set_PCF_SAMPLES(_v) {
		this.constModified = true;
		return this.PCF_SAMPLES__ = _v;
	}
	get_pcfScale() {
		return this.pcfScale__;
	}
	set_pcfScale(_v) {
		return this.pcfScale__ = _v;
	}
	get_shadowRes() {
		return this.shadowRes__;
	}
	set_shadowRes(_v) {
		return this.shadowRes__ = _v;
	}
	get_shadowMap() {
		return this.shadowMap__;
	}
	set_shadowMap(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	get_shadowMapChannel() {
		return this.shadowMapChannel__;
	}
	set_shadowMapChannel(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	get_shadowProj() {
		return this.shadowProj__;
	}
	set_shadowProj(_v) {
		return this.shadowProj__ = _v;
	}
	get_shadowBias() {
		return this.shadowBias__;
	}
	set_shadowBias(_v) {
		return this.shadowBias__ = _v;
	}
	get_poissonDisk() {
		return this.poissonDisk__;
	}
	set_poissonDisk(_v) {
		return this.poissonDisk__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		let v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl.Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl.Channel.Unknown) {
			if(this.shadowMap__.format == h3d.mat.Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl.Channel.PackedFloat;
			} else {
				throw haxe.Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.enable__ = val;
			break;
		case 1:
			this.USE_ESM__ = val;
			break;
		case 2:
			this.shadowPower__ = val;
			break;
		case 3:
			this.USE_PCF__ = val;
			break;
		case 4:
			this.PCF_SAMPLES__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 6:
			this.shadowRes__ = val;
			break;
		case 7:
			this.shadowMap__ = val;
			break;
		case 8:
			this.shadowProj__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		case 10:
			this.poissonDisk__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		switch(index) {
		case 2:
			this.shadowPower__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		default:
		}
	}
	clone() {
		let s = Object.create(h3d.shader.DirShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.PCF_SAMPLES__ = this.PCF_SAMPLES__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDisk__ = this.poissonDisk__;
		return s;
	}
}
$hxClasses["h3d.shader.DirShadow"] = h3d.shader.DirShadow;
h3d.shader.DirShadow.__name__ = "h3d.shader.DirShadow";
h3d.shader.DirShadow.__super__ = hxsl.Shader;
Object.assign(h3d.shader.DirShadow.prototype, {
	__class__: h3d.shader.DirShadow
	,__properties__: {set_poissonDisk: "set_poissonDisk",get_poissonDisk: "get_poissonDisk",set_shadowBias: "set_shadowBias",get_shadowBias: "get_shadowBias",set_shadowProj: "set_shadowProj",get_shadowProj: "get_shadowProj",set_shadowMapChannel: "set_shadowMapChannel",get_shadowMapChannel: "get_shadowMapChannel",set_shadowMap: "set_shadowMap",get_shadowMap: "get_shadowMap",set_shadowRes: "set_shadowRes",get_shadowRes: "get_shadowRes",set_pcfScale: "set_pcfScale",get_pcfScale: "get_pcfScale",set_PCF_SAMPLES: "set_PCF_SAMPLES",get_PCF_SAMPLES: "get_PCF_SAMPLES",set_USE_PCF: "set_USE_PCF",get_USE_PCF: "get_USE_PCF",set_shadowPower: "set_shadowPower",get_shadowPower: "get_shadowPower",set_USE_ESM: "set_USE_ESM",get_USE_ESM: "get_USE_ESM",set_enable: "set_enable",get_enable: "get_enable",set_pcfQuality: "set_pcfQuality"}
});
h3d.shader.GenTexture = class h3d_shader_GenTexture extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.color__ = new h3d.Vector4Impl(0.,0.,0.,1.);
		this.mode__ = 0;
		super._hx_constructor();
	}
	get_mode() {
		return this.mode__;
	}
	set_mode(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	get_color() {
		return this.color__;
	}
	set_color(_v) {
		return this.color__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.GenTexture.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.mode__ = this.mode__;
		s.color__ = this.color__;
		return s;
	}
}
$hxClasses["h3d.shader.GenTexture"] = h3d.shader.GenTexture;
h3d.shader.GenTexture.__name__ = "h3d.shader.GenTexture";
h3d.shader.GenTexture.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.shader.GenTexture.prototype, {
	__class__: h3d.shader.GenTexture
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_color: "set_color",get_color: "get_color",set_mode: "set_mode",get_mode: "get_mode"})
});
h3d.shader.LineShader = class h3d_shader_LineShader extends hxsl.Shader {
	constructor(width,lengthScale) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(width,lengthScale);
	}
	_hx_constructor(width,lengthScale) {
		if(lengthScale == null) {
			lengthScale = 1.;
		}
		if(width == null) {
			width = 1.5;
		}
		this.width__ = 0;
		this.lengthScale__ = 0;
		super._hx_constructor();
		this.width__ = width;
		this.lengthScale__ = lengthScale;
	}
	get_lengthScale() {
		return this.lengthScale__;
	}
	set_lengthScale(_v) {
		return this.lengthScale__ = _v;
	}
	get_width() {
		return this.width__;
	}
	set_width(_v) {
		return this.width__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.lengthScale__ = val;
			break;
		case 1:
			this.width__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		switch(index) {
		case 0:
			this.lengthScale__ = val;
			break;
		case 1:
			this.width__ = val;
			break;
		default:
		}
	}
	clone() {
		let s = Object.create(h3d.shader.LineShader.prototype);
		s.shader = this.shader;
		s.lengthScale__ = this.lengthScale__;
		s.width__ = this.width__;
		return s;
	}
}
$hxClasses["h3d.shader.LineShader"] = h3d.shader.LineShader;
h3d.shader.LineShader.__name__ = "h3d.shader.LineShader";
h3d.shader.LineShader.__super__ = hxsl.Shader;
Object.assign(h3d.shader.LineShader.prototype, {
	__class__: h3d.shader.LineShader
	,__properties__: {set_width: "set_width",get_width: "get_width",set_lengthScale: "set_lengthScale",get_lengthScale: "get_lengthScale"}
});
h3d.shader.MinMaxShader = class h3d_shader_MinMaxShader extends h3d.shader.ScreenShader {
	constructor() {
		super();
	}
	get_texA() {
		return this.texA__;
	}
	set_texA(_v) {
		return this.texA__ = _v;
	}
	get_texB() {
		return this.texB__;
	}
	set_texB(_v) {
		return this.texB__ = _v;
	}
	get_isMax() {
		return this.isMax__;
	}
	set_isMax(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.MinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		return s;
	}
}
$hxClasses["h3d.shader.MinMaxShader"] = h3d.shader.MinMaxShader;
h3d.shader.MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d.shader.MinMaxShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.shader.MinMaxShader.prototype, {
	__class__: h3d.shader.MinMaxShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_isMax: "set_isMax",get_isMax: "get_isMax",set_texB: "set_texB",get_texB: "get_texB",set_texA: "set_texA",get_texA: "get_texA"})
});
h3d.shader.CubeMinMaxShader = class h3d_shader_CubeMinMaxShader extends h3d.shader.ScreenShader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.mat__ = new h3d.MatrixImpl();
		super._hx_constructor();
	}
	get_texA() {
		return this.texA__;
	}
	set_texA(_v) {
		return this.texA__ = _v;
	}
	get_texB() {
		return this.texB__;
	}
	set_texB(_v) {
		return this.texB__ = _v;
	}
	get_isMax() {
		return this.isMax__;
	}
	set_isMax(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	get_mat() {
		return this.mat__;
	}
	set_mat(_v) {
		return this.mat__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.CubeMinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		s.mat__ = this.mat__;
		return s;
	}
}
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d.shader.CubeMinMaxShader;
h3d.shader.CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d.shader.CubeMinMaxShader.__super__ = h3d.shader.ScreenShader;
Object.assign(h3d.shader.CubeMinMaxShader.prototype, {
	__class__: h3d.shader.CubeMinMaxShader
	,__properties__: Object.assign({}, h3d.shader.ScreenShader.prototype.__properties__, {set_mat: "set_mat",get_mat: "get_mat",set_isMax: "set_isMax",get_isMax: "get_isMax",set_texB: "set_texB",get_texB: "get_texB",set_texA: "set_texA",get_texA: "get_texA"})
});
h3d.shader.NormalMap = class h3d_shader_NormalMap extends hxsl.Shader {
	constructor(texture) {
		super();
		this.texture__ = texture;
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.texture__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.NormalMap.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
}
$hxClasses["h3d.shader.NormalMap"] = h3d.shader.NormalMap;
h3d.shader.NormalMap.__name__ = "h3d.shader.NormalMap";
h3d.shader.NormalMap.__super__ = hxsl.Shader;
Object.assign(h3d.shader.NormalMap.prototype, {
	__class__: h3d.shader.NormalMap
	,__properties__: {set_texture: "set_texture",get_texture: "get_texture"}
});
h3d.shader.Shadow = class h3d_shader_Shadow extends hxsl.Shader {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
	}
	setParamIndexFloatValue(index,val) {
	}
}
$hxClasses["h3d.shader.Shadow"] = h3d.shader.Shadow;
h3d.shader.Shadow.__name__ = "h3d.shader.Shadow";
h3d.shader.Shadow.__super__ = hxsl.Shader;
Object.assign(h3d.shader.Shadow.prototype, {
	__class__: h3d.shader.Shadow
});
h3d.shader.SignedDistanceField = class h3d_shader_SignedDistanceField extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.smoothing__ = 0.0416666666666666644;
		this.alphaCutoff__ = 0.5;
		this.autoSmoothing__ = false;
		this.channel__ = 0;
		super._hx_constructor();
	}
	get_channel() {
		return this.channel__;
	}
	set_channel(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	get_autoSmoothing() {
		return this.autoSmoothing__;
	}
	set_autoSmoothing(_v) {
		this.constModified = true;
		return this.autoSmoothing__ = _v;
	}
	get_alphaCutoff() {
		return this.alphaCutoff__;
	}
	set_alphaCutoff(_v) {
		return this.alphaCutoff__ = _v;
	}
	get_smoothing() {
		return this.smoothing__;
	}
	set_smoothing(_v) {
		return this.smoothing__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.autoSmoothing__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.autoSmoothing__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		switch(index) {
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.channel__ = val;
			break;
		case 1:
			this.autoSmoothing__ = val;
			break;
		case 2:
			this.alphaCutoff__ = val;
			break;
		case 3:
			this.smoothing__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		switch(index) {
		case 2:
			this.alphaCutoff__ = val;
			break;
		case 3:
			this.smoothing__ = val;
			break;
		default:
		}
	}
	clone() {
		let s = Object.create(h3d.shader.SignedDistanceField.prototype);
		s.shader = this.shader;
		s.channel__ = this.channel__;
		s.autoSmoothing__ = this.autoSmoothing__;
		s.alphaCutoff__ = this.alphaCutoff__;
		s.smoothing__ = this.smoothing__;
		return s;
	}
}
$hxClasses["h3d.shader.SignedDistanceField"] = h3d.shader.SignedDistanceField;
h3d.shader.SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d.shader.SignedDistanceField.__super__ = hxsl.Shader;
Object.assign(h3d.shader.SignedDistanceField.prototype, {
	__class__: h3d.shader.SignedDistanceField
	,__properties__: {set_smoothing: "set_smoothing",get_smoothing: "get_smoothing",set_alphaCutoff: "set_alphaCutoff",get_alphaCutoff: "get_alphaCutoff",set_autoSmoothing: "set_autoSmoothing",get_autoSmoothing: "get_autoSmoothing",set_channel: "set_channel",get_channel: "get_channel"}
});
h3d.shader.SkinBase = class h3d_shader_SkinBase extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.bonesMatrixes__ = [];
		this.fourBonesByVertex__ = false;
		this.MaxBones__ = 0;
		super._hx_constructor();
		this.constModified = true;
		this.MaxBones__ = 34;
	}
	get_MaxBones() {
		return this.MaxBones__;
	}
	set_MaxBones(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	get_fourBonesByVertex() {
		return this.fourBonesByVertex__;
	}
	set_fourBonesByVertex(_v) {
		this.constModified = true;
		return this.fourBonesByVertex__ = _v;
	}
	get_bonesMatrixes() {
		return this.bonesMatrixes__;
	}
	set_bonesMatrixes(_v) {
		return this.bonesMatrixes__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.MaxBones__ = val;
			break;
		case 1:
			this.fourBonesByVertex__ = val;
			break;
		case 2:
			this.bonesMatrixes__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.SkinBase.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
}
$hxClasses["h3d.shader.SkinBase"] = h3d.shader.SkinBase;
h3d.shader.SkinBase.__name__ = "h3d.shader.SkinBase";
h3d.shader.SkinBase.__super__ = hxsl.Shader;
Object.assign(h3d.shader.SkinBase.prototype, {
	__class__: h3d.shader.SkinBase
	,__properties__: {set_bonesMatrixes: "set_bonesMatrixes",get_bonesMatrixes: "get_bonesMatrixes",set_fourBonesByVertex: "set_fourBonesByVertex",get_fourBonesByVertex: "get_fourBonesByVertex",set_MaxBones: "set_MaxBones",get_MaxBones: "get_MaxBones"}
});
h3d.shader.Skin = class h3d_shader_Skin extends h3d.shader.SkinBase {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.Skin.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
}
$hxClasses["h3d.shader.Skin"] = h3d.shader.Skin;
h3d.shader.Skin.__name__ = "h3d.shader.Skin";
h3d.shader.Skin.__super__ = h3d.shader.SkinBase;
Object.assign(h3d.shader.Skin.prototype, {
	__class__: h3d.shader.Skin
});
h3d.shader.SkinTangent = class h3d_shader_SkinTangent extends h3d.shader.SkinBase {
	constructor() {
		super();
	}
	updateConstants(globals) {
		this.constBits = 0;
		let v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe.Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	clone() {
		let s = Object.create(h3d.shader.SkinTangent.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
}
$hxClasses["h3d.shader.SkinTangent"] = h3d.shader.SkinTangent;
h3d.shader.SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d.shader.SkinTangent.__super__ = h3d.shader.SkinBase;
Object.assign(h3d.shader.SkinTangent.prototype, {
	__class__: h3d.shader.SkinTangent
});
h3d.shader.SpecularTexture = class h3d_shader_SpecularTexture extends hxsl.Shader {
	constructor(tex) {
		super();
		this.texture__ = tex;
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.texture__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.SpecularTexture.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
}
$hxClasses["h3d.shader.SpecularTexture"] = h3d.shader.SpecularTexture;
h3d.shader.SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d.shader.SpecularTexture.__super__ = hxsl.Shader;
Object.assign(h3d.shader.SpecularTexture.prototype, {
	__class__: h3d.shader.SpecularTexture
	,__properties__: {set_texture: "set_texture",get_texture: "get_texture"}
});
h3d.shader.Texture = class h3d_shader_Texture extends hxsl.Shader {
	constructor(tex) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(tex);
	}
	_hx_constructor(tex) {
		this.killAlphaThreshold__ = 0;
		super._hx_constructor();
		this.texture__ = tex;
		this.killAlphaThreshold__ = h3d.mat.Defaults.defaultKillAlphaThreshold;
	}
	get_additive() {
		return this.additive__;
	}
	set_additive(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	get_killAlpha() {
		return this.killAlpha__;
	}
	set_killAlpha(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	get_specularAlpha() {
		return this.specularAlpha__;
	}
	set_specularAlpha(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	get_killAlphaThreshold() {
		return this.killAlphaThreshold__;
	}
	set_killAlphaThreshold(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	get_texture() {
		return this.texture__;
	}
	set_texture(_v) {
		return this.texture__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.additive__ = val;
			break;
		case 1:
			this.killAlpha__ = val;
			break;
		case 2:
			this.specularAlpha__ = val;
			break;
		case 3:
			this.killAlphaThreshold__ = val;
			break;
		case 4:
			this.texture__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
		if(index == 3) {
			this.killAlphaThreshold__ = val;
		}
	}
	clone() {
		let s = Object.create(h3d.shader.Texture.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		s.killAlpha__ = this.killAlpha__;
		s.specularAlpha__ = this.specularAlpha__;
		s.killAlphaThreshold__ = this.killAlphaThreshold__;
		s.texture__ = this.texture__;
		return s;
	}
}
$hxClasses["h3d.shader.Texture"] = h3d.shader.Texture;
h3d.shader.Texture.__name__ = "h3d.shader.Texture";
h3d.shader.Texture.__super__ = hxsl.Shader;
Object.assign(h3d.shader.Texture.prototype, {
	__class__: h3d.shader.Texture
	,__properties__: {set_texture: "set_texture",get_texture: "get_texture",set_killAlphaThreshold: "set_killAlphaThreshold",get_killAlphaThreshold: "get_killAlphaThreshold",set_specularAlpha: "set_specularAlpha",get_specularAlpha: "get_specularAlpha",set_killAlpha: "set_killAlpha",get_killAlpha: "get_killAlpha",set_additive: "set_additive",get_additive: "get_additive"}
});
h3d.shader.UVDelta = class h3d_shader_UVDelta extends hxsl.Shader {
	constructor(dx,dy,sx,sy) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(dx,dy,sx,sy);
	}
	_hx_constructor(dx,dy,sx,sy) {
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.uvScale__ = new h3d.VectorImpl(0.,0.,0.);
		this.uvDelta__ = new h3d.VectorImpl(0.,0.,0.);
		super._hx_constructor();
		let _this = this.uvDelta__;
		let x = dx;
		let y = dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		let _this1 = this.uvScale__;
		let x1 = sx;
		let y1 = sy;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = 0.;
	}
	get_uvDelta() {
		return this.uvDelta__;
	}
	set_uvDelta(_v) {
		return this.uvDelta__ = _v;
	}
	get_uvScale() {
		return this.uvScale__;
	}
	set_uvScale(_v) {
		return this.uvScale__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.uvDelta__ = val;
			break;
		case 1:
			this.uvScale__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.UVDelta.prototype);
		s.shader = this.shader;
		s.uvDelta__ = this.uvDelta__;
		s.uvScale__ = this.uvScale__;
		return s;
	}
}
$hxClasses["h3d.shader.UVDelta"] = h3d.shader.UVDelta;
h3d.shader.UVDelta.__name__ = "h3d.shader.UVDelta";
h3d.shader.UVDelta.__super__ = hxsl.Shader;
Object.assign(h3d.shader.UVDelta.prototype, {
	__class__: h3d.shader.UVDelta
	,__properties__: {set_uvScale: "set_uvScale",get_uvScale: "get_uvScale",set_uvDelta: "set_uvDelta",get_uvDelta: "get_uvDelta"}
});
h3d.shader.VertexColorAlpha = class h3d_shader_VertexColorAlpha extends hxsl.Shader {
	constructor() {
		super();
	}
	get_additive() {
		return this.additive__;
	}
	set_additive(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		if(index == 0) {
			this.additive__ = val;
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.VertexColorAlpha.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
}
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d.shader.VertexColorAlpha;
h3d.shader.VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d.shader.VertexColorAlpha.__super__ = hxsl.Shader;
Object.assign(h3d.shader.VertexColorAlpha.prototype, {
	__class__: h3d.shader.VertexColorAlpha
	,__properties__: {set_additive: "set_additive",get_additive: "get_additive"}
});
h3d.shader.VolumeDecal = class h3d_shader_VolumeDecal extends hxsl.Shader {
	constructor(objectWidth,objectHeight) {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor(objectWidth,objectHeight);
	}
	_hx_constructor(objectWidth,objectHeight) {
		this.isCentered__ = true;
		this.tangent__ = new h3d.VectorImpl(0.,0.,0.);
		this.normal__ = new h3d.VectorImpl(0.,0.,0.);
		this.scale__ = new h3d.VectorImpl(0.,0.,0.);
		super._hx_constructor();
		let _this = this.normal__;
		let x = 0;
		let y = 0;
		let z = 1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		let _this1 = this.tangent__;
		let x1 = 1;
		let y1 = 0;
		let z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z1;
		let _this2 = this.scale__;
		let x2 = 1 / objectWidth;
		let y2 = 1 / objectHeight;
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = 0.;
	}
	get_scale() {
		return this.scale__;
	}
	set_scale(_v) {
		return this.scale__ = _v;
	}
	get_normal() {
		return this.normal__;
	}
	set_normal(_v) {
		return this.normal__ = _v;
	}
	get_tangent() {
		return this.tangent__;
	}
	set_tangent(_v) {
		return this.tangent__ = _v;
	}
	get_isCentered() {
		return this.isCentered__;
	}
	set_isCentered(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.scale__ = val;
			break;
		case 1:
			this.normal__ = val;
			break;
		case 2:
			this.tangent__ = val;
			break;
		case 3:
			this.isCentered__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(h3d.shader.VolumeDecal.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.isCentered__ = this.isCentered__;
		return s;
	}
}
$hxClasses["h3d.shader.VolumeDecal"] = h3d.shader.VolumeDecal;
h3d.shader.VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d.shader.VolumeDecal.__super__ = hxsl.Shader;
Object.assign(h3d.shader.VolumeDecal.prototype, {
	__class__: h3d.shader.VolumeDecal
	,__properties__: {set_isCentered: "set_isCentered",get_isCentered: "get_isCentered",set_tangent: "set_tangent",get_tangent: "get_tangent",set_normal: "set_normal",get_normal: "get_normal",set_scale: "set_scale",get_scale: "get_scale"}
});
var haxe = {};
haxe.IMap = class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe.IMap;
haxe.IMap.__name__ = "haxe.IMap";
haxe.IMap.__isInterface__ = true;
Object.assign(haxe.IMap.prototype, {
	__class__: haxe.IMap
});
haxe.EntryPoint = class haxe_EntryPoint {
	static processEvents() {
		while(true) {
			let f = haxe.EntryPoint.pending.shift();
			if(f == null) {
				break;
			}
			f();
		}
		let time = haxe.MainLoop.tick();
		if(!haxe.MainLoop.hasEvents() && haxe.EntryPoint.threadCount == 0) {
			return -1;
		}
		return time;
	}
	static run() {
		let nextTick = haxe.EntryPoint.processEvents();
		if(typeof(window) != "undefined") {
			let $window = window;
			let rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
			if(rqf != null) {
				rqf(haxe.EntryPoint.run);
			} else if(nextTick >= 0) {
				setTimeout(haxe.EntryPoint.run,nextTick * 1000);
			}
		} else if(nextTick >= 0) {
			setTimeout(haxe.EntryPoint.run,nextTick * 1000);
		}
	}
}
$hxClasses["haxe.EntryPoint"] = haxe.EntryPoint;
haxe.EntryPoint.__name__ = "haxe.EntryPoint";
haxe.Exception = class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe.Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe.Exception(value.message,null,value);
		} else {
			return new haxe.ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe.Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe.ValueException(value);
			return e;
		}
	}
}
$hxClasses["haxe.Exception"] = haxe.Exception;
haxe.Exception.__name__ = "haxe.Exception";
haxe.Exception.__super__ = Error;
Object.assign(haxe.Exception.prototype, {
	__class__: haxe.Exception
	,__properties__: {get_native: "get_native",get_message: "get_message"}
});
haxe.Log = class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe.Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = "haxe.Log";
haxe.MainEvent = class haxe_MainEvent {
	constructor(f,p) {
		this.isBlocking = true;
		this.f = f;
		this.priority = p;
		this.nextRun = -Infinity;
	}
	stop() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe.MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
}
$hxClasses["haxe.MainEvent"] = haxe.MainEvent;
haxe.MainEvent.__name__ = "haxe.MainEvent";
Object.assign(haxe.MainEvent.prototype, {
	__class__: haxe.MainEvent
});
haxe.MainLoop = class haxe_MainLoop {
	static hasEvents() {
		let p = haxe.MainLoop.pending;
		while(p != null) {
			if(p.isBlocking) {
				return true;
			}
			p = p.next;
		}
		return false;
	}
	static add(f,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(f == null) {
			throw haxe.Exception.thrown("Event function is null");
		}
		let e = new haxe.MainEvent(f,priority);
		let head = haxe.MainLoop.pending;
		if(head != null) {
			head.prev = e;
		}
		e.next = head;
		haxe.MainLoop.pending = e;
		return e;
	}
	static sortEvents() {
		let list = haxe.MainLoop.pending;
		if(list == null) {
			return;
		}
		let insize = 1;
		let nmerges;
		let psize = 0;
		let qsize = 0;
		let p;
		let q;
		let e;
		let tail;
		while(true) {
			p = list;
			list = null;
			tail = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				let _g = 0;
				let _g1 = insize;
				while(_g < _g1) {
					let i = _g++;
					++psize;
					q = q.next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						--qsize;
					} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
						e = p;
						p = p.next;
						--psize;
					} else {
						e = q;
						q = q.next;
						--qsize;
					}
					if(tail != null) {
						tail.next = e;
					} else {
						list = e;
					}
					e.prev = tail;
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) {
				break;
			}
			insize *= 2;
		}
		list.prev = null;
		haxe.MainLoop.pending = list;
	}
	static tick() {
		haxe.MainLoop.sortEvents();
		let e = haxe.MainLoop.pending;
		let now = HxOverrides.now() / 1000;
		let wait = 1e9;
		while(e != null) {
			let next = e.next;
			let wt = e.nextRun - now;
			if(wt <= 0) {
				wait = 0;
				if(e.f != null) {
					e.f();
				}
			} else if(wait > wt) {
				wait = wt;
			}
			e = next;
		}
		return wait;
	}
}
$hxClasses["haxe.MainLoop"] = haxe.MainLoop;
haxe.MainLoop.__name__ = "haxe.MainLoop";
haxe.Timer = class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe.Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = "haxe.Timer";
Object.assign(haxe.Timer.prototype, {
	__class__: haxe.Timer
});
haxe._Unserializer = {};
haxe._Unserializer.DefaultResolver = class haxe__$Unserializer_DefaultResolver {
	constructor() {
	}
	resolveClass(name) {
		return $hxClasses[name];
	}
	resolveEnum(name) {
		return $hxEnums[name];
	}
}
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe._Unserializer.DefaultResolver;
haxe._Unserializer.DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
Object.assign(haxe._Unserializer.DefaultResolver.prototype, {
	__class__: haxe._Unserializer.DefaultResolver
});
haxe.Unserializer = class haxe_Unserializer {
	constructor(buf) {
		this.buf = buf;
		this.length = this.buf.length;
		this.pos = 0;
		this.scache = [];
		this.cache = [];
		let r = haxe.Unserializer.DEFAULT_RESOLVER;
		if(r == null) {
			r = new haxe._Unserializer.DefaultResolver();
			haxe.Unserializer.DEFAULT_RESOLVER = r;
		}
		this.resolver = r;
	}
	readDigits() {
		let k = 0;
		let s = false;
		let fpos = this.pos;
		while(true) {
			let c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	readFloat() {
		let p1 = this.pos;
		while(true) {
			let c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	unserializeObject(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe.Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			let k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe.Exception.thrown("Invalid object key");
			}
			let v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	unserializeEnum(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe.Exception.thrown("Invalid enum format");
		}
		let nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		let args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	unserialize() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			let name = this.unserialize();
			let cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe.Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			let name1 = this.unserialize();
			let e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw haxe.Exception.thrown("Enum not found " + name1);
			}
			return e;
		case 67:
			let name2 = this.unserialize();
			let cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw haxe.Exception.thrown("Class not found " + name2);
			}
			let o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe.Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			let h = new haxe.ds.ObjectMap();
			this.cache.push(h);
			let buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				let s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			let n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe.Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			let buf1 = this.buf;
			let a = [];
			this.cache.push(a);
			while(true) {
				let c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					let n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			let h1 = new haxe.ds.StringMap();
			this.cache.push(h1);
			let buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				let s = this.unserialize();
				let value = this.unserialize();
				h1.h[s] = value;
			}
			this.pos++;
			return h1;
		case 99:
			let name3 = this.unserialize();
			let cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw haxe.Exception.thrown("Class not found " + name3);
			}
			let o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			let name4 = this.unserialize();
			let edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw haxe.Exception.thrown("Enum not found " + name4);
			}
			this.pos++;
			let index = this.readDigits();
			let _this = edecl.__constructs__;
			let result = new Array(_this.length);
			let _g = 0;
			let _g1 = _this.length;
			while(_g < _g1) {
				let i = _g++;
				result[i] = _this[i]._hx_name;
			}
			let tag = result[index];
			if(tag == null) {
				throw haxe.Exception.thrown("Unknown enum index " + name4 + "@" + index);
			}
			let e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			let l = new haxe.ds.List();
			this.cache.push(l);
			let buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			let o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			let h2 = new haxe.ds.IntMap();
			this.cache.push(h2);
			let buf4 = this.buf;
			let c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				let i = this.readDigits();
				let value = this.unserialize();
				h2.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe.Exception.thrown("Invalid IntMap format");
			}
			return h2;
		case 114:
			let n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) {
				throw haxe.Exception.thrown("Invalid reference");
			}
			return this.cache[n1];
		case 115:
			let len = this.readDigits();
			let buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe.Exception.thrown("Invalid bytes length");
			}
			let codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			let i = this.pos;
			let rest = len & 3;
			let size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			let max = i + (len - rest);
			let bytes = new haxe.io.Bytes(new ArrayBuffer(size));
			let bpos = 0;
			while(i < max) {
				let c1 = codes[buf5.charCodeAt(i++)];
				let c2 = codes[buf5.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				let c3 = codes[buf5.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				let c4 = codes[buf5.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				let c1 = codes[buf5.charCodeAt(i++)];
				let c2 = codes[buf5.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					let c3 = codes[buf5.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			let d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			let name5 = this.unserialize();
			let edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw haxe.Exception.thrown("Enum not found " + name5);
			}
			let e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw haxe.Exception.thrown(this.unserialize());
		case 121:
			let len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw haxe.Exception.thrown("Invalid string length");
			}
			let s = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe.Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	static initCodes() {
		let codes = [];
		let _g = 0;
		let _g1 = haxe.Unserializer.BASE64.length;
		while(_g < _g1) {
			let i = _g++;
			codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
		}
		return codes;
	}
	static run(v) {
		return new haxe.Unserializer(v).unserialize();
	}
}
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = "haxe.Unserializer";
Object.assign(haxe.Unserializer.prototype, {
	__class__: haxe.Unserializer
});
haxe.ValueException = class haxe_ValueException extends haxe.Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
$hxClasses["haxe.ValueException"] = haxe.ValueException;
haxe.ValueException.__name__ = "haxe.ValueException";
haxe.ValueException.__super__ = haxe.Exception;
Object.assign(haxe.ValueException.prototype, {
	__class__: haxe.ValueException
});
haxe.crypto = {};
haxe.crypto.Adler32 = class haxe_crypto_Adler32 {
	constructor() {
		this.a1 = 1;
		this.a2 = 0;
	}
	update(b,pos,len) {
		let a1 = this.a1;
		let a2 = this.a2;
		let _g = pos;
		let _g1 = pos + len;
		while(_g < _g1) {
			let p = _g++;
			let c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	equals(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	static read(i) {
		let a = new haxe.crypto.Adler32();
		let a2a = i.readByte();
		let a2b = i.readByte();
		let a1a = i.readByte();
		let a1b = i.readByte();
		a.a1 = a1a << 8 | a1b;
		a.a2 = a2a << 8 | a2b;
		return a;
	}
}
$hxClasses["haxe.crypto.Adler32"] = haxe.crypto.Adler32;
haxe.crypto.Adler32.__name__ = "haxe.crypto.Adler32";
Object.assign(haxe.crypto.Adler32.prototype, {
	__class__: haxe.crypto.Adler32
});
haxe.io = {};
haxe.io.Bytes = class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	fill(pos,len,value) {
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			this.b[pos++] = value;
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		return new haxe.io.Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	setFloat(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	setUInt16(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe.io.Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe.io.Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe.io.Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe.io.Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe.io.Bytes(b);
	}
}
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe.io.Bytes.prototype, {
	__class__: haxe.io.Bytes
});
haxe.io.Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe.io.Encoding.__constructs__ = [haxe.io.Encoding.UTF8,haxe.io.Encoding.RawNative];
haxe.io.Encoding.__empty_constructs__ = [haxe.io.Encoding.UTF8,haxe.io.Encoding.RawNative];
haxe.crypto.Base64 = class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		let str = new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
	}
}
$hxClasses["haxe.crypto.Base64"] = haxe.crypto.Base64;
haxe.crypto.Base64.__name__ = "haxe.crypto.Base64";
haxe.crypto.BaseCode = class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe.Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		let size = b.length * 8 / nbits | 0;
		let out = new haxe.io.Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		let buf = 0;
		let curbits = 0;
		let mask = (1 << nbits) - 1;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	initTable() {
		let tbl = [];
		let _g = 0;
		while(_g < 256) {
			let i = _g++;
			tbl[i] = -1;
		}
		let _g1 = 0;
		let _g2 = this.base.length;
		while(_g1 < _g2) {
			let i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		let tbl = this.tbl;
		let size = b.length * nbits >> 3;
		let out = new haxe.io.Bytes(new ArrayBuffer(size));
		let buf = 0;
		let curbits = 0;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				let i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe.Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
}
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = "haxe.crypto.BaseCode";
Object.assign(haxe.crypto.BaseCode.prototype, {
	__class__: haxe.crypto.BaseCode
});
haxe.crypto.Md5 = class haxe_crypto_Md5 {
	constructor() {
	}
	bitOR(a,b) {
		let lsb = a & 1 | b & 1;
		let msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	bitXOR(a,b) {
		let lsb = a & 1 ^ b & 1;
		let msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	bitAND(a,b) {
		let lsb = a & 1 & (b & 1);
		let msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	addme(x,y) {
		let lsw = (x & 65535) + (y & 65535);
		let msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	hex(a) {
		let str = "";
		let hex_chr = "0123456789abcdef";
		let _g = 0;
		while(_g < a.length) {
			let num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	rol(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	cmn(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	ff(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	gg(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	hh(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	ii(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	doEncode(x) {
		let a = 1732584193;
		let b = -271733879;
		let c = -1732584194;
		let d = 271733878;
		let step;
		let i = 0;
		while(i < x.length) {
			let olda = a;
			let oldb = b;
			let oldc = c;
			let oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	static encode(s) {
		let m = new haxe.crypto.Md5();
		let h = m.doEncode(haxe.crypto.Md5.str2blks(s));
		return m.hex(h);
	}
	static str2blks(str) {
		let str1 = haxe.io.Bytes.ofString(str);
		let nblk = (str1.length + 8 >> 6) + 1;
		let blks = [];
		let blksSize = nblk * 16;
		let _g = 0;
		let _g1 = blksSize;
		while(_g < _g1) {
			let i = _g++;
			blks[i] = 0;
		}
		let i = 0;
		let max = str1.length;
		let l = max * 8;
		while(i < max) {
			blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
			++i;
		}
		blks[i >> 2] |= 128 << (l + i) % 4 * 8;
		let k = nblk * 16 - 2;
		blks[k] = l & 255;
		blks[k] |= (l >>> 8 & 255) << 8;
		blks[k] |= (l >>> 16 & 255) << 16;
		blks[k] |= (l >>> 24 & 255) << 24;
		return blks;
	}
}
$hxClasses["haxe.crypto.Md5"] = haxe.crypto.Md5;
haxe.crypto.Md5.__name__ = "haxe.crypto.Md5";
Object.assign(haxe.crypto.Md5.prototype, {
	__class__: haxe.crypto.Md5
});
haxe.ds = {};
haxe.ds.ArraySort = class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe.ds.ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		let middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			let _g = from + 1;
			let _g1 = to;
			while(_g < _g1) {
				let i = _g++;
				let j = i;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe.ds.ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe.ds.ArraySort.rec(a,cmp,from,middle);
		haxe.ds.ArraySort.rec(a,cmp,middle,to);
		haxe.ds.ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		let first_cut;
		let second_cut;
		let len11;
		let len22;
		if(len1 == 0 || len2 == 0) {
			return;
		}
		if(len1 + len2 == 2) {
			if(cmp(a[pivot],a[from]) < 0) {
				haxe.ds.ArraySort.swap(a,pivot,from);
			}
			return;
		}
		if(len1 > len2) {
			len11 = len1 >> 1;
			first_cut = from + len11;
			second_cut = haxe.ds.ArraySort.lower(a,cmp,pivot,to,first_cut);
			len22 = second_cut - pivot;
		} else {
			len22 = len2 >> 1;
			second_cut = pivot + len22;
			first_cut = haxe.ds.ArraySort.upper(a,cmp,from,pivot,second_cut);
			len11 = first_cut - from;
		}
		haxe.ds.ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
		let new_mid = first_cut + len22;
		haxe.ds.ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
		haxe.ds.ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		let n = haxe.ds.ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			let val = a[from + n];
			let shift = mid - from;
			let p1 = from + n;
			let p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			let t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		let tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}
$hxClasses["haxe.ds.ArraySort"] = haxe.ds.ArraySort;
haxe.ds.ArraySort.__name__ = "haxe.ds.ArraySort";
haxe.ds.BalancedTree = class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe.ds.TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			let nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r));
			} else {
				return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe.ds.TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
}
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe.ds.BalancedTree.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.BalancedTree.prototype, {
	__class__: haxe.ds.BalancedTree
});
haxe.ds.TreeNode = class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
}
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe.ds.TreeNode.prototype, {
	__class__: haxe.ds.TreeNode
});
haxe.ds.EnumValueMap = class haxe_ds_EnumValueMap extends haxe.ds.BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
}
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe.ds.EnumValueMap.__interfaces__ = [haxe.IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
Object.assign(haxe.ds.EnumValueMap.prototype, {
	__class__: haxe.ds.EnumValueMap
});
haxe.ds.GenericCell = class haxe_ds_GenericCell {
	constructor(elt,next) {
		this.elt = elt;
		this.next = next;
	}
}
$hxClasses["haxe.ds.GenericCell"] = haxe.ds.GenericCell;
haxe.ds.GenericCell.__name__ = "haxe.ds.GenericCell";
Object.assign(haxe.ds.GenericCell.prototype, {
	__class__: haxe.ds.GenericCell
});
haxe.ds.GenericStack = class haxe_ds_GenericStack {
	constructor() {
	}
}
$hxClasses["haxe.ds.GenericStack"] = haxe.ds.GenericStack;
haxe.ds.GenericStack.__name__ = "haxe.ds.GenericStack";
Object.assign(haxe.ds.GenericStack.prototype, {
	__class__: haxe.ds.GenericStack
});
haxe.ds.IntMap = class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe.iterators.ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = "haxe.ds.IntMap";
haxe.ds.IntMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.IntMap.prototype, {
	__class__: haxe.ds.IntMap
});
haxe.ds.List = class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe.ds._List.ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe.ds._List.ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
}
$hxClasses["haxe.ds.List"] = haxe.ds.List;
haxe.ds.List.__name__ = "haxe.ds.List";
Object.assign(haxe.ds.List.prototype, {
	__class__: haxe.ds.List
});
haxe.ds._List = {};
haxe.ds._List.ListNode = class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe.ds._List.ListNode;
haxe.ds._List.ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe.ds._List.ListNode.prototype, {
	__class__: haxe.ds._List.ListNode
});
haxe.ds.ObjectMap = class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe.iterators.ArrayIterator(a);
	}
}
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe.ds.ObjectMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.ObjectMap.prototype, {
	__class__: haxe.ds.ObjectMap
});
haxe.ds.StringMap = class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = "haxe.ds.StringMap";
haxe.ds.StringMap.__interfaces__ = [haxe.IMap];
Object.assign(haxe.ds.StringMap.prototype, {
	__class__: haxe.ds.StringMap
});
haxe.ds._StringMap = {};
haxe.ds._StringMap.StringMapKeyIterator = class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe.ds._StringMap.StringMapKeyIterator;
haxe.ds._StringMap.StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
Object.assign(haxe.ds._StringMap.StringMapKeyIterator.prototype, {
	__class__: haxe.ds._StringMap.StringMapKeyIterator
});
haxe.ds.Vector = class haxe_ds_Vector {
	static blit(src,srcPos,dest,destPos,len) {
		if(src == dest) {
			if(srcPos < destPos) {
				let i = srcPos + len;
				let j = destPos + len;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > destPos) {
				let i = srcPos;
				let j = destPos;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					src[j] = src[i];
					++i;
					++j;
				}
			}
		} else {
			let _g = 0;
			let _g1 = len;
			while(_g < _g1) {
				let i = _g++;
				dest[destPos + i] = src[srcPos + i];
			}
		}
	}
}
haxe.exceptions = {};
haxe.exceptions.PosException = class haxe_exceptions_PosException extends haxe.Exception {
	constructor(message,previous,pos) {
		super(message,previous);
		if(pos == null) {
			this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
		} else {
			this.posInfos = pos;
		}
	}
	toString() {
		return "" + super.toString() + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
}
$hxClasses["haxe.exceptions.PosException"] = haxe.exceptions.PosException;
haxe.exceptions.PosException.__name__ = "haxe.exceptions.PosException";
haxe.exceptions.PosException.__super__ = haxe.Exception;
Object.assign(haxe.exceptions.PosException.prototype, {
	__class__: haxe.exceptions.PosException
});
haxe.exceptions.NotImplementedException = class haxe_exceptions_NotImplementedException extends haxe.exceptions.PosException {
	constructor(message,previous,pos) {
		if(message == null) {
			message = "Not implemented";
		}
		super(message,previous,pos);
	}
}
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe.exceptions.NotImplementedException;
haxe.exceptions.NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe.exceptions.NotImplementedException.__super__ = haxe.exceptions.PosException;
Object.assign(haxe.exceptions.NotImplementedException.prototype, {
	__class__: haxe.exceptions.NotImplementedException
});
haxe.http = {};
haxe.http.HttpBase = class haxe_http_HttpBase {
	constructor(url) {
		if(haxe.http.HttpBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe.io.Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
$hxClasses["haxe.http.HttpBase"] = haxe.http.HttpBase;
haxe.http.HttpBase.__name__ = "haxe.http.HttpBase";
Object.assign(haxe.http.HttpBase.prototype, {
	__class__: haxe.http.HttpBase
	,__properties__: {get_responseData: "get_responseData"}
});
haxe.http.HttpJs = class haxe_http_HttpJs extends haxe.http.HttpBase {
	constructor(url) {
		haxe.http.HttpBase._hx_skip_constructor = true;
		super();
		haxe.http.HttpBase._hx_skip_constructor = false;
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.async = true;
		this.withCredentials = false;
		super._hx_constructor(url);
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		let r = this.req = js.Browser.createXMLHttpRequest();
		let _gthis = this;
		let onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			let s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js.Browser.get_supported() && $global.location != null) {
				let protocol = $global.location.protocol.toLowerCase();
				let rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				let isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				let headers = r.getAllResponseHeaders().split("\r\n");
				let _g = [];
				let _g1 = 0;
				let _g2 = headers;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				let onreadystatechange = new haxe.ds.StringMap();
				_gthis.responseHeaders = onreadystatechange;
				let _g3 = 0;
				while(_g3 < headers.length) {
					let hline = headers[_g3];
					++_g3;
					let a = hline.split(": ");
					let hname = a.shift();
					let hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe.io.Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				let onreadystatechange = r.response != null ? haxe.io.Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					let onreadystatechange = r.response != null ? haxe.io.Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		let uri;
		let _g = this.postData;
		let _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				let bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			let str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			let _g = 0;
			let _g1 = this.params;
			while(_g < _g1.length) {
				let p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				let s = p.name;
				let uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				let s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				let question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			let e = haxe.Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		let _g2 = 0;
		let _g3 = this.headers;
		while(_g2 < _g3.length) {
			let h = _g3[_g2];
			++_g2;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
}
$hxClasses["haxe.http.HttpJs"] = haxe.http.HttpJs;
haxe.http.HttpJs.__name__ = "haxe.http.HttpJs";
haxe.http.HttpJs.__super__ = haxe.http.HttpBase;
Object.assign(haxe.http.HttpJs.prototype, {
	__class__: haxe.http.HttpJs
});
haxe.io.BytesBuffer = class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	add(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	addInt32(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	addFloat(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	addDouble(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		let req = this.pos + delta;
		let nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		let nbuf = new ArrayBuffer(nsize);
		let nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe.io.Bytes(new ArrayBuffer(0));
		}
		let b = new haxe.io.Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
$hxClasses["haxe.io.BytesBuffer"] = haxe.io.BytesBuffer;
haxe.io.BytesBuffer.__name__ = "haxe.io.BytesBuffer";
Object.assign(haxe.io.BytesBuffer.prototype, {
	__class__: haxe.io.BytesBuffer
});
haxe.io.Input = class haxe_io_Input {
	readByte() {
		throw new haxe.exceptions.NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	readBytes(s,pos,len) {
		let k = len;
		let b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	set_bigEndian(b) {
		this.bigEndian = b;
		return b;
	}
	readFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe.Exception.thrown(haxe.io.Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	read(nbytes) {
		let s = new haxe.io.Bytes(new ArrayBuffer(nbytes));
		let p = 0;
		while(nbytes > 0) {
			let k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe.Exception.thrown(haxe.io.Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	readUntil(end) {
		let buf = new haxe.io.BytesBuffer();
		let last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	readLine() {
		let buf = new haxe.io.BytesBuffer();
		let last;
		let s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe.io.Eof)) {
				let e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe.Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	readFloat() {
		return haxe.io.FPHelper.i32ToFloat(this.readInt32());
	}
	readDouble() {
		let i1 = this.readInt32();
		let i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe.io.FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe.io.FPHelper.i64ToDouble(i1,i2);
		}
	}
	readInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	readUInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	readUInt24() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	readInt32() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		let ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	readString(len,encoding) {
		let b = new haxe.io.Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
}
$hxClasses["haxe.io.Input"] = haxe.io.Input;
haxe.io.Input.__name__ = "haxe.io.Input";
Object.assign(haxe.io.Input.prototype, {
	__class__: haxe.io.Input
	,__properties__: {set_bigEndian: "set_bigEndian"}
});
haxe.io.BytesInput = class haxe_io_BytesInput extends haxe.io.Input {
	constructor(b,pos,len) {
		super();
		if(pos == null) {
			pos = 0;
		}
		if(len == null) {
			len = b.length - pos;
		}
		if(pos < 0 || len < 0 || pos + len > b.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		this.b = b.b;
		this.pos = pos;
		this.len = len;
		this.totlen = len;
	}
	set_position(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	readByte() {
		if(this.len == 0) {
			throw haxe.Exception.thrown(new haxe.io.Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	readBytes(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe.Exception.thrown(new haxe.io.Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		let b1 = this.b;
		let b2 = buf.b;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
}
$hxClasses["haxe.io.BytesInput"] = haxe.io.BytesInput;
haxe.io.BytesInput.__name__ = "haxe.io.BytesInput";
haxe.io.BytesInput.__super__ = haxe.io.Input;
Object.assign(haxe.io.BytesInput.prototype, {
	__class__: haxe.io.BytesInput
	,__properties__: Object.assign({}, haxe.io.Input.prototype.__properties__, {set_position: "set_position"})
});
haxe.io.Output = class haxe_io_Output {
	writeByte(c) {
		throw new haxe.exceptions.NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		}
		let b = s.b;
		let k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	flush() {
	}
	close() {
	}
	set_bigEndian(b) {
		this.bigEndian = b;
		return b;
	}
	write(s) {
		let l = s.length;
		let p = 0;
		while(l > 0) {
			let k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe.Exception.thrown(haxe.io.Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	writeFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	writeInt32(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	writeString(s,encoding) {
		let b = haxe.io.Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
}
$hxClasses["haxe.io.Output"] = haxe.io.Output;
haxe.io.Output.__name__ = "haxe.io.Output";
Object.assign(haxe.io.Output.prototype, {
	__class__: haxe.io.Output
	,__properties__: {set_bigEndian: "set_bigEndian"}
});
haxe.io.BytesOutput = class haxe_io_BytesOutput extends haxe.io.Output {
	constructor() {
		super();
		this.b = new haxe.io.BytesBuffer();
	}
	writeByte(c) {
		this.b.addByte(c);
	}
	writeBytes(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	getBytes() {
		return this.b.getBytes();
	}
}
$hxClasses["haxe.io.BytesOutput"] = haxe.io.BytesOutput;
haxe.io.BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe.io.BytesOutput.__super__ = haxe.io.Output;
Object.assign(haxe.io.BytesOutput.prototype, {
	__class__: haxe.io.BytesOutput
});
haxe.io.Eof = class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe.io.Eof.prototype, {
	__class__: haxe.io.Eof
});
haxe.io.Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe.io.Error.__constructs__ = [haxe.io.Error.Blocked,haxe.io.Error.Overflow,haxe.io.Error.OutsideBounds,haxe.io.Error.Custom];
haxe.io.Error.__empty_constructs__ = [haxe.io.Error.Blocked,haxe.io.Error.Overflow,haxe.io.Error.OutsideBounds];
haxe.io.FPHelper = class haxe_io_FPHelper {
	static i32ToFloat(i) {
		haxe.io.FPHelper.helper.setInt32(0,i,true);
		return haxe.io.FPHelper.helper.getFloat32(0,true);
	}
	static floatToI32(f) {
		haxe.io.FPHelper.helper.setFloat32(0,f,true);
		return haxe.io.FPHelper.helper.getInt32(0,true);
	}
	static i64ToDouble(low,high) {
		haxe.io.FPHelper.helper.setInt32(0,low,true);
		haxe.io.FPHelper.helper.setInt32(4,high,true);
		return haxe.io.FPHelper.helper.getFloat64(0,true);
	}
}
$hxClasses["haxe.io.FPHelper"] = haxe.io.FPHelper;
haxe.io.FPHelper.__name__ = "haxe.io.FPHelper";
haxe.io.Path = class haxe_io_Path {
	constructor(path) {
		switch(path) {
		case ".":case "..":
			this.dir = path;
			this.file = "";
			return;
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			this.dir = HxOverrides.substr(path,0,c2);
			path = HxOverrides.substr(path,c2 + 1,null);
			this.backslash = true;
		} else if(c2 < c1) {
			this.dir = HxOverrides.substr(path,0,c1);
			path = HxOverrides.substr(path,c1 + 1,null);
		} else {
			this.dir = null;
		}
		let cp = path.lastIndexOf(".");
		if(cp != -1) {
			this.ext = HxOverrides.substr(path,cp + 1,null);
			this.file = HxOverrides.substr(path,0,cp);
		} else {
			this.ext = null;
			this.file = path;
		}
	}
	toString() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	static directory(path) {
		let s = new haxe.io.Path(path);
		if(s.dir == null) {
			return "";
		}
		return s.dir;
	}
	static extension(path) {
		let s = new haxe.io.Path(path);
		if(s.ext == null) {
			return "";
		}
		return s.ext;
	}
	static withExtension(path,ext) {
		let s = new haxe.io.Path(path);
		s.ext = ext;
		return s.toString();
	}
	static join(paths) {
		let _g = [];
		let _g1 = 0;
		let _g2 = paths;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			if(v != null && v != "") {
				_g.push(v);
			}
		}
		let paths1 = _g;
		if(paths1.length == 0) {
			return "";
		}
		let path = paths1[0];
		let _g3 = 1;
		let _g4 = paths1.length;
		while(_g3 < _g4) {
			let i = _g3++;
			path = haxe.io.Path.addTrailingSlash(path);
			path += paths1[i];
		}
		return haxe.io.Path.normalize(path);
	}
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let tmp = target.join(slash);
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g_offset = 0;
		let _g_s = tmp;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
	static addTrailingSlash(path) {
		if(path.length == 0) {
			return "/";
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			if(c2 != path.length - 1) {
				return path + "\\";
			} else {
				return path;
			}
		} else if(c1 != path.length - 1) {
			return path + "/";
		} else {
			return path;
		}
	}
}
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = "haxe.io.Path";
Object.assign(haxe.io.Path.prototype, {
	__class__: haxe.io.Path
});
haxe.iterators = {};
haxe.iterators.ArrayIterator = class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
$hxClasses["haxe.iterators.ArrayIterator"] = haxe.iterators.ArrayIterator;
haxe.iterators.ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe.iterators.ArrayIterator.prototype, {
	__class__: haxe.iterators.ArrayIterator
});
haxe.macro = {};
haxe.macro.Binop = $hxEnums["haxe.macro.Binop"] = { __ename__:true,__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_name:"OpMult",_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_name:"OpAssign",_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_name:"OpEq",_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_name:"OpNotEq",_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_name:"OpGt",_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_name:"OpGte",_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_name:"OpLt",_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_name:"OpLte",_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_name:"OpAnd",_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_name:"OpOr",_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_name:"OpXor",_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_name:"OpBoolAnd",_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_name:"OpBoolOr",_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_name:"OpShl",_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_name:"OpShr",_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_name:"OpUShr",_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_._hx_name="OpAssignOp",$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_name:"OpInterval",_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_name:"OpArrow",_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_name:"OpIn",_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNullCoal: {_hx_name:"OpNullCoal",_hx_index:24,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe.macro.Binop.__constructs__ = [haxe.macro.Binop.OpAdd,haxe.macro.Binop.OpMult,haxe.macro.Binop.OpDiv,haxe.macro.Binop.OpSub,haxe.macro.Binop.OpAssign,haxe.macro.Binop.OpEq,haxe.macro.Binop.OpNotEq,haxe.macro.Binop.OpGt,haxe.macro.Binop.OpGte,haxe.macro.Binop.OpLt,haxe.macro.Binop.OpLte,haxe.macro.Binop.OpAnd,haxe.macro.Binop.OpOr,haxe.macro.Binop.OpXor,haxe.macro.Binop.OpBoolAnd,haxe.macro.Binop.OpBoolOr,haxe.macro.Binop.OpShl,haxe.macro.Binop.OpShr,haxe.macro.Binop.OpUShr,haxe.macro.Binop.OpMod,haxe.macro.Binop.OpAssignOp,haxe.macro.Binop.OpInterval,haxe.macro.Binop.OpArrow,haxe.macro.Binop.OpIn,haxe.macro.Binop.OpNullCoal];
haxe.macro.Binop.__empty_constructs__ = [haxe.macro.Binop.OpAdd,haxe.macro.Binop.OpMult,haxe.macro.Binop.OpDiv,haxe.macro.Binop.OpSub,haxe.macro.Binop.OpAssign,haxe.macro.Binop.OpEq,haxe.macro.Binop.OpNotEq,haxe.macro.Binop.OpGt,haxe.macro.Binop.OpGte,haxe.macro.Binop.OpLt,haxe.macro.Binop.OpLte,haxe.macro.Binop.OpAnd,haxe.macro.Binop.OpOr,haxe.macro.Binop.OpXor,haxe.macro.Binop.OpBoolAnd,haxe.macro.Binop.OpBoolOr,haxe.macro.Binop.OpShl,haxe.macro.Binop.OpShr,haxe.macro.Binop.OpUShr,haxe.macro.Binop.OpMod,haxe.macro.Binop.OpInterval,haxe.macro.Binop.OpArrow,haxe.macro.Binop.OpIn,haxe.macro.Binop.OpNullCoal];
haxe.macro.Unop = $hxEnums["haxe.macro.Unop"] = { __ename__:true,__constructs__:null
	,OpIncrement: {_hx_name:"OpIncrement",_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_name:"OpDecrement",_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_name:"OpNot",_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_name:"OpNeg",_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_name:"OpNegBits",_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpSpread: {_hx_name:"OpSpread",_hx_index:5,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe.macro.Unop.__constructs__ = [haxe.macro.Unop.OpIncrement,haxe.macro.Unop.OpDecrement,haxe.macro.Unop.OpNot,haxe.macro.Unop.OpNeg,haxe.macro.Unop.OpNegBits,haxe.macro.Unop.OpSpread];
haxe.macro.Unop.__empty_constructs__ = [haxe.macro.Unop.OpIncrement,haxe.macro.Unop.OpDecrement,haxe.macro.Unop.OpNot,haxe.macro.Unop.OpNeg,haxe.macro.Unop.OpNegBits,haxe.macro.Unop.OpSpread];
haxe.xml = {};
haxe.xml._Access = {};
haxe.xml._Access.NodeAccess = class haxe_xml__$Access_NodeAccess {
	static resolve(this1,name) {
		let x = this1.elementsNamed(name).next();
		if(x == null) {
			let xname;
			if(this1.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				if(this1.nodeType != Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
				}
				xname = this1.nodeName;
			}
			throw haxe.Exception.thrown(xname + " is missing element " + name);
		}
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		return x;
	}
}
haxe.xml._Access.AttribAccess = class haxe_xml__$Access_AttribAccess {
	static resolve(this1,name) {
		if(this1.nodeType == Xml.Document) {
			throw haxe.Exception.thrown("Cannot access document attribute " + name);
		}
		let v = this1.get(name);
		if(v == null) {
			if(this1.nodeType != Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			throw haxe.Exception.thrown(this1.nodeName + " is missing attribute " + name);
		}
		return v;
	}
}
haxe.xml._Access.HasNodeAccess = class haxe_xml__$Access_HasNodeAccess {
	static resolve(this1,name) {
		return this1.elementsNamed(name).hasNext();
	}
}
haxe.xml.XmlParserException = class haxe_xml_XmlParserException {
	constructor(message,xml,position) {
		this.xml = xml;
		this.message = message;
		this.position = position;
		this.lineNumber = 1;
		this.positionAtLine = 0;
		let _g = 0;
		let _g1 = position;
		while(_g < _g1) {
			let i = _g++;
			let c = xml.charCodeAt(i);
			if(c == 10) {
				this.lineNumber++;
				this.positionAtLine = 0;
			} else if(c != 13) {
				this.positionAtLine++;
			}
		}
	}
	toString() {
		let c = js.Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
}
$hxClasses["haxe.xml.XmlParserException"] = haxe.xml.XmlParserException;
haxe.xml.XmlParserException.__name__ = "haxe.xml.XmlParserException";
Object.assign(haxe.xml.XmlParserException.prototype, {
	__class__: haxe.xml.XmlParserException
});
haxe.xml.Parser = class haxe_xml_Parser {
	static parse(str,strict) {
		if(strict == null) {
			strict = false;
		}
		let doc = Xml.createDocument();
		haxe.xml.Parser.doParse(str,strict,0,doc);
		return doc;
	}
	static doParse(str,strict,p,parent) {
		if(p == null) {
			p = 0;
		}
		let xml = null;
		let state = 1;
		let next = 1;
		let aname = null;
		let start = 0;
		let nsubs = 0;
		let nbrackets = 0;
		let buf = new StringBuf();
		let escapeNext = 1;
		let attrValQuote = -1;
		while(p < str.length) {
			let c = str.charCodeAt(p);
			switch(state) {
			case 0:
				switch(c) {
				case 9:case 10:case 13:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				if(c == 60) {
					state = 0;
					next = 2;
				} else {
					start = p;
					state = 13;
					continue;
				}
				break;
			case 2:
				switch(c) {
				case 33:
					if(str.charCodeAt(p + 1) == 91) {
						p += 2;
						if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
							throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected <![CDATA[",str,p));
						}
						p += 5;
						state = 17;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
						if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
							throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected <!DOCTYPE",str,p));
						}
						p += 8;
						state = 16;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected <!--",str,p));
					} else {
						p += 2;
						state = 15;
						start = p + 1;
					}
					break;
				case 47:
					if(parent == null) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected node name",str,p));
					}
					start = p + 1;
					state = 0;
					next = 10;
					break;
				case 63:
					state = 14;
					start = p;
					break;
				default:
					state = 3;
					start = p;
					continue;
				}
				break;
			case 3:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(p == start) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected node name",str,p));
					}
					xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
					parent.addChild(xml);
					++nsubs;
					state = 0;
					next = 4;
					continue;
				}
				break;
			case 4:
				switch(c) {
				case 47:
					state = 11;
					break;
				case 62:
					state = 9;
					break;
				default:
					state = 5;
					start = p;
					continue;
				}
				break;
			case 5:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected attribute name",str,p));
					}
					let tmp = HxOverrides.substr(str,start,p - start);
					aname = tmp;
					if(xml.exists(aname)) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Duplicate attribute [" + aname + "]",str,p));
					}
					state = 0;
					next = 6;
					continue;
				}
				break;
			case 6:
				if(c == 61) {
					state = 0;
					next = 7;
				} else {
					throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected =",str,p));
				}
				break;
			case 7:
				switch(c) {
				case 34:case 39:
					buf = new StringBuf();
					state = 8;
					start = p + 1;
					attrValQuote = c;
					break;
				default:
					throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected \"",str,p));
				}
				break;
			case 8:
				switch(c) {
				case 38:
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 8;
					start = p + 1;
					break;
				case 60:case 62:
					if(strict) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
					} else if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
					break;
				default:
					if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
				}
				break;
			case 9:
				p = haxe.xml.Parser.doParse(str,strict,p,xml);
				start = p;
				state = 1;
				break;
			case 10:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected node name",str,p));
					}
					let v = HxOverrides.substr(str,start,p - start);
					if(parent == null || parent.nodeType != 0) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
					}
					if(parent.nodeType != Xml.Element) {
						throw haxe.Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					if(v != parent.nodeName) {
						if(parent.nodeType != Xml.Element) {
							throw haxe.Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
						}
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected </" + parent.nodeName + ">",str,p));
					}
					state = 0;
					next = 12;
					continue;
				}
				break;
			case 11:
				if(c == 62) {
					state = 1;
				} else {
					throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected >",str,p));
				}
				break;
			case 12:
				if(c == 62) {
					if(nsubs == 0) {
						parent.addChild(Xml.createPCData(""));
					}
					return p;
				} else {
					throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Expected >",str,p));
				}
				break;
			case 13:
				if(c == 60) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					let child = Xml.createPCData(buf.b);
					buf = new StringBuf();
					parent.addChild(child);
					++nsubs;
					state = 0;
					next = 2;
				} else if(c == 38) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 13;
					start = p + 1;
				}
				break;
			case 14:
				if(c == 63 && str.charCodeAt(p + 1) == 62) {
					++p;
					let str1 = HxOverrides.substr(str,start + 1,p - start - 2);
					parent.addChild(Xml.createProcessingInstruction(str1));
					++nsubs;
					state = 1;
				}
				break;
			case 15:
				if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
					parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 16:
				if(c == 91) {
					++nbrackets;
				} else if(c == 93) {
					--nbrackets;
				} else if(c == 62 && nbrackets == 0) {
					parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					state = 1;
				}
				break;
			case 17:
				if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
					let child = Xml.createCData(HxOverrides.substr(str,start,p - start));
					parent.addChild(child);
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 18:
				if(c == 59) {
					let s = HxOverrides.substr(str,start,p - start);
					if(s.charCodeAt(0) == 35) {
						let c = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
						buf.b += String.fromCodePoint(c);
					} else if(!Object.prototype.hasOwnProperty.call(haxe.xml.Parser.escapes.h,s)) {
						if(strict) {
							throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						buf.b += Std.string(haxe.xml.Parser.escapes.h[s]);
					}
					start = p + 1;
					state = escapeNext;
				} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
					if(strict) {
						throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
					}
					buf.b += String.fromCodePoint(38);
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					--p;
					start = p + 1;
					state = escapeNext;
				}
				break;
			}
			++p;
		}
		if(state == 1) {
			start = p;
			state = 13;
		}
		if(state == 13) {
			if(parent.nodeType == 0) {
				if(parent.nodeType != Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
			}
			if(p != start || nsubs == 0) {
				let len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				parent.addChild(Xml.createPCData(buf.b));
				++nsubs;
			}
			return p;
		}
		if(!strict && state == 18 && escapeNext == 13) {
			buf.b += String.fromCodePoint(38);
			let len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
			return p;
		}
		throw haxe.Exception.thrown(new haxe.xml.XmlParserException("Unexpected end",str,p));
	}
}
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = "haxe.xml.Parser";
haxe.xml.Printer = class haxe_xml_Printer {
	constructor(pretty) {
		this.output = new StringBuf();
		this.pretty = pretty;
	}
	writeNode(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			let attribute = value.attributes();
			while(attribute.hasNext()) {
				let attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				let input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				let _g_current = 0;
				let _g_array = value.children;
				while(_g_current < _g_array.length) {
					let child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				let input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let commentContent = value.nodeValue;
			let _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			let input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let _g_current = 0;
			let _g_array = value.children;
			while(_g_current < _g_array.length) {
				let child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	hasChildren(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe.Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		let _g_current = 0;
		let _g_array = value.children;
		while(_g_current < _g_array.length) {
			let child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe.Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	static print(xml,pretty) {
		if(pretty == null) {
			pretty = false;
		}
		let printer = new haxe.xml.Printer(pretty);
		printer.writeNode(xml,"");
		return printer.output.b;
	}
}
$hxClasses["haxe.xml.Printer"] = haxe.xml.Printer;
haxe.xml.Printer.__name__ = "haxe.xml.Printer";
Object.assign(haxe.xml.Printer.prototype, {
	__class__: haxe.xml.Printer
});
haxe.zip = {};
haxe.zip.Compress = class haxe_zip_Compress {
	static run(s,level) {
		throw new haxe.exceptions.NotImplementedException("Not implemented for this platform",null,{ fileName : "haxe/zip/Compress.hx", lineNumber : 39, className : "haxe.zip.Compress", methodName : "run"});
	}
}
$hxClasses["haxe.zip.Compress"] = haxe.zip.Compress;
haxe.zip.Compress.__name__ = "haxe.zip.Compress";
haxe.zip.Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe.zip.Huffman.__constructs__ = [haxe.zip.Huffman.Found,haxe.zip.Huffman.NeedBit,haxe.zip.Huffman.NeedBits];
haxe.zip.Huffman.__empty_constructs__ = [];
haxe.zip.HuffTools = class haxe_zip_HuffTools {
	constructor() {
	}
	treeDepth(t) {
		switch(t._hx_index) {
		case 0:
			let _g = t.i;
			return 0;
		case 1:
			let a = t.left;
			let b = t.right;
			let da = this.treeDepth(a);
			let db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			let _g1 = t.n;
			let _g2 = t.table;
			throw haxe.Exception.thrown("assert");
		}
	}
	treeCompress(t) {
		let d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				let a = t.left;
				let b = t.right;
				return haxe.zip.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe.Exception.thrown("assert");
			}
		}
		let size = 1 << d;
		let table = [];
		let _g = 0;
		let _g1 = size;
		while(_g < _g1) {
			let i = _g++;
			table.push(haxe.zip.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe.zip.Huffman.NeedBits(d,table);
	}
	treeWalk(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			let a = t.left;
			let b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	treeMake(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe.Exception.thrown("Invalid huffman");
		}
		let idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe.zip.Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	make(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe.zip.Huffman.NeedBit(haxe.zip.Huffman.Found(0),haxe.zip.Huffman.Found(0));
		}
		let counts = [];
		let tmp = [];
		if(maxbits > 32) {
			throw haxe.Exception.thrown("Invalid huffman");
		}
		let _g = 0;
		let _g1 = maxbits;
		while(_g < _g1) {
			let i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		let _g2 = 0;
		let _g3 = nlengths;
		while(_g2 < _g3) {
			let i = _g2++;
			let p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe.Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		let code = 0;
		let _g4 = 1;
		let _g5 = maxbits - 1;
		while(_g4 < _g5) {
			let i = _g4++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		let bits = new haxe.ds.IntMap();
		let _g6 = 0;
		let _g7 = nlengths;
		while(_g6 < _g7) {
			let i = _g6++;
			let l = lengths[i + pos];
			if(l != 0) {
				let n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
}
$hxClasses["haxe.zip.HuffTools"] = haxe.zip.HuffTools;
haxe.zip.HuffTools.__name__ = "haxe.zip.HuffTools";
Object.assign(haxe.zip.HuffTools.prototype, {
	__class__: haxe.zip.HuffTools
});
haxe.zip._InflateImpl = {};
haxe.zip._InflateImpl.Window = class haxe_zip__$InflateImpl_Window {
	constructor(hasCrc) {
		this.buffer = new haxe.io.Bytes(new ArrayBuffer(65536));
		this.pos = 0;
		if(hasCrc) {
			this.crc = new haxe.crypto.Adler32();
		}
	}
	slide() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		let b = new haxe.io.Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	addBytes(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	addByte(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	getLastChar() {
		return this.buffer.b[this.pos - 1];
	}
	available() {
		return this.pos;
	}
	checksum() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
}
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe.zip._InflateImpl.Window;
haxe.zip._InflateImpl.Window.__name__ = "haxe.zip._InflateImpl.Window";
Object.assign(haxe.zip._InflateImpl.Window.prototype, {
	__class__: haxe.zip._InflateImpl.Window
});
haxe.zip._InflateImpl.State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe.zip._InflateImpl.State.__constructs__ = [haxe.zip._InflateImpl.State.Head,haxe.zip._InflateImpl.State.Block,haxe.zip._InflateImpl.State.CData,haxe.zip._InflateImpl.State.Flat,haxe.zip._InflateImpl.State.Crc,haxe.zip._InflateImpl.State.Dist,haxe.zip._InflateImpl.State.DistOne,haxe.zip._InflateImpl.State.Done];
haxe.zip._InflateImpl.State.__empty_constructs__ = [haxe.zip._InflateImpl.State.Head,haxe.zip._InflateImpl.State.Block,haxe.zip._InflateImpl.State.CData,haxe.zip._InflateImpl.State.Flat,haxe.zip._InflateImpl.State.Crc,haxe.zip._InflateImpl.State.Dist,haxe.zip._InflateImpl.State.DistOne,haxe.zip._InflateImpl.State.Done];
haxe.zip.InflateImpl = class haxe_zip_InflateImpl {
	constructor(i,header,crc) {
		if(crc == null) {
			crc = true;
		}
		if(header == null) {
			header = true;
		}
		this.isFinal = false;
		this.htools = new haxe.zip.HuffTools();
		this.huffman = this.buildFixedHuffman();
		this.huffdist = null;
		this.len = 0;
		this.dist = 0;
		this.state = header ? haxe.zip._InflateImpl.State.Head : haxe.zip._InflateImpl.State.Block;
		this.input = i;
		this.bits = 0;
		this.nbits = 0;
		this.needed = 0;
		this.output = null;
		this.outpos = 0;
		this.lengths = [];
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.window = new haxe.zip._InflateImpl.Window(crc);
	}
	buildFixedHuffman() {
		if(haxe.zip.InflateImpl.FIXED_HUFFMAN != null) {
			return haxe.zip.InflateImpl.FIXED_HUFFMAN;
		}
		let a = [];
		let _g = 0;
		while(_g < 288) {
			let n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe.zip.InflateImpl.FIXED_HUFFMAN;
	}
	readBytes(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	getBits(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		let b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	getBit() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		let b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	getRevBits(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	resetBits() {
		this.bits = 0;
		this.nbits = 0;
	}
	addBytes(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	addByte(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	addDistOne(n) {
		let c = this.window.getLastChar();
		let _g = 0;
		let _g1 = n;
		while(_g < _g1) {
			let i = _g++;
			this.addByte(c);
		}
	}
	addDist(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	applyHuffman(h) {
		switch(h._hx_index) {
		case 0:
			let n = h.i;
			return n;
		case 1:
			let a = h.left;
			let b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			let n1 = h.n;
			let tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	inflateLengths(a,max) {
		let i = 0;
		let prev = 0;
		while(i < max) {
			let n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				let end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe.Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe.Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe.Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe.Exception.thrown("Invalid data");
			}
		}
	}
	inflateLoop() {
		switch(this.state._hx_index) {
		case 0:
			let cmf = this.input.readByte();
			let cm = cmf & 15;
			let cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe.Exception.thrown("Invalid data");
			}
			let flg = this.input.readByte();
			let fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe.Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe.Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe.zip._InflateImpl.State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				let nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe.Exception.thrown("Invalid data");
				}
				this.state = haxe.zip._InflateImpl.State.Flat;
				let r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			case 2:
				let hlit = this.getBits(5) + 257;
				let hdist = this.getBits(5) + 1;
				let hclen = this.getBits(4) + 4;
				let _g = 0;
				let _g1 = hclen;
				while(_g < _g1) {
					let i = _g++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				let _g2 = hclen;
				let _g3 = 19;
				while(_g2 < _g3) {
					let i = _g2++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				let lengths = [];
				let _g4 = 0;
				let _g5 = hlit + hdist;
				while(_g4 < _g5) {
					let i = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			default:
				throw haxe.Exception.thrown("Invalid data");
			}
			break;
		case 2:
			let n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				let extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe.Exception.thrown("Invalid data");
				}
				this.len = haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				let dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe.Exception.thrown("Invalid data");
				}
				this.dist = haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe.Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe.zip._InflateImpl.State.DistOne : haxe.zip._InflateImpl.State.Dist;
				return true;
			}
			break;
		case 3:
			let rlen = this.len < this.needed ? this.len : this.needed;
			let bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
			}
			return this.needed > 0;
		case 4:
			let calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe.zip._InflateImpl.State.Done;
				return true;
			}
			let crc = haxe.crypto.Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe.Exception.thrown("Invalid CRC");
			}
			this.state = haxe.zip._InflateImpl.State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				let rdist = this.len < this.dist ? this.len : this.dist;
				let rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 6:
			let rlen1 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	static run(i,bufsize) {
		if(bufsize == null) {
			bufsize = 65536;
		}
		let buf = new haxe.io.Bytes(new ArrayBuffer(bufsize));
		let output = new haxe.io.BytesBuffer();
		let inflate = new haxe.zip.InflateImpl(i);
		while(true) {
			let len = inflate.readBytes(buf,0,bufsize);
			output.addBytes(buf,0,len);
			if(len < bufsize) {
				break;
			}
		}
		return output.getBytes();
	}
}
$hxClasses["haxe.zip.InflateImpl"] = haxe.zip.InflateImpl;
haxe.zip.InflateImpl.__name__ = "haxe.zip.InflateImpl";
Object.assign(haxe.zip.InflateImpl.prototype, {
	__class__: haxe.zip.InflateImpl
});
haxe.zip.Uncompress = class haxe_zip_Uncompress {
	static run(src,bufsize) {
		return haxe.zip.InflateImpl.run(new haxe.io.BytesInput(src),bufsize);
	}
}
$hxClasses["haxe.zip.Uncompress"] = haxe.zip.Uncompress;
haxe.zip.Uncompress.__name__ = "haxe.zip.Uncompress";
var hscript = {};
hscript.Const = $hxEnums["hscript.Const"] = { __ename__:true,__constructs__:null
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["s"],$_)
};
hscript.Const.__constructs__ = [hscript.Const.CInt,hscript.Const.CFloat,hscript.Const.CString];
hscript.Const.__empty_constructs__ = [];
hscript.Expr = $hxEnums["hscript.Expr"] = { __ename__:true,__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EConst",$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIdent",$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EVar",$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EParent",$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBlock",$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EField",$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EUnop",$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECall",$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EIf",$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EWhile",$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFor",$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EFunction",$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EReturn",$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArray",$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EArrayDecl",$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ENew",$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EThrow",$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETry",$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EObject",$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ETernary",$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ESwitch",$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EDoWhile",$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="EMeta",$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_._hx_name="ECheckType",$_.__params__ = ["e","t"],$_)
};
hscript.Expr.__constructs__ = [hscript.Expr.EConst,hscript.Expr.EIdent,hscript.Expr.EVar,hscript.Expr.EParent,hscript.Expr.EBlock,hscript.Expr.EField,hscript.Expr.EBinop,hscript.Expr.EUnop,hscript.Expr.ECall,hscript.Expr.EIf,hscript.Expr.EWhile,hscript.Expr.EFor,hscript.Expr.EBreak,hscript.Expr.EContinue,hscript.Expr.EFunction,hscript.Expr.EReturn,hscript.Expr.EArray,hscript.Expr.EArrayDecl,hscript.Expr.ENew,hscript.Expr.EThrow,hscript.Expr.ETry,hscript.Expr.EObject,hscript.Expr.ETernary,hscript.Expr.ESwitch,hscript.Expr.EDoWhile,hscript.Expr.EMeta,hscript.Expr.ECheckType];
hscript.Expr.__empty_constructs__ = [hscript.Expr.EBreak,hscript.Expr.EContinue];
hscript.CType = $hxEnums["hscript.CType"] = { __ename__:true,__constructs__:null
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTPath",$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTFun",$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTAnon",$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTParent",$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTOpt",$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_._hx_name="CTNamed",$_.__params__ = ["n","t"],$_)
};
hscript.CType.__constructs__ = [hscript.CType.CTPath,hscript.CType.CTFun,hscript.CType.CTAnon,hscript.CType.CTParent,hscript.CType.CTOpt,hscript.CType.CTNamed];
hscript.CType.__empty_constructs__ = [];
hscript.Error = $hxEnums["hscript.Error"] = { __ename__:true,__constructs__:null
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidChar",$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnexpected",$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_name:"EUnterminatedString",_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_name:"EUnterminatedComment",_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidPreprocessor",$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EUnknownVariable",$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidIterator",$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidOp",$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="EInvalidAccess",$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_._hx_name="ECustom",$_.__params__ = ["msg"],$_)
};
hscript.Error.__constructs__ = [hscript.Error.EInvalidChar,hscript.Error.EUnexpected,hscript.Error.EUnterminatedString,hscript.Error.EUnterminatedComment,hscript.Error.EInvalidPreprocessor,hscript.Error.EUnknownVariable,hscript.Error.EInvalidIterator,hscript.Error.EInvalidOp,hscript.Error.EInvalidAccess,hscript.Error.ECustom];
hscript.Error.__empty_constructs__ = [hscript.Error.EUnterminatedString,hscript.Error.EUnterminatedComment];
hscript.ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__:true,__constructs__:null
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DPackage",$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DImport",$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DClass",$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_._hx_name="DTypedef",$_.__params__ = ["c"],$_)
};
hscript.ModuleDecl.__constructs__ = [hscript.ModuleDecl.DPackage,hscript.ModuleDecl.DImport,hscript.ModuleDecl.DClass,hscript.ModuleDecl.DTypedef];
hscript.ModuleDecl.__empty_constructs__ = [];
hscript.FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__:true,__constructs__:null
	,APublic: {_hx_name:"APublic",_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_name:"APrivate",_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_name:"AInline",_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_name:"AOverride",_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_name:"AStatic",_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_name:"AMacro",_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript.FieldAccess.__constructs__ = [hscript.FieldAccess.APublic,hscript.FieldAccess.APrivate,hscript.FieldAccess.AInline,hscript.FieldAccess.AOverride,hscript.FieldAccess.AStatic,hscript.FieldAccess.AMacro];
hscript.FieldAccess.__empty_constructs__ = [hscript.FieldAccess.APublic,hscript.FieldAccess.APrivate,hscript.FieldAccess.AInline,hscript.FieldAccess.AOverride,hscript.FieldAccess.AStatic,hscript.FieldAccess.AMacro];
hscript.FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__:true,__constructs__:null
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KFunction",$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_._hx_name="KVar",$_.__params__ = ["v"],$_)
};
hscript.FieldKind.__constructs__ = [hscript.FieldKind.KFunction,hscript.FieldKind.KVar];
hscript.FieldKind.__empty_constructs__ = [];
hscript._Interp = {};
hscript._Interp.Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__:true,__constructs__:null
	,SBreak: {_hx_name:"SBreak",_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_name:"SContinue",_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_name:"SReturn",_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript._Interp.Stop.__constructs__ = [hscript._Interp.Stop.SBreak,hscript._Interp.Stop.SContinue,hscript._Interp.Stop.SReturn];
hscript._Interp.Stop.__empty_constructs__ = [hscript._Interp.Stop.SBreak,hscript._Interp.Stop.SContinue,hscript._Interp.Stop.SReturn];
hscript.Interp = class hscript_Interp {
	constructor() {
		this.locals = new haxe.ds.StringMap();
		this.declared = [];
		this.resetVariables();
		this.initOps();
	}
	resetVariables() {
		this.variables = new haxe.ds.StringMap();
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		let _gthis = this;
		let this1 = this.variables;
		let value = Reflect.makeVarArgs(function(el) {
			let inf = _gthis.posInfos();
			let v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe.Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	posInfos() {
		return { fileName : "hscript", lineNumber : 0};
	}
	initOps() {
		let me = this;
		this.binops = new haxe.ds.StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.binops.h["is"] = function(e1,e2) {
			return js.Boot.__instanceof(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	setVar(name,v) {
		this.variables.h[name] = v;
		return v;
	}
	assign(e1,e2) {
		let v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			let id = e1.v;
			let l = this.locals.h[id];
			if(l == null) {
				this.setVar(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			let e = e1.e;
			let f = e1.f;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			let e3 = e1.e;
			let index = e1.index;
			let arr = this.expr(e3);
			let index1 = this.expr(index);
			if(js.Boot.__implements(arr,haxe.IMap)) {
				(js.Boot.__cast(arr , haxe.IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			let e4 = hscript.Error.EInvalidOp("=");
			throw haxe.Exception.thrown(e4);
		}
		return v;
	}
	assignOp(op,fop) {
		let me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	evalAssignOp(op,fop,e1,e2) {
		let v;
		switch(e1._hx_index) {
		case 1:
			let id = e1.v;
			let l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.setVar(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			let e = e1.e;
			let f = e1.f;
			let obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			let e3 = e1.e;
			let index = e1.index;
			let arr = this.expr(e3);
			let index1 = this.expr(index);
			if(js.Boot.__implements(arr,haxe.IMap)) {
				v = fop((js.Boot.__cast(arr , haxe.IMap)).get(index1),this.expr(e2));
				(js.Boot.__cast(arr , haxe.IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			let e4 = hscript.Error.EInvalidOp(op);
			throw haxe.Exception.thrown(e4);
		}
		return v;
	}
	increment(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			let id = e.v;
			let l = this.locals.h[id];
			let v = l == null ? this.resolve(id) : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.setVar(id,v);
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.setVar(id,v + delta);
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			let e1 = e.e;
			let f = e.f;
			let obj = this.expr(e1);
			let v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else {
				this.set(obj,f,v1 + delta);
			}
			return v1;
		case 16:
			let e2 = e.e;
			let index = e.index;
			let arr = this.expr(e2);
			let index1 = this.expr(index);
			if(js.Boot.__implements(arr,haxe.IMap)) {
				let v = (js.Boot.__cast(arr , haxe.IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js.Boot.__cast(arr , haxe.IMap)).set(index1,v);
				} else {
					(js.Boot.__cast(arr , haxe.IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				let v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			let e3 = hscript.Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe.Exception.thrown(e3);
		}
	}
	execute(expr) {
		this.depth = 0;
		this.locals = new haxe.ds.StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	exprReturn(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
				let e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe.Exception.thrown("Invalid break");
				case 1:
					throw haxe.Exception.thrown("Invalid continue");
				case 2:
					let v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	duplicate(h) {
		let h2 = new haxe.ds.StringMap();
		let h1 = h.h;
		let k_h = h1;
		let k_keys = Object.keys(h1);
		let k_length = k_keys.length;
		let k_current = 0;
		while(k_current < k_length) {
			let k = k_keys[k_current++];
			h2.h[k] = h.h[k];
		}
		return h2;
	}
	restore(old) {
		while(this.declared.length > old) {
			let d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	error(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe.Exception.thrown(e);
		} else {
			throw haxe.Exception.thrown(e);
		}
	}
	rethrow(e) {
		throw haxe.Exception.thrown(e);
	}
	resolve(id) {
		let v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			let e = hscript.Error.EUnknownVariable(id);
			throw haxe.Exception.thrown(e);
		}
		return v;
	}
	expr(e) {
		let _gthis = this;
		switch(e._hx_index) {
		case 0:
			let c = e.c;
			switch(c._hx_index) {
			case 0:
				let v = c.v;
				return v;
			case 1:
				let f = c.f;
				return f;
			case 2:
				let s = c.s;
				return s;
			}
			break;
		case 1:
			let id = e.v;
			let l = this.locals.h[id];
			if(l != null) {
				return l.r;
			}
			return this.resolve(id);
		case 2:
			let _g = e.t;
			let n = e.n;
			let e1 = e.e;
			this.declared.push({ n : n, old : this.locals.h[n]});
			let this1 = this.locals;
			let value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			let e2 = e.e;
			return this.expr(e2);
		case 4:
			let exprs = e.e;
			let old = this.declared.length;
			let v1 = null;
			let _g1 = 0;
			while(_g1 < exprs.length) {
				let e = exprs[_g1];
				++_g1;
				v1 = this.expr(e);
			}
			this.restore(old);
			return v1;
		case 5:
			let e3 = e.e;
			let f1 = e.f;
			return this.get(this.expr(e3),f1);
		case 6:
			let op = e.op;
			let e11 = e.e1;
			let e21 = e.e2;
			let fop = this.binops.h[op];
			if(fop == null) {
				let e = hscript.Error.EInvalidOp(op);
				throw haxe.Exception.thrown(e);
			}
			return fop(e11,e21);
		case 7:
			let op1 = e.op;
			let prefix = e.prefix;
			let e4 = e.e;
			switch(op1) {
			case "!":
				return this.expr(e4) != true;
			case "++":
				return this.increment(e4,prefix,1);
			case "-":
				return -this.expr(e4);
			case "--":
				return this.increment(e4,prefix,-1);
			case "~":
				return ~this.expr(e4);
			default:
				let e5 = hscript.Error.EInvalidOp(op1);
				throw haxe.Exception.thrown(e5);
			}
			break;
		case 8:
			let e6 = e.e;
			let params = e.params;
			let args = [];
			let _g2 = 0;
			while(_g2 < params.length) {
				let p = params[_g2];
				++_g2;
				args.push(this.expr(p));
			}
			if(e6._hx_index == 5) {
				let e = e6.e;
				let f = e6.f;
				let obj = this.expr(e);
				if(obj == null) {
					let e = hscript.Error.EInvalidAccess(f);
					throw haxe.Exception.thrown(e);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			let econd = e.cond;
			let e12 = e.e1;
			let e22 = e.e2;
			if(this.expr(econd) == true) {
				return this.expr(e12);
			} else if(e22 == null) {
				return null;
			} else {
				return this.expr(e22);
			}
			break;
		case 10:
			let econd1 = e.cond;
			let e7 = e.e;
			this.whileLoop(econd1,e7);
			return null;
		case 11:
			let v2 = e.v;
			let it = e.it;
			let e8 = e.e;
			this.forLoop(v2,it,e8);
			return null;
		case 12:
			throw haxe.Exception.thrown(hscript._Interp.Stop.SBreak);
		case 13:
			throw haxe.Exception.thrown(hscript._Interp.Stop.SContinue);
		case 14:
			let _g3 = e.ret;
			let params1 = e.args;
			let fexpr = e.e;
			let name = e.name;
			let capturedLocals = this.duplicate(this.locals);
			let me = this;
			let hasOpt = false;
			let minParams = 0;
			let _g4 = 0;
			while(_g4 < params1.length) {
				let p = params1[_g4];
				++_g4;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			let f2 = function(args) {
				if((args == null ? 0 : args.length) != params1.length) {
					if(args.length < minParams) {
						let str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						let e = hscript.Error.ECustom(str);
						throw haxe.Exception.thrown(e);
					}
					let args2 = [];
					let extraParams = args.length - minParams;
					let pos = 0;
					let _g = 0;
					while(_g < params1.length) {
						let p = params1[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				let old = me.locals;
				let depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				let _g = 0;
				let _g1 = params1.length;
				while(_g < _g1) {
					let i = _g++;
					me.locals.h[params1[i].name] = { r : args[i]};
				}
				let r = null;
				let oldDecl = _gthis.declared.length;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						let e = haxe.Exception.caught(_g).unwrap();
						_gthis.restore(oldDecl);
						me.locals = old;
						me.depth = depth;
						throw haxe.Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				_gthis.restore(oldDecl);
				me.locals = old;
				me.depth = depth;
				return r;
			};
			let f3 = Reflect.makeVarArgs(f2);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f3;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					let ref = { r : f3};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f3;
		case 15:
			let e9 = e.e;
			this.returnValue = e9 == null ? null : this.expr(e9);
			throw haxe.Exception.thrown(hscript._Interp.Stop.SReturn);
		case 16:
			let e10 = e.e;
			let index = e.index;
			let arr = this.expr(e10);
			let index1 = this.expr(index);
			if(js.Boot.__implements(arr,haxe.IMap)) {
				return (js.Boot.__cast(arr , haxe.IMap)).get(index1);
			}
			return arr[index1];
		case 17:
			let arr1 = e.e;
			let tmp;
			if(arr1.length > 0) {
				let _g = arr1[0];
				if(_g._hx_index == 6) {
					let _g1 = _g.e1;
					let _g2 = _g.e2;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				let keys = [];
				let values = [];
				let _g = 0;
				while(_g < arr1.length) {
					let e = arr1[_g];
					++_g;
					if(e._hx_index == 6) {
						if(e.op == "=>") {
							let eKey = e.e1;
							let eValue = e.e2;
							keys.push(this.expr(eKey));
							values.push(this.expr(eValue));
						} else {
							let e = hscript.Error.ECustom("Invalid map key=>value expression");
							throw haxe.Exception.thrown(e);
						}
					} else {
						let e = hscript.Error.ECustom("Invalid map key=>value expression");
						throw haxe.Exception.thrown(e);
					}
				}
				return this.makeMap(keys,values);
			} else {
				let a = [];
				let _g = 0;
				while(_g < arr1.length) {
					let e = arr1[_g];
					++_g;
					a.push(this.expr(e));
				}
				return a;
			}
			break;
		case 18:
			let cl = e.cl;
			let params2 = e.params;
			let a = [];
			let _g5 = 0;
			while(_g5 < params2.length) {
				let e = params2[_g5];
				++_g5;
				a.push(this.expr(e));
			}
			return this.cnew(cl,a);
		case 19:
			let e13 = e.e;
			throw haxe.Exception.thrown(this.expr(e13));
		case 20:
			let _g6 = e.t;
			let e14 = e.e;
			let n1 = e.v;
			let ecatch = e.ecatch;
			let old1 = this.declared.length;
			let oldTry = this.inTry;
			try {
				this.inTry = true;
				let v = this.expr(e14);
				this.restore(old1);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				let _g1 = haxe.Exception.caught(_g).unwrap();
				if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
					let err = _g1;
					this.inTry = oldTry;
					throw haxe.Exception.thrown(err);
				} else {
					let err = _g1;
					this.restore(old1);
					this.inTry = oldTry;
					this.declared.push({ n : n1, old : this.locals.h[n1]});
					this.locals.h[n1] = { r : err};
					let v = this.expr(ecatch);
					this.restore(old1);
					return v;
				}
			}
			break;
		case 21:
			let fl = e.fl;
			let o = { };
			let _g7 = 0;
			while(_g7 < fl.length) {
				let f = fl[_g7];
				++_g7;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			let econd2 = e.cond;
			let e15 = e.e1;
			let e23 = e.e2;
			if(this.expr(econd2) == true) {
				return this.expr(e15);
			} else {
				return this.expr(e23);
			}
			break;
		case 23:
			let e16 = e.e;
			let cases = e.cases;
			let def = e.defaultExpr;
			let val = this.expr(e16);
			let match = false;
			let _g8 = 0;
			while(_g8 < cases.length) {
				let c = cases[_g8];
				++_g8;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			let econd3 = e.cond;
			let e17 = e.e;
			this.doWhileLoop(econd3,e17);
			return null;
		case 25:
			let _g9 = e.name;
			let _g10 = e.args;
			let e18 = e.e;
			return this.expr(e18);
		case 26:
			let _g11 = e.t;
			let e19 = e.e;
			return this.expr(e19);
		}
	}
	doWhileLoop(econd,e) {
		let old = this.declared.length;
		let _gthis = this;
		do {
			let cont = true;
			try {
				_gthis.expr(e);
			} catch( _g ) {
				let _g1 = haxe.Exception.caught(_g).unwrap();
				if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
					let err = _g1;
					switch(err._hx_index) {
					case 0:
						cont = false;
						break;
					case 1:
						break;
					case 2:
						throw haxe.Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!cont) {
				break;
			}
		} while(this.expr(econd) == true);
		this.restore(old);
	}
	whileLoop(econd,e) {
		let old = this.declared.length;
		let _gthis = this;
		while(this.expr(econd) == true) {
			let cont = true;
			try {
				_gthis.expr(e);
			} catch( _g ) {
				let _g1 = haxe.Exception.caught(_g).unwrap();
				if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
					let err = _g1;
					switch(err._hx_index) {
					case 0:
						cont = false;
						break;
					case 1:
						break;
					case 2:
						throw haxe.Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!cont) {
				break;
			}
		}
		this.restore(old);
	}
	makeIterator(v) {
		if(((v) instanceof Array)) {
			return new haxe.iterators.ArrayIterator(v);
		}
		if(v.iterator != null) {
			v = $getIterator(v);
		}
		if(v.hasNext == null || v.next == null) {
			let e = hscript.Error.EInvalidIterator(v);
			throw haxe.Exception.thrown(e);
		}
		return v;
	}
	forLoop(n,it,e) {
		let old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		let it1 = this.makeIterator(this.expr(it));
		let _gthis = this;
		while(it1.hasNext()) {
			let this1 = this.locals;
			let value = { r : it1.next()};
			this1.h[n] = value;
			let cont = true;
			try {
				_gthis.expr(e);
			} catch( _g ) {
				let _g1 = haxe.Exception.caught(_g).unwrap();
				if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
					let err = _g1;
					switch(err._hx_index) {
					case 0:
						cont = false;
						break;
					case 1:
						break;
					case 2:
						throw haxe.Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!cont) {
				break;
			}
		}
		this.restore(old);
	}
	loopRun(f) {
		let cont = true;
		try {
			f();
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(js.Boot.__instanceof(_g1,hscript._Interp.Stop)) {
				let err = _g1;
				switch(err._hx_index) {
				case 0:
					cont = false;
					break;
				case 1:
					break;
				case 2:
					throw haxe.Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		return cont;
	}
	isMap(o) {
		return js.Boot.__implements(o,haxe.IMap);
	}
	getMapValue(map,key) {
		return (js.Boot.__cast(map , haxe.IMap)).get(key);
	}
	setMapValue(map,key,value) {
		(js.Boot.__cast(map , haxe.IMap)).set(key,value);
	}
	makeMap(keys,values) {
		let isAllString = true;
		let isAllInt = true;
		let isAllObject = true;
		let isAllEnum = true;
		let _g = 0;
		while(_g < keys.length) {
			let key = keys[_g];
			++_g;
			isAllString = isAllString && typeof(key) == "string";
			isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
			isAllObject = isAllObject && Reflect.isObject(key);
			isAllEnum = isAllEnum && Reflect.isEnumValue(key);
		}
		if(isAllInt) {
			let m = new haxe.ds.IntMap();
			let _g_current = 0;
			let _g_array = keys;
			while(_g_current < _g_array.length) {
				let _g_value = _g_array[_g_current];
				let _g_key = _g_current++;
				let i = _g_key;
				let key = _g_value;
				m.h[key] = values[i];
			}
			return m;
		}
		if(isAllString) {
			let m = new haxe.ds.StringMap();
			let _g_current = 0;
			let _g_array = keys;
			while(_g_current < _g_array.length) {
				let _g_value = _g_array[_g_current];
				let _g_key = _g_current++;
				let i = _g_key;
				let key = _g_value;
				m.h[key] = values[i];
			}
			return m;
		}
		if(isAllEnum) {
			let m = new haxe.ds.EnumValueMap();
			let _g_current = 0;
			let _g_array = keys;
			while(_g_current < _g_array.length) {
				let _g_value = _g_array[_g_current];
				let _g_key = _g_current++;
				let i = _g_key;
				let key = _g_value;
				m.set(key,values[i]);
			}
			return m;
		}
		if(isAllObject) {
			let m = new haxe.ds.ObjectMap();
			let _g_current = 0;
			let _g_array = keys;
			while(_g_current < _g_array.length) {
				let _g_value = _g_array[_g_current];
				let _g_key = _g_current++;
				let i = _g_key;
				let key = _g_value;
				m.set(key,values[i]);
			}
			return m;
		}
		let e = hscript.Error.ECustom("Invalid map keys " + Std.string(keys));
		throw haxe.Exception.thrown(e);
	}
	get(o,f) {
		if(o == null) {
			let e = hscript.Error.EInvalidAccess(f);
			throw haxe.Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	set(o,f,v) {
		if(o == null) {
			let e = hscript.Error.EInvalidAccess(f);
			throw haxe.Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	fcall(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	call(o,f,args) {
		return f.apply(o,args);
	}
	cnew(cl,args) {
		let c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
}
$hxClasses["hscript.Interp"] = hscript.Interp;
hscript.Interp.__name__ = "hscript.Interp";
Object.assign(hscript.Interp.prototype, {
	__class__: hscript.Interp
});
hscript.Token = $hxEnums["hscript.Token"] = { __ename__:true,__constructs__:null
	,TEof: {_hx_name:"TEof",_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TId",$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TOp",$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_name:"TPOpen",_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_name:"TPClose",_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_name:"TBrOpen",_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_name:"TBrClose",_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_name:"TDot",_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TQuestionDot: {_hx_name:"TQuestionDot",_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_name:"TComma",_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_name:"TSemicolon",_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_name:"TBkOpen",_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_name:"TBkClose",_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_name:"TQuestion",_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_name:"TDoubleDot",_hx_index:15,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:17,s:s,__enum__:"hscript.Token",toString:$estr}; },$_._hx_name="TPrepro",$_.__params__ = ["s"],$_)
};
hscript.Token.__constructs__ = [hscript.Token.TEof,hscript.Token.TConst,hscript.Token.TId,hscript.Token.TOp,hscript.Token.TPOpen,hscript.Token.TPClose,hscript.Token.TBrOpen,hscript.Token.TBrClose,hscript.Token.TDot,hscript.Token.TQuestionDot,hscript.Token.TComma,hscript.Token.TSemicolon,hscript.Token.TBkOpen,hscript.Token.TBkClose,hscript.Token.TQuestion,hscript.Token.TDoubleDot,hscript.Token.TMeta,hscript.Token.TPrepro];
hscript.Token.__empty_constructs__ = [hscript.Token.TEof,hscript.Token.TPOpen,hscript.Token.TPClose,hscript.Token.TBrOpen,hscript.Token.TBrClose,hscript.Token.TDot,hscript.Token.TQuestionDot,hscript.Token.TComma,hscript.Token.TSemicolon,hscript.Token.TBkOpen,hscript.Token.TBkClose,hscript.Token.TQuestion,hscript.Token.TDoubleDot];
hscript.Parser = class hscript_Parser {
	constructor() {
		this.uid = 0;
		this.preprocesorValues = new haxe.ds.StringMap();
		this.line = 1;
		this.opChars = "+*/-=!><&|^%~";
		this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
		let priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"],["->"]];
		this.opPriority = new haxe.ds.StringMap();
		this.opRightAssoc = new haxe.ds.StringMap();
		let _g = 0;
		let _g1 = priorities.length;
		while(_g < _g1) {
			let i = _g++;
			let _g1 = 0;
			let _g2 = priorities[i];
			while(_g1 < _g2.length) {
				let x = _g2[_g1];
				++_g1;
				this.opPriority.h[x] = i;
				if(i == 9) {
					this.opRightAssoc.h[x] = true;
				}
			}
		}
		let x = "!";
		this.opPriority.h[x] = x == "++" || x == "--" ? -1 : -2;
		let x1 = "++";
		this.opPriority.h[x1] = x1 == "++" || x1 == "--" ? -1 : -2;
		let x2 = "--";
		this.opPriority.h[x2] = x2 == "++" || x2 == "--" ? -1 : -2;
		let x3 = "~";
		this.opPriority.h[x3] = x3 == "++" || x3 == "--" ? -1 : -2;
	}
	get_currentPos() {
		return this.readPos + this.offset;
	}
	error(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe.Exception.thrown(err);
		}
	}
	invalidChar(c) {
		if(!this.resumeErrors) {
			throw haxe.Exception.thrown(hscript.Error.EInvalidChar(c));
		}
	}
	initParser(origin,pos) {
		this.preprocStack = [];
		this.tokens = new haxe.ds.GenericStack();
		this.offset = pos;
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		let _g = 0;
		let _g1 = this.opChars.length;
		while(_g < _g1) {
			let i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		let _g2 = 0;
		let _g3 = this.identChars.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	parseString(s,origin,position) {
		if(position == null) {
			position = 0;
		}
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin,position);
		this.input = s;
		this.readPos = 0;
		let a = [];
		while(true) {
			let tk = this.token();
			if(tk == hscript.Token.TEof) {
				break;
			}
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript.Expr.EBlock(a);
		}
	}
	unexpected(tk) {
		let err = hscript.Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe.Exception.thrown(err);
		}
		return null;
	}
	push(tk) {
		let _this = this.tokens;
		_this.head = new haxe.ds.GenericCell(tk,_this.head);
	}
	ensure(tk) {
		let t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	ensureToken(tk) {
		let t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	maybe(tk) {
		let t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		let _this = this.tokens;
		_this.head = new haxe.ds.GenericCell(t,_this.head);
		return false;
	}
	getIdent() {
		let tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			let id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	expr(e) {
		return e;
	}
	pmin(e) {
		return 0;
	}
	pmax(e) {
		return 0;
	}
	mk(e,pmin,pmax) {
		return e;
	}
	isBlock(e) {
		if(e == null) {
			return false;
		}
		if(e == null) {
			return false;
		} else {
			switch(e._hx_index) {
			case 2:
				let _g = e.n;
				let t = e.t;
				let e1 = e.e;
				if(e1 != null) {
					return this.isBlock(e1);
				} else if(t != null) {
					if(t == null) {
						return false;
					} else if(t._hx_index == 2) {
						let _g = t.fields;
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				let _g1 = e.e;
				return true;
			case 6:
				let _g2 = e.op;
				let _g3 = e.e1;
				let e2 = e.e2;
				return this.isBlock(e2);
			case 7:
				let _g4 = e.op;
				let prefix = e.prefix;
				let e3 = e.e;
				if(!prefix) {
					return this.isBlock(e3);
				} else {
					return false;
				}
				break;
			case 9:
				let _g5 = e.cond;
				let e11 = e.e1;
				let e21 = e.e2;
				if(e21 != null) {
					return this.isBlock(e21);
				} else {
					return this.isBlock(e11);
				}
				break;
			case 10:
				let _g6 = e.cond;
				let e4 = e.e;
				return this.isBlock(e4);
			case 11:
				let _g7 = e.v;
				let _g8 = e.it;
				let e5 = e.e;
				return this.isBlock(e5);
			case 14:
				let _g9 = e.args;
				let _g10 = e.name;
				let _g11 = e.ret;
				let e6 = e.e;
				return this.isBlock(e6);
			case 15:
				let e7 = e.e;
				if(e7 != null) {
					return this.isBlock(e7);
				} else {
					return false;
				}
				break;
			case 20:
				let _g12 = e.e;
				let _g13 = e.v;
				let _g14 = e.t;
				let e8 = e.ecatch;
				return this.isBlock(e8);
			case 21:
				let _g15 = e.fl;
				return true;
			case 23:
				let _g16 = e.e;
				let _g17 = e.cases;
				let _g18 = e.defaultExpr;
				return true;
			case 24:
				let _g19 = e.cond;
				let e9 = e.e;
				return this.isBlock(e9);
			case 25:
				let _g20 = e.name;
				let _g21 = e.args;
				let e10 = e.e;
				return this.isBlock(e10);
			default:
				return false;
			}
		}
	}
	parseFullExpr(exprs) {
		let e = this.parseExpr();
		exprs.push(e);
		let tk = this.token();
		while(true) {
			let tmp;
			if(tk == hscript.Token.TComma && e != null) {
				if(e == null) {
					tmp = false;
				} else if(e._hx_index == 2) {
					let _g = e.n;
					let _g1 = e.t;
					let _g2 = e.e;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript.Token.TSemicolon && tk != hscript.Token.TEof) {
			if(this.isBlock(e)) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	parseObject(p1) {
		let fl = [];
		_hx_loop1: while(true) {
			let tk = this.token();
			let id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					let c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						let s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					let i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			let t = this.token();
			if(t != hscript.Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 10:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript.Expr.EObject(fl));
	}
	parseExpr() {
		let tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				let c = tk.c;
				return this.parseExprNext(hscript.Expr.EConst(c));
			case 2:
				let id = tk.s;
				let e = this.parseStructure(id);
				if(e == null) {
					e = hscript.Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				let op = tk.s;
				if(op == "-") {
					let start = 0;
					let e = this.parseExpr();
					if(e == null) {
						return this.makeUnop(op,e);
					}
					if(e == null) {
						return this.makeUnop(op,e);
					} else if(e._hx_index == 0) {
						let _g = e.c;
						switch(_g._hx_index) {
						case 0:
							let i = _g.v;
							return hscript.Expr.EConst(hscript.Const.CInt(-i));
						case 1:
							let f = _g.f;
							return hscript.Expr.EConst(hscript.Const.CFloat(-f));
						default:
							return this.makeUnop(op,e);
						}
					} else {
						return this.makeUnop(op,e);
					}
				}
				if(this.opPriority.h[op] < 0) {
					return this.makeUnop(op,this.parseExpr());
				}
				return this.unexpected(tk);
			case 4:
				tk = this.token();
				if(tk == hscript.Token.TPClose) {
					let t = this.token();
					if(!Type.enumEq(t,hscript.Token.TOp("->"))) {
						this.unexpected(t);
					}
					let eret = this.parseExpr();
					return hscript.Expr.EFunction([],hscript.Expr.EReturn(eret));
				}
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				let e1 = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript.Expr.EParent(e1));
					case 10:
						if(e1 != null) {
							if(e1._hx_index == 1) {
								let v = e1.v;
								return this.parseLambda([{ name : v}],0);
							}
						}
						break;
					case 15:
						let t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript.Expr.ECheckType(e1,t));
							case 10:
								if(e1 != null) {
									if(e1._hx_index == 1) {
										let v = e1.v;
										return this.parseLambda([{ name : v, t : t}],0);
									}
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						let c1 = tk.c;
						if(this.allowJSON) {
							if(c1._hx_index == 2) {
								let _g = c1.s;
								let tk2 = this.token();
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(tk2,_this.head);
								let _this1 = this.tokens;
								_this1.head = new haxe.ds.GenericCell(tk,_this1.head);
								if(tk2 != null) {
									if(tk2._hx_index == 15) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(tk,_this.head);
							}
						} else {
							let _this = this.tokens;
							_this.head = new haxe.ds.GenericCell(tk,_this.head);
						}
						break;
					case 2:
						let _g = tk.s;
						let tk2 = this.token();
						let _this1 = this.tokens;
						_this1.head = new haxe.ds.GenericCell(tk2,_this1.head);
						let _this2 = this.tokens;
						_this2.head = new haxe.ds.GenericCell(tk,_this2.head);
						if(tk2 != null) {
							if(tk2._hx_index == 15) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript.Expr.EObject([]));
					default:
						let _this3 = this.tokens;
						_this3.head = new haxe.ds.GenericCell(tk,_this3.head);
					}
				}
				let a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript.Token.TBrClose || this.resumeErrors && tk == hscript.Token.TEof) {
						break;
					}
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(tk,_this.head);
				}
				return hscript.Expr.EBlock(a);
			case 12:
				let a1 = [];
				tk = this.token();
				while(tk != hscript.Token.TBkClose && (!this.resumeErrors || tk != hscript.Token.TEof)) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(tk,_this.head);
					a1.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript.Token.TComma) {
						tk = this.token();
					}
				}
				if(a1.length == 1 && a1[0] != null) {
					let _g = a1[0];
					if(_g != null) {
						switch(_g._hx_index) {
						case 10:
							let _g1 = _g.cond;
							let _g2 = _g.e;
							let tmp = "__a_" + this.uid++;
							let e = hscript.Expr.EBlock([hscript.Expr.EVar(tmp,null,hscript.Expr.EArrayDecl([])),this.mapCompr(tmp,a1[0]),hscript.Expr.EIdent(tmp)]);
							return this.parseExprNext(e);
						case 11:
							let _g3 = _g.v;
							let _g4 = _g.it;
							let _g5 = _g.e;
							let tmp1 = "__a_" + this.uid++;
							let e1 = hscript.Expr.EBlock([hscript.Expr.EVar(tmp1,null,hscript.Expr.EArrayDecl([])),this.mapCompr(tmp1,a1[0]),hscript.Expr.EIdent(tmp1)]);
							return this.parseExprNext(e1);
						case 24:
							let _g6 = _g.cond;
							let _g7 = _g.e;
							let tmp2 = "__a_" + this.uid++;
							let e2 = hscript.Expr.EBlock([hscript.Expr.EVar(tmp2,null,hscript.Expr.EArrayDecl([])),this.mapCompr(tmp2,a1[0]),hscript.Expr.EIdent(tmp2)]);
							return this.parseExprNext(e2);
						default:
						}
					}
				}
				return this.parseExprNext(hscript.Expr.EArrayDecl(a1));
			case 16:
				let id1 = tk.s;
				if(this.allowMetadata) {
					let args = this.parseMetaArgs();
					return hscript.Expr.EMeta(id1,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	parseLambda(args,pmin) {
		_hx_loop1: while(true) {
			let id = this.getIdent();
			let t = this.maybe(hscript.Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			let tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 10:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		let t = this.token();
		if(!Type.enumEq(t,hscript.Token.TOp("->"))) {
			this.unexpected(t);
		}
		let eret = this.parseExpr();
		return hscript.Expr.EFunction(args,hscript.Expr.EReturn(eret));
	}
	parseMetaArgs() {
		let tk = this.token();
		if(tk != hscript.Token.TPOpen) {
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			return null;
		}
		let args = [];
		tk = this.token();
		if(tk != hscript.Token.TPClose) {
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				let _g = this.token();
				if(_g == null) {
					let tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 10:
						break;
					default:
						let tk = _g;
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	mapCompr(tmp,e) {
		if(e == null) {
			return null;
		}
		let edef;
		switch(e._hx_index) {
		case 3:
			let e2 = e.e;
			edef = hscript.Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			let _g = e.e;
			if(_g.length == 1) {
				let e = _g[0];
				edef = hscript.Expr.EBlock([this.mapCompr(tmp,e)]);
			} else {
				edef = hscript.Expr.ECall(hscript.Expr.EField(hscript.Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			let cond = e.cond;
			let e1 = e.e1;
			let e21 = e.e2;
			edef = e21 == null ? hscript.Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript.Expr.ECall(hscript.Expr.EField(hscript.Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			let cond1 = e.cond;
			let e22 = e.e;
			edef = hscript.Expr.EWhile(cond1,this.mapCompr(tmp,e22));
			break;
		case 11:
			let v = e.v;
			let it = e.it;
			let e23 = e.e;
			edef = hscript.Expr.EFor(v,it,this.mapCompr(tmp,e23));
			break;
		case 24:
			let cond2 = e.cond;
			let e24 = e.e;
			edef = hscript.Expr.EDoWhile(cond2,this.mapCompr(tmp,e24));
			break;
		default:
			edef = hscript.Expr.ECall(hscript.Expr.EField(hscript.Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	makeUnop(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		if(e == null) {
			return hscript.Expr.EUnop(op,true,e);
		} else {
			switch(e._hx_index) {
			case 6:
				let bop = e.op;
				let e1 = e.e1;
				let e2 = e.e2;
				return hscript.Expr.EBinop(bop,this.makeUnop(op,e1),e2);
			case 22:
				let e11 = e.cond;
				let e21 = e.e1;
				let e3 = e.e2;
				return hscript.Expr.ETernary(this.makeUnop(op,e11),e21,e3);
			default:
				return hscript.Expr.EUnop(op,true,e);
			}
		}
	}
	makeBinop(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript.Expr.EBinop(op,e1,e);
		}
		if(e == null) {
			return hscript.Expr.EBinop(op,e1,e);
		} else {
			switch(e._hx_index) {
			case 6:
				let op2 = e.op;
				let e2 = e.e1;
				let e3 = e.e2;
				if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
					return hscript.Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
				} else {
					return hscript.Expr.EBinop(op,e1,e);
				}
				break;
			case 22:
				let e21 = e.cond;
				let e31 = e.e1;
				let e4 = e.e2;
				if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
					return hscript.Expr.EBinop(op,e1,e);
				} else {
					return hscript.Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4);
				}
				break;
			default:
				return hscript.Expr.EBinop(op,e1,e);
			}
		}
	}
	parseStructure(id) {
		switch(id) {
		case "break":
			return hscript.Expr.EBreak;
		case "continue":
			return hscript.Expr.EContinue;
		case "do":
			let e = this.parseExpr();
			let tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			let econd = this.parseExpr();
			return hscript.Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript.Token.TId(id));
		case "for":
			let t = this.token();
			if(t != hscript.Token.TPOpen) {
				this.unexpected(t);
			}
			let vname = this.getIdent();
			let t1 = this.token();
			if(!Type.enumEq(t1,hscript.Token.TId("in"))) {
				this.unexpected(t1);
			}
			let eiter = this.parseExpr();
			let t2 = this.token();
			if(t2 != hscript.Token.TPClose) {
				this.unexpected(t2);
			}
			let e1 = this.parseExpr();
			return hscript.Expr.EFor(vname,eiter,e1);
		case "function":
			let tk1 = this.token();
			let name = null;
			if(tk1 == null) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk1,_this.head);
			} else if(tk1._hx_index == 2) {
				let id = tk1.s;
				name = id;
			} else {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk1,_this.head);
			}
			let inf = this.parseFunctionDecl();
			return hscript.Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			let t3 = this.token();
			if(t3 != hscript.Token.TPOpen) {
				this.unexpected(t3);
			}
			let cond = this.parseExpr();
			let t4 = this.token();
			if(t4 != hscript.Token.TPClose) {
				this.unexpected(t4);
			}
			let e11 = this.parseExpr();
			let e2 = null;
			let semic = false;
			let tk2 = this.token();
			if(tk2 == hscript.Token.TSemicolon) {
				semic = true;
				tk2 = this.token();
			}
			if(Type.enumEq(tk2,hscript.Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk2,_this.head);
				if(semic) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(hscript.Token.TSemicolon,_this.head);
				}
			}
			return hscript.Expr.EIf(cond,e11,e2);
		case "inline":
			if(!this.maybe(hscript.Token.TId("function"))) {
				this.unexpected(hscript.Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			let a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				let tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			let args = this.parseExprList(hscript.Token.TPClose);
			return hscript.Expr.ENew(a.join("."),args);
		case "return":
			let tk3 = this.token();
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk3,_this.head);
			let e3 = tk3 == hscript.Token.TSemicolon ? null : this.parseExpr();
			return hscript.Expr.EReturn(e3);
		case "switch":
			let e4 = this.parseExpr();
			let def = null;
			let cases = [];
			let t5 = this.token();
			if(t5 != hscript.Token.TBrOpen) {
				this.unexpected(t5);
			}
			_hx_loop2: while(true) {
				let tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							let c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								let e = this.parseExpr();
								c.values.push(e);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 10:
										break;
									case 15:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							let exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript.Expr.EBlock([]) : hscript.Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							let t = this.token();
							if(t != hscript.Token.TDoubleDot) {
								this.unexpected(t);
							}
							let exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript.Expr.EBlock([]) : hscript.Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript.Expr.ESwitch(e4,cases,def);
		case "throw":
			let e5 = this.parseExpr();
			return hscript.Expr.EThrow(e5);
		case "try":
			let e6 = this.parseExpr();
			let t6 = this.token();
			if(!Type.enumEq(t6,hscript.Token.TId("catch"))) {
				this.unexpected(t6);
			}
			let t7 = this.token();
			if(t7 != hscript.Token.TPOpen) {
				this.unexpected(t7);
			}
			let vname1 = this.getIdent();
			let t8 = this.token();
			if(t8 != hscript.Token.TDoubleDot) {
				this.unexpected(t8);
			}
			let t9 = null;
			if(this.allowTypes) {
				t9 = this.parseType();
			} else {
				let t = this.token();
				if(!Type.enumEq(t,hscript.Token.TId("Dynamic"))) {
					this.unexpected(t);
				}
			}
			let t10 = this.token();
			if(t10 != hscript.Token.TPClose) {
				this.unexpected(t10);
			}
			let ec = this.parseExpr();
			return hscript.Expr.ETry(e6,vname1,t9,ec);
		case "var":
			let ident = this.getIdent();
			let tk4 = this.token();
			let t11 = null;
			if(tk4 == hscript.Token.TDoubleDot && this.allowTypes) {
				t11 = this.parseType();
				tk4 = this.token();
			}
			let e7 = null;
			if(Type.enumEq(tk4,hscript.Token.TOp("="))) {
				e7 = this.parseExpr();
			} else {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk4,_this.head);
			}
			return hscript.Expr.EVar(ident,t11,e7);
		case "while":
			let econd1 = this.parseExpr();
			let e8 = this.parseExpr();
			return hscript.Expr.EWhile(econd1,e8);
		default:
			return null;
		}
	}
	parseExprNext(e1) {
		let tk = this.token();
		if(tk == null) {
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 2:
				let op = tk.s;
				if(op == "is") {
					return this.makeBinop(op,e1,this.parseExpr());
				} else {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(tk,_this.head);
					return e1;
				}
				break;
			case 3:
				let op1 = tk.s;
				if(op1 == "->") {
					switch(e1._hx_index) {
					case 1:
						let i = e1.v;
						let eret = this.parseExpr();
						return hscript.Expr.EFunction([{ name : i}],hscript.Expr.EReturn(eret));
					case 3:
						let _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							let i = _hx_tmp.v;
							let eret = this.parseExpr();
							return hscript.Expr.EFunction([{ name : i}],hscript.Expr.EReturn(eret));
						}
						break;
					case 26:
						let _hx_tmp1 = e1.e;
						if(_hx_tmp1._hx_index == 1) {
							let i = _hx_tmp1.v;
							let t = e1.t;
							let eret = this.parseExpr();
							return hscript.Expr.EFunction([{ name : i, t : t}],hscript.Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.opPriority.h[op1] == -1) {
					let tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							let _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						let _this = this.tokens;
						_this.head = new haxe.ds.GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript.Expr.EUnop(op1,false,e1));
				}
				return this.makeBinop(op1,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript.Expr.ECall(e1,this.parseExprList(hscript.Token.TPClose)));
			case 8:
				let field = this.getIdent();
				return this.parseExprNext(hscript.Expr.EField(e1,field));
			case 9:
				let field1 = this.getIdent();
				let tmp = "__a_" + this.uid++;
				let e = hscript.Expr.EBlock([hscript.Expr.EVar(tmp,null,e1),hscript.Expr.ETernary(hscript.Expr.EBinop("==",hscript.Expr.EIdent(tmp),hscript.Expr.EIdent("null")),hscript.Expr.EIdent("null"),hscript.Expr.EField(hscript.Expr.EIdent(tmp),field1))]);
				return this.parseExprNext(e);
			case 12:
				let e2 = this.parseExpr();
				let t = this.token();
				if(t != hscript.Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript.Expr.EArray(e1,e2));
			case 14:
				let e21 = this.parseExpr();
				let t1 = this.token();
				if(t1 != hscript.Token.TDoubleDot) {
					this.unexpected(t1);
				}
				let e3 = this.parseExpr();
				return hscript.Expr.ETernary(e1,e21,e3);
			default:
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	parseFunctionArgs() {
		let args = [];
		let tk = this.token();
		if(tk != hscript.Token.TPClose) {
			let done = false;
			while(!done) {
				let name = null;
				let opt = false;
				if(tk != null) {
					if(tk._hx_index == 14) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					let id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				let arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript.Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript.Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 10:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	parseFunctionDecl() {
		let t = this.token();
		if(t != hscript.Token.TPOpen) {
			this.unexpected(t);
		}
		let args = this.parseFunctionArgs();
		let ret = null;
		if(this.allowTypes) {
			let tk = this.token();
			if(tk != hscript.Token.TDoubleDot) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	parsePath() {
		let path = [this.getIdent()];
		while(true) {
			let t = this.token();
			if(t != hscript.Token.TDot) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	parseType() {
		let t = this.token();
		let _gthis = this;
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				let v = t.s;
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(t,_this.head);
				let path = this.parsePath();
				let params = null;
				t = this.token();
				if(t == null) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					let op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									let op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										let _this = this.tokens;
										_this.head = new haxe.ds.GenericCell(hscript.Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 10:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						let _this = this.tokens;
						_this.head = new haxe.ds.GenericCell(t,_this.head);
					}
				} else {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript.CType.CTPath(path,params));
			case 4:
				let a = this.token();
				let b = this.token();
				let _this1 = this.tokens;
				_this1.head = new haxe.ds.GenericCell(b,_this1.head);
				let _this2 = this.tokens;
				_this2.head = new haxe.ds.GenericCell(a,_this2.head);
				let withReturn = function(args) {
					let _g = _gthis.token();
					if(_g == null) {
						let t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							let t = _g;
							_gthis.unexpected(t);
						}
					} else {
						let t = _g;
						_gthis.unexpected(t);
					}
					return hscript.CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					let t = this.parseType();
					let _g = this.token();
					if(_g == null) {
						let t = _g;
						return this.unexpected(t);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript.CType.CTParent(t));
						case 10:
							let args = [t];
							do args.push(this.parseType()); while(this.maybe(hscript.Token.TComma));
							let t1 = this.token();
							if(t1 != hscript.Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							let t2 = _g;
							return this.unexpected(t2);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						let _g = a.s;
						if(b == null) {
							let t = this.parseType();
							let _g = this.token();
							if(_g == null) {
								let t = _g;
								return this.unexpected(t);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript.CType.CTParent(t));
								case 10:
									let args = [t];
									do args.push(this.parseType()); while(this.maybe(hscript.Token.TComma));
									let t1 = this.token();
									if(t1 != hscript.Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									let t2 = _g;
									return this.unexpected(t2);
								}
							}
						} else if(b._hx_index == 15) {
							let _g = [];
							let _g1 = 0;
							let _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								let arg = _g2[_g1];
								++_g1;
								let _g3 = arg.value;
								if(_g3 != null) {
									let v = _g3;
									if(!this.resumeErrors) {
										throw haxe.Exception.thrown(hscript.Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript.CType.CTNamed(arg.name,arg.opt ? hscript.CType.CTOpt(arg.t) : arg.t));
							}
							let args = _g;
							return withReturn(args);
						} else {
							let t = this.parseType();
							let _g = this.token();
							if(_g == null) {
								let t = _g;
								return this.unexpected(t);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript.CType.CTParent(t));
								case 10:
									let args = [t];
									do args.push(this.parseType()); while(this.maybe(hscript.Token.TComma));
									let t1 = this.token();
									if(t1 != hscript.Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									let t2 = _g;
									return this.unexpected(t2);
								}
							}
						}
						break;
					case 5:
						let _g1 = [];
						let _g2 = 0;
						let _g3 = this.parseFunctionArgs();
						while(_g2 < _g3.length) {
							let arg = _g3[_g2];
							++_g2;
							let _g = arg.value;
							if(_g != null) {
								let v = _g;
								if(!this.resumeErrors) {
									throw haxe.Exception.thrown(hscript.Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g1.push(hscript.CType.CTNamed(arg.name,arg.opt ? hscript.CType.CTOpt(arg.t) : arg.t));
						}
						let args = _g1;
						return withReturn(args);
					default:
						let t1 = this.parseType();
						let _g4 = this.token();
						if(_g4 == null) {
							let t = _g4;
							return this.unexpected(t);
						} else {
							switch(_g4._hx_index) {
							case 5:
								return this.parseTypeNext(hscript.CType.CTParent(t1));
							case 10:
								let args1 = [t1];
								do args1.push(this.parseType()); while(this.maybe(hscript.Token.TComma));
								let t2 = this.token();
								if(t2 != hscript.Token.TPClose) {
									this.unexpected(t2);
								}
								return withReturn(args1);
							default:
								let t3 = _g4;
								return this.unexpected(t3);
							}
						}
					}
				}
				break;
			case 6:
				let fields = [];
				let meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							let _g = t.s;
							if(_g == "var") {
								let name = this.getIdent();
								let t = this.token();
								if(t != hscript.Token.TDoubleDot) {
									this.unexpected(t);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								let t1 = this.token();
								if(t1 != hscript.Token.TSemicolon) {
									this.unexpected(t1);
								}
							} else {
								let name = _g;
								let t1 = this.token();
								if(t1 != hscript.Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 10:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 16:
							let name = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript.CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	parseTypeNext(t) {
		let tk = this.token();
		if(tk == null) {
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			let op = tk.s;
			if(op != "->") {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				return t;
			}
		} else {
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			return t;
		}
		let t2 = this.parseType();
		if(t2._hx_index == 1) {
			let _g = t2.ret;
			let args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript.CType.CTFun([t],t2);
		}
	}
	parseExprList(etk) {
		let args = [];
		let tk = this.token();
		if(tk == etk) {
			return args;
		}
		let _this = this.tokens;
		_this.head = new haxe.ds.GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 10) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	parseModule(content,origin,position) {
		if(position == null) {
			position = 0;
		}
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin,position);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		let decls = [];
		while(true) {
			let tk = this.token();
			if(tk == hscript.Token.TEof) {
				break;
			}
			let _this = this.tokens;
			_this.head = new haxe.ds.GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	parseMetadata() {
		let meta = [];
		while(true) {
			let tk = this.token();
			if(tk == null) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 16) {
				let name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				break;
			}
		}
		return meta;
	}
	parseParams() {
		if(this.maybe(hscript.Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe.Exception.thrown(hscript.Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	parseModuleDecl() {
		let meta = this.parseMetadata();
		let ident = this.getIdent();
		let isPrivate = false;
		let isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			let name = this.getIdent();
			let params = this.parseParams();
			let extend = null;
			let implement = [];
			_hx_loop2: while(true) {
				let t = this.token();
				if(t == null) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						let _this = this.tokens;
						_this.head = new haxe.ds.GenericCell(t,_this.head);
						break _hx_loop2;
					}
				} else {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(t,_this.head);
					break;
				}
			}
			let fields = [];
			let t = this.token();
			if(t != hscript.Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript.Token.TBrClose)) fields.push(this.parseField());
			return hscript.ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			let path = [this.getIdent()];
			let star = false;
			while(true) {
				let t = this.token();
				if(t != hscript.Token.TDot) {
					let _this = this.tokens;
					_this.head = new haxe.ds.GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						let id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			let t1 = this.token();
			if(t1 != hscript.Token.TSemicolon) {
				this.unexpected(t1);
			}
			return hscript.ModuleDecl.DImport(path,star);
		case "package":
			let path1 = this.parsePath();
			let t2 = this.token();
			if(t2 != hscript.Token.TSemicolon) {
				this.unexpected(t2);
			}
			return hscript.ModuleDecl.DPackage(path1);
		case "typedef":
			let name1 = this.getIdent();
			let params1 = this.parseParams();
			let t3 = this.token();
			if(!Type.enumEq(t3,hscript.Token.TOp("="))) {
				this.unexpected(t3);
			}
			let t4 = this.parseType();
			return hscript.ModuleDecl.DTypedef({ name : name1, meta : meta, params : params1, isPrivate : isPrivate, t : t4});
		default:
			this.unexpected(hscript.Token.TId(ident));
		}
		return null;
	}
	parseField() {
		let meta = this.parseMetadata();
		let access = [];
		_hx_loop1: while(true) {
			let id = this.getIdent();
			switch(id) {
			case "function":
				let name = this.getIdent();
				let inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript.FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript.FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript.FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript.FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript.FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript.FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript.FieldAccess.AStatic);
				break;
			case "var":
				let name1 = this.getIdent();
				let get = null;
				let set = null;
				if(this.maybe(hscript.Token.TPOpen)) {
					get = this.getIdent();
					let t = this.token();
					if(t != hscript.Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					let t1 = this.token();
					if(t1 != hscript.Token.TPClose) {
						this.unexpected(t1);
					}
				}
				let type = this.maybe(hscript.Token.TDoubleDot) ? this.parseType() : null;
				let expr = this.maybe(hscript.Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript.Token.TSemicolon);
					} else {
						let t = this.token();
						if(t != hscript.Token.TSemicolon) {
							this.unexpected(t);
						}
					}
				} else {
					let tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							let _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript.Token.TSemicolon);
					} else {
						let t = this.token();
						if(t != hscript.Token.TSemicolon) {
							this.unexpected(t);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript.FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript.Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	readChar() {
		return this.input.charCodeAt(this.readPos++);
	}
	readString(until) {
		let c = 0;
		let b_b = "";
		let esc = false;
		let old = this.line;
		let s = this.input;
		while(true) {
			let c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe.Exception.thrown(hscript.Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					let k = 0;
					let _g = 0;
					while(_g < 4) {
						let i = _g++;
						k <<= 4;
						let char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe.Exception.thrown(hscript.Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	token() {
		if(this.tokens.head != null) {
			let _this = this.tokens;
			let k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		let char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript.Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript.Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 34:case 39:
				return hscript.Token.TConst(hscript.Const.CString(this.readString(char)));
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 40:
				return hscript.Token.TPOpen;
			case 41:
				return hscript.Token.TPClose;
			case 44:
				return hscript.Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript.Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					let n = char - 48;
					let exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript.Token.TConst(hscript.Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript.Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let n1 = (char - 48) * 1.0;
				let exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(hscript.Token.TOp("..."),_this.head);
								let i = n1 | 0;
								return hscript.Token.TConst(i == n1 ? hscript.Const.CInt(i) : hscript.Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						let tk = this.token();
						let pow = null;
						if(tk == null) {
							let _this = this.tokens;
							_this.head = new haxe.ds.GenericCell(tk,_this.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								let _g = tk.c;
								if(_g._hx_index == 0) {
									let e = _g.v;
									pow = e;
								} else {
									let _this = this.tokens;
									_this.head = new haxe.ds.GenericCell(tk,_this.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										let _this = this.tokens;
										_this.head = new haxe.ds.GenericCell(tk,_this.head);
									} else if(tk._hx_index == 1) {
										let _g = tk.c;
										if(_g._hx_index == 0) {
											let e = _g.v;
											pow = -e;
										} else {
											let _this = this.tokens;
											_this.head = new haxe.ds.GenericCell(tk,_this.head);
										}
									} else {
										let _this = this.tokens;
										_this.head = new haxe.ds.GenericCell(tk,_this.head);
									}
								} else {
									let _this = this.tokens;
									_this.head = new haxe.ds.GenericCell(tk,_this.head);
								}
								break;
							default:
								let _this = this.tokens;
								_this.head = new haxe.ds.GenericCell(tk,_this.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript.Token.TConst(hscript.Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						let n = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n = (n << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n = (n << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n = (n << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript.Token.TConst(hscript.Const.CInt(n));
							}
						}
						break;
					default:
						this.char = char;
						let i = n1 | 0;
						return hscript.Token.TConst(exp1 > 0 ? hscript.Const.CFloat(n1 * 10 / exp1) : i == n1 ? hscript.Const.CInt(i) : hscript.Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript.Token.TDoubleDot;
			case 59:
				return hscript.Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript.Token.TOp("==");
				} else if(char == 62) {
					return hscript.Token.TOp("=>");
				}
				this.char = char;
				return hscript.Token.TOp("=");
			case 63:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 46) {
					return hscript.Token.TQuestionDot;
				}
				this.char = char;
				return hscript.Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript.Token.TMeta(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript.Token.TBkOpen;
			case 93:
				return hscript.Token.TBkClose;
			case 123:
				return hscript.Token.TBrOpen;
			case 125:
				return hscript.Token.TBrClose;
			default:
				if(this.ops[char]) {
					let op = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char]) {
							this.char = char;
							return hscript.Token.TOp(op);
						}
						let pop = op;
						op += String.fromCodePoint(char);
						if(!Object.prototype.hasOwnProperty.call(this.opPriority.h,op) && Object.prototype.hasOwnProperty.call(this.opPriority.h,pop)) {
							if(op == "//" || op == "/*") {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript.Token.TOp(pop);
						}
					}
				}
				if(this.idents[char]) {
					let id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript.Token.TId(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	preprocValue(id) {
		return this.preprocesorValues.h[id];
	}
	parsePreproCond() {
		let tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				let id = tk.s;
				return hscript.Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript.Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(hscript.Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	evalPreproCond(e) {
		switch(e._hx_index) {
		case 1:
			let id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			let e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			let _g = e.e1;
			let _g1 = e.e2;
			switch(e.op) {
			case "&&":
				let e11 = _g;
				let e2 = _g1;
				if(this.evalPreproCond(e11)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				let e12 = _g;
				let e21 = _g1;
				if(!this.evalPreproCond(e12)) {
					return this.evalPreproCond(e21);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe.Exception.thrown(hscript.Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		case 7:
			let _g2 = e.prefix;
			if(e.op == "!") {
				let e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe.Exception.thrown(hscript.Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe.Exception.thrown(hscript.Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name));
			}
			return false;
		}
	}
	preprocess(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript.Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript.Token.TPrepro(id);
			}
			break;
		case "if":
			let e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript.Token.TPrepro(id);
		}
	}
	skipTokens() {
		let spos = this.preprocStack.length - 1;
		let obj = this.preprocStack[spos];
		let pos = this.readPos + this.offset;
		while(true) {
			let tk = this.token();
			if(tk == hscript.Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe.Exception.thrown(hscript.Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				let _this = this.tokens;
				_this.head = new haxe.ds.GenericCell(tk,_this.head);
				break;
			}
		}
	}
	tokenComment(op,char) {
		let c = HxOverrides.cca(op,1);
		let s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			let old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			do {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe.Exception.thrown(hscript.Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe.Exception.thrown(hscript.Error.EUnterminatedComment);
					}
					break;
				}
			} while(char != 47);
			return this.token();
		}
		this.char = char;
		return hscript.Token.TOp(op);
	}
	constString(c) {
		switch(c._hx_index) {
		case 0:
			let v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			let f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			let s = c.s;
			return s;
		}
	}
	tokenString(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			let c = t.c;
			return this.constString(c);
		case 2:
			let s = t.s;
			return s;
		case 3:
			let s1 = t.s;
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return "?.";
		case 10:
			return ",";
		case 11:
			return ";";
		case 12:
			return "[";
		case 13:
			return "]";
		case 14:
			return "?";
		case 15:
			return ":";
		case 16:
			let id = t.s;
			return "@" + id;
		case 17:
			let id1 = t.s;
			return "#" + id1;
		}
	}
}
$hxClasses["hscript.Parser"] = hscript.Parser;
hscript.Parser.__name__ = "hscript.Parser";
Object.assign(hscript.Parser.prototype, {
	__class__: hscript.Parser
	,__properties__: {get_currentPos: "get_currentPos"}
});
hscript.Tools = class hscript_Tools {
	static iter(e,f) {
		switch(e._hx_index) {
		case 0:
			let _g = e.c;
			break;
		case 1:
			let _g1 = e.v;
			break;
		case 2:
			let _g2 = e.n;
			let _g3 = e.t;
			let e1 = e.e;
			if(e1 != null) {
				f(e1);
			}
			break;
		case 3:
			let e2 = e.e;
			f(e2);
			break;
		case 4:
			let el = e.e;
			let _g4 = 0;
			while(_g4 < el.length) {
				let e = el[_g4];
				++_g4;
				f(e);
			}
			break;
		case 5:
			let _g5 = e.f;
			let e3 = e.e;
			f(e3);
			break;
		case 6:
			let _g6 = e.op;
			let e11 = e.e1;
			let e21 = e.e2;
			f(e11);
			f(e21);
			break;
		case 7:
			let _g7 = e.op;
			let _g8 = e.prefix;
			let e4 = e.e;
			f(e4);
			break;
		case 8:
			let e5 = e.e;
			let args = e.params;
			f(e5);
			let _g9 = 0;
			while(_g9 < args.length) {
				let a = args[_g9];
				++_g9;
				f(a);
			}
			break;
		case 9:
			let c = e.cond;
			let e12 = e.e1;
			let e22 = e.e2;
			f(c);
			f(e12);
			if(e22 != null) {
				f(e22);
			}
			break;
		case 10:
			let c1 = e.cond;
			let e6 = e.e;
			f(c1);
			f(e6);
			break;
		case 11:
			let _g10 = e.v;
			let it = e.it;
			let e7 = e.e;
			f(it);
			f(e7);
			break;
		case 12:case 13:
			break;
		case 14:
			let _g11 = e.args;
			let _g12 = e.name;
			let _g13 = e.ret;
			let e8 = e.e;
			f(e8);
			break;
		case 15:
			let e9 = e.e;
			if(e9 != null) {
				f(e9);
			}
			break;
		case 16:
			let e10 = e.e;
			let i = e.index;
			f(e10);
			f(i);
			break;
		case 17:
			let el1 = e.e;
			let _g14 = 0;
			while(_g14 < el1.length) {
				let e = el1[_g14];
				++_g14;
				f(e);
			}
			break;
		case 18:
			let _g15 = e.cl;
			let el2 = e.params;
			let _g16 = 0;
			while(_g16 < el2.length) {
				let e = el2[_g16];
				++_g16;
				f(e);
			}
			break;
		case 19:
			let e13 = e.e;
			f(e13);
			break;
		case 20:
			let _g17 = e.v;
			let _g18 = e.t;
			let e14 = e.e;
			let c2 = e.ecatch;
			f(e14);
			f(c2);
			break;
		case 21:
			let fl = e.fl;
			let _g19 = 0;
			while(_g19 < fl.length) {
				let fi = fl[_g19];
				++_g19;
				f(fi.e);
			}
			break;
		case 22:
			let c3 = e.cond;
			let e15 = e.e1;
			let e23 = e.e2;
			f(c3);
			f(e15);
			f(e23);
			break;
		case 23:
			let e16 = e.e;
			let cases = e.cases;
			let def = e.defaultExpr;
			f(e16);
			let _g20 = 0;
			while(_g20 < cases.length) {
				let c = cases[_g20];
				++_g20;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					f(v);
				}
				f(c.expr);
			}
			if(def != null) {
				f(def);
			}
			break;
		case 24:
			let c4 = e.cond;
			let e17 = e.e;
			f(c4);
			f(e17);
			break;
		case 25:
			let name = e.name;
			let args1 = e.args;
			let e18 = e.e;
			if(args1 != null) {
				let _g = 0;
				while(_g < args1.length) {
					let a = args1[_g];
					++_g;
					f(a);
				}
			}
			f(e18);
			break;
		case 26:
			let _g21 = e.t;
			let e19 = e.e;
			f(e19);
			break;
		}
	}
	static map(e,f) {
		let edef;
		switch(e._hx_index) {
		case 0:
			let _g = e.c;
			edef = e;
			break;
		case 1:
			let _g1 = e.v;
			edef = e;
			break;
		case 2:
			let n = e.n;
			let t = e.t;
			let e1 = e.e;
			edef = hscript.Expr.EVar(n,t,e1 != null ? f(e1) : null);
			break;
		case 3:
			let e2 = e.e;
			edef = hscript.Expr.EParent(f(e2));
			break;
		case 4:
			let el = e.e;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < el.length) {
				let e = el[_g3];
				++_g3;
				_g2.push(f(e));
			}
			edef = hscript.Expr.EBlock(_g2);
			break;
		case 5:
			let e3 = e.e;
			let fi = e.f;
			edef = hscript.Expr.EField(f(e3),fi);
			break;
		case 6:
			let op = e.op;
			let e11 = e.e1;
			let e21 = e.e2;
			edef = hscript.Expr.EBinop(op,f(e11),f(e21));
			break;
		case 7:
			let op1 = e.op;
			let pre = e.prefix;
			let e4 = e.e;
			edef = hscript.Expr.EUnop(op1,pre,f(e4));
			break;
		case 8:
			let e5 = e.e;
			let args = e.params;
			let edef1 = f(e5);
			let _g4 = [];
			let _g5 = 0;
			while(_g5 < args.length) {
				let a = args[_g5];
				++_g5;
				_g4.push(f(a));
			}
			edef = hscript.Expr.ECall(edef1,_g4);
			break;
		case 9:
			let c = e.cond;
			let e12 = e.e1;
			let e22 = e.e2;
			edef = hscript.Expr.EIf(f(c),f(e12),e22 != null ? f(e22) : null);
			break;
		case 10:
			let c1 = e.cond;
			let e6 = e.e;
			edef = hscript.Expr.EWhile(f(c1),f(e6));
			break;
		case 11:
			let v = e.v;
			let it = e.it;
			let e7 = e.e;
			edef = hscript.Expr.EFor(v,f(it),f(e7));
			break;
		case 12:case 13:
			edef = e;
			break;
		case 14:
			let args1 = e.args;
			let e8 = e.e;
			let name = e.name;
			let t1 = e.ret;
			edef = hscript.Expr.EFunction(args1,f(e8),name,t1);
			break;
		case 15:
			let e9 = e.e;
			edef = hscript.Expr.EReturn(e9 != null ? f(e9) : null);
			break;
		case 16:
			let e10 = e.e;
			let i = e.index;
			edef = hscript.Expr.EArray(f(e10),f(i));
			break;
		case 17:
			let el1 = e.e;
			let _g6 = [];
			let _g7 = 0;
			while(_g7 < el1.length) {
				let e = el1[_g7];
				++_g7;
				_g6.push(f(e));
			}
			edef = hscript.Expr.EArrayDecl(_g6);
			break;
		case 18:
			let cl = e.cl;
			let el2 = e.params;
			let _g8 = [];
			let _g9 = 0;
			while(_g9 < el2.length) {
				let e = el2[_g9];
				++_g9;
				_g8.push(f(e));
			}
			edef = hscript.Expr.ENew(cl,_g8);
			break;
		case 19:
			let e13 = e.e;
			edef = hscript.Expr.EThrow(f(e13));
			break;
		case 20:
			let e14 = e.e;
			let v1 = e.v;
			let t2 = e.t;
			let c2 = e.ecatch;
			edef = hscript.Expr.ETry(f(e14),v1,t2,f(c2));
			break;
		case 21:
			let fl = e.fl;
			let _g10 = [];
			let _g11 = 0;
			while(_g11 < fl.length) {
				let fi = fl[_g11];
				++_g11;
				_g10.push({ name : fi.name, e : f(fi.e)});
			}
			edef = hscript.Expr.EObject(_g10);
			break;
		case 22:
			let c3 = e.cond;
			let e15 = e.e1;
			let e23 = e.e2;
			edef = hscript.Expr.ETernary(f(c3),f(e15),f(e23));
			break;
		case 23:
			let e16 = e.e;
			let cases = e.cases;
			let def = e.defaultExpr;
			let edef2 = f(e16);
			let _g12 = [];
			let _g13 = 0;
			while(_g13 < cases.length) {
				let c = cases[_g13];
				++_g13;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(f(v));
				}
				_g12.push({ values : _g, expr : f(c.expr)});
			}
			edef = hscript.Expr.ESwitch(edef2,_g12,def == null ? null : f(def));
			break;
		case 24:
			let c4 = e.cond;
			let e17 = e.e;
			edef = hscript.Expr.EDoWhile(f(c4),f(e17));
			break;
		case 25:
			let name1 = e.name;
			let args2 = e.args;
			let e18 = e.e;
			let edef3;
			if(args2 == null) {
				edef3 = null;
			} else {
				let _g = [];
				let _g1 = 0;
				while(_g1 < args2.length) {
					let a = args2[_g1];
					++_g1;
					_g.push(f(a));
				}
				edef3 = _g;
			}
			edef = hscript.Expr.EMeta(name1,edef3,f(e18));
			break;
		case 26:
			let e19 = e.e;
			let t3 = e.t;
			edef = hscript.Expr.ECheckType(f(e19),t3);
			break;
		}
		return edef;
	}
	static expr(e) {
		return e;
	}
	static mk(e,p) {
		return e;
	}
}
$hxClasses["hscript.Tools"] = hscript.Tools;
hscript.Tools.__name__ = "hscript.Tools";
hxd.BitmapData = class hxd_BitmapData {
	constructor(width,height) {
		if(!(width == -101 && height == -102)) {
			let canvas = window.document.createElement("canvas");
			canvas.width = width;
			canvas.height = height;
			this.ctx = canvas.getContext("2d",null);
		}
	}
	clear(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	fill(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	draw(x,y,src,srcX,srcY,width,height,blendMode) {
		this.drawScaled(x,y,width,height,src,srcX,srcY,width,height,blendMode);
	}
	drawScaled(x,y,width,height,src,srcX,srcY,srcWidth,srcHeight,blendMode,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		if(blendMode == null) {
			blendMode = h2d.BlendMode.Alpha;
		}
		throw haxe.Exception.thrown("Not implemented");
	}
	line(x0,y0,x1,y1,color) {
		let dx = x1 - x0;
		let dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				let tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			if(y0 < 0) {
				y0 = 0;
			}
			if(y1 > this.ctx.canvas.height - 1) {
				y1 = this.ctx.canvas.height - 1;
			}
			let _g = y0;
			let _g1 = y1 + 1;
			while(_g < _g1) {
				let y = _g++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				let tmp = x0;
				x0 = x1;
				x1 = tmp;
			}
			if(x0 < 0) {
				x0 = 0;
			}
			if(x1 > this.ctx.canvas.width - 1) {
				x1 = this.ctx.canvas.width - 1;
			}
			let _g = x0;
			let _g1 = x1 + 1;
			while(_g < _g1) {
				let x = _g++;
				this.setPixel(x,y0,color);
			}
		} else {
			let sx;
			let sy;
			let clip_x0;
			let clip_y0;
			let clip_x1;
			let clip_y1;
			if(x0 < x1) {
				if(x0 >= this.ctx.canvas.width || x1 < 0) {
					return;
				}
				sx = 1;
				clip_x0 = 0;
				clip_x1 = this.ctx.canvas.width - 1;
			} else {
				if(x1 >= this.ctx.canvas.width || x0 < 0) {
					return;
				}
				sx = -1;
				x1 = -x1;
				x0 = -x0;
				clip_x0 = 1 - this.ctx.canvas.width;
				clip_x1 = 0;
			}
			if(y0 < y1) {
				if(y0 >= this.ctx.canvas.height || y1 < 0) {
					return;
				}
				sy = 1;
				clip_y0 = 0;
				clip_y1 = this.ctx.canvas.height - 1;
			} else {
				if(y1 >= this.ctx.canvas.width || y0 < 0) {
					return;
				}
				sy = -1;
				y1 = -y1;
				y0 = -y0;
				clip_y0 = 1 - this.ctx.canvas.height;
				clip_y1 = 0;
			}
			dx = x1 - x0;
			dy = y1 - y0;
			let d2x = dx << 1;
			let d2y = dy << 1;
			let x = x0;
			let y = y0;
			if(dx >= dy) {
				let delta = d2y - dx;
				let tracing_can_start = false;
				if(y0 < clip_y0) {
					let temp = d2x;
					temp = temp * (clip_y0 - y0) - dx;
					let xinc = temp / d2y;
					x += xinc | 0;
					if(x > clip_x1) {
						return;
					}
					if(x >= clip_x0) {
						temp -= xinc * d2y;
						delta -= (temp | 0) + dx;
						y = clip_y0;
						if(temp > 0) {
							++x;
							delta += d2y;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && x0 < clip_x0) {
					let temp = d2y;
					temp *= clip_x0 - x0;
					let yinc = temp / d2x;
					y += yinc | 0;
					temp %= d2x;
					if(y > clip_y1 || y == clip_y1 && temp > dx) {
						return;
					}
					x = clip_x0;
					delta += temp | 0;
					if(temp >= dx) {
						++y;
						delta -= d2x;
					}
				}
				let xend = x1;
				if(y1 > clip_y1) {
					let temp = d2x;
					temp = temp * (clip_y1 - y1) + dx;
					let xinc = temp / d2y;
					xend += xinc | 0;
					if(temp - xinc * d2y == 0) {
						--xend;
					}
				}
				if(xend > clip_x1) {
					xend = clip_x1 + 1;
				} else {
					++xend;
				}
				if(sx == -1) {
					x = -x;
					xend = -xend;
				}
				if(sy == -1) {
					y = -y;
				}
				d2x -= d2y;
				while(x != xend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						y += sy;
						delta -= d2x;
					} else {
						delta += d2y;
					}
					x += sx;
				}
			} else {
				let delta = d2x - dy;
				let tracing_can_start = false;
				if(x0 < clip_x0) {
					let temp = d2y;
					temp = temp * (clip_x0 - x0) - dy;
					let yinc = temp / d2x;
					y += yinc | 0;
					if(y > clip_y1) {
						return;
					}
					if(y >= clip_y0) {
						temp -= yinc * d2x;
						delta -= (temp | 0) + dy;
						x = clip_x0;
						if(temp > 0) {
							++y;
							delta += d2x;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && y0 < clip_y0) {
					let temp = d2x;
					temp *= clip_y0 - y0;
					let xinc = temp / d2y;
					x += xinc | 0;
					temp %= d2y;
					if(x > clip_x1 || x == clip_x1 && temp > dy) {
						return;
					}
					y = clip_y0;
					delta += temp | 0;
					if(temp >= dy) {
						++x;
						delta -= d2y;
					}
				}
				let yend = y1;
				if(x1 > clip_x1) {
					let temp = d2y;
					temp = temp * (clip_x1 - x1) + dy;
					let yinc = temp / d2x;
					yend += yinc | 0;
					if(temp - yinc * d2x == 0) {
						--yend;
					}
				}
				if(yend > clip_y1) {
					yend = clip_y1 + 1;
				} else {
					++yend;
				}
				if(sx == -1) {
					x = -x;
				}
				if(sy == -1) {
					y = -y;
					yend = -yend;
				}
				d2y -= d2x;
				while(y != yend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						x += sx;
						delta -= d2y;
					} else {
						delta += d2x;
					}
					y += sy;
				}
			}
		}
	}
	dispose() {
		this.ctx = null;
		this.pixel = null;
	}
	clone() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	sub(x,y,w,h) {
		let canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		let ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y,w,h,0,0,w,h);
		return hxd.BitmapData.fromNative(ctx);
	}
	lock() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	unlock() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	getPixel(x,y) {
		let i = this.lockImage;
		let a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	setPixel(x,y,c) {
		let i = this.lockImage;
		if(i != null) {
			let a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		let i1 = this.pixel;
		if(i1 == null) {
			i1 = this.ctx.createImageData(1,1);
			this.pixel = i1;
		}
		i1.data[0] = c >> 16 & 255;
		i1.data[1] = c >> 8 & 255;
		i1.data[2] = c & 255;
		i1.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i1,x,y);
	}
	get_width() {
		return this.ctx.canvas.width;
	}
	get_height() {
		return this.ctx.canvas.height;
	}
	getPixels() {
		let w = this.ctx.canvas.width;
		let h = this.ctx.canvas.height;
		let data = this.ctx.getImageData(0,0,w,h).data;
		let pixels = data.buffer;
		return new hxd.Pixels(w,h,haxe.io.Bytes.ofData(pixels),hxd.PixelFormat.RGBA);
	}
	setPixels(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw haxe.Exception.thrown("Invalid pixels size");
		}
		let img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd.PixelFormat.RGBA);
		let _g = 0;
		let _g1 = pixels.width * pixels.height * 4;
		while(_g < _g1) {
			let i = _g++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	toNative() {
		return this.ctx;
	}
	toPNG() {
		let pixels = this.getPixels();
		let png = pixels.toPNG();
		pixels.dispose();
		return png;
	}
	static notImplemented() {
		throw haxe.Exception.thrown("Not implemented");
	}
	static fromNative(data) {
		let b = new hxd.BitmapData(-101,-102);
		b.ctx = data;
		return b;
	}
}
$hxClasses["hxd.BitmapData"] = hxd.BitmapData;
hxd.BitmapData.__name__ = "hxd.BitmapData";
Object.assign(hxd.BitmapData.prototype, {
	__class__: hxd.BitmapData
	,__properties__: {get_height: "get_height",get_width: "get_width"}
});
hxd.Precision = class hxd_Precision {
	static _new(v) {
		return v;
	}
	static getSize(this1) {
		return hxd.Precision.SIZES[this1];
	}
	static toInt(this1) {
		return this1;
	}
	static fromInt(v) {
		return v;
	}
	static toString(this1) {
		switch(this1) {
		case 0:
			return "F32";
		case 1:
			return "F16";
		case 2:
			return "U8";
		case 3:
			return "S8";
		}
	}
}
hxd.InputFormat = class hxd_InputFormat {
	static _new(v) {
		return v;
	}
	static getSize(this1) {
		return this1 & 7;
	}
	static toInt(this1) {
		return this1;
	}
	static toString(this1) {
		switch(this1) {
		case 1:
			return "DFloat";
		case 2:
			return "DVec2";
		case 3:
			return "DVec3";
		case 4:
			return "DVec4";
		case 9:
			return "DBytes4";
		}
	}
	static fromInt(v) {
		return v;
	}
	static fromHXSL(t) {
		switch(t._hx_index) {
		case 3:
			return 1;
		case 5:
			let _g = t.t;
			switch(t.size) {
			case 2:
				if(_g._hx_index == 1) {
					return 2;
				} else {
					throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
				}
				break;
			case 3:
				if(_g._hx_index == 1) {
					return 3;
				} else {
					throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
				}
				break;
			case 4:
				if(_g._hx_index == 1) {
					return 4;
				} else {
					throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
				}
				break;
			default:
				throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 9:
			if(t.size == 4) {
				return 9;
			} else {
				throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		default:
			throw haxe.Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
	}
}
hxd.BufferInput = class hxd_BufferInput {
	constructor(name,type,precision) {
		if(precision == null) {
			precision = 0;
		}
		this.name = name;
		this.type = type;
		this.precision = precision;
	}
	getBytesSize() {
		return (this.type & 7) * hxd.Precision.SIZES[this.precision];
	}
	equals(b) {
		if(this.type == b.type && this.name == b.name) {
			return this.precision == b.precision;
		} else {
			return false;
		}
	}
}
$hxClasses["hxd.BufferInput"] = hxd.BufferInput;
hxd.BufferInput.__name__ = "hxd.BufferInput";
Object.assign(hxd.BufferInput.prototype, {
	__class__: hxd.BufferInput
});
hxd.BufferMapping = class hxd_BufferMapping {
	static _new(index,offset,prec) {
		return index << 3 | prec | offset << 16;
	}
	static get_bufferIndex(this1) {
		return this1 >> 3 & 255;
	}
	static get_precision(this1) {
		return this1 & 7;
	}
	static get_offset(this1) {
		return this1 >> 16;
	}
}
hxd.BufferMapping.__properties__ = {get_precision: "get_precision",get_offset: "get_offset",get_bufferIndex: "get_bufferIndex"};
hxd.BufferFormat = class hxd_BufferFormat {
	constructor(inputs) {
		this.uid = hxd.BufferFormat._UID++;
		this.stride = this.strideBytes = 0;
		this.inputs = inputs.slice();
		this.hasLowPrecision = false;
		let _g = 0;
		while(_g < inputs.length) {
			let i = inputs[_g];
			++_g;
			this.stride += i.type & 7;
			this.strideBytes += (i.type & 7) * hxd.Precision.SIZES[i.precision];
			if((this.strideBytes & 3) != 0) {
				this.strideBytes += 4 - (this.strideBytes & 3);
			}
			if(i.precision != 0) {
				this.hasLowPrecision = true;
			}
		}
	}
	getInput(name) {
		let _g = 0;
		let _g1 = this.inputs;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			if(i.name == name) {
				return i;
			}
		}
		return null;
	}
	calculateInputOffset(name) {
		let offset = 0;
		let _g = 0;
		let _g1 = this.inputs;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			if(i.name == name) {
				return offset;
			}
			offset += (i.type & 7) * hxd.Precision.SIZES[i.precision];
			if((offset & 3) != 0) {
				offset += 4 - (offset & 3);
			}
		}
		throw haxe.Exception.thrown("Input not found : " + name);
	}
	hasInput(name,type) {
		let _g = 0;
		let _g1 = this.inputs;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			if(i.name == name) {
				if(type != null) {
					return type == i.type;
				} else {
					return true;
				}
			}
		}
		return false;
	}
	append(name,type) {
		let inputs = this.inputs.slice();
		inputs.push(new hxd.BufferInput(name,type,0));
		return hxd.BufferFormat.make(inputs);
	}
	pop() {
		let inputs = this.inputs.slice();
		inputs.pop();
		return hxd.BufferFormat.make(inputs);
	}
	isSubSet(fmt) {
		if(fmt == this) {
			return true;
		}
		if(this.inputs.length >= fmt.inputs.length) {
			return false;
		}
		let _g = 0;
		let _g1 = this.inputs.length;
		while(_g < _g1) {
			let i = _g++;
			let i1 = this.inputs[i];
			let i2 = fmt.inputs[i];
			if(i1.name != i2.name || i1.type != i2.type) {
				return false;
			}
		}
		return true;
	}
	resolveMapping(target) {
		let m = this.mappings == null ? null : this.mappings[target.uid];
		if(m != null) {
			return m;
		}
		m = [];
		let _g = 0;
		let _g1 = target.inputs;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			let found = false;
			let _g2 = 0;
			let _g3 = this.inputs;
			while(_g2 < _g3.length) {
				let i2 = _g3[_g2];
				++_g2;
				if(i2.name == i.name && i2.type == i.type) {
					m.push(hxd.BufferMapping._new(0,this.calculateInputOffset(i2.name),i2.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				throw haxe.Exception.thrown("Missing buffer input '" + i.name + "'");
			}
		}
		if(this.mappings == null) {
			this.mappings = [];
		}
		this.mappings[target.uid] = m;
		return m;
	}
	getInputs() {
		return new haxe.iterators.ArrayIterator(this.inputs);
	}
	toString() {
		let _g = [];
		let _g1 = 0;
		let _g2 = this.inputs;
		while(_g1 < _g2.length) {
			let i = _g2[_g1];
			++_g1;
			_g.push(i.name + ":" + hxd.InputFormat.toString(i.type) + (i.precision == 0 ? "" : "." + hxd.Precision.toString(i.precision).toLowerCase()));
		}
		return _g.toString();
	}
	static get_H2D() {
		return hxd.BufferFormat.get_XY_UV_RGBA();
	}
	static get_XY_UV_RGBA() {
		if(hxd.BufferFormat.XY_UV_RGBA == null) {
			hxd.BufferFormat.XY_UV_RGBA = hxd.BufferFormat.make([new hxd.BufferInput("position",2,0),new hxd.BufferInput("uv",2,0),new hxd.BufferInput("color",4,0)]);
		}
		return hxd.BufferFormat.XY_UV_RGBA;
	}
	static get_XY_UV() {
		if(hxd.BufferFormat.XY_UV == null) {
			hxd.BufferFormat.XY_UV = hxd.BufferFormat.make([new hxd.BufferInput("position",2,0),new hxd.BufferInput("uv",2,0)]);
		}
		return hxd.BufferFormat.XY_UV;
	}
	static get_POS3D() {
		if(hxd.BufferFormat.POS3D == null) {
			hxd.BufferFormat.POS3D = hxd.BufferFormat.make([new hxd.BufferInput("position",3,0)]);
		}
		return hxd.BufferFormat.POS3D;
	}
	static get_POS3D_NORMAL() {
		if(hxd.BufferFormat.POS3D_NORMAL == null) {
			hxd.BufferFormat.POS3D_NORMAL = hxd.BufferFormat.make([new hxd.BufferInput("position",3,0),new hxd.BufferInput("normal",3,0)]);
		}
		return hxd.BufferFormat.POS3D_NORMAL;
	}
	static get_POS3D_NORMAL_UV() {
		if(hxd.BufferFormat.POS3D_NORMAL_UV == null) {
			hxd.BufferFormat.POS3D_NORMAL_UV = hxd.BufferFormat.make([new hxd.BufferInput("position",3,0),new hxd.BufferInput("normal",3,0),new hxd.BufferInput("uv",2,0)]);
		}
		return hxd.BufferFormat.POS3D_NORMAL_UV;
	}
	static get_POS3D_NORMAL_UV_RGBA() {
		if(hxd.BufferFormat.POS3D_NORMAL_UV_RGBA == null) {
			hxd.BufferFormat.POS3D_NORMAL_UV_RGBA = hxd.BufferFormat.get_POS3D_NORMAL_UV().append("color",4);
		}
		return hxd.BufferFormat.POS3D_NORMAL_UV_RGBA;
	}
	static get_POS3D_UV() {
		if(hxd.BufferFormat.POS3D_UV == null) {
			hxd.BufferFormat.POS3D_UV = hxd.BufferFormat.make([new hxd.BufferInput("position",3,0),new hxd.BufferInput("uv",2,0)]);
		}
		return hxd.BufferFormat.POS3D_UV;
	}
	static get_VEC4_DATA() {
		if(hxd.BufferFormat.VEC4_DATA == null) {
			hxd.BufferFormat.VEC4_DATA = hxd.BufferFormat.make([new hxd.BufferInput("data",4,0)]);
		}
		return hxd.BufferFormat.VEC4_DATA;
	}
	static get_INDEX16() {
		if(hxd.BufferFormat.INDEX16 == null) {
			hxd.BufferFormat.INDEX16 = hxd.BufferFormat.make([new hxd.BufferInput("index",1,1)]);
			hxd.BufferFormat.INDEX16.strideBytes = 2;
		}
		return hxd.BufferFormat.INDEX16;
	}
	static get_INDEX32() {
		if(hxd.BufferFormat.INDEX32 == null) {
			hxd.BufferFormat.INDEX32 = hxd.BufferFormat.make([new hxd.BufferInput("index",1,0)]);
		}
		return hxd.BufferFormat.INDEX32;
	}
	static make(inputs) {
		let names = [];
		let _g = 0;
		while(_g < inputs.length) {
			let b = inputs[_g];
			++_g;
			names.push(b.name);
		}
		let key = names.join("|");
		let arr = hxd.BufferFormat.ALL_FORMATS.h[key];
		if(arr == null) {
			arr = [];
			hxd.BufferFormat.ALL_FORMATS.h[key] = arr;
		}
		let _g1 = 0;
		while(_g1 < arr.length) {
			let fmt = arr[_g1];
			++_g1;
			let found = true;
			let _g = 0;
			let _g2 = inputs.length;
			while(_g < _g2) {
				let i = _g++;
				let _this = inputs[i];
				let b = fmt.inputs[i];
				if(!(_this.type == b.type && _this.name == b.name && _this.precision == b.precision)) {
					found = false;
					break;
				}
			}
			if(found) {
				return fmt;
			}
		}
		let fmt = new hxd.BufferFormat(inputs);
		arr.push(fmt);
		return fmt;
	}
	static float32to16(v,denormalsAreZero) {
		if(denormalsAreZero == null) {
			denormalsAreZero = false;
		}
		let i = haxe.io.FPHelper.floatToI32(v);
		let sign = (i & -2147483648) >>> 16;
		let exp = (i & 2139095040) >>> 23;
		let bits = i & 8388607;
		if(exp > 112) {
			return sign | exp - 112 << 10 & 31744 | bits >> 13;
		}
		if(exp < 113 && exp > 101 && !denormalsAreZero) {
			return sign | (8384512 + bits >> 125 - exp) + 1 >> 1;
		}
		if(exp > 143) {
			return sign | 32767;
		}
		return 0;
	}
	static float16to32(v) {
		let sign = (v & 32768) << 16;
		let bits = (v & 1023) << 13;
		let exp = (v & 31744) >> 10;
		if(exp != 0) {
			return haxe.io.FPHelper.i32ToFloat(sign | exp + 112 << 23 | bits);
		}
		if(bits == 0) {
			return 0;
		}
		let bitcount = haxe.io.FPHelper.floatToI32(bits) >> 23;
		return haxe.io.FPHelper.i32ToFloat(sign | bitcount - 37 << 23 | bits << 150 - bitcount & 8380416);
	}
	static float32toS8(v) {
		let i = Math.floor(v * 128);
		if(i >= 127) {
			return 127;
		}
		if(i <= -127) {
			return 128;
		}
		if(i >= 0) {
			return i;
		} else {
			return 127 + i | 128;
		}
	}
	static floatS8to32(v) {
		return ((v & 128) != 0 ? -1 : 1) * ((v & 127) / 127);
	}
	static float32toU8(v) {
		if(v < 0) {
			return 0;
		}
		if(v >= 1) {
			return 255;
		}
		return Math.floor(v * 256);
	}
	static floatU8to32(v) {
		return (v & 255) / 255;
	}
}
$hxClasses["hxd.BufferFormat"] = hxd.BufferFormat;
hxd.BufferFormat.__name__ = "hxd.BufferFormat";
hxd.BufferFormat.__properties__ = {get_INDEX32: "get_INDEX32",get_INDEX16: "get_INDEX16",get_VEC4_DATA: "get_VEC4_DATA",get_POS3D_NORMAL_UV_RGBA: "get_POS3D_NORMAL_UV_RGBA",get_POS3D_NORMAL_UV: "get_POS3D_NORMAL_UV",get_POS3D_UV: "get_POS3D_UV",get_POS3D_NORMAL: "get_POS3D_NORMAL",get_POS3D: "get_POS3D",get_XY_UV: "get_XY_UV",get_XY_UV_RGBA: "get_XY_UV_RGBA",get_H2D: "get_H2D"};
Object.assign(hxd.BufferFormat.prototype, {
	__class__: hxd.BufferFormat
});
hxd.MultiFormat = class hxd_MultiFormat {
	constructor(formats) {
		this.mappings = [];
		this.uid = hxd.MultiFormat._UID++;
		this.formats = formats;
	}
	resolveMapping(format1) {
		let m = this.mappings[format1.uid];
		if(m == null) {
			m = this.makeMapping(format1);
		}
		return m;
	}
	makeMapping(format1) {
		let m = [];
		let _g_current = 0;
		let _g_array = format1.inputs;
		while(_g_current < _g_array.length) {
			let input = _g_array[_g_current++];
			let found = false;
			let match = null;
			let _g_current1 = 0;
			let _g_array1 = this.formats;
			while(_g_current1 < _g_array1.length) {
				let _g_value = _g_array1[_g_current1];
				let _g_key = _g_current1++;
				let idx = _g_key;
				let f = _g_value;
				let i = f.getInput(input.name);
				if(i != null) {
					match = i;
					if(i.type != input.type) {
						continue;
					}
					let offset = f.calculateInputOffset(i.name);
					m.push(hxd.BufferMapping._new(idx,offset,i.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				if(match != null) {
					throw haxe.Exception.thrown("Shader buffer " + input.name + " was requested with " + (input.type == null ? "null" : hxd.InputFormat.toString(input.type)) + " but found with " + (match.type == null ? "null" : hxd.InputFormat.toString(match.type)));
				}
				throw haxe.Exception.thrown("Missing shader buffer " + input.name);
			}
		}
		this.mappings[format1.uid] = m;
		return m;
	}
	static make(formats) {
		if(formats.length > hxd.MultiFormat.MAX_FORMATS) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < formats.length) {
				let f = formats[_g1];
				++_g1;
				_g.push(f.toString());
			}
			throw haxe.Exception.thrown("Too many formats (addBuffer leak?) " + Std.string(_g));
		}
		let c = { found : null, nexts : hxd.MultiFormat.CACHE};
		let _g = 0;
		while(_g < formats.length) {
			let f = formats[_g];
			++_g;
			let c2 = c.nexts.h[f.uid];
			if(c2 == null) {
				c2 = { found : null, nexts : new haxe.ds.IntMap()};
				c.nexts.h[f.uid] = c2;
			}
			c = c2;
		}
		if(c.found == null) {
			c.found = new hxd.MultiFormat(formats);
		}
		return c.found;
	}
}
$hxClasses["hxd.MultiFormat"] = hxd.MultiFormat;
hxd.MultiFormat.__name__ = "hxd.MultiFormat";
Object.assign(hxd.MultiFormat.prototype, {
	__class__: hxd.MultiFormat
});
hxd.Charset = class hxd_Charset {
	constructor() {
		this.map = new haxe.ds.IntMap();
		let _gthis = this;
		let _g = 0;
		while(_g < 94) {
			let i = _g++;
			_gthis.map.h[65281 + i] = 33 + i;
		}
		let _g1 = 192;
		let _g2 = 199;
		while(_g1 < _g2) {
			let i = _g1++;
			_gthis.map.h[i] = 65;
		}
		let _g3 = 224;
		let _g4 = 231;
		while(_g3 < _g4) {
			let i = _g3++;
			_gthis.map.h[i] = 97;
		}
		let _g5 = 200;
		let _g6 = 204;
		while(_g5 < _g6) {
			let i = _g5++;
			_gthis.map.h[i] = 69;
		}
		let _g7 = 232;
		let _g8 = 236;
		while(_g7 < _g8) {
			let i = _g7++;
			_gthis.map.h[i] = 101;
		}
		let _g9 = 204;
		let _g10 = 208;
		while(_g9 < _g10) {
			let i = _g9++;
			_gthis.map.h[i] = 73;
		}
		let _g11 = 236;
		let _g12 = 240;
		while(_g11 < _g12) {
			let i = _g11++;
			_gthis.map.h[i] = 105;
		}
		let _g13 = 210;
		let _g14 = 215;
		while(_g13 < _g14) {
			let i = _g13++;
			_gthis.map.h[i] = 79;
		}
		let _g15 = 242;
		let _g16 = 247;
		while(_g15 < _g16) {
			let i = _g15++;
			_gthis.map.h[i] = 111;
		}
		let _g17 = 217;
		let _g18 = 221;
		while(_g17 < _g18) {
			let i = _g17++;
			_gthis.map.h[i] = 85;
		}
		let _g19 = 249;
		let _g20 = 253;
		while(_g19 < _g20) {
			let i = _g19++;
			_gthis.map.h[i] = 117;
		}
		_gthis.map.h[199] = 67;
		_gthis.map.h[231] = 67;
		_gthis.map.h[208] = 68;
		_gthis.map.h[222] = 100;
		_gthis.map.h[209] = 78;
		_gthis.map.h[241] = 110;
		_gthis.map.h[221] = 89;
		_gthis.map.h[253] = 121;
		_gthis.map.h[255] = 121;
		_gthis.map.h[8364] = 69;
		_gthis.map.h[12288] = 32;
		_gthis.map.h[160] = 32;
		_gthis.map.h[171] = 34;
		_gthis.map.h[187] = 34;
		_gthis.map.h[8220] = 34;
		_gthis.map.h[8221] = 34;
		_gthis.map.h[8222] = 34;
		_gthis.map.h[8216] = 39;
		_gthis.map.h[8217] = 39;
		_gthis.map.h[180] = 39;
		_gthis.map.h[8216] = 39;
		_gthis.map.h[8249] = 60;
		_gthis.map.h[8250] = 62;
		_gthis.map.h[8211] = 45;
	}
	resolveChar(code,glyphs) {
		let c = code;
		while(c != null) {
			let g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	isCJK(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	isSpace(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	isBreakChar(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	isComplementChar(code) {
		return hxd.Charset.complementChars.h.hasOwnProperty(code);
	}
	static getDefault() {
		if(hxd.Charset.inst == null) {
			hxd.Charset.inst = new hxd.Charset();
		}
		return hxd.Charset.inst;
	}
}
$hxClasses["hxd.Charset"] = hxd.Charset;
hxd.Charset.__name__ = "hxd.Charset";
Object.assign(hxd.Charset.prototype, {
	__class__: hxd.Charset
});
hxd.Cursor = $hxEnums["hxd.Cursor"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_name:"Move",_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_name:"TextInput",_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_name:"Hide",_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Callback",$_.__params__ = ["f"],$_)
};
hxd.Cursor.__constructs__ = [hxd.Cursor.Default,hxd.Cursor.Button,hxd.Cursor.Move,hxd.Cursor.TextInput,hxd.Cursor.Hide,hxd.Cursor.Custom,hxd.Cursor.Callback];
hxd.Cursor.__empty_constructs__ = [hxd.Cursor.Default,hxd.Cursor.Button,hxd.Cursor.Move,hxd.Cursor.TextInput,hxd.Cursor.Hide];
hxd.CustomCursor = class hxd_CustomCursor {
	constructor(frames,speed,offsetX,offsetY) {
		this.frames = frames;
		this.speed = speed;
		this.offsetX = offsetX;
		this.offsetY = offsetY;
		this.frameDelay = 1 / speed;
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	reset() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	update(dt) {
		let newTime = this.frameTime + dt;
		let delay = this.frameDelay;
		let index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	dispose() {
		let _g = 0;
		let _g1 = this.frames;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			f.ctx = null;
			f.pixel = null;
		}
		this.frames = [];
		if(this.alloc != null) {
			this.alloc = null;
		}
	}
	static getNativeCursor(name) {
		let c = new hxd.CustomCursor([],0,0,0);
		c.alloc = [name];
		return hxd.Cursor.Custom(c);
	}
}
$hxClasses["hxd.CustomCursor"] = hxd.CustomCursor;
hxd.CustomCursor.__name__ = "hxd.CustomCursor";
Object.assign(hxd.CustomCursor.prototype, {
	__class__: hxd.CustomCursor
});
hxd.DroppedFile = class hxd_DroppedFile {
	constructor(file) {
		this.file = file;
	}
}
$hxClasses["hxd.DroppedFile"] = hxd.DroppedFile;
hxd.DroppedFile.__name__ = "hxd.DroppedFile";
Object.assign(hxd.DroppedFile.prototype, {
	__class__: hxd.DroppedFile
});
hxd.DropFileEvent = class hxd_DropFileEvent {
	constructor(files,dx,dy) {
		this.files = files;
		this.dropX = dx;
		this.dropY = dy;
	}
	get_file() {
		return this.files[0];
	}
}
$hxClasses["hxd.DropFileEvent"] = hxd.DropFileEvent;
hxd.DropFileEvent.__name__ = "hxd.DropFileEvent";
Object.assign(hxd.DropFileEvent.prototype, {
	__class__: hxd.DropFileEvent
	,__properties__: {get_file: "get_file"}
});
hxd.EventKind = $hxEnums["hxd.EventKind"] = { __ename__:true,__constructs__:null
	,EPush: {_hx_name:"EPush",_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_name:"ERelease",_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_name:"EMove",_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_name:"EOver",_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_name:"EOut",_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_name:"EWheel",_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_name:"EFocus",_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_name:"EFocusLost",_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_name:"EKeyDown",_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_name:"EKeyUp",_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_name:"EReleaseOutside",_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_name:"ETextInput",_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_name:"ECheck",_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd.EventKind.__constructs__ = [hxd.EventKind.EPush,hxd.EventKind.ERelease,hxd.EventKind.EMove,hxd.EventKind.EOver,hxd.EventKind.EOut,hxd.EventKind.EWheel,hxd.EventKind.EFocus,hxd.EventKind.EFocusLost,hxd.EventKind.EKeyDown,hxd.EventKind.EKeyUp,hxd.EventKind.EReleaseOutside,hxd.EventKind.ETextInput,hxd.EventKind.ECheck];
hxd.EventKind.__empty_constructs__ = [hxd.EventKind.EPush,hxd.EventKind.ERelease,hxd.EventKind.EMove,hxd.EventKind.EOver,hxd.EventKind.EOut,hxd.EventKind.EWheel,hxd.EventKind.EFocus,hxd.EventKind.EFocusLost,hxd.EventKind.EKeyDown,hxd.EventKind.EKeyUp,hxd.EventKind.EReleaseOutside,hxd.EventKind.ETextInput,hxd.EventKind.ECheck];
hxd.Event = class hxd_Event {
	constructor(k,x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.button = 0;
		this.kind = k;
		this.relX = x;
		this.relY = y;
	}
	toString() {
		let tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		let tmp1;
		switch(this.kind._hx_index) {
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		}
		return tmp + tmp1;
	}
}
$hxClasses["hxd.Event"] = hxd.Event;
hxd.Event.__name__ = "hxd.Event";
Object.assign(hxd.Event.prototype, {
	__class__: hxd.Event
});
hxd._FloatBuffer = {};
hxd._FloatBuffer.Float32Expand = class hxd__$FloatBuffer_Float32Expand {
	static _new(length) {
		return { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
	}
	static get_length(this1) {
		return this1.pos;
	}
	static set_length(this1,v) {
		if(this1.pos != v) {
			let newArray = new Float32Array(v);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.pos = v;
		return v;
	}
	static push(this1,v) {
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
	}
	static get(this1,index) {
		return this1.array[index];
	}
	static set(this1,index,v) {
		return this1.array[index] = v;
	}
	static toF32Array(this1) {
		return this1.array;
	}
	static toArray(this1) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this1.pos;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(this1.array[i]);
		}
		return _g;
	}
}
hxd._FloatBuffer.Float32Expand.__properties__ = {set_length: "set_length",get_length: "get_length"};
hxd._FloatBuffer.InnerIterator = class hxd__$FloatBuffer_InnerIterator {
	constructor(b) {
		this.b = b;
		this.len = this.b.pos;
		this.pos = 0;
	}
	hasNext() {
		return this.pos < this.len;
	}
	next() {
		return this.b.array[this.pos++];
	}
}
$hxClasses["hxd._FloatBuffer.InnerIterator"] = hxd._FloatBuffer.InnerIterator;
hxd._FloatBuffer.InnerIterator.__name__ = "hxd._FloatBuffer.InnerIterator";
Object.assign(hxd._FloatBuffer.InnerIterator.prototype, {
	__class__: hxd._FloatBuffer.InnerIterator
});
hxd.FloatBuffer = class hxd_FloatBuffer {
	static _new(length) {
		if(length == null) {
			length = 0;
		}
		return hxd._FloatBuffer.Float32Expand._new(length);
	}
	static push(this1,v) {
		if(this1.pos == this1.array.length) {
			let newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			let newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
	}
	static grow(this1,v) {
		let _g = this1.pos;
		let _g1 = v;
		while(_g < _g1) {
			let i = _g++;
			if(this1.pos == this1.array.length) {
				let newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				let newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = 0.;
		}
	}
	static resize(this1,v) {
		if(this1.pos != v) {
			let newArray = new Float32Array(v);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.pos = v;
	}
	static arrayRead(this1,key) {
		return this1.array[key];
	}
	static arrayWrite(this1,key,value) {
		return this1.array[key] = value;
	}
	static getNative(this1) {
		return this1;
	}
	static iterator(this1) {
		return new hxd._FloatBuffer.InnerIterator(this1);
	}
	static get_length(this1) {
		return this1.pos;
	}
}
hxd.FloatBuffer.__properties__ = {get_length: "get_length"};
hxd._IndexBuffer = {};
hxd._IndexBuffer.InnerIterator = class hxd__$IndexBuffer_InnerIterator {
	constructor(b) {
		this.b = b;
		this.len = this.b.length;
		this.pos = 0;
	}
	hasNext() {
		return this.pos < this.len;
	}
	next() {
		return this.b[this.pos++];
	}
}
$hxClasses["hxd._IndexBuffer.InnerIterator"] = hxd._IndexBuffer.InnerIterator;
hxd._IndexBuffer.InnerIterator.__name__ = "hxd._IndexBuffer.InnerIterator";
Object.assign(hxd._IndexBuffer.InnerIterator.prototype, {
	__class__: hxd._IndexBuffer.InnerIterator
});
hxd.IndexBuffer = class hxd_IndexBuffer {
	static _new(length) {
		if(length == null) {
			length = 0;
		}
		return new Array(length);
	}
	static push(this1,v) {
		this1.push(v);
	}
	static grow(this1,v) {
		while(this1.length < v) this1.push(0);
	}
	static arrayRead(this1,key) {
		return this1[key];
	}
	static arrayWrite(this1,key,value) {
		return this1[key] = value;
	}
	static getNative(this1) {
		return this1;
	}
	static iterator(this1) {
		return new hxd._IndexBuffer.InnerIterator(this1);
	}
	static get_length(this1) {
		return this1.length;
	}
}
hxd.IndexBuffer.__properties__ = {get_length: "get_length"};
hxd.Key = class hxd_Key {
	static isDown(code) {
		return hxd.Key.keyPressed[code] > 0;
	}
	static getFrame() {
		return hxd.Timer.frameCount + 2;
	}
	static isPressed(code) {
		return hxd.Key.keyPressed[code] == hxd.Timer.frameCount + 2 - 1;
	}
	static isReleased(code) {
		return hxd.Key.keyPressed[code] == -(hxd.Timer.frameCount + 2) + 1;
	}
	static initialize() {
		if(hxd.Key.initDone) {
			hxd.Key.dispose();
		}
		hxd.Key.initDone = true;
		hxd.Key.keyPressed = [];
		hxd.Window.getInstance().addEventTarget(hxd.Key.onEvent);
	}
	static dispose() {
		if(hxd.Key.initDone) {
			hxd.Window.getInstance().removeEventTarget(hxd.Key.onEvent);
			hxd.Key.initDone = false;
			hxd.Key.keyPressed = [];
		}
	}
	static onEvent(e) {
		switch(e.kind._hx_index) {
		case 0:
			if(e.button < 5) {
				hxd.Key.keyPressed[e.button] = hxd.Timer.frameCount + 2;
			}
			break;
		case 1:
			if(e.button < 5) {
				hxd.Key.keyPressed[e.button] = -(hxd.Timer.frameCount + 2);
			}
			break;
		case 5:
			hxd.Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd.Timer.frameCount + 2;
			break;
		case 8:
			if(!hxd.Key.ALLOW_KEY_REPEAT && hxd.Key.keyPressed[e.keyCode] > 0) {
				return;
			}
			hxd.Key.keyPressed[e.keyCode] = hxd.Timer.frameCount + 2;
			break;
		case 9:
			hxd.Key.keyPressed[e.keyCode] = -(hxd.Timer.frameCount + 2);
			break;
		case 10:
			hxd.Key.keyPressed = [];
			break;
		default:
		}
	}
	static getKeyName(keyCode) {
		let c = keyCode;
		switch(c) {
		case 0:
			return "MouseLeft";
		case 1:
			return "MouseRight";
		case 2:
			return "MouseMiddle";
		case 3:
			return "Mouse3";
		case 4:
			return "Mouse4";
		case 8:
			return "Backspace";
		case 9:
			return "Tab";
		case 13:
			return "Enter";
		case 16:
			return "Shift";
		case 17:
			return "Ctrl";
		case 18:
			return "Alt";
		case 19:
			return "PauseBreak";
		case 20:
			return "CapsLock";
		case 27:
			return "Escape";
		case 32:
			return "Space";
		case 33:
			return "PageUp";
		case 34:
			return "PageDown";
		case 35:
			return "End";
		case 36:
			return "Home";
		case 37:
			return "Left";
		case 38:
			return "Up";
		case 39:
			return "Right";
		case 40:
			return "Down";
		case 45:
			return "Insert";
		case 46:
			return "Delete";
		case 91:
			return "LeftWindowKey";
		case 92:
			return "RightWindowKey";
		case 93:
			return "ContextMenu";
		case 106:
			return "NumPad*";
		case 107:
			return "NumPad+";
		case 108:
			return "NumPadEnter";
		case 109:
			return "NumPad-";
		case 110:
			return "NumPad.";
		case 111:
			return "NumPad/";
		case 144:
			return "NumLock";
		case 145:
			return "ScrollLock";
		case 186:
			return "Semicolon";
		case 187:
			return "Equals";
		case 188:
			return "Comma";
		case 189:
			return "Minus";
		case 190:
			return "Period";
		case 191:
			return "Slash";
		case 192:
			return "Tilde";
		case 219:
			return "BracketLeft";
		case 220:
			return "Backslash";
		case 221:
			return "BracketRight";
		case 222:
			return "Quote";
		case 226:
			return "IntlBackslash";
		case 272:
			return "LShift";
		case 273:
			return "LCtrl";
		case 274:
			return "LAlt";
		case 528:
			return "RShift";
		case 529:
			return "RCtrl";
		case 530:
			return "RAlt";
		default:
			if(c >= 48 && c <= 57) {
				return "" + (c - 48);
			} else if(c >= 96 && c <= 105) {
				return "NumPad" + (c - 96);
			} else if(c >= 65 && c <= 90) {
				return String.fromCodePoint((65 + c - 65));
			} else if(c >= 112 && c <= 135) {
				return "F" + (c - 112 + 1);
			} else {
				return null;
			}
		}
	}
}
$hxClasses["hxd.Key"] = hxd.Key;
hxd.Key.__name__ = "hxd.Key";
hxd.Math = class hxd_Math {
	static get_POSITIVE_INFINITY() {
		return Infinity;
	}
	static get_NEGATIVE_INFINITY() {
		return -Infinity;
	}
	static get_NaN() {
		return NaN;
	}
	static isNaN(v) {
		return isNaN(v);
	}
	static fmt(v) {
		let neg;
		if(v < 0) {
			neg = -1.0;
			v = -v;
		} else {
			neg = 1.0;
		}
		if(isNaN(v) || !isFinite(v)) {
			return v;
		}
		let digits = 4 - Math.log(v) / Math.log(10) | 0;
		if(digits < 1) {
			digits = 1;
		} else if(digits >= 10) {
			return 0.;
		}
		let exp = Math.pow(10,digits);
		return Math.floor(v * exp + .49999) * neg / exp;
	}
	static floor(f) {
		return Math.floor(f);
	}
	static ceil(f) {
		return Math.ceil(f);
	}
	static round(f) {
		return Math.round(f);
	}
	static clamp(f,min,max) {
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		if(f < min) {
			return min;
		} else if(f > max) {
			return max;
		} else {
			return f;
		}
	}
	static pow(v,p) {
		return Math.pow(v,p);
	}
	static cos(f) {
		return Math.cos(f);
	}
	static sin(f) {
		return Math.sin(f);
	}
	static tan(f) {
		return Math.tan(f);
	}
	static acos(f) {
		return Math.acos(f);
	}
	static asin(f) {
		return Math.asin(f);
	}
	static atan(f) {
		return Math.atan(f);
	}
	static sqrt(f) {
		return Math.sqrt(f);
	}
	static invSqrt(f) {
		return 1. / Math.sqrt(f);
	}
	static atan2(dy,dx) {
		return Math.atan2(dy,dx);
	}
	static abs(f) {
		if(f < 0) {
			return -f;
		} else {
			return f;
		}
	}
	static max(a,b) {
		if(a < b) {
			return b;
		} else {
			return a;
		}
	}
	static min(a,b) {
		if(a > b) {
			return b;
		} else {
			return a;
		}
	}
	static iabs(i) {
		if(i < 0) {
			return -i;
		} else {
			return i;
		}
	}
	static imax(a,b) {
		if(a < b) {
			return b;
		} else {
			return a;
		}
	}
	static imin(a,b) {
		if(a > b) {
			return b;
		} else {
			return a;
		}
	}
	static iclamp(v,min,max) {
		if(v < min) {
			return min;
		} else if(v > max) {
			return max;
		} else {
			return v;
		}
	}
	static lerp(a,b,k) {
		return a + k * (b - a);
	}
	static inverseLerp(a,b,val) {
		return (val - a) / (b - a);
	}
	static ease(a,b,k,easing) {
		let p = Math.pow(k,1 + easing);
		return a + p / (p + Math.pow(1 - k,easing + 1)) * (b - a);
	}
	static easeFactor(k,easing) {
		let p = Math.pow(k,1 + easing);
		return p / (p + Math.pow(1 - k,easing + 1));
	}
	static lerpTime(a,b,k,dt) {
		return a + (1 - Math.pow(1 - k,dt * hxd.Timer.wantedFPS)) * (b - a);
	}
	static bitCount(v) {
		v -= v >> 1 & 1431655765;
		v = (v & 858993459) + (v >> 2 & 858993459);
		return (v + (v >> 4) & 252645135) * 16843009 >> 24;
	}
	static isPOT(v) {
		return (v & v - 1) == 0;
	}
	static nextPOT(v) {
		--v;
		v |= v >> 1;
		v |= v >> 2;
		v |= v >> 4;
		v |= v >> 8;
		v |= v >> 16;
		return ++v;
	}
	static distanceSq(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		return dx * dx + dy * dy + dz * dz;
	}
	static distance(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		let dz1 = dz;
		if(dz1 == null) {
			dz1 = 0.;
		}
		return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
	}
	static colorLerp(c1,c2,k) {
		let a1 = c1 >>> 24;
		let r1 = c1 >> 16 & 255;
		let g1 = c1 >> 8 & 255;
		let b1 = c1 & 255;
		let a2 = c2 >>> 24;
		let r2 = c2 >> 16 & 255;
		let g2 = c2 >> 8 & 255;
		let b2 = c2 & 255;
		let a = a1 * (1 - k) + a2 * k | 0;
		let r = r1 * (1 - k) + r2 * k | 0;
		let g = g1 * (1 - k) + g2 * k | 0;
		let b = b1 * (1 - k) + b2 * k | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
	static angle(da) {
		da %= 6.28318530717958623;
		if(da > 3.14159265358979323) {
			da -= 6.28318530717958623;
		} else if(da <= -3.14159265358979312) {
			da += 6.28318530717958623;
		}
		return da;
	}
	static angleLerp(a,b,k) {
		let da = b - a;
		da %= 6.28318530717958623;
		if(da > 3.14159265358979323) {
			da -= 6.28318530717958623;
		} else if(da <= -3.14159265358979312) {
			da += 6.28318530717958623;
		}
		return a + da * k;
	}
	static angleMove(a,b,max) {
		let da = b - a;
		da %= 6.28318530717958623;
		if(da > 3.14159265358979323) {
			da -= 6.28318530717958623;
		} else if(da <= -3.14159265358979312) {
			da += 6.28318530717958623;
		}
		let da1 = da;
		if(da1 > -max && da1 < max) {
			return b;
		} else {
			return a + (da1 < 0 ? -max : max);
		}
	}
	static valueMove(v,target,max) {
		if(v < target) {
			v += max;
			if(v > target) {
				v = target;
			}
		} else if(v > target) {
			v -= max;
			if(v < target) {
				v = target;
			}
		}
		return v;
	}
	static shuffle(a) {
		let len = a.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let x = Std.random(len);
			let y = Std.random(len);
			let tmp = a[x];
			a[x] = a[y];
			a[y] = tmp;
		}
	}
	static random(max) {
		if(max == null) {
			max = 1.0;
		}
		return Math.random() * max;
	}
	static srand(max) {
		if(max == null) {
			max = 1.0;
		}
		return (Math.random() - 0.5) * (max * 2);
	}
	static b2f(v) {
		return (v & 255) * 0.0039215686274509803921568627451;
	}
	static f2b(v) {
		return (v < 0. ? 0. : v > 1. ? 1. : v) * 255.0 | 0;
	}
	static umod(value,modulo) {
		let r = value % modulo;
		if(r >= 0) {
			return r;
		} else {
			return r + modulo;
		}
	}
	static ufmod(value,modulo) {
		let r = value % modulo;
		if(r >= 0) {
			return r;
		} else {
			return r + modulo;
		}
	}
	static degToRad(deg) {
		return deg * 3.14159265358979323 / 180.0;
	}
	static radToDeg(rad) {
		return rad * 180.0 / 3.14159265358979323;
	}
}
$hxClasses["hxd.Math"] = hxd.Math;
hxd.Math.__name__ = "hxd.Math";
hxd.Math.__properties__ = {get_NaN: "get_NaN",get_NEGATIVE_INFINITY: "get_NEGATIVE_INFINITY",get_POSITIVE_INFINITY: "get_POSITIVE_INFINITY"};
hxd.Flags = $hxEnums["hxd.Flags"] = { __ename__:true,__constructs__:null
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
};
hxd.Flags.__constructs__ = [hxd.Flags.ReadOnly,hxd.Flags.AlphaPremultiplied];
hxd.Flags.__empty_constructs__ = [hxd.Flags.ReadOnly,hxd.Flags.AlphaPremultiplied];
hxd.PixelsARGB = class hxd_PixelsARGB {
	static getPixel(this1,x,y) {
		let v = this1.bytes.getInt32((x + y * this1.width << 2) + this1.offset);
		return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
	}
	static setPixel(this1,x,y,v) {
		this1.bytes.setInt32((x + y * this1.width << 2) + this1.offset,v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24);
	}
	static fromPixels(p) {
		p.convert(hxd.PixelFormat.ARGB);
		return p;
	}
}
hxd.PixelsFloat = class hxd_PixelsFloat {
	static getPixelF(this1,x,y,v) {
		if(v == null) {
			v = new h3d.Vector4Impl(0.,0.,0.,1.);
		}
		let pix = (x + y * this1.width << 2) + this1.offset;
		v.x = this1.bytes.getFloat(pix);
		return v;
	}
	static setPixelF(this1,x,y,v) {
		let pix = (x + y * this1.width << 2) + this1.offset;
		this1.bytes.setFloat(pix,v.x);
	}
	static fromPixels(p) {
		p.convert(hxd.PixelFormat.R32F);
		return p;
	}
}
hxd.PixelsFloatRGBA = class hxd_PixelsFloatRGBA {
	static getPixelF(this1,x,y,v) {
		if(v == null) {
			v = new h3d.Vector4Impl(0.,0.,0.,1.);
		}
		let pix = (x + y * this1.width << 4) + this1.offset;
		v.x = this1.bytes.getFloat(pix);
		v.y = this1.bytes.getFloat(pix + 4);
		v.z = this1.bytes.getFloat(pix + 8);
		v.w = this1.bytes.getFloat(pix + 12);
		return v;
	}
	static setPixelF(this1,x,y,v) {
		let pix = (x + y * this1.width << 4) + this1.offset;
		this1.bytes.setFloat(pix,v.x);
		this1.bytes.setFloat(pix + 4,v.y);
		this1.bytes.setFloat(pix + 8,v.z);
		this1.bytes.setFloat(pix + 12,v.w);
	}
	static fromPixels(p) {
		p.convert(hxd.PixelFormat.RGBA32F);
		return p;
	}
}
hxd.Channel = class hxd_Channel {
	static toInt(this1) {
		return this1;
	}
	static fromInt(v) {
		return v;
	}
}
hxd.Pixels = class hxd_Pixels {
	constructor(width,height,bytes,format1,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.width = width;
		this.height = height;
		this.bytes = bytes;
		this.set_innerFormat(format1);
		this.offset = offset;
		let i = 0;
		if(i == null) {
			i = 0;
		}
		this.flags = i;
	}
	get_format() {
		return this.innerFormat;
	}
	set_innerFormat(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd.Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd.Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd.Pixels.calcStride(1,fmt);
		return fmt;
	}
	invalidFormat() {
		throw haxe.Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	sub(x,y,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe.Exception.thrown("Pixels.sub() outside bounds");
		}
		let out = new haxe.io.Bytes(new ArrayBuffer(height * this.stride));
		let stride = hxd.Pixels.calcStride(width,this.innerFormat);
		let outP = 0;
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let dy = _g++;
			let p = (x + (y + dy) * this.width) * this.bytesPerPixel + this.offset;
			out.blit(outP,this.bytes,p,stride);
			outP += stride;
		}
		return new hxd.Pixels(width,height,out,this.innerFormat);
	}
	blit(x,y,src,srcX,srcY,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe.Exception.thrown("Pixels.blit() outside bounds");
		}
		if(srcX < 0 || srcX < 0 || srcX + width > src.width || srcY + height > src.height) {
			throw haxe.Exception.thrown("Pixels.blit() outside src bounds");
		}
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		src.convert(this.innerFormat);
		let bpp = this.bytesPerPixel;
		if(bpp == 0) {
			throw haxe.Exception.thrown("assert");
		}
		let stride = hxd.Pixels.calcStride(width,this.innerFormat);
		let _g = 0;
		let _g1 = height;
		while(_g < _g1) {
			let dy = _g++;
			let srcP = (srcX + (dy + srcY) * src.width) * bpp + src.offset;
			let dstP = (x + (dy + y) * this.width) * bpp + this.offset;
			this.bytes.blit(dstP,src.bytes,srcP,stride);
		}
	}
	clear(color,preserveMask) {
		if(preserveMask == null) {
			preserveMask = 0;
		}
		let mask = preserveMask;
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if((color & 255) == (color >> 8 & 255) && (color & 65535) == color >>> 16 && mask == 0) {
			this.bytes.fill(this.offset,this.width * this.height * this.bytesPerPixel,color & 255);
			return;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			color = color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24;
			mask = mask >>> 24 | mask >> 8 & 65280 | mask << 8 & 16711680 | mask << 24;
			break;
		case 1:
			break;
		case 2:
			color = color & -16711936 | color << 16 & 16711680 | color >> 16 & 255;
			mask = mask & -16711936 | mask << 16 & 16711680 | mask >> 16 & 255;
			break;
		default:
			this.invalidFormat();
		}
		let p = this.offset;
		if(mask == 0) {
			let _g = 0;
			let _g1 = this.width * this.height;
			while(_g < _g1) {
				let i = _g++;
				this.bytes.setInt32(p,color);
				p += 4;
			}
		} else {
			let _g = 0;
			let _g1 = this.width * this.height;
			while(_g < _g1) {
				let i = _g++;
				this.bytes.setInt32(p,color | this.bytes.getInt32(p) & mask);
				p += 4;
			}
		}
	}
	toVector() {
		let vec = new Array(this.width * this.height);
		let idx = 0;
		let p = this.offset;
		let dl = 0;
		switch(this.innerFormat._hx_index) {
		case 0:
			let _g = 0;
			let _g1 = this.height;
			while(_g < _g1) {
				let y = _g++;
				let _g1 = 0;
				let _g2 = this.width;
				while(_g1 < _g2) {
					let x = _g1++;
					let v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			let _g2 = 0;
			let _g3 = this.height;
			while(_g2 < _g3) {
				let y = _g2++;
				let _g = 0;
				let _g1 = this.width;
				while(_g < _g1) {
					let x = _g++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			let _g4 = 0;
			let _g5 = this.height;
			while(_g4 < _g5) {
				let y = _g4++;
				let _g = 0;
				let _g1 = this.width;
				while(_g < _g1) {
					let x = _g++;
					let v = this.bytes.getInt32(p);
					vec[idx++] = v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	makeSquare(copy) {
		let w = this.width;
		let h = this.height;
		let tw = w == 0 ? 0 : 1;
		let th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		let bpp = this.bytesPerPixel;
		let out = new haxe.io.Bytes(new ArrayBuffer(tw * th * bpp));
		let p = 0;
		let b = this.offset;
		let _g = 0;
		let _g1 = h;
		while(_g < _g1) {
			let y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			let _g1 = 0;
			let _g2 = (tw - w) * bpp >> 2;
			while(_g1 < _g2) {
				let i = _g1++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		let _g2 = 0;
		let _g3 = (th - h) * tw * bpp >> 2;
		while(_g2 < _g3) {
			let i = _g2++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd.Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	copyInner() {
		let old = this.bytes;
		this.bytes = new haxe.io.Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd.Flags.ReadOnly._hx_index);
	}
	willChange() {
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
	}
	flipY() {
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		let _g = 0;
		let _g1 = this.height >> 1;
		while(_g < _g1) {
			let y = _g++;
			let p1 = y * this.stride + this.offset;
			let p2 = (this.height - 1 - y) * this.stride + this.offset;
			let _g1 = 0;
			let _g2 = this.stride >> 2;
			while(_g1 < _g2) {
				let x = _g1++;
				let a = this.bytes.getInt32(p1);
				let b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	convert(target) {
		if(this.innerFormat == target || Type.enumEq(this.innerFormat,target)) {
			return;
		}
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		let bytes = this.bytes.b;
		let _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				let _g1 = 0;
				let _g2 = this.width * this.height;
				while(_g1 < _g2) {
					let i = _g1++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let r = bytes[p + 1];
					let g = bytes[p + 2];
					let b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				let _g3 = 0;
				let _g4 = this.width * this.height;
				while(_g3 < _g4) {
					let i = _g3++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let v = bytes[p + 1];
					bytes[p] = v;
					let v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					let v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				let _g5 = 0;
				let _g6 = this.width * this.height;
				while(_g5 < _g6) {
					let i = _g5++;
					let p = (i << 2) + this.offset;
					let a = bytes[p];
					let r = bytes[p + 1];
					let g = bytes[p + 2];
					let b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				let _g7 = 0;
				let _g8 = this.width * this.height;
				while(_g7 < _g8) {
					let i = _g7++;
					let p = (i << 2) + this.offset;
					let b = bytes[p];
					let r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				let _g9 = 0;
				let _g10 = this.width * this.height;
				while(_g9 < _g10) {
					let i = _g9++;
					let p = (i << 2) + this.offset;
					let a = bytes[p + 3];
					let v = bytes[p + 2];
					bytes[p + 3] = v;
					let v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					let v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				let _g11 = 0;
				let _g12 = this.width * this.height;
				while(_g11 < _g12) {
					let i = _g11++;
					let p = (i << 2) + this.offset;
					let b = bytes[p];
					let r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				let nbytes = new haxe.io.Bytes(new ArrayBuffer(this.width * this.height));
				let out = nbytes.b;
				let _g13 = 0;
				let _g14 = this.width * this.height;
				while(_g13 < _g14) {
					let i = _g13++;
					let v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				let nbytes = new haxe.io.Bytes(new ArrayBuffer(this.height * this.width * 4));
				let out = nbytes.b;
				let _g = 0;
				let _g1 = this.width * this.height;
				while(_g < _g1) {
					let i = _g++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				let fbytes = this.bytes;
				let p = 0;
				let _g15 = 0;
				let _g16 = this.width * this.height;
				while(_g15 < _g16) {
					let i = _g15++;
					let v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				let nbytes = new haxe.io.Bytes(new ArrayBuffer(this.width * this.height * 4));
				let fbytes = this.bytes;
				let _g = 0;
				let _g1 = this.width * this.height;
				while(_g < _g1) {
					let i = _g++;
					let nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 22:
			if(target._hx_index == 22) {
				let b = target.v;
				let a = _g.v;
				if(a != b) {
					throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe.Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	getPixel(x,y) {
		let p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			let v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			let v1 = this.bytes.getInt32(p);
			return v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
		case 5:
			return this.bytes.b[p];
		case 8:
			let b = this.bytes.getUInt16(p);
			return (b & 255) << 8 | b >> 8;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	setPixel(x,y,color) {
		let p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		case 5:
			this.bytes.b[p] = color;
			break;
		case 8:
			this.bytes.setUInt16(p,(color & 255) << 8 | (color & 65280) >> 8);
			break;
		default:
			this.invalidFormat();
		}
	}
	getPixelF(x,y,v) {
		if(v == null) {
			v = new h3d.Vector4Impl(0.,0.,0.,1.);
		}
		let p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 4:
			let _this = v;
			let x1 = this.bytes.getFloat(p);
			let y1 = this.bytes.getFloat(p + 4);
			let z = this.bytes.getFloat(p + 8);
			let w = this.bytes.getFloat(p + 12);
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this.x = x1;
			_this.y = y1;
			_this.z = z;
			_this.w = w;
			return v;
		case 7:
			let _this1 = v;
			let x2 = this.bytes.getFloat(p);
			let y2 = 0;
			let z1 = 0;
			let w1 = 0;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this1.x = x2;
			_this1.y = y2;
			_this1.z = z1;
			_this1.w = w1;
			return v;
		case 10:
			let _this2 = v;
			let x3 = this.bytes.getFloat(p);
			let y3 = this.bytes.getFloat(p + 4);
			let z2 = 0;
			let w2 = 0;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this2.x = x3;
			_this2.y = y3;
			_this2.z = z2;
			_this2.w = w2;
			return v;
		case 18:
			let _this3 = v;
			let x4 = this.bytes.getUInt16(p) / 65535.0;
			let y4 = 0;
			let z3 = 0;
			let w3 = 0;
			if(w3 == null) {
				w3 = 1.;
			}
			if(z3 == null) {
				z3 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this3.x = x4;
			_this3.y = y4;
			_this3.z = z3;
			_this3.w = w3;
			return v;
		default:
			let _this4 = v;
			let c = this.getPixel(x,y);
			_this4.x = (c >> 16 & 255) / 255;
			_this4.y = (c >> 8 & 255) / 255;
			_this4.z = (c & 255) / 255;
			_this4.w = (c >>> 24) / 255;
			return v;
		}
	}
	setPixelF(x,y,v) {
		if((this.flags & 1 << hxd.Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		let p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 4:
			this.bytes.setFloat(p,v.x);
			this.bytes.setFloat(p + 4,v.y);
			this.bytes.setFloat(p + 8,v.z);
			this.bytes.setFloat(p + 12,v.w);
			break;
		case 7:
			this.bytes.setFloat(p,v.x);
			break;
		default:
			let _this = v;
			let f = _this.w;
			let f1 = _this.x;
			let f2 = _this.y;
			let f3 = _this.z;
			this.setPixel(x,y,((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0));
		}
	}
	dispose() {
		this.bytes = null;
	}
	toString() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	toPNG(level) {
		if(level == null) {
			level = 9;
		}
		let png;
		if(this.offset != 0) {
			this.bytes = this.bytes.sub(this.offset,hxd.Pixels.calcDataSize(this.width,this.height,this.innerFormat));
			this.offset = 0;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			png = format.png.Tools.build32ARGB(this.width,this.height,this.bytes,level);
			break;
		case 5:
			png = format.png.Tools.buildGrey(this.width,this.height,this.bytes,level);
			break;
		default:
			this.convert(hxd.PixelFormat.BGRA);
			png = format.png.Tools.build32BGRA(this.width,this.height,this.bytes,level);
		}
		let o = new haxe.io.BytesOutput();
		new format.png.Writer(o).write(png);
		return o.getBytes();
	}
	toDDS() {
		return hxd.Pixels.toDDSLayers([this]);
	}
	clone() {
		let p = new hxd.Pixels(this.width,this.height,null,this.innerFormat);
		p.flags = this.flags;
		p.flags &= -1 - (1 << hxd.Flags.ReadOnly._hx_index);
		if(this.bytes != null) {
			p.bytes = new haxe.io.Bytes(new ArrayBuffer(this.dataSize));
			p.bytes.blit(0,this.bytes,this.offset,this.dataSize);
		}
		return p;
	}
	static switchEndian(v) {
		return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
	}
	static switchBR(v) {
		return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
	}
	static calcDataSize(width,height,format1) {
		if(format1._hx_index == 22) {
			let _g = format1.v;
			return (height + 3 >> 2 << 2) * hxd.Pixels.calcStride(width,format1);
		} else {
			return height * hxd.Pixels.calcStride(width,format1);
		}
	}
	static calcStride(width,format1) {
		let tmp;
		switch(format1._hx_index) {
		case 3:case 21:
			tmp = 8;
			break;
		case 4:
			tmp = 16;
			break;
		case 5:
			tmp = 1;
			break;
		case 6:case 18:
			tmp = 2;
			break;
		case 7:
			tmp = 4;
			break;
		case 8:
			tmp = 2;
			break;
		case 9:case 19:
			tmp = 4;
			break;
		case 10:
			tmp = 8;
			break;
		case 11:
			tmp = 3;
			break;
		case 12:case 20:
			tmp = 6;
			break;
		case 13:
			tmp = 12;
			break;
		case 0:case 1:case 2:case 14:case 15:
			tmp = 4;
			break;
		case 16:
			tmp = 4;
			break;
		case 17:
			tmp = 4;
			break;
		case 22:
			let n = format1.v;
			let blocks = width + 3 >> 2;
			if(n == 1 || n == 4) {
				return blocks << 1;
			}
			return blocks << 2;
		case 23:case 24:case 25:
			throw haxe.Exception.thrown("Not a pixel format");
		}
		return width * tmp;
	}
	static isFloatFormat(format1) {
		switch(format1._hx_index) {
		case 3:case 6:case 9:case 12:
			return true;
		case 4:case 7:case 10:case 13:
			return true;
		case 22:
			if(format1.v == 6) {
				return true;
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	static getChannelOffset(format1,channel) {
		switch(format1._hx_index) {
		case 0:
			return [1,2,3,0][channel];
		case 1:
			return [2,1,0,3][channel];
		case 4:
			return channel * 4;
		case 8:case 9:case 10:case 19:
			let p = hxd.Pixels.calcStride(1,format1);
			return [0,p,-1,-1][channel];
		case 2:case 14:case 15:
			return channel;
		case 16:case 17:
			throw haxe.Exception.thrown("Bit packed format");
		case 5:case 6:case 7:case 18:
			if(channel == 0) {
				return 0;
			} else {
				return -1;
			}
			break;
		case 11:case 12:case 13:case 20:
			let p1 = hxd.Pixels.calcStride(1,format1);
			return [0,p1,p1 << 1,-1][channel];
		case 3:case 21:
			return channel * 2;
		case 22:
			let _g = format1.v;
			throw haxe.Exception.thrown("Not supported");
		case 23:case 24:case 25:
			throw haxe.Exception.thrown("Not supported");
		}
	}
	static alloc(width,height,format1) {
		return new hxd.Pixels(width,height,new haxe.io.Bytes(new ArrayBuffer(hxd.Pixels.calcDataSize(width,height,format1))),format1);
	}
	static toDDSLayers(pixels,isCubeMap) {
		if(isCubeMap == null) {
			isCubeMap = false;
		}
		if(pixels.length == 0) {
			throw haxe.Exception.thrown("Must contain at least one image");
		}
		let ref = pixels[0];
		let fmt = ref.innerFormat;
		let levels = [];
		let outSize = 0;
		let _g = 0;
		while(_g < pixels.length) {
			let p = pixels[_g];
			++_g;
			if(!Type.enumEq(p.innerFormat,fmt)) {
				throw haxe.Exception.thrown("All images must be of the same pixel format");
			}
			outSize += p.dataSize;
			let found = false;
			let _g1 = 0;
			while(_g1 < levels.length) {
				let sz = levels[_g1];
				++_g1;
				if(sz[0].width == p.width && sz[0].height == p.height) {
					sz.push(p);
					found = true;
					break;
				}
			}
			if(!found) {
				levels.push([p]);
			}
		}
		levels.sort(function(a1,a2) {
			return a2[0].width * a2[0].height - a1[0].width * a1[0].height;
		});
		let layerCount = levels[0].length;
		let width = levels[0][0].width;
		let height = levels[0][0].height;
		let _g1 = 1;
		let _g2 = levels.length;
		while(_g1 < _g2) {
			let i = _g1++;
			let level = levels[i];
			if(level.length != layerCount) {
				throw haxe.Exception.thrown("Invalid number of mipmaps at level " + i + ": " + level.length + " should be " + layerCount);
			}
			let w = width >> i;
			if(w == 0) {
				w = 1;
			}
			let h = height >> i;
			if(h == 0) {
				h = 1;
			}
			let lw = level[0].width;
			let lh = level[0].height;
			if(lw != w || lh != h) {
				throw haxe.Exception.thrown("Invalid mip level size " + i + ": " + lw + "x" + lh + " should be " + w + "x" + h);
			}
		}
		outSize += 128;
		let dx10h = layerCount > 1 && !isCubeMap;
		if(dx10h) {
			outSize += 20;
		}
		let ddsOut = new haxe.io.Bytes(new ArrayBuffer(outSize));
		let outPos = 0;
		ddsOut.setInt32(outPos,542327876);
		outPos += 4;
		ddsOut.setInt32(outPos,124);
		outPos += 4;
		ddsOut.setInt32(outPos,135183);
		outPos += 4;
		ddsOut.setInt32(outPos,height);
		outPos += 4;
		ddsOut.setInt32(outPos,width);
		outPos += 4;
		ddsOut.setInt32(outPos,ref.stride);
		outPos += 4;
		ddsOut.setInt32(outPos,1);
		outPos += 4;
		ddsOut.setInt32(outPos,levels.length);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,32);
		outPos += 4;
		if(dx10h) {
			ddsOut.setInt32(outPos,4);
			outPos += 4;
			ddsOut.setInt32(outPos,808540228);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
		} else {
			switch(fmt._hx_index) {
			case 0:case 1:case 2:
				ddsOut.setInt32(outPos,65);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
				ddsOut.setInt32(outPos,32);
				outPos += 4;
				let byte = hxd.Pixels.getChannelOffset(fmt,0);
				ddsOut.setInt32(outPos,255 << byte * 8);
				outPos += 4;
				let byte1 = hxd.Pixels.getChannelOffset(fmt,1);
				ddsOut.setInt32(outPos,255 << byte1 * 8);
				outPos += 4;
				let byte2 = hxd.Pixels.getChannelOffset(fmt,2);
				ddsOut.setInt32(outPos,255 << byte2 * 8);
				outPos += 4;
				let byte3 = hxd.Pixels.getChannelOffset(fmt,3);
				ddsOut.setInt32(outPos,255 << byte3 * 8);
				outPos += 4;
				break;
			default:
				ddsOut.setInt32(outPos,4);
				outPos += 4;
				let v;
				switch(fmt._hx_index) {
				case 3:
					v = 113;
					break;
				case 4:
					v = 116;
					break;
				case 6:
					v = 111;
					break;
				case 7:
					v = 114;
					break;
				case 9:
					v = 112;
					break;
				case 10:
					v = 115;
					break;
				default:
					throw haxe.Exception.thrown("Unsupported format " + Std.string(fmt));
				}
				ddsOut.setInt32(outPos,v);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
				ddsOut.setInt32(outPos,0);
				outPos += 4;
			}
		}
		ddsOut.setInt32(outPos,dx10h ? 4096 : (pixels.length == 1 ? 0 : 8) | 4096 | (levels.length == 1 ? 0 : 4194304));
		outPos += 4;
		let cubebits = 1536 | (layerCount > 1 ? 2048 : 0) | (layerCount > 2 ? 4096 : 0) | (layerCount > 3 ? 8192 : 0) | (layerCount > 4 ? 16384 : 0) | (layerCount > 5 ? 32768 : 0);
		ddsOut.setInt32(outPos,isCubeMap ? cubebits : 0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		if(dx10h) {
			switch(fmt._hx_index) {
			case 2:
				ddsOut.setInt32(outPos,28);
				outPos += 4;
				break;
			case 22:
				let n = fmt.v;
				let v;
				switch(n) {
				case 1:
					v = 71;
					break;
				case 2:
					v = 74;
					break;
				case 3:
					v = 77;
					break;
				default:
					throw haxe.Exception.thrown("Unnsupported format " + Std.string(fmt));
				}
				ddsOut.setInt32(outPos,v);
				outPos += 4;
				break;
			default:
				throw haxe.Exception.thrown("Unsupported DXT10 format " + Std.string(fmt));
			}
			ddsOut.setInt32(outPos,3);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,layerCount);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
		}
		let _g3 = 0;
		let _g4 = layerCount;
		while(_g3 < _g4) {
			let i = _g3++;
			let _g = 0;
			let _g1 = levels.length;
			while(_g < _g1) {
				let l = _g++;
				let p = levels[l][i];
				ddsOut.blit(outPos,p.bytes,p.offset,p.dataSize);
				outPos += p.dataSize;
			}
		}
		return ddsOut;
	}
}
$hxClasses["hxd.Pixels"] = hxd.Pixels;
hxd.Pixels.__name__ = "hxd.Pixels";
Object.assign(hxd.Pixels.prototype, {
	__class__: hxd.Pixels
	,__properties__: {set_innerFormat: "set_innerFormat",get_format: "get_format"}
});
hxd.SceneEvents = class hxd_SceneEvents {
	constructor($window) {
		this.defaultCursor = hxd.Cursor.Default;
		this.mouseCheckMove = true;
		this.enablePhysicalMouse = true;
		this.isOut = false;
		this.onOver = new hxd.Event(hxd.EventKind.EOver);
		this.onOut = new hxd.Event(hxd.EventKind.EOut);
		this.checkPos = new hxd.Event(hxd.EventKind.ECheck);
		this.focusLost = new hxd.Event(hxd.EventKind.EFocusLost);
		this.lastTouch = 0;
		this.mouseY = -1.;
		this.mouseX = -1.;
		this.overIndex = -1;
		this.scenes = [];
		this.pendingEvents = [];
		this.pushList = [];
		this.overList = [];
		this.overCandidates = [];
		if($window == null) {
			$window = hxd.Window.getInstance();
		}
		this.window = $window;
		$window.addEventTarget($bind(this,this.onEvent));
	}
	setMousePos(xPos,yPos) {
		this.mouseX = xPos;
		this.mouseY = yPos;
	}
	onRemove(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			let index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	addScene(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	removeScene(s) {
		if(HxOverrides.remove(this.scenes,s)) {
			s.setEvents(null);
		}
	}
	dispose() {
		this.window.removeEventTarget($bind(this,this.onEvent));
	}
	focus(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		let e = new hxd.Event(hxd.EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	blur() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	checkFocus() {
		if(this.currentFocus == null) {
			return;
		}
		let s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	emitEvent(event) {
		let oldX = event.relX;
		let oldY = event.relY;
		let overCandidateCount = 0;
		let handled = false;
		let checkOver = false;
		let fillOver = false;
		let checkPush = false;
		let cancelFocus = false;
		let updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		let _g = 0;
		let _g1 = this.scenes;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let last = null;
			while(true) {
				let i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						let idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								let info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
								} while(idx < this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
								} while(idx > this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd.EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					let e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				let i = 0;
				let ev = this.onOver;
				do {
					let info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
				} while(i < overCandidateCount);
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd.EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd.EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd.EventKind.ERelease && this.pushList.length > 0) {
			let _g = 0;
			let _g1 = this.pushList;
			while(_g < _g1.length) {
				let i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd.EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd.EventKind.ERelease;
				} else {
					let s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd.EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd.EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	checkEvents() {
		let old = this.pendingEvents;
		let checkMoved = !this.mouseCheckMove;
		let checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			let _g = 0;
			while(_g < old.length) {
				let e = old[_g];
				++_g;
				let ox = e.relX;
				let oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						let i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	startCapture(f,onCancel,touchId) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : touchId, onCancel : onCancel};
	}
	stopCapture() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	startDrag(f,onCancel,refEvent) {
		this.startCapture(f,onCancel,refEvent != null ? refEvent.touchId : null);
	}
	stopDrag() {
		this.stopCapture();
	}
	getFocus() {
		return this.currentFocus;
	}
	updateCursor(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	set_defaultCursor(c) {
		if(Type.enumEq(c,this.defaultCursor)) {
			return c;
		}
		this.defaultCursor = c;
		this.selectCursor();
		return c;
	}
	selectCursor() {
		let cur = this.defaultCursor;
		let _g = 0;
		let _g1 = this.overList;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			let f = cur.f;
			f();
		} else {
			hxd.System.setCursor(cur);
		}
	}
	onEvent(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd.EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	dispatchListeners(event) {
		let ox = event.relX;
		let oy = event.relY;
		event.propagate = true;
		let _g = 0;
		let _g1 = this.scenes;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
}
$hxClasses["hxd.SceneEvents"] = hxd.SceneEvents;
hxd.SceneEvents.__name__ = "hxd.SceneEvents";
Object.assign(hxd.SceneEvents.prototype, {
	__class__: hxd.SceneEvents
	,__properties__: {set_defaultCursor: "set_defaultCursor"}
});
hxd.Platform = $hxEnums["hxd.Platform"] = { __ename__:true,__constructs__:null
	,IOS: {_hx_name:"IOS",_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_name:"Android",_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_name:"WebGL",_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_name:"PC",_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_name:"Console",_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_name:"FlashPlayer",_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd.Platform.__constructs__ = [hxd.Platform.IOS,hxd.Platform.Android,hxd.Platform.WebGL,hxd.Platform.PC,hxd.Platform.Console,hxd.Platform.FlashPlayer];
hxd.Platform.__empty_constructs__ = [hxd.Platform.IOS,hxd.Platform.Android,hxd.Platform.WebGL,hxd.Platform.PC,hxd.Platform.Console,hxd.Platform.FlashPlayer];
hxd.SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__:true,__constructs__:null
	,IsTouch: {_hx_name:"IsTouch",_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_name:"IsWindowed",_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_name:"IsMobile",_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd.SystemValue.__constructs__ = [hxd.SystemValue.IsTouch,hxd.SystemValue.IsWindowed,hxd.SystemValue.IsMobile];
hxd.SystemValue.__empty_constructs__ = [hxd.SystemValue.IsTouch,hxd.SystemValue.IsWindowed,hxd.SystemValue.IsMobile];
hxd.Timer = class hxd_Timer {
	static update() {
		hxd.Timer.frameCount++;
		let newTime = HxOverrides.now() / 1000;
		hxd.Timer.elapsedTime = newTime - hxd.Timer.lastTimeStamp;
		hxd.Timer.lastTimeStamp = newTime;
		if(hxd.Timer.elapsedTime < hxd.Timer.maxDeltaTime) {
			let a = hxd.Timer.elapsedTime;
			hxd.Timer.currentDT = a + hxd.Timer.smoothFactor * (hxd.Timer.currentDT - a);
		} else {
			hxd.Timer.elapsedTime = 1 / hxd.Timer.wantedFPS;
		}
		hxd.Timer.dt = hxd.Timer.currentDT;
	}
	static get_tmod() {
		return hxd.Timer.dt * hxd.Timer.wantedFPS;
	}
	static set_tmod(v) {
		hxd.Timer.dt = v / hxd.Timer.wantedFPS;
		return v;
	}
	static fps() {
		return 1. / hxd.Timer.currentDT;
	}
	static skip() {
		hxd.Timer.lastTimeStamp = HxOverrides.now() / 1000;
	}
	static reset() {
		hxd.Timer.lastTimeStamp = HxOverrides.now() / 1000;
		hxd.Timer.dt = hxd.Timer.currentDT = 1. / hxd.Timer.wantedFPS;
	}
}
$hxClasses["hxd.Timer"] = hxd.Timer;
hxd.Timer.__name__ = "hxd.Timer";
hxd.Timer.__properties__ = {set_tmod: "set_tmod",get_tmod: "get_tmod"};
hxd.Window = class hxd_Window {
	constructor(canvas,globalEvents) {
		this.canLockMouse = true;
		this.discardMouseUp = -1;
		this.discardMouseCaptureEvent = true;
		this.useScreenPixels = js.Browser.get_supported();
		this.curMouseY = 0.;
		this.curMouseX = 0.;
		this.mouseMode = hxd.impl.MouseMode.Absolute;
		let customCanvas = canvas != null;
		this.eventTargets = new haxe.ds.List();
		this.resizeEvents = new haxe.ds.List();
		this.dropTargets = new haxe.ds.List();
		if(!js.Browser.get_supported()) {
			this.canvasPos = { "width" : 0, "top" : 0, "left" : 0, "height" : 0};
			return;
		}
		if(canvas == null) {
			canvas = window.document.getElementById("webgl");
			if(canvas == null) {
				throw haxe.Exception.thrown("Missing canvas #webgl");
			}
			if(canvas.getAttribute("globalEvents") == "1") {
				globalEvents = true;
			}
		}
		this.canvas = canvas;
		this.propagateKeyEvents = globalEvents;
		let propagate = canvas.getAttribute("propagateKeyEvents");
		if(propagate != null) {
			this.propagateKeyEvents = propagate != "0" && propagate != "false";
		}
		this.focused = globalEvents;
		this.element = globalEvents ? window : canvas;
		this.canvasPos = canvas.getBoundingClientRect();
		if(customCanvas) {
			canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
		} else {
			window.addEventListener("mousemove",$bind(this,this.onMouseMove));
		}
		this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
		this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
		this.element.addEventListener("mouseleave",$bind(this,this.onMouseLeave));
		this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
		this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
		this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
		this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
		this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
		this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
		this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
		let _g = this;
		let b = false;
		let tmp = function() {
			_g.onFocus(b);
		};
		this.element.addEventListener("blur",tmp);
		let _g1 = this;
		let b1 = true;
		let tmp1 = function() {
			_g1.onFocus(b1);
		};
		this.element.addEventListener("focus",tmp1);
		let _gthis = this;
		if(window.ResizeObserver != null) {
			this.observer = new ResizeObserver(function(e) {
				_gthis.checkResize();
			});
			this.observer.observe(canvas);
		}
		window.addEventListener("resize",$bind(this,this.checkResize));
		window.document.addEventListener("pointerlockchange",$bind(this,this.onPointerLockChange));
		canvas.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			if(e.button == 2) {
				e.preventDefault();
			}
			return false;
		});
		if(globalEvents) {
			canvas.addEventListener("mousedown",function(e) {
				_gthis.onMouseDown(e);
				e.stopPropagation();
				e.preventDefault();
			});
			this.element.addEventListener("contextmenu",function(e) {
				e.stopPropagation();
				e.preventDefault();
				return false;
			});
		} else {
			if(canvas.getAttribute("tabindex") == null) {
				canvas.setAttribute("tabindex","1");
			}
			canvas.style.outline = "none";
		}
		this.curW = this.get_width();
		this.curH = this.get_height();
	}
	checkResize() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		let cw = this.get_width();
		let ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	dispose() {
		if(hxd.Window.inst == this) {
			hxd.Window.inst = null;
		}
		if(window.ResizeObserver != null) {
			this.observer.disconnect();
			this.observer = null;
		}
	}
	onClose() {
		return true;
	}
	onMouseModeChange(from,to) {
		return null;
	}
	event(e) {
		let _g_head = this.eventTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let et = val;
			et(e);
		}
	}
	addEventTarget(et) {
		this.eventTargets.add(et);
	}
	removeEventTarget(et) {
		let _g_head = this.eventTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let e = val;
			if(e == et) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	addResizeEvent(f) {
		this.resizeEvents.push(f);
	}
	removeResizeEvent(f) {
		let _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let e = val;
			if(e == f) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	onResize(e) {
		let _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let r = val;
			r();
		}
	}
	resize(width,height) {
	}
	addDragAndDropTarget(f) {
		if(this.dropTargets.length == 0) {
			let element = this.canvas;
			element.addEventListener("dragover",$bind(this,this.handleDragAndDropEvent));
			element.addEventListener("drop",$bind(this,this.handleDragAndDropEvent));
		}
		this.dropTargets.add(f);
	}
	removeDragAndDropTarget(f) {
		let _g_head = this.dropTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let e = val;
			if(e == f) {
				this.dropTargets.remove(f);
				break;
			}
		}
		if(this.dropTargets.length == 0) {
			let element = this.canvas;
			element.removeEventListener("dragover",$bind(this,this.handleDragAndDropEvent));
			element.removeEventListener("drop",$bind(this,this.handleDragAndDropEvent));
		}
	}
	handleDragAndDropEvent(e) {
		e.preventDefault();
		if(e.type == "dragover" || e.dataTransfer == null || e.dataTransfer.files.length == 0) {
			return;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = e.dataTransfer.files;
		while(_g1 < _g2.length) {
			let file = _g2[_g1];
			++_g1;
			_g.push(new hxd._Window.NativeDroppedFile(file));
		}
		let ev = new hxd.DropFileEvent(_g,Math.round((e.clientX - this.canvasPos.left) * this.getPixelRatio()),Math.round((e.clientY - this.canvasPos.top) * this.getPixelRatio()));
		let _g_head = this.dropTargets.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let dt = val;
			dt(ev);
		}
	}
	setFullScreen(v) {
		let doc = window.document;
		let elt = doc.documentElement;
		if(doc.fullscreenElement == elt == v) {
			return;
		}
		if(v) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
	}
	setCursorPos(x,y,emitEvent) {
		if(emitEvent == null) {
			emitEvent = false;
		}
		if(this.mouseMode == hxd.impl.MouseMode.Absolute) {
			throw haxe.Exception.thrown("setCursorPos only allowed in relative mouse modes on this platform.");
		}
		this.curMouseX = x + this.canvasPos.left;
		this.curMouseY = y + this.canvasPos.top;
		if(emitEvent) {
			this.event(new hxd.Event(hxd.EventKind.EMove,x,y));
		}
	}
	setCurrent() {
		hxd.Window.inst = this;
	}
	getPixelRatio() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	get_width() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	get_height() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	get_mouseX() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	get_mouseY() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	get_mouseLock() {
		let _g = this.mouseMode;
		if(_g._hx_index == 2) {
			let _g1 = _g.restorePos;
			return true;
		} else {
			return false;
		}
	}
	set_mouseLock(v) {
		return Type.enumEq(this.set_mouseMode(v ? hxd.impl.MouseMode.AbsoluteUnbound(true) : hxd.impl.MouseMode.Absolute),hxd.impl.MouseMode.AbsoluteUnbound(true));
	}
	get_mouseClip() {
		return false;
	}
	set_mouseClip(v) {
		if(v) {
			throw haxe.Exception.thrown("Can't clip cursor on this platform.");
		}
		return false;
	}
	set_mouseMode(v) {
		if(Type.enumEq(v,this.mouseMode)) {
			return v;
		}
		let forced = this.onMouseModeChange(this.mouseMode,v);
		if(forced != null) {
			v = forced;
		}
		let target = this.pointerLockTarget = this.canvas != null ? this.canvas : window.document.documentElement;
		if(v == hxd.impl.MouseMode.Absolute) {
			if(target.ownerDocument.pointerLockElement == target) {
				target.ownerDocument.exitPointerLock();
			}
		} else if(this.canLockMouse) {
			if(target.ownerDocument.pointerLockElement != target) {
				target.requestPointerLock();
			}
		}
		return this.mouseMode = v;
	}
	get_vsync() {
		return true;
	}
	set_vsync(b) {
		if(!b) {
			throw haxe.Exception.thrown("Can't disable vsync on this platform");
		}
		return true;
	}
	onPointerLockChange(e) {
		if(this.mouseMode != hxd.impl.MouseMode.Absolute && this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
			this.canLockMouse = false;
			this.set_mouseMode(hxd.impl.MouseMode.Absolute);
			this.canLockMouse = true;
		}
	}
	onMouseDown(e) {
		if(this.mouseMode == hxd.impl.MouseMode.Absolute) {
			if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
				this.onMouseMove(e);
			}
		} else {
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				this.pointerLockTarget.requestPointerLock();
				if(this.discardMouseCaptureEvent) {
					this.discardMouseUp = e.button;
					return;
				}
			}
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		}
		let ev = new hxd.Event(hxd.EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		let _g = e.button;
		let tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			let x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseUp(e) {
		if(this.discardMouseUp == e.button) {
			this.discardMouseUp = -1;
			return;
		}
		if(this.mouseMode == hxd.impl.MouseMode.Absolute ? e.clientX != this.curMouseX || e.clientY != this.curMouseY : e.movementX != 0 || e.movementY != 0) {
			this.onMouseMove(e);
		}
		let ev = new hxd.Event(hxd.EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		let _g = e.button;
		let tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			let x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseLeave(e) {
		let ev = new hxd.Event(hxd.EventKind.EReleaseOutside,this.get_mouseX(),this.get_mouseY());
		let _g = e.button;
		let tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			let x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	onMouseMove(e) {
		let _g = this.mouseMode;
		switch(_g._hx_index) {
		case 0:
			this.curMouseX = e.clientX;
			this.curMouseY = e.clientY;
			this.event(new hxd.Event(hxd.EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		case 1:
			let _g1 = _g.restorePos;
			let callback = _g.callback;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			let ev = new hxd.Event(hxd.EventKind.EMove,e.movementX,e.movementY);
			callback(ev);
			if(!ev.cancel && ev.propagate) {
				ev.cancel = false;
				ev.propagate = false;
				ev.relX = this.curMouseX;
				ev.relY = this.curMouseY;
				this.event(ev);
			}
			break;
		case 2:
			let _g2 = _g.restorePos;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			this.curMouseX += e.movementX;
			this.curMouseY += e.movementY;
			this.event(new hxd.Event(hxd.EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		}
	}
	onMouseWheel(e) {
		e.preventDefault();
		let ev = new hxd.Event(hxd.EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	onTouchStart(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd.Event(hxd.EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchMove(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd.Event(hxd.EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onTouchEnd(e) {
		e.preventDefault();
		let x;
		let y;
		let ev;
		let _g = 0;
		let _g1 = e.changedTouches;
		while(_g < _g1.length) {
			let touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd.Event(hxd.EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	onKeyUp(e) {
		let ev = new hxd.Event(hxd.EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	onKeyDown(e) {
		let ev = new hxd.Event(hxd.EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	onKeyPress(e) {
		let ev = new hxd.Event(hxd.EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	onFocus(b) {
		this.event(new hxd.Event(b ? hxd.EventKind.EFocus : hxd.EventKind.EFocusLost));
		this.focused = b;
	}
	get_isFocused() {
		return this.focused;
	}
	get_displayMode() {
		let doc = window.document;
		if(doc.fullscreenElement != null) {
			return hxd.DisplayMode.Borderless;
		}
		return hxd.DisplayMode.Windowed;
	}
	set_displayMode(m) {
		if(!js.Browser.get_supported()) {
			return m;
		}
		let doc = window.document;
		let elt = doc.documentElement;
		let fullscreen = m != hxd.DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd.DisplayMode.Windowed;
		}
		if(m != hxd.DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	get_title() {
		return window.document.title;
	}
	set_title(t) {
		return window.document.title = t;
	}
	static getInstance() {
		if(hxd.Window.inst == null) {
			hxd.Window.inst = new hxd.Window();
		}
		return hxd.Window.inst;
	}
}
$hxClasses["hxd.Window"] = hxd.Window;
hxd.Window.__name__ = "hxd.Window";
Object.assign(hxd.Window.prototype, {
	__class__: hxd.Window
	,__properties__: {set_displayMode: "set_displayMode",get_displayMode: "get_displayMode",set_title: "set_title",get_title: "get_title",get_isFocused: "get_isFocused",set_vsync: "set_vsync",get_vsync: "get_vsync",set_mouseMode: "set_mouseMode",set_mouseClip: "set_mouseClip",get_mouseClip: "get_mouseClip",set_mouseLock: "set_mouseLock",get_mouseLock: "get_mouseLock",get_mouseY: "get_mouseY",get_mouseX: "get_mouseX",get_height: "get_height",get_width: "get_width"}
});
var js = {};
js.Browser = class js_Browser {
	static get_supported() {
		if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
			return typeof(window.location.protocol) == "string";
		} else {
			return false;
		}
	}
	static createXMLHttpRequest() {
		if(typeof XMLHttpRequest != "undefined") {
			return new XMLHttpRequest();
		}
		if(typeof ActiveXObject != "undefined") {
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
		throw haxe.Exception.thrown("Unable to create XMLHttpRequest object.");
	}
}
$hxClasses["js.Browser"] = js.Browser;
js.Browser.__name__ = "js.Browser";
js.Browser.__properties__ = {get_supported: "get_supported"};
hxd.System = class hxd_System {
	static timeoutTick() {
	}
	static getCurrentLoop() {
		return hxd.System.loopFunc;
	}
	static setLoop(f) {
		if(!hxd.System.loopInit) {
			hxd.System.loopInit = true;
			hxd.System.browserLoop();
		}
		hxd.System.loopFunc = f;
	}
	static browserLoop() {
		if(js.Browser.get_supported()) {
			let $window = window;
			let rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
			if(hxd.System.fpsLimit > 0) {
				window.setTimeout(function() {
					return rqf(hxd.System.browserLoop);
				},1000 / hxd.System.fpsLimit);
			} else {
				rqf(hxd.System.browserLoop);
			}
		} else {
			throw haxe.Exception.thrown("Cannot use browserLoop without Browser support nor defining nodejs + hxnodejs");
		}
		if(hxd.System.loopFunc != null) {
			hxd.System.loopFunc();
		}
	}
	static start(callb) {
		callb();
	}
	static setNativeCursor(c) {
		if(hxd.System.currentNativeCursor != null && Type.enumEq(c,hxd.System.currentNativeCursor)) {
			return;
		}
		hxd.System.currentNativeCursor = c;
		hxd.System.currentCustomCursor = null;
		let canvas = hxd.Window.getInstance().canvas;
		if(canvas != null) {
			let tmp;
			switch(c._hx_index) {
			case 0:
				tmp = "default";
				break;
			case 1:
				tmp = "pointer";
				break;
			case 2:
				tmp = "move";
				break;
			case 3:
				tmp = "text";
				break;
			case 4:
				tmp = "none";
				break;
			case 5:
				let cur = c.custom;
				if(cur.alloc == null) {
					cur.alloc = [];
					let _g = 0;
					let _g1 = cur.frames;
					while(_g < _g1.length) {
						let frame = _g1[_g];
						++_g;
						cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
					}
				}
				if(cur.frames.length > 1) {
					hxd.System.currentCustomCursor = cur;
					cur.reset();
				}
				tmp = cur.alloc[cur.frameIndex];
				break;
			case 6:
				let _g = c.f;
				throw haxe.Exception.thrown("assert");
			}
			canvas.style.cursor = tmp;
		}
	}
	static getDeviceName() {
		return "Unknown";
	}
	static getDefaultFrameRate() {
		return 60.;
	}
	static getValue(s) {
		switch(s._hx_index) {
		case 0:
			if(hxd.System.get_platform() != hxd.Platform.Android) {
				return hxd.System.get_platform() == hxd.Platform.IOS;
			} else {
				return true;
			}
			break;
		case 1:
			return true;
		case 2:
			if(hxd.System.get_platform() != hxd.Platform.Android) {
				return hxd.System.get_platform() == hxd.Platform.IOS;
			} else {
				return true;
			}
			break;
		}
	}
	static exit() {
	}
	static openURL(url) {
		window.open(url,"_blank");
	}
	static updateCursor() {
		if(hxd.System.currentCustomCursor != null) {
			let change = hxd.System.currentCustomCursor.update(hxd.Timer.elapsedTime);
			if(change != -1) {
				let canvas = hxd.Window.getInstance().canvas;
				if(canvas != null) {
					canvas.style.cursor = hxd.System.currentCustomCursor.alloc[change];
				}
			}
		}
	}
	static getClipboardText() {
		return null;
	}
	static setClipboardText(text) {
		return false;
	}
	static getLocale() {
		return $global.navigator.language + "_" + $global.navigator.language.toUpperCase();
	}
	static get_width() {
		return Math.round(window.document.body.clientWidth * window.devicePixelRatio);
	}
	static get_height() {
		return Math.round(window.document.body.clientHeight * window.devicePixelRatio);
	}
	static get_lang() {
		return $global.navigator.language;
	}
	static get_platform() {
		let ua = $global.navigator.userAgent.toLowerCase();
		if(ua.indexOf("android") >= 0) {
			return hxd.Platform.Android;
		} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
			return hxd.Platform.IOS;
		} else {
			return hxd.Platform.PC;
		}
	}
	static get_screenDPI() {
		return 72;
	}
	static get_allowTimeout() {
		return false;
	}
	static set_allowTimeout(b) {
		return false;
	}
}
$hxClasses["hxd.System"] = hxd.System;
hxd.System.__name__ = "hxd.System";
hxd.System.__properties__ = {set_allowTimeout: "set_allowTimeout",get_allowTimeout: "get_allowTimeout",get_screenDPI: "get_screenDPI",get_platform: "get_platform",get_lang: "get_lang",get_height: "get_height",get_width: "get_width"};
hxd.DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__:true,__constructs__:null
	,Windowed: {_hx_name:"Windowed",_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_name:"Borderless",_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_name:"Fullscreen",_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_name:"FullscreenResize",_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd.DisplayMode.__constructs__ = [hxd.DisplayMode.Windowed,hxd.DisplayMode.Borderless,hxd.DisplayMode.Fullscreen,hxd.DisplayMode.FullscreenResize];
hxd.DisplayMode.__empty_constructs__ = [hxd.DisplayMode.Windowed,hxd.DisplayMode.Borderless,hxd.DisplayMode.Fullscreen,hxd.DisplayMode.FullscreenResize];
hxd._Window = {};
hxd._Window.NativeDroppedFile = class hxd__$Window_NativeDroppedFile extends hxd.DroppedFile {
	constructor(native) {
		super(native.name);
		this.native = native;
	}
	getBytes(callback) {
		let reader = new FileReader();
		reader.onload = function(_) {
			callback(haxe.io.Bytes.ofData(reader.result));
		};
		reader.onerror = function(_) {
			callback(null);
		};
		reader.readAsArrayBuffer(this.native);
	}
}
$hxClasses["hxd._Window.NativeDroppedFile"] = hxd._Window.NativeDroppedFile;
hxd._Window.NativeDroppedFile.__name__ = "hxd._Window.NativeDroppedFile";
hxd._Window.NativeDroppedFile.__super__ = hxd.DroppedFile;
Object.assign(hxd._Window.NativeDroppedFile.prototype, {
	__class__: hxd._Window.NativeDroppedFile
});
hxd.clipper = {};
hxd.clipper.ClipType = $hxEnums["hxd.clipper.ClipType"] = { __ename__:true,__constructs__:null
	,Intersection: {_hx_name:"Intersection",_hx_index:0,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Union: {_hx_name:"Union",_hx_index:1,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Difference: {_hx_name:"Difference",_hx_index:2,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Xor: {_hx_name:"Xor",_hx_index:3,__enum__:"hxd.clipper.ClipType",toString:$estr}
};
hxd.clipper.ClipType.__constructs__ = [hxd.clipper.ClipType.Intersection,hxd.clipper.ClipType.Union,hxd.clipper.ClipType.Difference,hxd.clipper.ClipType.Xor];
hxd.clipper.ClipType.__empty_constructs__ = [hxd.clipper.ClipType.Intersection,hxd.clipper.ClipType.Union,hxd.clipper.ClipType.Difference,hxd.clipper.ClipType.Xor];
hxd.clipper._Clipper = {};
hxd.clipper._Clipper.EdgeSide = $hxEnums["hxd.clipper._Clipper.EdgeSide"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"hxd.clipper._Clipper.EdgeSide",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"hxd.clipper._Clipper.EdgeSide",toString:$estr}
};
hxd.clipper._Clipper.EdgeSide.__constructs__ = [hxd.clipper._Clipper.EdgeSide.Left,hxd.clipper._Clipper.EdgeSide.Right];
hxd.clipper._Clipper.EdgeSide.__empty_constructs__ = [hxd.clipper._Clipper.EdgeSide.Left,hxd.clipper._Clipper.EdgeSide.Right];
hxd.clipper._Clipper.Direction = $hxEnums["hxd.clipper._Clipper.Direction"] = { __ename__:true,__constructs__:null
	,RightToLeft: {_hx_name:"RightToLeft",_hx_index:0,__enum__:"hxd.clipper._Clipper.Direction",toString:$estr}
	,LeftToRight: {_hx_name:"LeftToRight",_hx_index:1,__enum__:"hxd.clipper._Clipper.Direction",toString:$estr}
};
hxd.clipper._Clipper.Direction.__constructs__ = [hxd.clipper._Clipper.Direction.RightToLeft,hxd.clipper._Clipper.Direction.LeftToRight];
hxd.clipper._Clipper.Direction.__empty_constructs__ = [hxd.clipper._Clipper.Direction.RightToLeft,hxd.clipper._Clipper.Direction.LeftToRight];
hxd.clipper._Clipper.PolyNode = class hxd_clipper__$Clipper_PolyNode {
	constructor() {
		let points = [];
		this.polygon = points == null ? [] : points;
		this.childs = [];
	}
	isHoleNode() {
		let result = true;
		let node = this.parent;
		while(node != null) {
			result = !result;
			node = node.parent;
		}
		return result;
	}
	get_childCount() {
		return this.childs.length;
	}
	get_contour() {
		return this.polygon;
	}
	addChild(child) {
		let cnt = this.childs.length;
		this.childs.push(child);
		child.parent = this;
		child.index = cnt;
	}
	getNext() {
		if(this.childs.length > 0) {
			return this.childs[0];
		} else {
			return this.getNextSiblingUp();
		}
	}
	getNextSiblingUp() {
		if(this.parent == null) {
			return null;
		} else if(this.index == this.parent.childs.length - 1) {
			return this.parent.getNextSiblingUp();
		} else {
			return this.parent.childs[this.index + 1];
		}
	}
	isHole() {
		return this.isHoleNode();
	}
}
$hxClasses["hxd.clipper._Clipper.PolyNode"] = hxd.clipper._Clipper.PolyNode;
hxd.clipper._Clipper.PolyNode.__name__ = "hxd.clipper._Clipper.PolyNode";
Object.assign(hxd.clipper._Clipper.PolyNode.prototype, {
	__class__: hxd.clipper._Clipper.PolyNode
	,__properties__: {get_contour: "get_contour",get_childCount: "get_childCount"}
});
hxd.clipper._Clipper.PolyTree = class hxd_clipper__$Clipper_PolyTree extends hxd.clipper._Clipper.PolyNode {
	constructor() {
		super();
		this.allPolys = [];
	}
	toPolygons(polygons) {
		polygons = [];
		this.addRec(this,polygons);
	}
	addRec(polynode,polygons) {
		if(polynode.polygon.length > 0) {
			polygons.push(polynode.polygon);
		}
		let _g = 0;
		let _g1 = polynode.childs;
		while(_g < _g1.length) {
			let pn = _g1[_g];
			++_g;
			this.addRec(pn,polygons);
		}
	}
	clear() {
		this.allPolys = [];
		this.childs = [];
	}
	getFirst() {
		if(this.childs.length > 0) {
			return this.childs[0];
		}
		return null;
	}
	get_total() {
		let result = this.allPolys.length;
		if(result > 0 && this.childs[0] != this.allPolys[0]) {
			--result;
		}
		return result;
	}
}
$hxClasses["hxd.clipper._Clipper.PolyTree"] = hxd.clipper._Clipper.PolyTree;
hxd.clipper._Clipper.PolyTree.__name__ = "hxd.clipper._Clipper.PolyTree";
hxd.clipper._Clipper.PolyTree.__super__ = hxd.clipper._Clipper.PolyNode;
Object.assign(hxd.clipper._Clipper.PolyTree.prototype, {
	__class__: hxd.clipper._Clipper.PolyTree
	,__properties__: Object.assign({}, hxd.clipper._Clipper.PolyNode.prototype.__properties__, {get_total: "get_total"})
});
hxd.clipper._Clipper.Ref = class hxd_clipper__$Clipper_Ref {
	constructor(v) {
		this.val = v;
	}
}
$hxClasses["hxd.clipper._Clipper.Ref"] = hxd.clipper._Clipper.Ref;
hxd.clipper._Clipper.Ref.__name__ = "hxd.clipper._Clipper.Ref";
Object.assign(hxd.clipper._Clipper.Ref.prototype, {
	__class__: hxd.clipper._Clipper.Ref
});
hxd.clipper._Clipper.TEdge = class hxd_clipper__$Clipper_TEdge {
	constructor() {
	}
	get_top() {
		return new h2d.col.IPoint(this.topX,this.topY);
	}
	get_bot() {
		return new h2d.col.IPoint(this.botX,this.botY);
	}
	get_curr() {
		return new h2d.col.IPoint(this.currX,this.currY);
	}
	set_top(p) {
		this.topX = p.x;
		this.topY = p.y;
		return p;
	}
	set_bot(p) {
		this.botX = p.x;
		this.botY = p.y;
		return p;
	}
	set_curr(p) {
		this.currX = p.x;
		this.currY = p.y;
		return p;
	}
}
$hxClasses["hxd.clipper._Clipper.TEdge"] = hxd.clipper._Clipper.TEdge;
hxd.clipper._Clipper.TEdge.__name__ = "hxd.clipper._Clipper.TEdge";
Object.assign(hxd.clipper._Clipper.TEdge.prototype, {
	__class__: hxd.clipper._Clipper.TEdge
	,__properties__: {set_curr: "set_curr",get_curr: "get_curr",set_bot: "set_bot",get_bot: "get_bot",set_top: "set_top",get_top: "get_top"}
});
hxd.clipper._Clipper.IntersectNode = class hxd_clipper__$Clipper_IntersectNode {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.IntersectNode"] = hxd.clipper._Clipper.IntersectNode;
hxd.clipper._Clipper.IntersectNode.__name__ = "hxd.clipper._Clipper.IntersectNode";
Object.assign(hxd.clipper._Clipper.IntersectNode.prototype, {
	__class__: hxd.clipper._Clipper.IntersectNode
});
hxd.clipper._Clipper.LocalMinima = class hxd_clipper__$Clipper_LocalMinima {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.LocalMinima"] = hxd.clipper._Clipper.LocalMinima;
hxd.clipper._Clipper.LocalMinima.__name__ = "hxd.clipper._Clipper.LocalMinima";
Object.assign(hxd.clipper._Clipper.LocalMinima.prototype, {
	__class__: hxd.clipper._Clipper.LocalMinima
});
hxd.clipper._Clipper.Scanbeam = class hxd_clipper__$Clipper_Scanbeam {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.Scanbeam"] = hxd.clipper._Clipper.Scanbeam;
hxd.clipper._Clipper.Scanbeam.__name__ = "hxd.clipper._Clipper.Scanbeam";
Object.assign(hxd.clipper._Clipper.Scanbeam.prototype, {
	__class__: hxd.clipper._Clipper.Scanbeam
});
hxd.clipper._Clipper.OutRec = class hxd_clipper__$Clipper_OutRec {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.OutRec"] = hxd.clipper._Clipper.OutRec;
hxd.clipper._Clipper.OutRec.__name__ = "hxd.clipper._Clipper.OutRec";
Object.assign(hxd.clipper._Clipper.OutRec.prototype, {
	__class__: hxd.clipper._Clipper.OutRec
});
hxd.clipper._Clipper.OutPt = class hxd_clipper__$Clipper_OutPt {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.OutPt"] = hxd.clipper._Clipper.OutPt;
hxd.clipper._Clipper.OutPt.__name__ = "hxd.clipper._Clipper.OutPt";
Object.assign(hxd.clipper._Clipper.OutPt.prototype, {
	__class__: hxd.clipper._Clipper.OutPt
});
hxd.clipper._Clipper.Join = class hxd_clipper__$Clipper_Join {
	constructor() {
	}
}
$hxClasses["hxd.clipper._Clipper.Join"] = hxd.clipper._Clipper.Join;
hxd.clipper._Clipper.Join.__name__ = "hxd.clipper._Clipper.Join";
Object.assign(hxd.clipper._Clipper.Join.prototype, {
	__class__: hxd.clipper._Clipper.Join
});
hxd.clipper._Clipper.ClipperBase = class hxd_clipper__$Clipper_ClipperBase {
	constructor() {
		this.m_edges = [];
		this.m_MinimaList = null;
		this.m_CurrentLM = null;
	}
	isHorizontal(e) {
		return e.deltaY == 0;
	}
	abs(i) {
		if(i < 0) {
			return -i;
		} else {
			return i;
		}
	}
	PointIsVertex(pt,pp) {
		let pp2 = pp;
		do {
			let pt1 = pp2.pt;
			if(pt1.x == pt.x && pt1.y == pt.y) {
				return true;
			}
			pp2 = pp2.next;
		} while(pp2 != pp);
		return false;
	}
	PointOnLineSegment(pt,linePt1,linePt2) {
		if(!(pt.x == linePt1.x && pt.y == linePt1.y || pt.x == linePt2.x && pt.y == linePt2.y)) {
			if(pt.x > linePt1.x == pt.x < linePt2.x && pt.y > linePt1.y == pt.y < linePt2.y) {
				return (pt.x - linePt1.x) * (linePt2.y - linePt1.y) == (linePt2.x - linePt1.x) * (pt.y - linePt1.y);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	PointOnPolygon(pt,pp) {
		let pp2 = pp;
		do {
			if(this.PointOnLineSegment(pt,pp2.pt,pp2.next.pt)) {
				return true;
			}
			pp2 = pp2.next;
		} while(pp2 != pp);
		return false;
	}
	SlopesEqual(e1,e2) {
		return e1.deltaY * e2.deltaX == e1.deltaX * e2.deltaY;
	}
	SlopesEqual3(pt1,pt2,pt3) {
		return (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) == 0;
	}
	clear() {
		this.disposeLocalMinimaList();
		this.m_edges = [];
	}
	disposeLocalMinimaList() {
		while(this.m_MinimaList != null) {
			let tmpLm = this.m_MinimaList.next;
			this.m_MinimaList = null;
			this.m_MinimaList = tmpLm;
		}
		this.m_CurrentLM = null;
	}
	addPolygons(ppg,polyType) {
		let result = false;
		let _g_i = 0;
		let _g_a = ppg;
		let _g_l = _g_a.length;
		while(_g_i < _g_l) {
			let p = _g_a[_g_i++];
			if(this.addPolygon(p,polyType)) {
				result = true;
			}
		}
		return result;
	}
	addPolygon(pg,polyType) {
		let highI = pg.length - 1;
		while(highI > 0 && pg[highI] == pg[0]) --highI;
		while(highI > 0 && pg[highI] == pg[highI - 1]) --highI;
		if(highI < 2) {
			return false;
		}
		let edges = [];
		let _g = 0;
		let _g1 = highI + 1;
		while(_g < _g1) {
			let i = _g++;
			edges.push(new hxd.clipper._Clipper.TEdge());
		}
		let isFlat = true;
		let _this = edges[1];
		let p = pg[1];
		_this.currX = p.x;
		_this.currY = p.y;
		let e = edges[0];
		let pt = pg[0];
		e.next = edges[1];
		e.prev = edges[highI];
		e.currX = pt.x;
		e.currY = pt.y;
		e.outIdx = -1;
		let e1 = edges[highI];
		let pt1 = pg[highI];
		e1.next = edges[0];
		e1.prev = edges[highI - 1];
		e1.currX = pt1.x;
		e1.currY = pt1.y;
		e1.outIdx = -1;
		let i = highI - 1;
		while(i > 0) {
			let e = edges[i];
			let pt = pg[i];
			e.next = edges[i + 1];
			e.prev = edges[i - 1];
			e.currX = pt.x;
			e.currY = pt.y;
			e.outIdx = -1;
			--i;
		}
		let eStart = edges[0];
		let eStop = eStart;
		let e2 = eStart;
		while(true) {
			if(e2.currX == e2.next.currX && e2.currY == e2.next.currY) {
				if(e2 == e2.next) {
					break;
				}
				if(e2 == eStart) {
					eStart = e2.next;
				}
				e2 = this.RemoveEdge(e2);
				eStop = e2;
				continue;
			}
			if(e2.prev == e2.next) {
				break;
			}
			let tmp;
			let _this = e2.prev;
			let x = _this.currX;
			let y = _this.currY;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			let pt1_x = x;
			let pt1_y = y;
			let x1 = e2.currX;
			let y1 = e2.currY;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			let pt2_x = x1;
			let pt2_y = y1;
			let _this1 = e2.next;
			let x2 = _this1.currX;
			let y2 = _this1.currY;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			let pt3_x = x2;
			let pt3_y = y2;
			if((pt1_y - pt2_y) * (pt2_x - pt3_x) - (pt1_x - pt2_x) * (pt2_y - pt3_y) == 0) {
				if(this.preserveCollinear) {
					let _this = e2.prev;
					let tmp1 = new h2d.col.IPoint(_this.currX,_this.currY);
					let tmp2 = new h2d.col.IPoint(e2.currX,e2.currY);
					let _this1 = e2.next;
					tmp = !this.Pt2IsBetweenPt1AndPt3(tmp1,tmp2,new h2d.col.IPoint(_this1.currX,_this1.currY));
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(e2 == eStart) {
					eStart = e2.next;
				}
				e2 = this.RemoveEdge(e2);
				e2 = e2.prev;
				eStop = e2;
				continue;
			}
			e2 = e2.next;
			if(e2 == eStop) {
				break;
			}
		}
		if(e2.prev == e2.next) {
			return false;
		}
		e2 = eStart;
		do {
			if(e2.currY >= e2.next.currY) {
				e2.botX = e2.currX;
				e2.botY = e2.currY;
				e2.topX = e2.next.currX;
				e2.topY = e2.next.currY;
			} else {
				e2.topX = e2.currX;
				e2.topY = e2.currY;
				e2.botX = e2.next.currX;
				e2.botY = e2.next.currY;
			}
			this.SetDx(e2);
			e2.polyType = polyType;
			e2 = e2.next;
			if(e2.currY != eStart.currY) {
				isFlat = false;
			}
		} while(e2 != eStart);
		if(isFlat) {
			return false;
		}
		this.m_edges.push(edges);
		let leftBoundIsForward;
		let eMin = null;
		if(e2.prev.botX == e2.prev.topX && e2.prev.botY == e2.prev.topY) {
			e2 = e2.next;
		}
		let old = null;
		while(true) {
			e2 = this.FindNextLocMin(e2);
			if(e2 == eMin) {
				break;
			} else if(eMin == null) {
				eMin = e2;
			}
			if(e2 == old) {
				throw haxe.Exception.thrown("!");
			}
			old = e2;
			let locMin = new hxd.clipper._Clipper.LocalMinima();
			locMin.next = null;
			locMin.y = e2.botY;
			if(e2.dx < e2.prev.dx) {
				locMin.leftBound = e2.prev;
				locMin.rightBound = e2;
				leftBoundIsForward = false;
			} else {
				locMin.leftBound = e2;
				locMin.rightBound = e2.prev;
				leftBoundIsForward = true;
			}
			locMin.leftBound.side = hxd.clipper._Clipper.EdgeSide.Left;
			locMin.rightBound.side = hxd.clipper._Clipper.EdgeSide.Right;
			if(locMin.leftBound.next == locMin.rightBound) {
				locMin.leftBound.windDelta = -1;
			} else {
				locMin.leftBound.windDelta = 1;
			}
			locMin.rightBound.windDelta = -locMin.leftBound.windDelta;
			e2 = this.ProcessBound(locMin.leftBound,leftBoundIsForward);
			if(e2.outIdx == -2) {
				e2 = this.ProcessBound(e2,leftBoundIsForward);
			}
			let e21 = this.ProcessBound(locMin.rightBound,!leftBoundIsForward);
			if(e21.outIdx == -2) {
				e21 = this.ProcessBound(e21,!leftBoundIsForward);
			}
			if(locMin.leftBound.outIdx == -2) {
				locMin.leftBound = null;
			} else if(locMin.rightBound.outIdx == -2) {
				locMin.rightBound = null;
			}
			this.InsertLocalMinima(locMin);
			if(!leftBoundIsForward) {
				e2 = e21;
			}
		}
		return true;
	}
	InitEdge(e,eNext,ePrev,pt) {
		e.next = eNext;
		e.prev = ePrev;
		e.currX = pt.x;
		e.currY = pt.y;
		e.outIdx = -1;
	}
	InitEdge2(e,polyType) {
		if(e.currY >= e.next.currY) {
			e.botX = e.currX;
			e.botY = e.currY;
			e.topX = e.next.currX;
			e.topY = e.next.currY;
		} else {
			e.topX = e.currX;
			e.topY = e.currY;
			e.botX = e.next.currX;
			e.botY = e.next.currY;
		}
		this.SetDx(e);
		e.polyType = polyType;
	}
	RemoveEdge(e) {
		e.prev.next = e.next;
		e.next.prev = e.prev;
		let result = e.next;
		e.prev = null;
		return result;
	}
	FindNextLocMin(e) {
		let e2;
		while(true) {
			while(e.botX != e.prev.botX || e.botY != e.prev.botY || e.currX == e.topX && e.currY == e.topY) e = e.next;
			if(e.dx != -9007199254740992. && e.prev.dx != -9007199254740992.) {
				break;
			}
			while(e.prev.dx == -9007199254740992.) e = e.prev;
			e2 = e;
			while(e.dx == -9007199254740992.) e = e.next;
			if(e.topY == e.prev.botY) {
				continue;
			}
			if(e2.prev.botX < e.botX) {
				e = e2;
			}
			break;
		}
		return e;
	}
	ProcessBound(E,LeftBoundIsForward) {
		let EStart;
		let Horz;
		let Result = E;
		if(Result.outIdx == -2) {
			E = Result;
			if(LeftBoundIsForward) {
				while(E.topY == E.next.botY) E = E.next;
				while(E != Result && E.dx == -9007199254740992.) E = E.prev;
			} else {
				while(E.topY == E.prev.botY) E = E.prev;
				while(E != Result && E.dx == -9007199254740992.) E = E.next;
			}
			if(E == Result) {
				if(LeftBoundIsForward) {
					Result = E.next;
				} else {
					Result = E.prev;
				}
			} else {
				if(LeftBoundIsForward) {
					E = Result.next;
				} else {
					E = Result.prev;
				}
				let locMin = new hxd.clipper._Clipper.LocalMinima();
				locMin.next = null;
				locMin.y = E.botY;
				locMin.leftBound = null;
				locMin.rightBound = E;
				E.windDelta = 0;
				Result = this.ProcessBound(E,LeftBoundIsForward);
				this.InsertLocalMinima(locMin);
			}
			return Result;
		}
		if(E.dx == -9007199254740992.) {
			if(LeftBoundIsForward) {
				EStart = E.prev;
			} else {
				EStart = E.next;
			}
			if(EStart.outIdx != -2) {
				if(EStart.dx == -9007199254740992.) {
					if(EStart.botX != E.botX && EStart.topX != E.botX) {
						this.ReverseHorizontal(E);
					}
				} else if(EStart.botX != E.botX) {
					this.ReverseHorizontal(E);
				}
			}
		}
		EStart = E;
		if(LeftBoundIsForward) {
			while(Result.topY == Result.next.botY && Result.next.outIdx != -2) Result = Result.next;
			if(Result.dx == -9007199254740992. && Result.next.outIdx != -2) {
				Horz = Result;
				while(Horz.prev.dx == -9007199254740992.) Horz = Horz.prev;
				if(Horz.prev.topX == Result.next.topX) {
					if(!LeftBoundIsForward) {
						Result = Horz.prev;
					}
				} else if(Horz.prev.topX > Result.next.topX) {
					Result = Horz.prev;
				}
			}
			while(E != Result) {
				E.nextInLML = E.next;
				if(E.dx == -9007199254740992. && E != EStart && E.botX != E.prev.topX) {
					this.ReverseHorizontal(E);
				}
				E = E.next;
			}
			if(E.dx == -9007199254740992. && E != EStart && E.botX != E.prev.topX) {
				this.ReverseHorizontal(E);
			}
			Result = Result.next;
		} else {
			while(Result.topY == Result.prev.botY && Result.prev.outIdx != -2) Result = Result.prev;
			if(Result.dx == -9007199254740992. && Result.prev.outIdx != -2) {
				Horz = Result;
				while(Horz.next.dx == -9007199254740992.) Horz = Horz.next;
				if(Horz.next.topX == Result.prev.topX) {
					if(!LeftBoundIsForward) {
						Result = Horz.next;
					}
				} else if(Horz.next.topX > Result.prev.topX) {
					Result = Horz.next;
				}
			}
			while(E != Result) {
				E.nextInLML = E.prev;
				if(E.dx == -9007199254740992. && E != EStart && E.botX != E.next.topX) {
					this.ReverseHorizontal(E);
				}
				E = E.prev;
			}
			if(E.dx == -9007199254740992. && E != EStart && E.botX != E.next.topX) {
				this.ReverseHorizontal(E);
			}
			Result = Result.prev;
		}
		return Result;
	}
	ReverseHorizontal(e) {
		let tmp = e.topX;
		e.topX = e.botX;
		e.botX = tmp;
	}
	Pt2IsBetweenPt1AndPt3(pt1,pt2,pt3) {
		if(pt1.x == pt3.x && pt1.y == pt3.y || pt1.x == pt2.x && pt1.y == pt2.y || pt3.x == pt2.x && pt3.y == pt2.y) {
			return false;
		} else if(pt1.x != pt3.x) {
			return pt2.x > pt1.x == pt2.x < pt3.x;
		} else {
			return pt2.y > pt1.y == pt2.y < pt3.y;
		}
	}
	SetDx(e) {
		e.deltaX = e.topX - e.botX;
		e.deltaY = e.topY - e.botY;
		if(e.deltaY == 0) {
			e.dx = -9007199254740992.;
		} else {
			e.dx = e.deltaX / e.deltaY;
		}
	}
	InsertLocalMinima(newLm) {
		if(this.m_MinimaList == null) {
			this.m_MinimaList = newLm;
		} else if(newLm.y >= this.m_MinimaList.y) {
			newLm.next = this.m_MinimaList;
			this.m_MinimaList = newLm;
		} else {
			let tmpLm = this.m_MinimaList;
			while(tmpLm.next != null && newLm.y < tmpLm.next.y) tmpLm = tmpLm.next;
			newLm.next = tmpLm.next;
			tmpLm.next = newLm;
		}
	}
	PopLocalMinima() {
		if(this.m_CurrentLM == null) {
			return;
		}
		this.m_CurrentLM = this.m_CurrentLM.next;
	}
	SwapX(e) {
		e.currX = e.topX;
		e.topX = e.botX;
		e.botX = e.currX;
	}
	equals(pt1,pt2) {
		if(pt1.x == pt2.x) {
			return pt1.y == pt2.y;
		} else {
			return false;
		}
	}
	Reset() {
		this.m_CurrentLM = this.m_MinimaList;
		let lm = this.m_MinimaList;
		while(lm != null) {
			let e = lm.leftBound;
			if(e != null) {
				e.currX = e.botX;
				e.currY = e.botY;
				e.side = hxd.clipper._Clipper.EdgeSide.Left;
				e.outIdx = -1;
				e = e.nextInLML;
			}
			e = lm.rightBound;
			if(e != null) {
				e.currX = e.botX;
				e.currY = e.botY;
				e.side = hxd.clipper._Clipper.EdgeSide.Right;
				e.outIdx = -1;
				e = e.nextInLML;
			}
			lm = lm.next;
		}
	}
	static nearZero(v) {
		if(v > -1e-20) {
			return v < 1E-20;
		} else {
			return false;
		}
	}
	static getBounds(pols) {
		let result = new hxd.clipper.Rect();
		let i = 0;
		let count = pols.length;
		while(i < count && pols[i].length == 0) ++i;
		let tmp = i == count;
		result.left = result.right = pols[i][0].x;
		result.top = result.bottom = pols[i][0].y;
		let _g = 0;
		let _g1 = count;
		while(_g < _g1) {
			let i = _g++;
			let _g_i = 0;
			let _g_a = pols[i];
			let _g_l = _g_a.length;
			while(_g_i < _g_l) {
				let p = _g_a[_g_i++];
				if(p.x < result.left) {
					result.left = p.x;
				} else if(p.x > result.right) {
					result.right = p.x;
				}
				if(p.y < result.top) {
					result.top = p.y;
				} else if(p.y > result.bottom) {
					result.bottom = p.y;
				}
			}
		}
		return result;
	}
}
$hxClasses["hxd.clipper._Clipper.ClipperBase"] = hxd.clipper._Clipper.ClipperBase;
hxd.clipper._Clipper.ClipperBase.__name__ = "hxd.clipper._Clipper.ClipperBase";
Object.assign(hxd.clipper._Clipper.ClipperBase.prototype, {
	__class__: hxd.clipper._Clipper.ClipperBase
});
hxd.clipper.NodeType = $hxEnums["hxd.clipper.NodeType"] = { __ename__:true,__constructs__:null
	,Any: {_hx_name:"Any",_hx_index:0,__enum__:"hxd.clipper.NodeType",toString:$estr}
	,Open: {_hx_name:"Open",_hx_index:1,__enum__:"hxd.clipper.NodeType",toString:$estr}
	,Closed: {_hx_name:"Closed",_hx_index:2,__enum__:"hxd.clipper.NodeType",toString:$estr}
};
hxd.clipper.NodeType.__constructs__ = [hxd.clipper.NodeType.Any,hxd.clipper.NodeType.Open,hxd.clipper.NodeType.Closed];
hxd.clipper.NodeType.__empty_constructs__ = [hxd.clipper.NodeType.Any,hxd.clipper.NodeType.Open,hxd.clipper.NodeType.Closed];
hxd.clipper.ResultKind = $hxEnums["hxd.clipper.ResultKind"] = { __ename__:true,__constructs__:null
	,All: {_hx_name:"All",_hx_index:0,__enum__:"hxd.clipper.ResultKind",toString:$estr}
	,NoHoles: {_hx_name:"NoHoles",_hx_index:1,__enum__:"hxd.clipper.ResultKind",toString:$estr}
	,HolesOnly: {_hx_name:"HolesOnly",_hx_index:2,__enum__:"hxd.clipper.ResultKind",toString:$estr}
};
hxd.clipper.ResultKind.__constructs__ = [hxd.clipper.ResultKind.All,hxd.clipper.ResultKind.NoHoles,hxd.clipper.ResultKind.HolesOnly];
hxd.clipper.ResultKind.__empty_constructs__ = [hxd.clipper.ResultKind.All,hxd.clipper.ResultKind.NoHoles,hxd.clipper.ResultKind.HolesOnly];
hxd.clipper.Clipper = class hxd_clipper_Clipper extends hxd.clipper._Clipper.ClipperBase {
	constructor() {
		super();
		this.m_Scanbeam = null;
		this.m_ActiveEdges = null;
		this.m_SortedEdges = null;
		this.m_IntersectList = [];
		this.m_ExecuteLocked = false;
		this.m_UsingPolyTree = false;
		this.m_PolyOuts = [];
		this.m_Joins = [];
		this.m_GhostJoins = [];
		this.reverseSolution = false;
		this.strictlySimple = false;
		this.preserveCollinear = false;
		this.resultKind = hxd.clipper.ResultKind.All;
	}
	xor(a,b) {
		if(a) {
			return !b;
		} else {
			return b;
		}
	}
	DisposeScanbeamList() {
		while(this.m_Scanbeam != null) {
			let sb2 = this.m_Scanbeam.next;
			this.m_Scanbeam = null;
			this.m_Scanbeam = sb2;
		}
	}
	Reset() {
		super.Reset();
		this.m_Scanbeam = null;
		this.m_ActiveEdges = null;
		this.m_SortedEdges = null;
		let lm = this.m_MinimaList;
		while(lm != null) {
			this.InsertScanbeam(lm.y);
			lm = lm.next;
		}
	}
	InsertScanbeam(y) {
		if(this.m_Scanbeam == null) {
			this.m_Scanbeam = new hxd.clipper._Clipper.Scanbeam();
			this.m_Scanbeam.next = null;
			this.m_Scanbeam.y = y;
		} else if(y > this.m_Scanbeam.y) {
			let newSb = new hxd.clipper._Clipper.Scanbeam();
			newSb.y = y;
			newSb.next = this.m_Scanbeam;
			this.m_Scanbeam = newSb;
		} else {
			let sb2 = this.m_Scanbeam;
			while(sb2.next != null && y <= sb2.next.y) sb2 = sb2.next;
			if(y == sb2.y) {
				return;
			}
			let newSb = new hxd.clipper._Clipper.Scanbeam();
			newSb.y = y;
			newSb.next = sb2.next;
			sb2.next = newSb;
		}
	}
	execute(clipType,subjFillType,clipFillType) {
		if(subjFillType == null) {
			subjFillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		if(clipFillType == null) {
			clipFillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		if(this.m_ExecuteLocked) {
			return [];
		}
		this.m_ExecuteLocked = true;
		let solution = [];
		this.m_SubjFillType = subjFillType;
		this.m_ClipFillType = clipFillType;
		this.m_ClipType = clipType;
		this.m_UsingPolyTree = false;
		let succeeded = this.ExecuteInternal();
		if(succeeded) {
			solution = this.BuildResult();
		}
		this.DisposeAllPolyPts();
		this.m_ExecuteLocked = false;
		return solution;
	}
	ExecuteTree(clipType,polytree,subjFillType,clipFillType) {
		if(subjFillType == null) {
			subjFillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		if(clipFillType == null) {
			clipFillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		if(this.m_ExecuteLocked) {
			return false;
		}
		this.m_ExecuteLocked = true;
		this.m_SubjFillType = subjFillType;
		this.m_ClipFillType = clipFillType;
		this.m_ClipType = clipType;
		this.m_UsingPolyTree = true;
		let succeeded = this.ExecuteInternal();
		if(succeeded) {
			this.BuildResult2(polytree);
		}
		this.m_ExecuteLocked = false;
		return succeeded;
	}
	FixHoleLinkage(outRec) {
		if(outRec.firstLeft == null || outRec.isHole != outRec.firstLeft.isHole && outRec.firstLeft.pts != null) {
			return;
		}
		let orfl = outRec.firstLeft;
		while(orfl != null && (orfl.isHole == outRec.isHole || orfl.pts == null)) orfl = orfl.firstLeft;
		outRec.firstLeft = orfl;
	}
	ExecuteInternal() {
		this.Reset();
		if(this.m_CurrentLM == null) {
			return false;
		}
		let botY = this.PopScanbeam();
		do {
			this.InsertLocalMinimaIntoAEL(botY);
			if(this.m_GhostJoins.length > 0) {
				this.m_GhostJoins = [];
			}
			this.ProcessHorizontals(false);
			if(this.m_Scanbeam == null) {
				break;
			}
			let topY = this.PopScanbeam();
			if(!this.ProcessIntersections(topY)) {
				return false;
			}
			this.ProcessEdgesAtTopOfScanbeam(topY);
			botY = topY;
		} while(this.m_Scanbeam != null || this.m_CurrentLM != null);
		let _g = 0;
		let _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			let outRec = _g1[_g];
			++_g;
			if(outRec.pts == null) {
				continue;
			}
			let b = this.reverseSolution;
			if((outRec.isHole ? !b : b) == this.Area(outRec) > 0) {
				this.ReversePolyPtLinks(outRec.pts);
			}
		}
		this.JoinCommonEdges();
		let _g2 = 0;
		let _g3 = this.m_PolyOuts;
		while(_g2 < _g3.length) {
			let outRec = _g3[_g2];
			++_g2;
			if(outRec.pts != null) {
				this.FixupOutPolygon(outRec);
			}
		}
		if(this.strictlySimple) {
			this.DoSimplePolygons();
		}
		this.m_Joins = [];
		this.m_GhostJoins = [];
		return true;
	}
	PopScanbeam() {
		let y = this.m_Scanbeam.y;
		this.m_Scanbeam = this.m_Scanbeam.next;
		return y;
	}
	DisposeAllPolyPts() {
		let _g = 0;
		let _g1 = this.m_PolyOuts.length;
		while(_g < _g1) {
			let i = _g++;
			this.DisposeOutRec(i);
		}
		this.m_PolyOuts = [];
	}
	DisposeOutRec(index) {
		let outRec = this.m_PolyOuts[index];
		outRec.pts = null;
		outRec = null;
		this.m_PolyOuts[index] = null;
	}
	AddJoin(op1,op2,offPt) {
		let j = new hxd.clipper._Clipper.Join();
		j.outPt1 = op1;
		j.outPt2 = op2;
		j.offPt = offPt;
		this.m_Joins.push(j);
	}
	AddGhostJoin(op,offPt) {
		let j = new hxd.clipper._Clipper.Join();
		j.outPt1 = op;
		j.offPt = offPt;
		this.m_GhostJoins.push(j);
	}
	InsertLocalMinimaIntoAEL(botY) {
		while(this.m_CurrentLM != null && this.m_CurrentLM.y == botY) {
			let lb = this.m_CurrentLM.leftBound;
			let rb = this.m_CurrentLM.rightBound;
			this.PopLocalMinima();
			let op1 = null;
			if(lb == null) {
				this.InsertEdgeIntoAEL(rb);
				this.SetWindingCount(rb);
				if(this.IsContributing(rb)) {
					op1 = this.AddOutPt(rb,new h2d.col.IPoint(rb.botX,rb.botY));
				}
			} else if(rb == null) {
				this.InsertEdgeIntoAEL(lb);
				this.SetWindingCount(lb);
				if(this.IsContributing(lb)) {
					op1 = this.AddOutPt(lb,new h2d.col.IPoint(lb.botX,lb.botY));
				}
				this.InsertScanbeam(lb.topY);
			} else {
				this.InsertEdgeIntoAEL(lb);
				this.InsertEdgeIntoAEL(rb,lb);
				this.SetWindingCount(lb);
				rb.windCnt = lb.windCnt;
				rb.windCnt2 = lb.windCnt2;
				if(this.IsContributing(lb)) {
					op1 = this.AddLocalMinPoly(lb,rb,new h2d.col.IPoint(lb.botX,lb.botY));
				}
				this.InsertScanbeam(lb.topY);
			}
			if(rb != null) {
				if(rb.deltaY == 0) {
					this.AddEdgeToSEL(rb);
				} else {
					this.InsertScanbeam(rb.topY);
				}
			}
			if(lb == null || rb == null) {
				continue;
			}
			if(op1 != null && rb.deltaY == 0 && this.m_GhostJoins.length > 0 && rb.windDelta != 0) {
				let _g = 0;
				let _g1 = this.m_GhostJoins;
				while(_g < _g1.length) {
					let j = _g1[_g];
					++_g;
					if(this.HorzSegmentsOverlap(j.outPt1.pt.x,j.offPt.x,rb.botX,rb.topX)) {
						this.AddJoin(j.outPt1,op1,j.offPt);
					}
				}
			}
			let tmp;
			if(lb.outIdx >= 0 && lb.prevInAEL != null && lb.prevInAEL.currX == lb.botX && lb.prevInAEL.outIdx >= 0) {
				let e1 = lb.prevInAEL;
				tmp = e1.deltaY * lb.deltaX == e1.deltaX * lb.deltaY;
			} else {
				tmp = false;
			}
			if(tmp && lb.windDelta != 0 && lb.prevInAEL.windDelta != 0) {
				let op2 = this.AddOutPt(lb.prevInAEL,new h2d.col.IPoint(lb.botX,lb.botY));
				this.AddJoin(op1,op2,new h2d.col.IPoint(lb.topX,lb.topY));
			}
			if(lb.nextInAEL != rb) {
				let tmp;
				if(rb.outIdx >= 0 && rb.prevInAEL.outIdx >= 0) {
					let e1 = rb.prevInAEL;
					tmp = e1.deltaY * rb.deltaX == e1.deltaX * rb.deltaY;
				} else {
					tmp = false;
				}
				if(tmp && rb.windDelta != 0 && rb.prevInAEL.windDelta != 0) {
					let op2 = this.AddOutPt(rb.prevInAEL,new h2d.col.IPoint(rb.botX,rb.botY));
					this.AddJoin(op1,op2,new h2d.col.IPoint(rb.topX,rb.topY));
				}
				let e = lb.nextInAEL;
				if(e != null) {
					while(e != rb) {
						this.IntersectEdges(rb,e,new h2d.col.IPoint(lb.currX,lb.currY));
						e = e.nextInAEL;
					}
				}
			}
		}
	}
	InsertEdgeIntoAEL(edge,startEdge) {
		if(this.m_ActiveEdges == null) {
			edge.prevInAEL = null;
			edge.nextInAEL = null;
			this.m_ActiveEdges = edge;
		} else if(startEdge == null && this.E2InsertsBeforeE1(this.m_ActiveEdges,edge)) {
			edge.prevInAEL = null;
			edge.nextInAEL = this.m_ActiveEdges;
			this.m_ActiveEdges.prevInAEL = edge;
			this.m_ActiveEdges = edge;
		} else {
			if(startEdge == null) {
				startEdge = this.m_ActiveEdges;
			}
			while(startEdge.nextInAEL != null && !this.E2InsertsBeforeE1(startEdge.nextInAEL,edge)) startEdge = startEdge.nextInAEL;
			edge.nextInAEL = startEdge.nextInAEL;
			if(startEdge.nextInAEL != null) {
				startEdge.nextInAEL.prevInAEL = edge;
			}
			edge.prevInAEL = startEdge;
			startEdge.nextInAEL = edge;
		}
	}
	E2InsertsBeforeE1(e1,e2) {
		if(e2.currX == e1.currX) {
			if(e2.topY > e1.topY) {
				let currentY = e2.topY;
				let tmp;
				if(currentY == e1.topY) {
					tmp = e1.topX;
				} else {
					let value = e1.dx * (currentY - e1.botY);
					tmp = e1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
				return e2.topX < tmp;
			} else {
				let currentY = e1.topY;
				let tmp;
				if(currentY == e2.topY) {
					tmp = e2.topX;
				} else {
					let value = e2.dx * (currentY - e2.botY);
					tmp = e2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
				return e1.topX > tmp;
			}
		} else {
			return e2.currX < e1.currX;
		}
	}
	IsEvenOddFillType(edge) {
		if(edge.polyType == hxd.clipper.PolyType.Subject) {
			return this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd;
		} else {
			return this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd;
		}
	}
	IsEvenOddAltFillType(edge) {
		if(edge.polyType == hxd.clipper.PolyType.Subject) {
			return this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd;
		} else {
			return this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd;
		}
	}
	IsContributing(edge) {
		let pft;
		let pft2;
		if(edge.polyType == hxd.clipper.PolyType.Subject) {
			pft = this.m_SubjFillType;
			pft2 = this.m_ClipFillType;
		} else {
			pft = this.m_ClipFillType;
			pft2 = this.m_SubjFillType;
		}
		switch(pft._hx_index) {
		case 0:
			if(edge.windDelta == 0 && edge.windCnt != 1) {
				return false;
			}
			break;
		case 1:
			let f = edge.windCnt;
			if((f < 0 ? -f : f) != 1) {
				return false;
			}
			break;
		case 2:
			if(edge.windCnt != 1) {
				return false;
			}
			break;
		default:
			if(edge.windCnt != -1) {
				return false;
			}
		}
		switch(this.m_ClipType._hx_index) {
		case 0:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 != 0;
			case 2:
				return edge.windCnt2 > 0;
			default:
				return edge.windCnt2 < 0;
			}
			break;
		case 1:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 == 0;
			case 2:
				return edge.windCnt2 <= 0;
			default:
				return edge.windCnt2 >= 0;
			}
			break;
		case 2:
			if(edge.polyType == hxd.clipper.PolyType.Subject) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 != 0;
				case 2:
					return edge.windCnt2 > 0;
				default:
					return edge.windCnt2 < 0;
				}
			}
			break;
		case 3:
			if(edge.windDelta == 0) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				return true;
			}
			break;
		}
	}
	SetWindingCount(edge) {
		let e = edge.prevInAEL;
		while(e != null && (e.polyType != edge.polyType || e.windDelta == 0)) e = e.prevInAEL;
		if(e == null) {
			edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
			edge.windCnt2 = 0;
			e = this.m_ActiveEdges;
		} else if(edge.windDelta == 0 && this.m_ClipType != hxd.clipper.ClipType.Union) {
			edge.windCnt = 1;
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else if(edge.polyType == hxd.clipper.PolyType.Subject ? this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd : this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd) {
			if(edge.windDelta == 0) {
				let Inside = true;
				let e2 = e.prevInAEL;
				while(e2 != null) {
					if(e2.polyType == e.polyType && e2.windDelta != 0) {
						Inside = !Inside;
					}
					e2 = e2.prevInAEL;
				}
				edge.windCnt = Inside ? 0 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else {
			if(e.windCnt * e.windDelta < 0) {
				if(e.windCnt > 1 || e.windCnt < -1) {
					if(e.windDelta * edge.windDelta < 0) {
						edge.windCnt = e.windCnt;
					} else {
						edge.windCnt = e.windCnt + edge.windDelta;
					}
				} else {
					edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
				}
			} else if(edge.windDelta == 0) {
				edge.windCnt = e.windCnt < 0 ? e.windCnt - 1 : e.windCnt + 1;
			} else if(e.windDelta * edge.windDelta < 0) {
				edge.windCnt = e.windCnt;
			} else {
				edge.windCnt = e.windCnt + edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		}
		if(edge.polyType == hxd.clipper.PolyType.Subject ? this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd : this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd) {
			while(e != edge) {
				if(e.windDelta != 0) {
					edge.windCnt2 = edge.windCnt2 == 0 ? 1 : 0;
				}
				e = e.nextInAEL;
			}
		} else {
			while(e != edge) {
				edge.windCnt2 += e.windDelta;
				e = e.nextInAEL;
			}
		}
	}
	AddEdgeToSEL(edge) {
		if(this.m_SortedEdges == null) {
			this.m_SortedEdges = edge;
			edge.prevInSEL = null;
			edge.nextInSEL = null;
		} else {
			edge.nextInSEL = this.m_SortedEdges;
			edge.prevInSEL = null;
			this.m_SortedEdges.prevInSEL = edge;
			this.m_SortedEdges = edge;
		}
	}
	CopyAELToSEL() {
		let e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
	}
	SwapPositionsInAEL(edge1,edge2) {
		if(edge1.nextInAEL == edge1.prevInAEL || edge2.nextInAEL == edge2.prevInAEL) {
			return;
		}
		if(edge1.nextInAEL == edge2) {
			let next = edge2.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge1;
			}
			let prev = edge1.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			edge2.nextInAEL = edge1;
			edge1.prevInAEL = edge2;
			edge1.nextInAEL = next;
		} else if(edge2.nextInAEL == edge1) {
			let next = edge1.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge2;
			}
			let prev = edge2.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge1;
			}
			edge1.prevInAEL = prev;
			edge1.nextInAEL = edge2;
			edge2.prevInAEL = edge1;
			edge2.nextInAEL = next;
		} else {
			let next = edge1.nextInAEL;
			let prev = edge1.prevInAEL;
			edge1.nextInAEL = edge2.nextInAEL;
			if(edge1.nextInAEL != null) {
				edge1.nextInAEL.prevInAEL = edge1;
			}
			edge1.prevInAEL = edge2.prevInAEL;
			if(edge1.prevInAEL != null) {
				edge1.prevInAEL.nextInAEL = edge1;
			}
			edge2.nextInAEL = next;
			if(edge2.nextInAEL != null) {
				edge2.nextInAEL.prevInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			if(edge2.prevInAEL != null) {
				edge2.prevInAEL.nextInAEL = edge2;
			}
		}
		if(edge1.prevInAEL == null) {
			this.m_ActiveEdges = edge1;
		} else if(edge2.prevInAEL == null) {
			this.m_ActiveEdges = edge2;
		}
	}
	SwapPositionsInSEL(edge1,edge2) {
		if(edge1.nextInSEL == null && edge1.prevInSEL == null) {
			return;
		}
		if(edge2.nextInSEL == null && edge2.prevInSEL == null) {
			return;
		}
		if(edge1.nextInSEL == edge2) {
			let next = edge2.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge1;
			}
			let prev = edge1.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			edge2.nextInSEL = edge1;
			edge1.prevInSEL = edge2;
			edge1.nextInSEL = next;
		} else if(edge2.nextInSEL == edge1) {
			let next = edge1.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge2;
			}
			let prev = edge2.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge1;
			}
			edge1.prevInSEL = prev;
			edge1.nextInSEL = edge2;
			edge2.prevInSEL = edge1;
			edge2.nextInSEL = next;
		} else {
			let next = edge1.nextInSEL;
			let prev = edge1.prevInSEL;
			edge1.nextInSEL = edge2.nextInSEL;
			if(edge1.nextInSEL != null) {
				edge1.nextInSEL.prevInSEL = edge1;
			}
			edge1.prevInSEL = edge2.prevInSEL;
			if(edge1.prevInSEL != null) {
				edge1.prevInSEL.nextInSEL = edge1;
			}
			edge2.nextInSEL = next;
			if(edge2.nextInSEL != null) {
				edge2.nextInSEL.prevInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			if(edge2.prevInSEL != null) {
				edge2.prevInSEL.nextInSEL = edge2;
			}
		}
		if(edge1.prevInSEL == null) {
			this.m_SortedEdges = edge1;
		} else if(edge2.prevInSEL == null) {
			this.m_SortedEdges = edge2;
		}
	}
	AddLocalMaxPoly(e1,e2,pt) {
		this.AddOutPt(e1,pt);
		if(e2.windDelta == 0) {
			this.AddOutPt(e2,pt);
		}
		if(e1.outIdx == e2.outIdx) {
			e1.outIdx = -1;
			e2.outIdx = -1;
		} else if(e1.outIdx < e2.outIdx) {
			this.AppendPolygon(e1,e2);
		} else {
			this.AppendPolygon(e2,e1);
		}
	}
	AddLocalMinPoly(e1,e2,pt) {
		let result;
		let e;
		let prevE;
		if(e2.deltaY == 0 || e1.dx > e2.dx) {
			result = this.AddOutPt(e1,pt);
			e2.outIdx = e1.outIdx;
			e1.side = hxd.clipper._Clipper.EdgeSide.Left;
			e2.side = hxd.clipper._Clipper.EdgeSide.Right;
			e = e1;
			if(e.prevInAEL == e2) {
				prevE = e2.prevInAEL;
			} else {
				prevE = e.prevInAEL;
			}
		} else {
			result = this.AddOutPt(e2,pt);
			e1.outIdx = e2.outIdx;
			e1.side = hxd.clipper._Clipper.EdgeSide.Right;
			e2.side = hxd.clipper._Clipper.EdgeSide.Left;
			e = e2;
			if(e.prevInAEL == e1) {
				prevE = e1.prevInAEL;
			} else {
				prevE = e.prevInAEL;
			}
		}
		let tmp;
		if(prevE != null && prevE.outIdx >= 0) {
			let currentY = pt.y;
			let tmp1;
			if(currentY == prevE.topY) {
				tmp1 = prevE.topX;
			} else {
				let value = prevE.dx * (currentY - prevE.botY);
				tmp1 = prevE.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			let currentY1 = pt.y;
			let tmp2;
			if(currentY1 == e.topY) {
				tmp2 = e.topX;
			} else {
				let value = e.dx * (currentY1 - e.botY);
				tmp2 = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			tmp = tmp1 == tmp2;
		} else {
			tmp = false;
		}
		if(tmp && e.deltaY * prevE.deltaX == e.deltaX * prevE.deltaY && e.windDelta != 0 && prevE.windDelta != 0) {
			let out = this.AddOutPt(prevE,pt);
			this.AddJoin(result,out,new h2d.col.IPoint(e.topX,e.topY));
		}
		return result;
	}
	CreateOutRec() {
		let result = new hxd.clipper._Clipper.OutRec();
		result.idx = -1;
		result.isHole = false;
		result.firstLeft = null;
		result.pts = null;
		result.bottomPt = null;
		result.polyNode = null;
		this.m_PolyOuts.push(result);
		result.idx = this.m_PolyOuts.length - 1;
		return result;
	}
	AddOutPt(e,pt) {
		let ToFront = e.side == hxd.clipper._Clipper.EdgeSide.Left;
		if(e.outIdx < 0) {
			let outRec = this.CreateOutRec();
			let op = new hxd.clipper._Clipper.OutPt();
			outRec.pts = op;
			op.idx = outRec.idx;
			op.pt = new h2d.col.IPoint(pt.x,pt.y);
			op.next = op;
			op.prev = op;
			this.SetHoleState(e,outRec);
			e.outIdx = outRec.idx;
			return op;
		} else {
			let outRec = this.m_PolyOuts[e.outIdx];
			let op = outRec.pts;
			let tmp;
			if(ToFront) {
				let pt2 = op.pt;
				tmp = pt.x == pt2.x && pt.y == pt2.y;
			} else {
				tmp = false;
			}
			if(tmp) {
				return op;
			} else {
				let tmp;
				if(!ToFront) {
					let pt2 = op.prev.pt;
					tmp = pt.x == pt2.x && pt.y == pt2.y;
				} else {
					tmp = false;
				}
				if(tmp) {
					return op.prev;
				}
			}
			let op2 = new hxd.clipper._Clipper.OutPt();
			op2.idx = outRec.idx;
			op2.pt = new h2d.col.IPoint(pt.x,pt.y);
			op2.next = op;
			op2.prev = op.prev;
			op2.prev.next = op2;
			op.prev = op2;
			if(ToFront) {
				outRec.pts = op2;
			}
			return op2;
		}
	}
	HorzSegmentsOverlap(seg1a,seg1b,seg2a,seg2b) {
		if(seg1a > seg1b) {
			let tmp = seg1a;
			seg1a = seg1b;
			seg1b = tmp;
		}
		if(seg2a > seg2b) {
			let tmp = seg2a;
			seg2a = seg2b;
			seg2b = tmp;
		}
		if(seg1a < seg2b) {
			return seg2a < seg1b;
		} else {
			return false;
		}
	}
	SetHoleState(e,outRec) {
		let isHole = false;
		let e2 = e.prevInAEL;
		while(e2 != null) {
			if(e2.outIdx >= 0 && e2.windDelta != 0) {
				isHole = !isHole;
				if(outRec.firstLeft == null) {
					outRec.firstLeft = this.m_PolyOuts[e2.outIdx];
				}
			}
			e2 = e2.prevInAEL;
		}
		if(isHole) {
			outRec.isHole = true;
		}
	}
	GetDx(pt1,pt2) {
		if(pt1.y == pt2.y) {
			return -9007199254740992.;
		} else {
			return (pt2.x - pt1.x) / (pt2.y - pt1.y);
		}
	}
	FirstIsBottomPt(btmPt1,btmPt2) {
		let p = btmPt1.prev;
		while(true) {
			let pt1 = p.pt;
			let pt2 = btmPt1.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt1)) {
				break;
			}
			p = p.prev;
		}
		let f = this.GetDx(btmPt1.pt,p.pt);
		let dx1p = f < 0 ? -f : f;
		p = btmPt1.next;
		while(true) {
			let pt1 = p.pt;
			let pt2 = btmPt1.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt1)) {
				break;
			}
			p = p.next;
		}
		let f1 = this.GetDx(btmPt1.pt,p.pt);
		let dx1n = f1 < 0 ? -f1 : f1;
		p = btmPt2.prev;
		while(true) {
			let pt1 = p.pt;
			let pt2 = btmPt2.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt2)) {
				break;
			}
			p = p.prev;
		}
		let f2 = this.GetDx(btmPt2.pt,p.pt);
		let dx2p = f2 < 0 ? -f2 : f2;
		p = btmPt2.next;
		while(true) {
			let pt1 = p.pt;
			let pt2 = btmPt2.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt2)) {
				break;
			}
			p = p.next;
		}
		let f3 = this.GetDx(btmPt2.pt,p.pt);
		let dx2n = f3 < 0 ? -f3 : f3;
		if(!(dx1p >= dx2p && dx1p >= dx2n)) {
			if(dx1n >= dx2p) {
				return dx1n >= dx2n;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	GetBottomPt(pp) {
		let dups = null;
		let p = pp.next;
		while(p != pp) {
			if(p.pt.y > pp.pt.y) {
				pp = p;
				dups = null;
			} else if(p.pt.y == pp.pt.y && p.pt.x <= pp.pt.x) {
				if(p.pt.x < pp.pt.x) {
					dups = null;
					pp = p;
				} else if(p.next != pp && p.prev != pp) {
					dups = p;
				}
			}
			p = p.next;
		}
		if(dups != null) {
			let n = 0;
			while(dups != p) {
				if(!this.FirstIsBottomPt(p,dups)) {
					pp = dups;
				}
				dups = dups.next;
				while(true) {
					let pt1 = dups.pt;
					let pt2 = pp.pt;
					if(pt1.x == pt2.x && pt1.y == pt2.y) {
						break;
					}
					dups = dups.next;
				}
			}
		}
		return pp;
	}
	GetLowermostRec(outRec1,outRec2) {
		if(outRec1.bottomPt == null) {
			outRec1.bottomPt = this.GetBottomPt(outRec1.pts);
		}
		if(outRec2.bottomPt == null) {
			outRec2.bottomPt = this.GetBottomPt(outRec2.pts);
		}
		let bPt1 = outRec1.bottomPt;
		let bPt2 = outRec2.bottomPt;
		if(bPt1.pt.y > bPt2.pt.y) {
			return outRec1;
		} else if(bPt1.pt.y < bPt2.pt.y) {
			return outRec2;
		} else if(bPt1.pt.x < bPt2.pt.x) {
			return outRec1;
		} else if(bPt1.pt.x > bPt2.pt.x) {
			return outRec2;
		} else if(bPt1.next == bPt1) {
			return outRec2;
		} else if(bPt2.next == bPt2) {
			return outRec1;
		} else if(this.FirstIsBottomPt(bPt1,bPt2)) {
			return outRec1;
		} else {
			return outRec2;
		}
	}
	Param1RightOfParam2(outRec1,outRec2) {
		do {
			outRec1 = outRec1.firstLeft;
			if(outRec1 == outRec2) {
				return true;
			}
		} while(outRec1 != null);
		return false;
	}
	GetOutRec(idx) {
		let outrec = this.m_PolyOuts[idx];
		while(outrec != this.m_PolyOuts[outrec.idx]) outrec = this.m_PolyOuts[outrec.idx];
		return outrec;
	}
	AppendPolygon(e1,e2) {
		let outRec1 = this.m_PolyOuts[e1.outIdx];
		let outRec2 = this.m_PolyOuts[e2.outIdx];
		let holeStateRec;
		if(this.Param1RightOfParam2(outRec1,outRec2)) {
			holeStateRec = outRec2;
		} else if(this.Param1RightOfParam2(outRec2,outRec1)) {
			holeStateRec = outRec1;
		} else {
			holeStateRec = this.GetLowermostRec(outRec1,outRec2);
		}
		let p1_lft = outRec1.pts;
		let p1_rt = p1_lft.prev;
		let p2_lft = outRec2.pts;
		let p2_rt = p2_lft.prev;
		let side;
		if(e1.side == hxd.clipper._Clipper.EdgeSide.Left) {
			if(e2.side == hxd.clipper._Clipper.EdgeSide.Left) {
				this.ReversePolyPtLinks(p2_lft);
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				outRec1.pts = p2_rt;
			} else {
				p2_rt.next = p1_lft;
				p1_lft.prev = p2_rt;
				p2_lft.prev = p1_rt;
				p1_rt.next = p2_lft;
				outRec1.pts = p2_lft;
			}
			side = hxd.clipper._Clipper.EdgeSide.Left;
		} else {
			if(e2.side == hxd.clipper._Clipper.EdgeSide.Right) {
				this.ReversePolyPtLinks(p2_lft);
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
			} else {
				p1_rt.next = p2_lft;
				p2_lft.prev = p1_rt;
				p1_lft.prev = p2_rt;
				p2_rt.next = p1_lft;
			}
			side = hxd.clipper._Clipper.EdgeSide.Right;
		}
		outRec1.bottomPt = null;
		if(holeStateRec == outRec2) {
			if(outRec2.firstLeft != outRec1) {
				outRec1.firstLeft = outRec2.firstLeft;
			}
			outRec1.isHole = outRec2.isHole;
		}
		outRec2.pts = null;
		outRec2.bottomPt = null;
		outRec2.firstLeft = outRec1;
		let OKIdx = e1.outIdx;
		let ObsoleteIdx = e2.outIdx;
		e1.outIdx = -1;
		e2.outIdx = -1;
		let e = this.m_ActiveEdges;
		while(e != null) {
			if(e.outIdx == ObsoleteIdx) {
				e.outIdx = OKIdx;
				e.side = side;
				break;
			}
			e = e.nextInAEL;
		}
		outRec2.idx = outRec1.idx;
	}
	ReversePolyPtLinks(pp) {
		if(pp == null) {
			return;
		}
		let pp2;
		let pp1 = pp;
		do {
			pp2 = pp1.next;
			pp1.next = pp1.prev;
			pp1.prev = pp2;
			pp1 = pp2;
		} while(pp1 != pp);
	}
	SwapSides(edge1,edge2) {
		let side = edge1.side;
		edge1.side = edge2.side;
		edge2.side = side;
	}
	SwapPolyIndexes(edge1,edge2) {
		let outIdx = edge1.outIdx;
		edge1.outIdx = edge2.outIdx;
		edge2.outIdx = outIdx;
	}
	IntersectEdges(e1,e2,pt) {
		let e1Contributing = e1.outIdx >= 0;
		let e2Contributing = e2.outIdx >= 0;
		if(e1.polyType == e2.polyType) {
			if(e1.polyType == hxd.clipper.PolyType.Subject ? this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd : this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd) {
				let oldE1WindCnt = e1.windCnt;
				e1.windCnt = e2.windCnt;
				e2.windCnt = oldE1WindCnt;
			} else {
				if(e1.windCnt + e2.windDelta == 0) {
					e1.windCnt = -e1.windCnt;
				} else {
					e1.windCnt += e2.windDelta;
				}
				if(e2.windCnt - e1.windDelta == 0) {
					e2.windCnt = -e2.windCnt;
				} else {
					e2.windCnt -= e1.windDelta;
				}
			}
		} else {
			if(!(e2.polyType == hxd.clipper.PolyType.Subject ? this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd : this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd)) {
				e1.windCnt2 += e2.windDelta;
			} else {
				e1.windCnt2 = e1.windCnt2 == 0 ? 1 : 0;
			}
			if(!(e1.polyType == hxd.clipper.PolyType.Subject ? this.m_SubjFillType == hxd.clipper.PolyFillType.EvenOdd : this.m_ClipFillType == hxd.clipper.PolyFillType.EvenOdd)) {
				e2.windCnt2 -= e1.windDelta;
			} else {
				e2.windCnt2 = e2.windCnt2 == 0 ? 1 : 0;
			}
		}
		let e1FillType;
		let e2FillType;
		let e1FillType2;
		let e2FillType2;
		if(e1.polyType == hxd.clipper.PolyType.Subject) {
			e1FillType = this.m_SubjFillType;
			e1FillType2 = this.m_ClipFillType;
		} else {
			e1FillType = this.m_ClipFillType;
			e1FillType2 = this.m_SubjFillType;
		}
		if(e2.polyType == hxd.clipper.PolyType.Subject) {
			e2FillType = this.m_SubjFillType;
			e2FillType2 = this.m_ClipFillType;
		} else {
			e2FillType = this.m_ClipFillType;
			e2FillType2 = this.m_SubjFillType;
		}
		let e1Wc;
		let e2Wc;
		switch(e1FillType._hx_index) {
		case 2:
			e1Wc = e1.windCnt;
			break;
		case 3:
			e1Wc = -e1.windCnt;
			break;
		default:
			let i = e1.windCnt;
			e1Wc = i < 0 ? -i : i;
		}
		switch(e2FillType._hx_index) {
		case 2:
			e2Wc = e2.windCnt;
			break;
		case 3:
			e2Wc = -e2.windCnt;
			break;
		default:
			let i1 = e2.windCnt;
			e2Wc = i1 < 0 ? -i1 : i1;
		}
		if(e1Contributing && e2Contributing) {
			if(e1Wc != 0 && e1Wc != 1 || e2Wc != 0 && e2Wc != 1 || e1.polyType != e2.polyType && this.m_ClipType != hxd.clipper.ClipType.Xor) {
				this.AddLocalMaxPoly(e1,e2,pt);
			} else {
				this.AddOutPt(e1,pt);
				this.AddOutPt(e2,pt);
				let side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if(e1Contributing) {
			if(e2Wc == 0 || e2Wc == 1) {
				this.AddOutPt(e1,pt);
				let side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if(e2Contributing) {
			if(e1Wc == 0 || e1Wc == 1) {
				this.AddOutPt(e2,pt);
				let side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if((e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1)) {
			let e1Wc2;
			let e2Wc2;
			switch(e1FillType2._hx_index) {
			case 2:
				e1Wc2 = e1.windCnt2;
				break;
			case 3:
				e1Wc2 = -e1.windCnt2;
				break;
			default:
				let i = e1.windCnt2;
				e1Wc2 = i < 0 ? -i : i;
			}
			switch(e2FillType2._hx_index) {
			case 2:
				e2Wc2 = e2.windCnt2;
				break;
			case 3:
				e2Wc2 = -e2.windCnt2;
				break;
			default:
				let i1 = e2.windCnt2;
				e2Wc2 = i1 < 0 ? -i1 : i1;
			}
			if(e1.polyType != e2.polyType) {
				this.AddLocalMinPoly(e1,e2,pt);
			} else if(e1Wc == 1 && e2Wc == 1) {
				switch(this.m_ClipType._hx_index) {
				case 0:
					if(e1Wc2 > 0 && e2Wc2 > 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 1:
					if(e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 2:
					if(e1.polyType == hxd.clipper.PolyType.Clip && e1Wc2 > 0 && e2Wc2 > 0 || e1.polyType == hxd.clipper.PolyType.Subject && e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 3:
					this.AddLocalMinPoly(e1,e2,pt);
					break;
				}
			} else {
				let side = e1.side;
				e1.side = e2.side;
				e2.side = side;
			}
		}
	}
	DeleteFromAEL(e) {
		let AelPrev = e.prevInAEL;
		let AelNext = e.nextInAEL;
		if(AelPrev == null && AelNext == null && e != this.m_ActiveEdges) {
			return;
		}
		if(AelPrev != null) {
			AelPrev.nextInAEL = AelNext;
		} else {
			this.m_ActiveEdges = AelNext;
		}
		if(AelNext != null) {
			AelNext.prevInAEL = AelPrev;
		}
		e.nextInAEL = null;
		e.prevInAEL = null;
	}
	DeleteFromSEL(e) {
		let SelPrev = e.prevInSEL;
		let SelNext = e.nextInSEL;
		if(SelPrev == null && SelNext == null && e != this.m_SortedEdges) {
			return;
		}
		if(SelPrev != null) {
			SelPrev.nextInSEL = SelNext;
		} else {
			this.m_SortedEdges = SelNext;
		}
		if(SelNext != null) {
			SelNext.prevInSEL = SelPrev;
		}
		e.nextInSEL = null;
		e.prevInSEL = null;
	}
	UpdateEdgeIntoAEL(e) {
		if(e.nextInLML == null) {
			throw haxe.Exception.thrown("UpdateEdgeIntoAEL: invalid call");
		}
		let AelPrev = e.prevInAEL;
		let AelNext = e.nextInAEL;
		e.nextInLML.outIdx = e.outIdx;
		if(AelPrev != null) {
			AelPrev.nextInAEL = e.nextInLML;
		} else {
			this.m_ActiveEdges = e.nextInLML;
		}
		if(AelNext != null) {
			AelNext.prevInAEL = e.nextInLML;
		}
		e.nextInLML.side = e.side;
		e.nextInLML.windDelta = e.windDelta;
		e.nextInLML.windCnt = e.windCnt;
		e.nextInLML.windCnt2 = e.windCnt2;
		e = e.nextInLML;
		e.currX = e.botX;
		e.currY = e.botY;
		e.prevInAEL = AelPrev;
		e.nextInAEL = AelNext;
		if(e.deltaY != 0) {
			this.InsertScanbeam(e.topY);
		}
		return e;
	}
	GetHorzDirection(HorzEdge) {
		if(HorzEdge.botX < HorzEdge.topX) {
			return { left : HorzEdge.botX, right : HorzEdge.topX, dir : hxd.clipper._Clipper.Direction.LeftToRight};
		} else {
			return { left : HorzEdge.topX, right : HorzEdge.botX, dir : hxd.clipper._Clipper.Direction.RightToLeft};
		}
	}
	ProcessHorizontals(isTopOfScanbeam) {
		let horzEdge = this.m_SortedEdges;
		while(horzEdge != null) {
			this.DeleteFromSEL(horzEdge);
			this.ProcessHorizontal(horzEdge,isTopOfScanbeam);
			horzEdge = this.m_SortedEdges;
		}
	}
	ProcessHorizontal(horzEdge,isTopOfScanbeam) {
		let res = this.GetHorzDirection(horzEdge);
		let dir = res.dir;
		let horzLeft = res.left;
		let horzRight = res.right;
		let eLastHorz = horzEdge;
		let eMaxPair = null;
		while(eLastHorz.nextInLML != null && eLastHorz.nextInLML.deltaY == 0) eLastHorz = eLastHorz.nextInLML;
		if(eLastHorz.nextInLML == null) {
			eMaxPair = this.GetMaximaPair(eLastHorz);
		}
		while(true) {
			let IsLastHorz = horzEdge == eLastHorz;
			let e = dir == hxd.clipper._Clipper.Direction.LeftToRight ? horzEdge.nextInAEL : horzEdge.prevInAEL;
			while(e != null) {
				if(e.currX == horzEdge.topX && horzEdge.nextInLML != null && e.dx < horzEdge.nextInLML.dx) {
					break;
				}
				let eNext = dir == hxd.clipper._Clipper.Direction.LeftToRight ? e.nextInAEL : e.prevInAEL;
				if(dir == hxd.clipper._Clipper.Direction.LeftToRight && e.currX <= horzRight || dir == hxd.clipper._Clipper.Direction.RightToLeft && e.currX >= horzLeft) {
					if(e == eMaxPair && IsLastHorz) {
						if(horzEdge.outIdx >= 0) {
							let op1 = this.AddOutPt(horzEdge,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
							let eNextHorz = this.m_SortedEdges;
							while(eNextHorz != null) {
								if(eNextHorz.outIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.botX,horzEdge.topX,eNextHorz.botX,eNextHorz.topX)) {
									let op2 = this.AddOutPt(eNextHorz,new h2d.col.IPoint(eNextHorz.botX,eNextHorz.botY));
									this.AddJoin(op2,op1,new h2d.col.IPoint(eNextHorz.topX,eNextHorz.topY));
								}
								eNextHorz = eNextHorz.nextInSEL;
							}
							this.AddGhostJoin(op1,new h2d.col.IPoint(horzEdge.botX,horzEdge.botY));
							this.AddLocalMaxPoly(horzEdge,eMaxPair,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
						}
						this.DeleteFromAEL(horzEdge);
						this.DeleteFromAEL(eMaxPair);
						return;
					} else if(dir == hxd.clipper._Clipper.Direction.LeftToRight) {
						let Pt = new h2d.col.IPoint(e.currX,horzEdge.currY);
						this.IntersectEdges(horzEdge,e,Pt);
					} else {
						let Pt = new h2d.col.IPoint(e.currX,horzEdge.currY);
						this.IntersectEdges(e,horzEdge,Pt);
					}
					this.SwapPositionsInAEL(horzEdge,e);
				} else if(dir == hxd.clipper._Clipper.Direction.LeftToRight && e.currX >= horzRight || dir == hxd.clipper._Clipper.Direction.RightToLeft && e.currX <= horzLeft) {
					break;
				}
				e = eNext;
			}
			if(horzEdge.nextInLML != null && horzEdge.nextInLML.deltaY == 0) {
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
				if(horzEdge.outIdx >= 0) {
					this.AddOutPt(horzEdge,new h2d.col.IPoint(horzEdge.botX,horzEdge.botY));
				}
				let out = this.GetHorzDirection(horzEdge);
				dir = out.dir;
				horzLeft = out.left;
				horzRight = out.right;
			} else {
				break;
			}
		}
		if(horzEdge.nextInLML != null) {
			if(horzEdge.outIdx >= 0) {
				let op1 = this.AddOutPt(horzEdge,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
				if(isTopOfScanbeam) {
					this.AddGhostJoin(op1,new h2d.col.IPoint(horzEdge.botX,horzEdge.botY));
				}
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
				if(horzEdge.windDelta == 0) {
					return;
				}
				let ePrev = horzEdge.prevInAEL;
				let eNext = horzEdge.nextInAEL;
				if(ePrev != null && ePrev.currX == horzEdge.botX && ePrev.currY == horzEdge.botY && ePrev.windDelta != 0 && (ePrev.outIdx >= 0 && ePrev.currY > ePrev.topY && horzEdge.deltaY * ePrev.deltaX == horzEdge.deltaX * ePrev.deltaY)) {
					let op2 = this.AddOutPt(ePrev,new h2d.col.IPoint(horzEdge.botX,horzEdge.botY));
					this.AddJoin(op1,op2,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
				} else if(eNext != null && eNext.currX == horzEdge.botX && eNext.currY == horzEdge.botY && eNext.windDelta != 0 && eNext.outIdx >= 0 && eNext.currY > eNext.topY && horzEdge.deltaY * eNext.deltaX == horzEdge.deltaX * eNext.deltaY) {
					let op2 = this.AddOutPt(eNext,new h2d.col.IPoint(horzEdge.botX,horzEdge.botY));
					this.AddJoin(op1,op2,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
				}
			} else {
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
			}
		} else {
			if(horzEdge.outIdx >= 0) {
				this.AddOutPt(horzEdge,new h2d.col.IPoint(horzEdge.topX,horzEdge.topY));
			}
			this.DeleteFromAEL(horzEdge);
		}
	}
	GetNextInAEL(e,dir) {
		if(dir == hxd.clipper._Clipper.Direction.LeftToRight) {
			return e.nextInAEL;
		} else {
			return e.prevInAEL;
		}
	}
	IsMinima(e) {
		if(e != null && e.prev.nextInLML != e) {
			return e.next.nextInLML != e;
		} else {
			return false;
		}
	}
	IsMaxima(e,y) {
		if(e != null && e.topY == y) {
			return e.nextInLML == null;
		} else {
			return false;
		}
	}
	IsIntermediate(e,y) {
		if(e.topY == y) {
			return e.nextInLML != null;
		} else {
			return false;
		}
	}
	GetMaximaPair(e) {
		let result = null;
		if(e.next.topX == e.topX && e.next.topY == e.topY && e.next.nextInLML == null) {
			result = e.next;
		} else if(e.prev.topX == e.topX && e.prev.topY == e.topY && e.prev.nextInLML == null) {
			result = e.prev;
		}
		if(result != null && (result.outIdx == -2 || result.nextInAEL == result.prevInAEL && result.deltaY != 0)) {
			return null;
		}
		return result;
	}
	ProcessIntersections(topY) {
		if(this.m_ActiveEdges == null) {
			return true;
		}
		this.BuildIntersectList(topY);
		if(this.m_IntersectList.length == 0) {
			return true;
		}
		if(this.m_IntersectList.length == 1 || this.FixupIntersectionOrder()) {
			this.ProcessIntersectList();
		} else {
			return false;
		}
		this.m_SortedEdges = null;
		return true;
	}
	BuildIntersectList(topY) {
		if(this.m_ActiveEdges == null) {
			return;
		}
		let e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			let tmp;
			if(topY == e.topY) {
				tmp = e.topX;
			} else {
				let value = e.dx * (topY - e.botY);
				tmp = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			e.currX = tmp;
			e = e.nextInAEL;
		}
		let isModified = true;
		while(isModified && this.m_SortedEdges != null) {
			isModified = false;
			e = this.m_SortedEdges;
			while(e.nextInSEL != null) {
				let eNext = e.nextInSEL;
				let pt;
				if(e.currX > eNext.currX) {
					let ipx;
					let ipy;
					let b1;
					let b2;
					if(e.dx == eNext.dx) {
						ipy = e.currY;
						if(ipy == e.topY) {
							ipx = e.topX;
						} else {
							let value = e.dx * (ipy - e.botY);
							ipx = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
						}
						pt = new h2d.col.IPoint(ipx,ipy);
					} else {
						if(e.deltaX == 0) {
							ipx = e.botX;
							if(eNext.deltaY == 0) {
								ipy = eNext.botY;
							} else {
								b2 = eNext.botY - eNext.botX / eNext.dx;
								let value = ipx / eNext.dx + b2;
								ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
							}
						} else if(eNext.deltaX == 0) {
							ipx = eNext.botX;
							if(e.deltaY == 0) {
								ipy = e.botY;
							} else {
								b1 = e.botY - e.botX / e.dx;
								let value = ipx / e.dx + b1;
								ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
							}
						} else {
							b1 = e.botX - e.botY * e.dx;
							b2 = eNext.botX - eNext.botY * eNext.dx;
							let q = (b2 - b1) / (e.dx - eNext.dx);
							ipy = q < 0 ? q - 0.5 | 0 : q + 0.5 | 0;
							let f = e.dx;
							let f1 = eNext.dx;
							if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
								let value = e.dx * q + b1;
								ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
							} else {
								let value = eNext.dx * q + b2;
								ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
							}
						}
						if(ipy < e.topY || ipy < eNext.topY) {
							if(e.topY > eNext.topY) {
								ipy = e.topY;
							} else {
								ipy = eNext.topY;
							}
							let f = e.dx;
							let f1 = eNext.dx;
							if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
								if(ipy == e.topY) {
									ipx = e.topX;
								} else {
									let value = e.dx * (ipy - e.botY);
									ipx = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
								}
							} else if(ipy == eNext.topY) {
								ipx = eNext.topX;
							} else {
								let value = eNext.dx * (ipy - eNext.botY);
								ipx = eNext.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
							}
						}
						if(ipy > e.currY) {
							ipy = e.currY;
							let f = e.dx;
							let f1 = eNext.dx;
							if((f < 0 ? -f : f) > (f1 < 0 ? -f1 : f1)) {
								if(ipy == eNext.topY) {
									ipx = eNext.topX;
								} else {
									let value = eNext.dx * (ipy - eNext.botY);
									ipx = eNext.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
								}
							} else if(ipy == e.topY) {
								ipx = e.topX;
							} else {
								let value = e.dx * (ipy - e.botY);
								ipx = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
							}
						}
						pt = new h2d.col.IPoint(ipx,ipy);
					}
					let newNode = new hxd.clipper._Clipper.IntersectNode();
					newNode.edge1 = e;
					newNode.edge2 = eNext;
					newNode.pt = pt;
					this.m_IntersectList.push(newNode);
					this.SwapPositionsInSEL(e,eNext);
					isModified = true;
				} else {
					e = eNext;
				}
			}
			if(e.prevInSEL != null) {
				e.prevInSEL.nextInSEL = null;
			} else {
				break;
			}
		}
		this.m_SortedEdges = null;
	}
	EdgesAdjacent(inode) {
		if(inode.edge1.nextInSEL != inode.edge2) {
			return inode.edge1.prevInSEL == inode.edge2;
		} else {
			return true;
		}
	}
	IntersectNodeSort(node1,node2) {
		return node2.pt.y - node1.pt.y | 0;
	}
	FixupIntersectionOrder() {
		this.m_IntersectList.sort(hxd.clipper.Clipper.compareY);
		let e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
		let cnt = this.m_IntersectList.length;
		let _g = 0;
		let _g1 = cnt;
		while(_g < _g1) {
			let i = _g++;
			let inode = this.m_IntersectList[i];
			if(!(inode.edge1.nextInSEL == inode.edge2 || inode.edge1.prevInSEL == inode.edge2)) {
				let j = i + 1;
				while(true) {
					let tmp;
					if(j < cnt) {
						let inode = this.m_IntersectList[j];
						tmp = !(inode.edge1.nextInSEL == inode.edge2 || inode.edge1.prevInSEL == inode.edge2);
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					++j;
				}
				if(j == cnt) {
					return false;
				}
				let tmp = this.m_IntersectList[i];
				this.m_IntersectList[i] = this.m_IntersectList[j];
				this.m_IntersectList[j] = tmp;
			}
			this.SwapPositionsInSEL(this.m_IntersectList[i].edge1,this.m_IntersectList[i].edge2);
		}
		return true;
	}
	ProcessIntersectList() {
		let _g = 0;
		let _g1 = this.m_IntersectList.length;
		while(_g < _g1) {
			let i = _g++;
			let iNode = this.m_IntersectList[i];
			this.IntersectEdges(iNode.edge1,iNode.edge2,iNode.pt);
			this.SwapPositionsInAEL(iNode.edge1,iNode.edge2);
		}
		this.m_IntersectList = [];
	}
	Round(value) {
		if(value < 0) {
			return value - 0.5 | 0;
		} else {
			return value + 0.5 | 0;
		}
	}
	TopX(edge,currentY) {
		if(currentY == edge.topY) {
			return edge.topX;
		}
		let value = edge.dx * (currentY - edge.botY);
		return edge.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
	}
	IntersectPoint(edge1,edge2) {
		let ipx;
		let ipy;
		let b1;
		let b2;
		if(edge1.dx == edge2.dx) {
			ipy = edge1.currY;
			if(ipy == edge1.topY) {
				ipx = edge1.topX;
			} else {
				let value = edge1.dx * (ipy - edge1.botY);
				ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			return new h2d.col.IPoint(ipx,ipy);
		}
		if(edge1.deltaX == 0) {
			ipx = edge1.botX;
			if(edge2.deltaY == 0) {
				ipy = edge2.botY;
			} else {
				b2 = edge2.botY - edge2.botX / edge2.dx;
				let value = ipx / edge2.dx + b2;
				ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		} else if(edge2.deltaX == 0) {
			ipx = edge2.botX;
			if(edge1.deltaY == 0) {
				ipy = edge1.botY;
			} else {
				b1 = edge1.botY - edge1.botX / edge1.dx;
				let value = ipx / edge1.dx + b1;
				ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		} else {
			b1 = edge1.botX - edge1.botY * edge1.dx;
			b2 = edge2.botX - edge2.botY * edge2.dx;
			let q = (b2 - b1) / (edge1.dx - edge2.dx);
			ipy = q < 0 ? q - 0.5 | 0 : q + 0.5 | 0;
			let f = edge1.dx;
			let f1 = edge2.dx;
			if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
				let value = edge1.dx * q + b1;
				ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			} else {
				let value = edge2.dx * q + b2;
				ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		}
		if(ipy < edge1.topY || ipy < edge2.topY) {
			if(edge1.topY > edge2.topY) {
				ipy = edge1.topY;
			} else {
				ipy = edge2.topY;
			}
			let f = edge1.dx;
			let f1 = edge2.dx;
			if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
				if(ipy == edge1.topY) {
					ipx = edge1.topX;
				} else {
					let value = edge1.dx * (ipy - edge1.botY);
					ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
			} else if(ipy == edge2.topY) {
				ipx = edge2.topX;
			} else {
				let value = edge2.dx * (ipy - edge2.botY);
				ipx = edge2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
		}
		if(ipy > edge1.currY) {
			ipy = edge1.currY;
			let f = edge1.dx;
			let f1 = edge2.dx;
			if((f < 0 ? -f : f) > (f1 < 0 ? -f1 : f1)) {
				if(ipy == edge2.topY) {
					ipx = edge2.topX;
				} else {
					let value = edge2.dx * (ipy - edge2.botY);
					ipx = edge2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
			} else if(ipy == edge1.topY) {
				ipx = edge1.topX;
			} else {
				let value = edge1.dx * (ipy - edge1.botY);
				ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
		}
		return new h2d.col.IPoint(ipx,ipy);
	}
	ProcessEdgesAtTopOfScanbeam(topY) {
		let e = this.m_ActiveEdges;
		while(e != null) {
			let IsMaximaEdge = e != null && e.topY == topY && e.nextInLML == null;
			if(IsMaximaEdge) {
				let eMaxPair = this.GetMaximaPair(e);
				IsMaximaEdge = eMaxPair == null || eMaxPair.deltaY != 0;
			}
			if(IsMaximaEdge) {
				let ePrev = e.prevInAEL;
				this.DoMaxima(e);
				if(ePrev == null) {
					e = this.m_ActiveEdges;
				} else {
					e = ePrev.nextInAEL;
				}
			} else {
				if(e.topY == topY && e.nextInLML != null && e.nextInLML.deltaY == 0) {
					e = this.UpdateEdgeIntoAEL(e);
					if(e.outIdx >= 0) {
						this.AddOutPt(e,new h2d.col.IPoint(e.botX,e.botY));
					}
					this.AddEdgeToSEL(e);
				} else {
					let tmp;
					if(topY == e.topY) {
						tmp = e.topX;
					} else {
						let value = e.dx * (topY - e.botY);
						tmp = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
					}
					e.currX = tmp;
					e.currY = topY;
				}
				if(this.strictlySimple) {
					let ePrev = e.prevInAEL;
					if(e.outIdx >= 0 && e.windDelta != 0 && ePrev != null && ePrev.outIdx >= 0 && ePrev.currX == e.currX && ePrev.windDelta != 0) {
						let ip = new h2d.col.IPoint(e.currX,e.currY);
						let op = this.AddOutPt(ePrev,ip);
						let op2 = this.AddOutPt(e,ip);
						this.AddJoin(op,op2,ip);
					}
				}
				e = e.nextInAEL;
			}
		}
		this.ProcessHorizontals(true);
		e = this.m_ActiveEdges;
		while(e != null) {
			if(e.topY == topY && e.nextInLML != null) {
				let op = null;
				if(e.outIdx >= 0) {
					op = this.AddOutPt(e,new h2d.col.IPoint(e.topX,e.topY));
				}
				e = this.UpdateEdgeIntoAEL(e);
				let ePrev = e.prevInAEL;
				let eNext = e.nextInAEL;
				if(ePrev != null && ePrev.currX == e.botX && ePrev.currY == e.botY && op != null && ePrev.outIdx >= 0 && ePrev.currY > ePrev.topY && e.deltaY * ePrev.deltaX == e.deltaX * ePrev.deltaY && e.windDelta != 0 && ePrev.windDelta != 0) {
					let op2 = this.AddOutPt(ePrev,new h2d.col.IPoint(e.botX,e.botY));
					this.AddJoin(op,op2,new h2d.col.IPoint(e.topX,e.topY));
				} else if(eNext != null && eNext.currX == e.botX && eNext.currY == e.botY && op != null && eNext.outIdx >= 0 && eNext.currY > eNext.topY && e.deltaY * eNext.deltaX == e.deltaX * eNext.deltaY && e.windDelta != 0 && eNext.windDelta != 0) {
					let op2 = this.AddOutPt(eNext,new h2d.col.IPoint(e.botX,e.botY));
					this.AddJoin(op,op2,new h2d.col.IPoint(e.topX,e.topY));
				}
			}
			e = e.nextInAEL;
		}
	}
	DoMaxima(e) {
		let eMaxPair = this.GetMaximaPair(e);
		if(eMaxPair == null) {
			if(e.outIdx >= 0) {
				this.AddOutPt(e,new h2d.col.IPoint(e.topX,e.topY));
			}
			this.DeleteFromAEL(e);
			return;
		}
		let eNext = e.nextInAEL;
		while(eNext != null && eNext != eMaxPair) {
			this.IntersectEdges(e,eNext,new h2d.col.IPoint(e.topX,e.topY));
			this.SwapPositionsInAEL(e,eNext);
			eNext = e.nextInAEL;
		}
		if(e.outIdx == -1 && eMaxPair.outIdx == -1) {
			this.DeleteFromAEL(e);
			this.DeleteFromAEL(eMaxPair);
		} else if(e.outIdx >= 0 && eMaxPair.outIdx >= 0) {
			if(e.outIdx >= 0) {
				this.AddLocalMaxPoly(e,eMaxPair,new h2d.col.IPoint(e.topX,e.topY));
			}
			this.DeleteFromAEL(e);
			this.DeleteFromAEL(eMaxPair);
		} else {
			throw haxe.Exception.thrown("DoMaxima error");
		}
	}
	reversePolygons(polys) {
		let _g_i = 0;
		let _g_a = polys;
		let _g_l = _g_a.length;
		while(_g_i < _g_l) {
			let p = _g_a[_g_i++];
			h2d.col.IPolygon.reverse(p);
		}
	}
	PointCount(pts) {
		if(pts == null) {
			return 0;
		}
		let result = 0;
		let p = pts;
		do {
			++result;
			p = p.next;
		} while(p != pts);
		return result;
	}
	BuildResult() {
		let solution = [];
		let _g = 0;
		let _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			let outRec = _g1[_g];
			++_g;
			if(outRec.pts == null) {
				continue;
			}
			if(this.resultKind == hxd.clipper.ResultKind.NoHoles && outRec.isHole) {
				continue;
			}
			if(this.resultKind == hxd.clipper.ResultKind.HolesOnly && !outRec.isHole) {
				continue;
			}
			let p = outRec.pts.prev;
			let cnt = this.PointCount(p);
			if(cnt < 2) {
				continue;
			}
			let points = null;
			let pg = points == null ? [] : points;
			let _g2 = 0;
			let _g3 = cnt;
			while(_g2 < _g3) {
				let j = _g2++;
				pg.push(p.pt);
				p = p.prev;
			}
			solution.push(pg);
		}
		return solution;
	}
	BuildResult2(polytree) {
		polytree.clear();
		let _g = 0;
		let _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			let outRec = _g1[_g];
			++_g;
			let cnt = this.PointCount(outRec.pts);
			if(cnt < 3) {
				continue;
			}
			this.FixHoleLinkage(outRec);
			let pn = new hxd.clipper._Clipper.PolyNode();
			polytree.allPolys.push(pn);
			outRec.polyNode = pn;
			let op = outRec.pts.prev;
			let _g2 = 0;
			let _g3 = cnt;
			while(_g2 < _g3) {
				let j = _g2++;
				pn.polygon.push(op.pt);
				op = op.prev;
			}
		}
		let _g2 = 0;
		let _g3 = this.m_PolyOuts;
		while(_g2 < _g3.length) {
			let outRec = _g3[_g2];
			++_g2;
			if(outRec.polyNode == null) {
				continue;
			} else if(outRec.firstLeft != null && outRec.firstLeft.polyNode != null) {
				outRec.firstLeft.polyNode.addChild(outRec.polyNode);
			} else {
				polytree.addChild(outRec.polyNode);
			}
		}
	}
	FixupOutPolygon(outRec) {
		let lastOK = null;
		outRec.bottomPt = null;
		let pp = outRec.pts;
		while(true) {
			if(pp.prev == pp || pp.prev == pp.next) {
				outRec.pts = null;
				return;
			}
			let tmp;
			let tmp1;
			let pt1 = pp.pt;
			let pt2 = pp.next.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y)) {
				let pt1 = pp.pt;
				let pt2 = pp.prev.pt;
				tmp1 = pt1.x == pt2.x && pt1.y == pt2.y;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				let pt1 = pp.prev.pt;
				let pt2 = pp.pt;
				let pt3 = pp.next.pt;
				tmp = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) == 0 && (!this.preserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.prev.pt,pp.pt,pp.next.pt));
			} else {
				tmp = true;
			}
			if(tmp) {
				lastOK = null;
				let tmp = pp;
				pp.prev.next = pp.next;
				pp.next.prev = pp.prev;
				pp = pp.prev;
				tmp = null;
			} else if(pp == lastOK) {
				break;
			} else {
				if(lastOK == null) {
					lastOK = pp;
				}
				pp = pp.next;
			}
		}
		outRec.pts = pp;
	}
	DupOutPt(outPt,InsertAfter) {
		let result = new hxd.clipper._Clipper.OutPt();
		result.pt = outPt.pt;
		result.idx = outPt.idx;
		if(InsertAfter) {
			result.next = outPt.next;
			result.prev = outPt;
			outPt.next.prev = result;
			outPt.next = result;
		} else {
			result.prev = outPt.prev;
			result.next = outPt;
			outPt.prev.next = result;
			outPt.prev = result;
		}
		return result;
	}
	GetOverlap(a1,a2,b1,b2) {
		let Left;
		let Right;
		if(a1 < a2) {
			if(b1 < b2) {
				Left = a1 < b1 ? b1 : a1;
				Right = a2 > b2 ? b2 : a2;
			} else {
				Left = a1 < b2 ? b2 : a1;
				Right = a2 > b1 ? b1 : a2;
			}
		} else if(b1 < b2) {
			Left = a2 < b1 ? b1 : a2;
			Right = a1 > b2 ? b2 : a1;
		} else {
			Left = a2 < b2 ? b2 : a2;
			Right = a1 > b1 ? b1 : a1;
		}
		return { left : Left, right : Right, done : Left < Right};
	}
	JoinHorz(op1,op1b,op2,op2b,pt,DiscardLeft) {
		let Dir1 = op1.pt.x > op1b.pt.x ? hxd.clipper._Clipper.Direction.RightToLeft : hxd.clipper._Clipper.Direction.LeftToRight;
		let Dir2 = op2.pt.x > op2b.pt.x ? hxd.clipper._Clipper.Direction.RightToLeft : hxd.clipper._Clipper.Direction.LeftToRight;
		if(Dir1 == Dir2) {
			return false;
		}
		if(Dir1 == hxd.clipper._Clipper.Direction.LeftToRight) {
			while(op1.next.pt.x <= pt.x && op1.next.pt.x >= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(DiscardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.DupOutPt(op1,!DiscardLeft);
			if(op1b.pt != pt) {
				op1 = op1b;
				op1.pt = pt;
				op1b = this.DupOutPt(op1,!DiscardLeft);
			}
		} else {
			while(op1.next.pt.x >= pt.x && op1.next.pt.x <= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(!DiscardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.DupOutPt(op1,DiscardLeft);
			if(op1b.pt != pt) {
				op1 = op1b;
				op1.pt = pt;
				op1b = this.DupOutPt(op1,DiscardLeft);
			}
		}
		if(Dir2 == hxd.clipper._Clipper.Direction.LeftToRight) {
			while(op2.next.pt.x <= pt.x && op2.next.pt.x >= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(DiscardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.DupOutPt(op2,!DiscardLeft);
			if(op2b.pt != pt) {
				op2 = op2b;
				op2.pt = pt;
				op2b = this.DupOutPt(op2,!DiscardLeft);
			}
		} else {
			while(op2.next.pt.x >= pt.x && op2.next.pt.x <= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(!DiscardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.DupOutPt(op2,DiscardLeft);
			if(op2b.pt != pt) {
				op2 = op2b;
				op2.pt = pt;
				op2b = this.DupOutPt(op2,DiscardLeft);
			}
		}
		if(Dir1 == hxd.clipper._Clipper.Direction.LeftToRight == DiscardLeft) {
			op1.prev = op2;
			op2.next = op1;
			op1b.next = op2b;
			op2b.prev = op1b;
		} else {
			op1.next = op2;
			op2.prev = op1;
			op1b.prev = op2b;
			op2b.next = op1b;
		}
		return true;
	}
	JoinPoints(j,outRec1,outRec2) {
		let op1 = j.outPt1;
		let op1b;
		let op2 = j.outPt2;
		let op2b;
		let isHorizontal = j.outPt1.pt.y == j.offPt.y;
		let tmp;
		let tmp1;
		if(isHorizontal) {
			let pt1 = j.offPt;
			let pt2 = j.outPt1.pt;
			tmp1 = pt1.x == pt2.x && pt1.y == pt2.y;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			let pt1 = j.offPt;
			let pt2 = j.outPt2.pt;
			tmp = pt1.x == pt2.x && pt1.y == pt2.y;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(outRec1 != outRec2) {
				return false;
			}
			op1b = j.outPt1.next;
			while(true) {
				let tmp;
				if(op1b != op1) {
					let pt1 = op1b.pt;
					let pt2 = j.offPt;
					tmp = pt1.x == pt2.x && pt1.y == pt2.y;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				op1b = op1b.next;
			}
			let reverse1 = op1b.pt.y > j.offPt.y;
			op2b = j.outPt2.next;
			while(true) {
				let tmp;
				if(op2b != op2) {
					let pt1 = op2b.pt;
					let pt2 = j.offPt;
					tmp = pt1.x == pt2.x && pt1.y == pt2.y;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				op2b = op2b.next;
			}
			let reverse2 = op2b.pt.y > j.offPt.y;
			if(reverse1 == reverse2) {
				return false;
			}
			if(reverse1) {
				op1b = this.DupOutPt(op1,false);
				op2b = this.DupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.DupOutPt(op1,true);
				op2b = this.DupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		} else if(isHorizontal) {
			op1b = op1;
			while(op1.prev.pt.y == op1.pt.y && op1.prev != op1b && op1.prev != op2) op1 = op1.prev;
			while(op1b.next.pt.y == op1b.pt.y && op1b.next != op1 && op1b.next != op2) op1b = op1b.next;
			if(op1b.next == op1 || op1b.next == op2) {
				return false;
			}
			op2b = op2;
			while(op2.prev.pt.y == op2.pt.y && op2.prev != op2b && op2.prev != op1b) op2 = op2.prev;
			while(op2b.next.pt.y == op2b.pt.y && op2b.next != op2 && op2b.next != op1) op2b = op2b.next;
			if(op2b.next == op2 || op2b.next == op1) {
				return false;
			}
			let out = this.GetOverlap(op1.pt.x,op1b.pt.x,op2.pt.x,op2b.pt.x);
			if(!out.done) {
				return false;
			}
			let Left = out.left;
			let Right = out.right;
			let Pt;
			let DiscardLeftSide;
			if(op1.pt.x >= Left && op1.pt.x <= Right) {
				Pt = op1.pt;
				DiscardLeftSide = op1.pt.x > op1b.pt.x;
			} else if(op2.pt.x >= Left && op2.pt.x <= Right) {
				Pt = op2.pt;
				DiscardLeftSide = op2.pt.x > op2b.pt.x;
			} else if(op1b.pt.x >= Left && op1b.pt.x <= Right) {
				Pt = op1b.pt;
				DiscardLeftSide = op1b.pt.x > op1.pt.x;
			} else {
				Pt = op2b.pt;
				DiscardLeftSide = op2b.pt.x > op2.pt.x;
			}
			j.outPt1 = op1;
			j.outPt2 = op2;
			return this.JoinHorz(op1,op1b,op2,op2b,Pt,DiscardLeftSide);
		} else {
			op1b = op1.next;
			while(true) {
				let pt1 = op1b.pt;
				let pt2 = op1.pt;
				if(!(pt1.x == pt2.x && pt1.y == pt2.y && op1b != op1)) {
					break;
				}
				op1b = op1b.next;
			}
			let Reverse1;
			if(op1b.pt.y <= op1.pt.y) {
				let pt1 = op1.pt;
				let pt2 = op1b.pt;
				let pt3 = j.offPt;
				Reverse1 = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
			} else {
				Reverse1 = true;
			}
			if(Reverse1) {
				op1b = op1.prev;
				while(true) {
					let pt1 = op1b.pt;
					let pt2 = op1.pt;
					if(!(pt1.x == pt2.x && pt1.y == pt2.y && op1b != op1)) {
						break;
					}
					op1b = op1b.prev;
				}
				let tmp;
				if(op1b.pt.y <= op1.pt.y) {
					let pt1 = op1.pt;
					let pt2 = op1b.pt;
					let pt3 = j.offPt;
					tmp = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
				} else {
					tmp = true;
				}
				if(tmp) {
					return false;
				}
			}
			op2b = op2.next;
			while(true) {
				let pt1 = op2b.pt;
				let pt2 = op2.pt;
				if(!(pt1.x == pt2.x && pt1.y == pt2.y && op2b != op2)) {
					break;
				}
				op2b = op2b.next;
			}
			let Reverse2;
			if(op2b.pt.y <= op2.pt.y) {
				let pt1 = op2.pt;
				let pt2 = op2b.pt;
				let pt3 = j.offPt;
				Reverse2 = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
			} else {
				Reverse2 = true;
			}
			if(Reverse2) {
				op2b = op2.prev;
				while(true) {
					let pt1 = op2b.pt;
					let pt2 = op2.pt;
					if(!(pt1.x == pt2.x && pt1.y == pt2.y && op2b != op2)) {
						break;
					}
					op2b = op2b.prev;
				}
				let tmp;
				if(op2b.pt.y <= op2.pt.y) {
					let pt1 = op2.pt;
					let pt2 = op2b.pt;
					let pt3 = j.offPt;
					tmp = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
				} else {
					tmp = true;
				}
				if(tmp) {
					return false;
				}
			}
			if(op1b == op1 || op2b == op2 || op1b == op2b || outRec1 == outRec2 && Reverse1 == Reverse2) {
				return false;
			}
			if(Reverse1) {
				op1b = this.DupOutPt(op1,false);
				op2b = this.DupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.DupOutPt(op1,true);
				op2b = this.DupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		}
	}
	PointInPolygon(pt,pol) {
		let result = 0;
		let cnt = pol.length;
		if(cnt < 3) {
			return 0;
		}
		let ip = pol[0];
		let _g = 1;
		let _g1 = cnt + 1;
		while(_g < _g1) {
			let i = _g++;
			let ipNext = i == cnt ? pol[0] : pol[i];
			if(ipNext.y == pt.y) {
				if(ipNext.x == pt.x || ip.y == pt.y && ipNext.x > pt.x == ip.x < pt.x) {
					return -1;
				}
			}
			if(ip.y < pt.y != ipNext.y < pt.y) {
				if(ip.x >= pt.x) {
					if(ipNext.x > pt.x) {
						result = 1 - result;
					} else {
						let d = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
						if(d == 0) {
							return -1;
						} else if(d > 0 == ipNext.y > ip.y) {
							result = 1 - result;
						}
					}
				} else if(ipNext.x > pt.x) {
					let d = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
					if(d == 0) {
						return -1;
					} else if(d > 0 == ipNext.y > ip.y) {
						result = 1 - result;
					}
				}
			}
			ip = ipNext;
		}
		return result;
	}
	PointInPolygon2(pt,op) {
		let result = 0;
		let startOp = op;
		let ptx = pt.x;
		let pty = pt.y;
		let poly0x = op.pt.x;
		let poly0y = op.pt.y;
		do {
			op = op.next;
			let poly1x = op.pt.x;
			let poly1y = op.pt.y;
			if(poly1y == pty) {
				if(poly1x == ptx || poly0y == pty && poly1x > ptx == poly0x < ptx) {
					return -1;
				}
			}
			if(poly0y < pty != poly1y < pty) {
				if(poly0x >= ptx) {
					if(poly1x > ptx) {
						result = 1 - result;
					} else {
						let d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
						if(d == 0) {
							return -1;
						}
						if(d > 0 == poly1y > poly0y) {
							result = 1 - result;
						}
					}
				} else if(poly1x > ptx) {
					let d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
					if(d == 0) {
						return -1;
					}
					if(d > 0 == poly1y > poly0y) {
						result = 1 - result;
					}
				}
			}
			poly0x = poly1x;
			poly0y = poly1y;
		} while(startOp != op);
		return result;
	}
	Poly2ContainsPoly1(outPt1,outPt2) {
		let op = outPt1;
		do {
			let res = this.PointInPolygon2(op.pt,outPt2);
			if(res >= 0) {
				return res > 0;
			}
			op = op.next;
		} while(op != outPt1);
		return true;
	}
	FixupFirstLefts1(OldOutRec,NewOutRec) {
		let _g = 0;
		let _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			let outRec = _g1[_g];
			++_g;
			if(outRec.pts == null || outRec.firstLeft == null) {
				continue;
			}
			let firstLeft = this.ParseFirstLeft(outRec.firstLeft);
			if(firstLeft == OldOutRec) {
				if(this.Poly2ContainsPoly1(outRec.pts,NewOutRec.pts)) {
					outRec.firstLeft = NewOutRec;
				}
			}
		}
	}
	FixupFirstLefts2(OldOutRec,NewOutRec) {
		let _g = 0;
		let _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			let outRec = _g1[_g];
			++_g;
			if(outRec.firstLeft == OldOutRec) {
				outRec.firstLeft = NewOutRec;
			}
		}
	}
	ParseFirstLeft(FirstLeft) {
		while(FirstLeft != null && FirstLeft.pts == null) FirstLeft = FirstLeft.firstLeft;
		return FirstLeft;
	}
	JoinCommonEdges() {
		let _g = 0;
		let _g1 = this.m_Joins.length;
		while(_g < _g1) {
			let i = _g++;
			let join = this.m_Joins[i];
			let outRec1 = this.GetOutRec(join.outPt1.idx);
			let outRec2 = this.GetOutRec(join.outPt2.idx);
			if(outRec1.pts == null || outRec2.pts == null) {
				continue;
			}
			let holeStateRec;
			if(outRec1 == outRec2) {
				holeStateRec = outRec1;
			} else if(this.Param1RightOfParam2(outRec1,outRec2)) {
				holeStateRec = outRec2;
			} else if(this.Param1RightOfParam2(outRec2,outRec1)) {
				holeStateRec = outRec1;
			} else {
				holeStateRec = this.GetLowermostRec(outRec1,outRec2);
			}
			if(!this.JoinPoints(join,outRec1,outRec2)) {
				continue;
			}
			if(outRec1 == outRec2) {
				outRec1.pts = join.outPt1;
				outRec1.bottomPt = null;
				outRec2 = this.CreateOutRec();
				outRec2.pts = join.outPt2;
				this.UpdateOutPtIdxs(outRec2);
				if(this.m_UsingPolyTree) {
					let _g = 0;
					let _g1 = this.m_PolyOuts.length - 1;
					while(_g < _g1) {
						let j = _g++;
						let oRec = this.m_PolyOuts[j];
						if(oRec.pts == null || this.ParseFirstLeft(oRec.firstLeft) != outRec1 || oRec.isHole == outRec1.isHole) {
							continue;
						}
						if(this.Poly2ContainsPoly1(oRec.pts,join.outPt2)) {
							oRec.firstLeft = outRec2;
						}
					}
				}
				if(this.Poly2ContainsPoly1(outRec2.pts,outRec1.pts)) {
					outRec2.isHole = !outRec1.isHole;
					outRec2.firstLeft = outRec1;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts2(outRec2,outRec1);
					}
					let b = this.reverseSolution;
					if((outRec2.isHole ? !b : b) == this.Area(outRec2) > 0) {
						this.ReversePolyPtLinks(outRec2.pts);
					}
				} else if(this.Poly2ContainsPoly1(outRec1.pts,outRec2.pts)) {
					outRec2.isHole = outRec1.isHole;
					outRec1.isHole = !outRec2.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					outRec1.firstLeft = outRec2;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts2(outRec1,outRec2);
					}
					let b = this.reverseSolution;
					if((outRec1.isHole ? !b : b) == this.Area(outRec1) > 0) {
						this.ReversePolyPtLinks(outRec1.pts);
					}
				} else {
					outRec2.isHole = outRec1.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts1(outRec1,outRec2);
					}
				}
			} else {
				outRec2.pts = null;
				outRec2.bottomPt = null;
				outRec2.idx = outRec1.idx;
				outRec1.isHole = holeStateRec.isHole;
				if(holeStateRec == outRec2) {
					outRec1.firstLeft = outRec2.firstLeft;
				}
				outRec2.firstLeft = outRec1;
				if(this.m_UsingPolyTree) {
					this.FixupFirstLefts2(outRec2,outRec1);
				}
			}
		}
	}
	UpdateOutPtIdxs(outrec) {
		let op = outrec.pts;
		do {
			op.idx = outrec.idx;
			op = op.prev;
		} while(op != outrec.pts);
	}
	DoSimplePolygons() {
		let i = 0;
		while(i < this.m_PolyOuts.length) {
			let outrec = this.m_PolyOuts[i++];
			let op = outrec.pts;
			if(op == null) {
				continue;
			}
			do {
				let op2 = op.next;
				while(op2 != outrec.pts) {
					let pt1 = op.pt;
					let pt2 = op2.pt;
					if(pt1.x == pt2.x && pt1.y == pt2.y && op2.next != op && op2.prev != op) {
						let op3 = op.prev;
						let op4 = op2.prev;
						op.prev = op4;
						op4.next = op;
						op2.prev = op3;
						op3.next = op2;
						outrec.pts = op;
						let outrec2 = this.CreateOutRec();
						outrec2.pts = op2;
						this.UpdateOutPtIdxs(outrec2);
						if(this.Poly2ContainsPoly1(outrec2.pts,outrec.pts)) {
							outrec2.isHole = !outrec.isHole;
							outrec2.firstLeft = outrec;
						} else if(this.Poly2ContainsPoly1(outrec.pts,outrec2.pts)) {
							outrec2.isHole = outrec.isHole;
							outrec.isHole = !outrec2.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							outrec.firstLeft = outrec2;
						} else {
							outrec2.isHole = outrec.isHole;
							outrec2.firstLeft = outrec.firstLeft;
						}
						op2 = op;
					}
					op2 = op2.next;
				}
				op = op.next;
			} while(op != outrec.pts);
		}
	}
	Area(outRec) {
		let op = outRec.pts;
		if(op == null) {
			return 0.;
		}
		let a = 0;
		do {
			a += (op.pt.x + op.prev.pt.x) * (op.prev.pt.y - op.pt.y);
			op = op.next;
		} while(op != outRec.pts);
		return a / 2;
	}
	DistanceFromLineSqrd(pt,ln1,ln2) {
		let A = ln1.y - ln2.y;
		let B = ln2.x - ln1.x;
		let C = A * ln1.x + B * ln1.y;
		C = A * pt.x + B * pt.y - C;
		return C * C / (A * A + B * B);
	}
	SlopesNearCollinear(pt1,pt2,pt3,distSqrd) {
		let f = pt1.x - pt2.x;
		let f1 = pt1.y - pt2.y;
		if((f < 0 ? -f : f) > (f1 < 0 ? -f1 : f1)) {
			if(pt1.x > pt2.x == pt1.x < pt3.x) {
				return this.DistanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
			} else if(pt2.x > pt1.x == pt2.x < pt3.x) {
				return this.DistanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
			} else {
				return this.DistanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
			}
		} else if(pt1.y > pt2.y == pt1.y < pt3.y) {
			return this.DistanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
		} else if(pt2.y > pt1.y == pt2.y < pt3.y) {
			return this.DistanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
		} else {
			return this.DistanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
		}
	}
	PointsAreClose(pt1,pt2,distSqrd) {
		let dx = pt1.x - pt2.x;
		let dy = pt1.y - pt2.y;
		return dx * dx + dy * dy <= distSqrd;
	}
	ExcludeOp(op) {
		let result = op.prev;
		result.next = op.next;
		op.next.prev = result;
		result.idx = 0;
		return result;
	}
	CleanPolygon(path,distance) {
		if(distance == null) {
			distance = 1.415;
		}
		let cnt = path.length;
		if(cnt == 0) {
			let points = null;
			return points == null ? [] : points;
		}
		let outPts = [];
		let _g = 0;
		let _g1 = cnt;
		while(_g < _g1) {
			let i = _g++;
			outPts[i] = new hxd.clipper._Clipper.OutPt();
			outPts[i].pt = path[i];
			outPts[i].next = outPts[(i + 1) % cnt];
			outPts[i].next.prev = outPts[i];
			outPts[i].idx = 0;
		}
		let distSqrd = distance * distance;
		let op = outPts[0];
		while(op.idx == 0 && op.next != op.prev) if(this.PointsAreClose(op.pt,op.prev.pt,distSqrd)) {
			op = this.ExcludeOp(op);
			--cnt;
		} else if(this.PointsAreClose(op.prev.pt,op.next.pt,distSqrd)) {
			this.ExcludeOp(op.next);
			op = this.ExcludeOp(op);
			cnt -= 2;
		} else if(this.SlopesNearCollinear(op.prev.pt,op.pt,op.next.pt,distSqrd)) {
			op = this.ExcludeOp(op);
			--cnt;
		} else {
			op.idx = 1;
			op = op.next;
		}
		if(cnt < 3) {
			cnt = 0;
		}
		let points = null;
		let result = points == null ? [] : points;
		let _g2 = 0;
		let _g3 = cnt;
		while(_g2 < _g3) {
			let i = _g2++;
			result.push(op.pt);
			op = op.next;
		}
		outPts = null;
		return result;
	}
	CleanPolygons(polys,distance) {
		if(distance == null) {
			distance = 1.415;
		}
		let polygons = null;
		let result = polygons == null ? [] : polygons;
		let _g = 0;
		let _g1 = polys.length;
		while(_g < _g1) {
			let i = _g++;
			result.push(this.CleanPolygon(polys[i],distance));
		}
		return result;
	}
	Minkowski(pattern,path,IsSum) {
		let polyCnt = pattern.length;
		let pathCnt = path.length;
		let polygons = null;
		let result = polygons == null ? [] : polygons;
		let _g = 0;
		let _g1 = pathCnt;
		while(_g < _g1) {
			let i = _g++;
			let points = null;
			let p = points == null ? [] : points;
			let _g_i = 0;
			let _g_a = pattern;
			let _g_l = _g_a.length;
			while(_g_i < _g_l) {
				let ip = _g_a[_g_i++];
				if(IsSum) {
					p.push(new h2d.col.IPoint(path[i].x + ip.x,path[i].y + ip.y));
				} else {
					p.push(new h2d.col.IPoint(path[i].x - ip.x,path[i].y - ip.y));
				}
			}
			result.push(p);
		}
		let polygons1 = null;
		let quads = polygons1 == null ? [] : polygons1;
		let _g2 = 0;
		let _g3 = pathCnt;
		while(_g2 < _g3) {
			let i = _g2++;
			let _g = 0;
			let _g1 = polyCnt;
			while(_g < _g1) {
				let j = _g++;
				let points = null;
				let quad = points == null ? [] : points;
				quad.push(result[i % pathCnt][j % polyCnt]);
				quad.push(result[(i + 1) % pathCnt][j % polyCnt]);
				quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);
				quad.push(result[i % pathCnt][(j + 1) % polyCnt]);
				if(!(hxd.clipper.Clipper.polArea(quad) >= 0)) {
					h2d.col.IPolygon.reverse(quad);
				}
				quads.push(quad);
			}
		}
		return quads;
	}
	MinkowskiSum(pattern,pol,kind) {
		let paths = this.Minkowski(pattern,pol,true);
		let c = new hxd.clipper.Clipper();
		c.resultKind = kind == null ? hxd.clipper.ResultKind.All : kind;
		c.addPolygons(paths,hxd.clipper.PolyType.Subject);
		return c.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	TranslatePath(path,delta) {
		let points = null;
		let outPath = points == null ? [] : points;
		let _g = 0;
		let _g1 = path.length;
		while(_g < _g1) {
			let i = _g++;
			outPath.push(new h2d.col.IPoint(path[i].x + delta.x,path[i].y + delta.y));
		}
		return outPath;
	}
	PolyTreeToPaths(polytree) {
		let polygons = null;
		let result = polygons == null ? [] : polygons;
		this.AddPolyNodeToPaths(polytree,hxd.clipper.NodeType.Any,result);
		return result;
	}
	AddPolyNodeToPaths(polynode,nt,paths) {
		let match = true;
		if(nt._hx_index == 1) {
			return;
		}
		if(polynode.polygon.length > 0 && match) {
			paths.push(polynode.polygon);
		}
		let _g = 0;
		let _g1 = polynode.childs;
		while(_g < _g1.length) {
			let pn = _g1[_g];
			++_g;
			this.AddPolyNodeToPaths(pn,nt,paths);
		}
	}
	static compareY(n1,n2) {
		if(n2.pt.y - n1.pt.y >= 0) {
			return 1;
		} else {
			return -1;
		}
	}
	static Orientation(poly) {
		return hxd.clipper.Clipper.polArea(poly) >= 0;
	}
	static polArea(poly) {
		let cnt = poly.length;
		if(cnt < 3) {
			return 0.;
		}
		let a = 0.;
		let j = cnt - 1;
		let _g = 0;
		let _g1 = cnt;
		while(_g < _g1) {
			let i = _g++;
			a += (poly[j].x + poly[i].x) * (poly[j].y - poly[i].y);
			j = i;
		}
		return -a * 0.5;
	}
	static SimplifyPolygon(poly,fillType) {
		if(fillType == null) {
			fillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		let c = new hxd.clipper.Clipper();
		c.strictlySimple = true;
		c.addPolygon(poly,hxd.clipper.PolyType.Subject);
		return c.execute(hxd.clipper.ClipType.Union,fillType,fillType);
	}
	static SimplifyPolygons(polys,fillType) {
		if(fillType == null) {
			fillType = hxd.clipper.PolyFillType.EvenOdd;
		}
		let c = new hxd.clipper.Clipper();
		c.strictlySimple = true;
		c.addPolygons(polys,hxd.clipper.PolyType.Subject);
		return c.execute(hxd.clipper.ClipType.Union,fillType,fillType);
	}
	static MinkowskiSums(pattern,pols,kind) {
		let c = new hxd.clipper.Clipper();
		c.resultKind = kind == null ? hxd.clipper.ResultKind.All : kind;
		let _g = 0;
		let _g1 = pols.length;
		while(_g < _g1) {
			let i = _g++;
			let tmp = c.Minkowski(pattern,pols[i],true);
			c.addPolygons(tmp,hxd.clipper.PolyType.Subject);
			let path = c.TranslatePath(pols[i],pattern[0]);
			c.addPolygon(path,hxd.clipper.PolyType.Clip);
		}
		return c.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
	static MinkowskiDiff(pattern,pol,kind) {
		let c = new hxd.clipper.Clipper();
		let paths = c.Minkowski(pattern,pol,false);
		c.resultKind = kind == null ? hxd.clipper.ResultKind.All : kind;
		c.addPolygons(paths,hxd.clipper.PolyType.Subject);
		return c.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.NonZero);
	}
}
$hxClasses["hxd.clipper.Clipper"] = hxd.clipper.Clipper;
hxd.clipper.Clipper.__name__ = "hxd.clipper.Clipper";
hxd.clipper.Clipper.__super__ = hxd.clipper._Clipper.ClipperBase;
Object.assign(hxd.clipper.Clipper.prototype, {
	__class__: hxd.clipper.Clipper
});
hxd.clipper.ClipperOffset = class hxd_clipper_ClipperOffset {
	constructor(miterLimit,arcTolerance) {
		if(arcTolerance == null) {
			arcTolerance = 0.25;
		}
		if(miterLimit == null) {
			miterLimit = 2.0;
		}
		this.two_pi = 6.28318530717958623;
		this.def_arc_tolerance = 0.25;
		this.MiterLimit = miterLimit;
		this.ArcTolerance = arcTolerance;
		this.m_lowest = new h2d.col.IPoint(-1,0);
		this.m_normals = [];
		this.m_polyNodes = new hxd.clipper._Clipper.PolyNode();
		this.resultKind = hxd.clipper.ResultKind.All;
	}
	clear() {
		this.m_polyNodes = new hxd.clipper._Clipper.PolyNode();
		this.m_lowest = new h2d.col.IPoint(-1,0);
	}
	addPolygon(pol,joinType,endType) {
		let highI = pol.length - 1;
		if(highI < 0) {
			return;
		}
		let newNode = new hxd.clipper._Clipper.PolyNode();
		newNode.jointype = joinType;
		newNode.endtype = endType;
		if(endType == hxd.clipper.EndType.ClosedLine || endType == hxd.clipper.EndType.ClosedPol) {
			while(highI > 0 && pol[0] == pol[highI]) --highI;
		}
		newNode.polygon.push(pol[0]);
		let j = 0;
		let k = 0;
		let _g = 1;
		let _g1 = highI + 1;
		while(_g < _g1) {
			let i = _g++;
			if(newNode.polygon[j] != pol[i]) {
				++j;
				newNode.polygon.push(pol[i]);
				if(pol[i].y > newNode.polygon[k].y || pol[i].y == newNode.polygon[k].y && pol[i].x < newNode.polygon[k].x) {
					k = j;
				}
			}
		}
		if(endType == hxd.clipper.EndType.ClosedPol && j < 2) {
			return;
		}
		this.m_polyNodes.addChild(newNode);
		if(endType != hxd.clipper.EndType.ClosedPol) {
			return;
		}
		if(this.m_lowest.x < 0) {
			this.m_lowest = new h2d.col.IPoint(this.m_polyNodes.childs.length - 1,k);
		} else {
			let ip = this.m_polyNodes.childs[this.m_lowest.x].polygon[this.m_lowest.y];
			if(newNode.polygon[k].y > ip.y || newNode.polygon[k].y == ip.y && newNode.polygon[k].x < ip.x) {
				this.m_lowest = new h2d.col.IPoint(this.m_polyNodes.childs.length - 1,k);
			}
		}
	}
	addPolygons(pols,joinType,endType) {
		let _g_i = 0;
		let _g_a = pols;
		let _g_l = _g_a.length;
		while(_g_i < _g_l) {
			let p = _g_a[_g_i++];
			this.addPolygon(p,joinType,endType);
		}
	}
	fixOrientations() {
		if(this.m_lowest.x >= 0 && !(hxd.clipper.Clipper.polArea(this.m_polyNodes.childs[this.m_lowest.x].polygon) >= 0)) {
			let _g = 0;
			let _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				let node = _g1[_g];
				++_g;
				if(node.endtype == hxd.clipper.EndType.ClosedPol || node.endtype == hxd.clipper.EndType.ClosedLine && hxd.clipper.Clipper.polArea(node.polygon) >= 0) {
					h2d.col.IPolygon.reverse(node.polygon);
				}
			}
		} else {
			let _g = 0;
			let _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				let node = _g1[_g];
				++_g;
				if(node.endtype == hxd.clipper.EndType.ClosedLine && !(hxd.clipper.Clipper.polArea(node.polygon) >= 0)) {
					h2d.col.IPolygon.reverse(node.polygon);
				}
			}
		}
	}
	getUnitNormal(pt1,pt2) {
		let dx = pt2.x - pt1.x;
		let dy = pt2.y - pt1.y;
		if(dx == 0 && dy == 0) {
			return new h2d.col.PointImpl(0.,0.);
		}
		let dz = 0.;
		if(dz == null) {
			dz = 0.;
		}
		let f = 1 / Math.sqrt(dx * dx + dy * dy + dz * dz);
		dx *= f;
		let x = dy *= f;
		let y = -dx;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d.col.PointImpl(x,y);
	}
	doOffset(delta) {
		let polygons = null;
		this.m_destPolys = polygons == null ? [] : polygons;
		this.m_delta = delta;
		if(delta > -1e-20 && delta < 1E-20) {
			let _g = 0;
			let _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				let node = _g1[_g];
				++_g;
				if(node.endtype == hxd.clipper.EndType.ClosedPol) {
					this.m_destPolys.push(node.polygon);
				}
			}
			return;
		}
		if(this.MiterLimit > 2) {
			this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);
		} else {
			this.m_miterLim = 0.5;
		}
		let y;
		if(this.ArcTolerance <= 0.0) {
			y = this.def_arc_tolerance;
		} else if(this.ArcTolerance > (delta < 0 ? -delta : delta) * this.def_arc_tolerance) {
			y = (delta < 0 ? -delta : delta) * this.def_arc_tolerance;
		} else {
			y = this.ArcTolerance;
		}
		let steps = 3.14159265358979323 / Math.acos(1 - y / (delta < 0 ? -delta : delta)) | 0;
		this.m_sin = Math.sin(this.two_pi / steps);
		this.m_cos = Math.cos(this.two_pi / steps);
		this.m_StepsPerRad = steps / this.two_pi;
		if(delta < 0.) {
			this.m_sin = -this.m_sin;
		}
		let _g = 0;
		let _g1 = this.m_polyNodes.childs;
		while(_g < _g1.length) {
			let node = _g1[_g];
			++_g;
			this.m_srcPoly = node.polygon;
			let len = this.m_srcPoly.length;
			if(len == 0 || delta <= 0 && (len < 3 || node.endtype != hxd.clipper.EndType.ClosedPol)) {
				continue;
			}
			let points = null;
			this.m_destPoly = points == null ? [] : points;
			if(len == 1) {
				if(node.jointype == hxd.clipper.JoinType.Round) {
					let X = 1.;
					let Y = 0.;
					let _g = 1;
					let _g1 = steps + 1;
					while(_g < _g1) {
						let j = _g++;
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
						let X2 = X;
						X = X * this.m_cos - this.m_sin * Y;
						Y = X2 * this.m_sin + Y * this.m_cos;
					}
				} else {
					let X = -1.;
					let Y = -1.;
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
					if(X < 0) {
						X = 1;
					} else if(Y < 0) {
						Y = 1;
					} else {
						X = -1;
					}
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
					if(X < 0) {
						X = 1;
					} else if(Y < 0) {
						Y = 1;
					} else {
						X = -1;
					}
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
					if(X < 0) {
						X = 1;
					} else if(Y < 0) {
						Y = 1;
					} else {
						X = -1;
					}
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
					if(X < 0) {
						X = 1;
					} else if(Y < 0) {
						Y = 1;
					} else {
						X = -1;
					}
				}
				this.m_destPolys.push(this.m_destPoly);
				continue;
			}
			this.m_normals = [];
			let _g2 = 0;
			let _g3 = len - 1;
			while(_g2 < _g3) {
				let j = _g2++;
				this.m_normals.push(this.getUnitNormal(this.m_srcPoly[j],this.m_srcPoly[j + 1]));
			}
			if(node.endtype == hxd.clipper.EndType.ClosedLine || node.endtype == hxd.clipper.EndType.ClosedPol) {
				this.m_normals.push(this.getUnitNormal(this.m_srcPoly[len - 1],this.m_srcPoly[0]));
			} else {
				this.m_normals.push(this.m_normals[len - 2]);
			}
			if(node.endtype == hxd.clipper.EndType.ClosedPol) {
				let k = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let j = _g++;
					k = this.offsetPoint(j,k,node.jointype);
				}
				this.m_destPolys.push(this.m_destPoly);
			} else if(node.endtype == hxd.clipper.EndType.ClosedLine) {
				let k = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let j = _g++;
					k = this.offsetPoint(j,k,node.jointype);
				}
				this.m_destPolys.push(this.m_destPoly);
				let points = null;
				this.m_destPoly = points == null ? [] : points;
				let n = this.m_normals[len - 1];
				let j = len - 1;
				while(j > 0) {
					let x = -this.m_normals[j - 1].x;
					let y = -this.m_normals[j - 1].y;
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					this.m_normals[j] = new h2d.col.PointImpl(x,y);
					--j;
				}
				let x = -n.x;
				let y = -n.y;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				this.m_normals[0] = new h2d.col.PointImpl(x,y);
				k = 0;
				let j1 = len - 1;
				while(j1 > 0) {
					k = this.offsetPoint(j1,k,node.jointype);
					--j1;
				}
				this.m_destPolys.push(this.m_destPoly);
			} else {
				let k = 0;
				let _g = 1;
				let _g1 = len - 1;
				while(_g < _g1) {
					let j = _g++;
					k = this.offsetPoint(j,k,node.jointype);
				}
				let pt1;
				if(node.endtype == hxd.clipper.EndType.OpenButt) {
					let j = len - 1;
					pt1 = new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * delta));
					this.m_destPoly.push(pt1);
					pt1 = new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x - this.m_normals[j].x * delta),Math.round(this.m_srcPoly[j].y - this.m_normals[j].y * delta));
					this.m_destPoly.push(pt1);
				} else {
					let j = len - 1;
					k = len - 2;
					this.m_sinA = 0;
					let x = -this.m_normals[j].x;
					let y = -this.m_normals[j].y;
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					this.m_normals[j] = new h2d.col.PointImpl(x,y);
					if(node.endtype == hxd.clipper.EndType.OpenSquare) {
						let dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
					} else {
						let a = Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y);
						let a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
						let steps = a1 < 1 ? 1 : a1;
						let X = this.m_normals[k].x;
						let Y = this.m_normals[k].y;
						let X2;
						let _g = 0;
						let _g1 = steps;
						while(_g < _g1) {
							let i = _g++;
							this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + X * this.m_delta),Math.round(this.m_srcPoly[j].y + Y * this.m_delta)));
							X2 = X;
							X = X * this.m_cos - this.m_sin * Y;
							Y = X2 * this.m_sin + Y * this.m_cos;
						}
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta)));
					}
				}
				let j = len - 1;
				while(j > 0) {
					let x = -this.m_normals[j - 1].x;
					let y = -this.m_normals[j - 1].y;
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					this.m_normals[j] = new h2d.col.PointImpl(x,y);
					--j;
				}
				let x = -this.m_normals[1].x;
				let y = -this.m_normals[1].y;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				this.m_normals[0] = new h2d.col.PointImpl(x,y);
				k = len - 1;
				let j1 = k - 1;
				while(j1 > 0) {
					k = this.offsetPoint(j1,k,node.jointype);
					--j1;
				}
				if(node.endtype == hxd.clipper.EndType.OpenButt) {
					pt1 = new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x - this.m_normals[0].x * delta),Math.round(this.m_srcPoly[0].y - this.m_normals[0].y * delta));
					this.m_destPoly.push(pt1);
					pt1 = new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + this.m_normals[0].x * delta),Math.round(this.m_srcPoly[0].y + this.m_normals[0].y * delta));
					this.m_destPoly.push(pt1);
				} else {
					k = 1;
					this.m_sinA = 0;
					if(node.endtype == hxd.clipper.EndType.OpenSquare) {
						let dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[1].x * this.m_normals[0].x + this.m_normals[1].y * this.m_normals[0].y) * 0.25);
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + this.m_delta * (this.m_normals[1].x - this.m_normals[1].y * dx)),Math.round(this.m_srcPoly[0].y + this.m_delta * (this.m_normals[1].y + this.m_normals[1].x * dx))));
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + this.m_delta * (this.m_normals[0].x + this.m_normals[0].y * dx)),Math.round(this.m_srcPoly[0].y + this.m_delta * (this.m_normals[0].y - this.m_normals[0].x * dx))));
					} else {
						let a = Math.atan2(this.m_sinA,this.m_normals[1].x * this.m_normals[0].x + this.m_normals[1].y * this.m_normals[0].y);
						let a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
						let steps = a1 < 1 ? 1 : a1;
						let X = this.m_normals[1].x;
						let Y = this.m_normals[1].y;
						let X2;
						let _g = 0;
						let _g1 = steps;
						while(_g < _g1) {
							let i = _g++;
							this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + X * this.m_delta),Math.round(this.m_srcPoly[0].y + Y * this.m_delta)));
							X2 = X;
							X = X * this.m_cos - this.m_sin * Y;
							Y = X2 * this.m_sin + Y * this.m_cos;
						}
						this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[0].x + this.m_normals[0].x * this.m_delta),Math.round(this.m_srcPoly[0].y + this.m_normals[0].y * this.m_delta)));
					}
				}
				this.m_destPolys.push(this.m_destPoly);
			}
		}
	}
	execute(delta) {
		this.fixOrientations();
		this.doOffset(delta);
		let clpr = new hxd.clipper.Clipper();
		clpr.resultKind = this.resultKind;
		clpr.addPolygons(this.m_destPolys,hxd.clipper.PolyType.Subject);
		if(delta > 0) {
			return clpr.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.Positive,hxd.clipper.PolyFillType.Positive);
		} else {
			let r = hxd.clipper._Clipper.ClipperBase.getBounds(this.m_destPolys);
			let points = null;
			let outer = points == null ? [] : points;
			outer.push(new h2d.col.IPoint(r.left - 10,r.bottom + 10));
			outer.push(new h2d.col.IPoint(r.right + 10,r.bottom + 10));
			outer.push(new h2d.col.IPoint(r.right + 10,r.top - 10));
			outer.push(new h2d.col.IPoint(r.left - 10,r.top - 10));
			clpr.addPolygon(outer,hxd.clipper.PolyType.Subject);
			clpr.reverseSolution = true;
			let out = clpr.execute(hxd.clipper.ClipType.Union,hxd.clipper.PolyFillType.Negative,hxd.clipper.PolyFillType.Negative);
			if(out.length > 0) {
				out.shift();
			}
			return out;
		}
	}
	offsetPoint(j,k,jointype) {
		this.m_sinA = this.m_normals[k].x * this.m_normals[j].y - this.m_normals[j].x * this.m_normals[k].y;
		let f = this.m_sinA * this.m_delta;
		if((f < 0 ? -f : f) < 1.0) {
			let cosA = this.m_normals[k].x * this.m_normals[j].x + this.m_normals[j].y * this.m_normals[k].y;
			if(cosA > 0) {
				this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[k].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[k].y * this.m_delta)));
				return k;
			}
		} else if(this.m_sinA > 1.0) {
			this.m_sinA = 1.0;
		} else if(this.m_sinA < -1.0) {
			this.m_sinA = -1.0;
		}
		if(this.m_sinA * this.m_delta < 0) {
			let p1 = new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[k].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[k].y * this.m_delta));
			let p2 = new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta));
			this.m_destPoly.push(p1);
			let dx = p1.x - p2.x;
			let dy = p1.y - p2.y;
			if(dx * dx + dy * dy > 1) {
				this.m_destPoly.push(this.m_srcPoly[j]);
				this.m_destPoly.push(p2);
			}
		} else {
			switch(jointype._hx_index) {
			case 0:
				let dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
				this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
				this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
				break;
			case 1:
				let a = Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y);
				let a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
				let steps = a1 < 1 ? 1 : a1;
				let X = this.m_normals[k].x;
				let Y = this.m_normals[k].y;
				let X2;
				let _g = 0;
				let _g1 = steps;
				while(_g < _g1) {
					let i = _g++;
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + X * this.m_delta),Math.round(this.m_srcPoly[j].y + Y * this.m_delta)));
					X2 = X;
					X = X * this.m_cos - this.m_sin * Y;
					Y = X2 * this.m_sin + Y * this.m_cos;
				}
				this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta)));
				break;
			case 2:
				let r = 1 + (this.m_normals[j].x * this.m_normals[k].x + this.m_normals[j].y * this.m_normals[k].y);
				if(r >= this.m_miterLim) {
					let q = this.m_delta / r;
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + (this.m_normals[k].x + this.m_normals[j].x) * q),Math.round(this.m_srcPoly[j].y + (this.m_normals[k].y + this.m_normals[j].y) * q)));
				} else {
					let dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
					this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
				}
				break;
			}
		}
		return j;
	}
	doSquare(j,k) {
		let dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
		this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
		this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
	}
	doMiter(j,k,r) {
		let q = this.m_delta / r;
		this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + (this.m_normals[k].x + this.m_normals[j].x) * q),Math.round(this.m_srcPoly[j].y + (this.m_normals[k].y + this.m_normals[j].y) * q)));
	}
	doRound(j,k) {
		let a = Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y);
		let a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
		let steps = a1 < 1 ? 1 : a1;
		let X = this.m_normals[k].x;
		let Y = this.m_normals[k].y;
		let X2;
		let _g = 0;
		let _g1 = steps;
		while(_g < _g1) {
			let i = _g++;
			this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + X * this.m_delta),Math.round(this.m_srcPoly[j].y + Y * this.m_delta)));
			X2 = X;
			X = X * this.m_cos - this.m_sin * Y;
			Y = X2 * this.m_sin + Y * this.m_cos;
		}
		this.m_destPoly.push(new h2d.col.IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta)));
	}
}
$hxClasses["hxd.clipper.ClipperOffset"] = hxd.clipper.ClipperOffset;
hxd.clipper.ClipperOffset.__name__ = "hxd.clipper.ClipperOffset";
Object.assign(hxd.clipper.ClipperOffset.prototype, {
	__class__: hxd.clipper.ClipperOffset
});
hxd.clipper.EndType = $hxEnums["hxd.clipper.EndType"] = { __ename__:true,__constructs__:null
	,ClosedPol: {_hx_name:"ClosedPol",_hx_index:0,__enum__:"hxd.clipper.EndType",toString:$estr}
	,ClosedLine: {_hx_name:"ClosedLine",_hx_index:1,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenButt: {_hx_name:"OpenButt",_hx_index:2,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenSquare: {_hx_name:"OpenSquare",_hx_index:3,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenRound: {_hx_name:"OpenRound",_hx_index:4,__enum__:"hxd.clipper.EndType",toString:$estr}
};
hxd.clipper.EndType.__constructs__ = [hxd.clipper.EndType.ClosedPol,hxd.clipper.EndType.ClosedLine,hxd.clipper.EndType.OpenButt,hxd.clipper.EndType.OpenSquare,hxd.clipper.EndType.OpenRound];
hxd.clipper.EndType.__empty_constructs__ = [hxd.clipper.EndType.ClosedPol,hxd.clipper.EndType.ClosedLine,hxd.clipper.EndType.OpenButt,hxd.clipper.EndType.OpenSquare,hxd.clipper.EndType.OpenRound];
hxd.clipper.JoinType = $hxEnums["hxd.clipper.JoinType"] = { __ename__:true,__constructs__:null
	,Square: {_hx_name:"Square",_hx_index:0,__enum__:"hxd.clipper.JoinType",toString:$estr}
	,Round: {_hx_name:"Round",_hx_index:1,__enum__:"hxd.clipper.JoinType",toString:$estr}
	,Miter: {_hx_name:"Miter",_hx_index:2,__enum__:"hxd.clipper.JoinType",toString:$estr}
};
hxd.clipper.JoinType.__constructs__ = [hxd.clipper.JoinType.Square,hxd.clipper.JoinType.Round,hxd.clipper.JoinType.Miter];
hxd.clipper.JoinType.__empty_constructs__ = [hxd.clipper.JoinType.Square,hxd.clipper.JoinType.Round,hxd.clipper.JoinType.Miter];
hxd.clipper.PolyFillType = $hxEnums["hxd.clipper.PolyFillType"] = { __ename__:true,__constructs__:null
	,EvenOdd: {_hx_name:"EvenOdd",_hx_index:0,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,NonZero: {_hx_name:"NonZero",_hx_index:1,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,Positive: {_hx_name:"Positive",_hx_index:2,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,Negative: {_hx_name:"Negative",_hx_index:3,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
};
hxd.clipper.PolyFillType.__constructs__ = [hxd.clipper.PolyFillType.EvenOdd,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.Positive,hxd.clipper.PolyFillType.Negative];
hxd.clipper.PolyFillType.__empty_constructs__ = [hxd.clipper.PolyFillType.EvenOdd,hxd.clipper.PolyFillType.NonZero,hxd.clipper.PolyFillType.Positive,hxd.clipper.PolyFillType.Negative];
hxd.clipper.PolyType = $hxEnums["hxd.clipper.PolyType"] = { __ename__:true,__constructs__:null
	,Subject: {_hx_name:"Subject",_hx_index:0,__enum__:"hxd.clipper.PolyType",toString:$estr}
	,Clip: {_hx_name:"Clip",_hx_index:1,__enum__:"hxd.clipper.PolyType",toString:$estr}
};
hxd.clipper.PolyType.__constructs__ = [hxd.clipper.PolyType.Subject,hxd.clipper.PolyType.Clip];
hxd.clipper.PolyType.__empty_constructs__ = [hxd.clipper.PolyType.Subject,hxd.clipper.PolyType.Clip];
hxd.clipper.Rect = class hxd_clipper_Rect {
	constructor(l,t,r,b) {
		if(b == null) {
			b = 0;
		}
		if(r == null) {
			r = 0;
		}
		if(t == null) {
			t = 0;
		}
		if(l == null) {
			l = 0;
		}
		this.left = l;
		this.top = t;
		this.right = r;
		this.bottom = b;
	}
}
$hxClasses["hxd.clipper.Rect"] = hxd.clipper.Rect;
hxd.clipper.Rect.__name__ = "hxd.clipper.Rect";
Object.assign(hxd.clipper.Rect.prototype, {
	__class__: hxd.clipper.Rect
});
hxd.earcut = {};
hxd.earcut.EarNode = class hxd_earcut_EarNode {
	constructor() {
	}
}
$hxClasses["hxd.earcut.EarNode"] = hxd.earcut.EarNode;
hxd.earcut.EarNode.__name__ = "hxd.earcut.EarNode";
Object.assign(hxd.earcut.EarNode.prototype, {
	__class__: hxd.earcut.EarNode
});
hxd.earcut.Earcut = class hxd_earcut_Earcut {
	constructor() {
	}
	triangulate_anon_y_Float_x_Float(points,holes) {
		let hasHoles = holes != null && holes.length > 0;
		let outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		let root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	eliminateHoles_triangulate_T(points,holes,root) {
		let queue = [];
		let _g = 0;
		let _g1 = holes.length;
		while(_g < _g1) {
			let i = _g++;
			let s = holes[i];
			let e = i == holes.length - 1 ? points.length : holes[i + 1];
			let node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		let _g2 = 0;
		while(_g2 < queue.length) {
			let q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	setLinkedList_eliminateHoles_T(points,start,end,clockwise) {
		let sum = 0.;
		let j = end - 1;
		let _g = start;
		let _g1 = end;
		while(_g < _g1) {
			let i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd.earcut.EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		let node = n;
		let first = node;
		if(clockwise == sum > 0) {
			let _g = start;
			let _g1 = end;
			while(_g < _g1) {
				let i = _g++;
				let p = points[i];
				let x = p.x;
				let y = p.y;
				let n = this.cache;
				if(n == null) {
					n = new hxd.earcut.EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			let i = end - 1;
			while(i >= start) {
				let p = points[i];
				let x = p.x;
				let y = p.y;
				let n = this.cache;
				if(n == null) {
					n = new hxd.earcut.EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	setLinkedList_triangulate_T(points,start,end,clockwise) {
		let sum = 0.;
		let j = end - 1;
		let _g = start;
		let _g1 = end;
		while(_g < _g1) {
			let i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd.earcut.EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		let node = n;
		let first = node;
		if(clockwise == sum > 0) {
			let _g = start;
			let _g1 = end;
			while(_g < _g1) {
				let i = _g++;
				let p = points[i];
				let x = p.x;
				let y = p.y;
				let n = this.cache;
				if(n == null) {
					n = new hxd.earcut.EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			let i = end - 1;
			while(i >= start) {
				let p = points[i];
				let x = p.x;
				let y = p.y;
				let n = this.cache;
				if(n == null) {
					n = new hxd.earcut.EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	triangulateNode(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			let maxX = root.x;
			this.minX = maxX;
			let maxY = root.y;
			this.minY = maxY;
			let p = root.next;
			while(p != root) {
				let x = p.x;
				let y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			let a = maxX - this.minX;
			let b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		let result = this.triangles;
		this.triangles = null;
		let n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	eliminateHole(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			let b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	findHoleBridge(hole,root) {
		let p = root;
		let hx = hole.x;
		let hy = hole.y;
		let qx = -Infinity;
		let m = null;
		do {
			if(hy <= p.y && hy >= p.next.y) {
				let x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
		} while(p != root);
		if(m == null) {
			return null;
		}
		let stop = m;
		let tanMin = Infinity;
		let tan;
		p = m.next;
		while(p != stop) {
			let tmp;
			if(hx >= p.x && p.x >= m.x) {
				let ax = hy < m.y ? hx : qx;
				let bx = m.x;
				let by = m.y;
				let cx = hy < m.y ? qx : hx;
				let px = p.x;
				let py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				let f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				let tmp;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					let p1 = p.prev;
					let r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						let r = p.next;
						if((hole.y - p.y) * (r.x - hole.x) - (hole.x - p.x) * (r.y - hole.y) >= 0) {
							let q = p.prev;
							tmp = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp = false;
						}
					} else {
						let r = p.prev;
						if(!((hole.y - p.y) * (r.x - hole.x) - (hole.x - p.x) * (r.y - hole.y) < 0)) {
							let q = p.next;
							tmp = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) < 0;
						} else {
							tmp = true;
						}
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	getLeftmost(node) {
		let p = node;
		let leftmost = node;
		do {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
		} while(p != node);
		return leftmost;
	}
	compareX(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	equals(p1,p2) {
		if(p1.x == p2.x) {
			return p1.y == p2.y;
		} else {
			return false;
		}
	}
	area(p,q,r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}
	intersects(p1,q1,p2,q2) {
		if((q1.y - p1.y) * (p2.x - q1.x) - (q1.x - p1.x) * (p2.y - q1.y) > 0 != (q1.y - p1.y) * (q2.x - q1.x) - (q1.x - p1.x) * (q2.y - q1.y) > 0) {
			return (q2.y - p2.y) * (p1.x - q2.x) - (q2.x - p2.x) * (p1.y - q2.y) > 0 != (q2.y - p2.y) * (q1.x - q2.x) - (q2.x - p2.x) * (q1.y - q2.y) > 0;
		} else {
			return false;
		}
	}
	locallyInside(a,b) {
		let p = a.prev;
		let r = a.next;
		if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
			let r = a.next;
			if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
				let q = a.prev;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
			} else {
				return false;
			}
		} else {
			let r = a.prev;
			if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
				let q = a.next;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
			} else {
				return true;
			}
		}
	}
	filterPoints(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		let p = start;
		let again;
		do {
			again = false;
			let tmp;
			if(!p.steiner) {
				let p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					let p1 = p.prev;
					let r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
		} while(again || p != end);
		return end;
	}
	removeNode(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if(p.prevZ != null) {
			p.prevZ.nextZ = p.nextZ;
		}
		if(p.nextZ != null) {
			p.nextZ.prevZ = p.prevZ;
		}
	}
	allocNode(i,x,y,last) {
		let n = this.cache;
		if(n == null) {
			n = new hxd.earcut.EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		return n;
	}
	earcutLinked(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		let stop = ear;
		let prev;
		let next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	isEar(ear) {
		let a = ear.prev;
		let b = ear;
		let c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		let p = ear.next.next;
		while(p != ear.prev) {
			let tmp;
			let ax = a.x;
			let ay = a.y;
			let bx = b.x;
			let by = b.y;
			let cx = c.x;
			let cy = c.y;
			let px = p.x;
			let py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	isEarHashed(ear) {
		let a = ear.prev;
		let b = ear;
		let c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		let minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		let minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		let maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		let maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		let x = 32767 * (minTX - this.minX) / this.size | 0;
		let y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		let minZ = x | y << 1;
		let x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		let y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		let maxZ = x1 | y1 << 1;
		let p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			let tmp;
			let tmp1;
			if(p != ear.prev && p != ear.next) {
				let ax = a.x;
				let ay = a.y;
				let bx = b.x;
				let by = b.y;
				let cx = c.x;
				let cy = c.y;
				let px = p.x;
				let py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			let tmp;
			let tmp1;
			if(p != ear.prev && p != ear.next) {
				let ax = a.x;
				let ay = a.y;
				let bx = b.x;
				let by = b.y;
				let cx = c.x;
				let cy = c.y;
				let px = p.x;
				let py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p1 = p.prev;
				let r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	cureLocalIntersections(start) {
		let p = start;
		do {
			let a = p.prev;
			let b = p.next.next;
			let tmp;
			let tmp1;
			let p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				let p = a.prev;
				let r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					let r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						let q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					let r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						let q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p = b.prev;
				let r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					let r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						let q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					let r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						let q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				let p1 = p.next;
				p1.next.prev = p1.prev;
				p1.prev.next = p1.next;
				if(p1.prevZ != null) {
					p1.prevZ.nextZ = p1.nextZ;
				}
				if(p1.nextZ != null) {
					p1.nextZ.prevZ = p1.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
		} while(p != start);
		return p;
	}
	splitEarcut(start) {
		let a = start;
		do {
			let b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					let c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
		} while(a != start);
	}
	splitPolygon(a,b) {
		let i = a.i;
		let x = a.x;
		let y = a.y;
		let last = null;
		let n = this.cache;
		if(n == null) {
			n = new hxd.earcut.EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		let a2 = n;
		let i1 = b.i;
		let x1 = b.x;
		let y1 = b.y;
		let last1 = null;
		let n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd.earcut.EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		if(last1 != null) {
			last1.next = n1;
		}
		let b2 = n1;
		let an = a.next;
		let bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	pointInTriangle(ax,ay,bx,by,cx,cy,px,py) {
		if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0) {
			return (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
		} else {
			return false;
		}
	}
	isValidDiagonal(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			let tmp;
			let tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				let p = a.prev;
				let r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					let r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						let q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					let r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						let q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				let p = b.prev;
				let r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					let r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						let q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					let r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						let q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	middleInside(a,b) {
		let p = a;
		let inside = false;
		let px = (a.x + b.x) / 2;
		let py = (a.y + b.y) / 2;
		do {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
		} while(p != a);
		return inside;
	}
	intersectsPolygon(a,b) {
		let p = a;
		do {
			let tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				let q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
		} while(p != a);
		return false;
	}
	zOrder(px,py) {
		let x = 32767 * (px - this.minX) / this.size | 0;
		let y = 32767 * (py - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		return x | y << 1;
	}
	indexCurve(start) {
		let p = start;
		do {
			if(p.z < 0) {
				let x = 32767 * (p.x - this.minX) / this.size | 0;
				let y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while(p != start);
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	sortLinked(list) {
		let p;
		let q;
		let e;
		let tail;
		let numMerges;
		let pSize;
		let qSize;
		let inSize = 1;
		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				let _g = 0;
				let _g1 = inSize;
				while(_g < _g1) {
					let i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
		} while(numMerges > 1);
		return list;
	}
}
$hxClasses["hxd.earcut.Earcut"] = hxd.earcut.Earcut;
hxd.earcut.Earcut.__name__ = "hxd.earcut.Earcut";
Object.assign(hxd.earcut.Earcut.prototype, {
	__class__: hxd.earcut.Earcut
});
hxd.fmt = {};
hxd.fmt.bfnt = {};
hxd.fmt.bfnt.FontParser = class hxd_fmt_bfnt_FontParser {
	static parse(bytes,path,resolveTile) {
		let tile = null;
		let font = new h2d.Font(null,0);
		let glyphs = font.glyphs;
		font.baseLine = 0;
		let _g = bytes.getInt32(0);
		switch(_g) {
		case 54938946:
			let bytes1 = new haxe.io.BytesInput(bytes);
			bytes1.set_position(bytes1.pos + 4);
			let pageCount = 0;
			while(bytes1.pos < bytes1.totlen) {
				let id = bytes1.readByte();
				let length = bytes1.readInt32();
				let pos = bytes1.pos;
				switch(id) {
				case 1:
					font.size = font.initSize = bytes1.readInt16();
					bytes1.set_position(bytes1.pos + 12);
					font.name = bytes1.readUntil(0);
					break;
				case 2:
					font.lineHeight = bytes1.readUInt16();
					font.baseLine = bytes1.readUInt16();
					bytes1.set_position(bytes1.pos + 4);
					pageCount = bytes1.readUInt16();
					if(pageCount != 1) {
						haxe.Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 220, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					}
					break;
				case 3:
					let name = bytes1.readUntil(0);
					try {
						font.tilePath = name;
						tile = resolveTile(haxe.io.Path.join([haxe.io.Path.directory(path),name]));
					} catch( _g ) {
						haxe.Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe.io.Path(path).file + ".png";
						tile = resolveTile(haxe.io.Path.withExtension(path,"png"));
					}
					break;
				case 4:
					let count = length / 20 | 0;
					while(count > 0) {
						let cid = bytes1.readInt32();
						let t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
						let fc = new h2d.FontChar(t,bytes1.readInt16());
						glyphs.h[cid] = fc;
						bytes1.set_position(bytes1.pos + 2);
						--count;
					}
					break;
				case 5:
					let count1 = length / 10 | 0;
					while(count1 > 0) {
						let first = bytes1.readInt32();
						let key = bytes1.readInt32();
						let fc = glyphs.h[key];
						if(fc != null) {
							fc.addKerning(first,bytes1.readInt16());
						} else {
							bytes1.set_position(bytes1.pos + 2);
						}
						--count1;
					}
					break;
				}
				bytes1.set_position(pos + length);
			}
			break;
		case 1414415938:
			return new hxd.fmt.bfnt.Reader(new haxe.io.BytesInput(bytes)).read(function(tp) {
				try {
					font.tilePath = tp;
					tile = resolveTile(haxe.io.Path.join([haxe.io.Path.directory(path),tp]));
				} catch( _g ) {
					haxe.Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe.io.Path(path).file + ".png";
					tile = resolveTile(haxe.io.Path.withExtension(path,"png"));
				}
				return tile;
			});
		case 1836597052:case 1852794428:
			let xml = Xml.parse(bytes.toString());
			let x = xml.firstElement();
			if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
				throw haxe.Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			let xml1 = x;
			if(haxe.xml._Access.HasNodeAccess.resolve(xml1,"info")) {
				let tmp = haxe.xml._Access.NodeAccess.resolve(xml1,"info");
				font.name = haxe.xml._Access.AttribAccess.resolve(tmp,"face");
				let tmp1 = haxe.xml._Access.AttribAccess.resolve(haxe.xml._Access.NodeAccess.resolve(xml1,"info"),"size");
				font.size = font.initSize = Std.parseInt(tmp1);
				let tmp2 = haxe.xml._Access.AttribAccess.resolve(haxe.xml._Access.NodeAccess.resolve(xml1,"common"),"lineHeight");
				font.lineHeight = Std.parseInt(tmp2);
				let tmp3 = haxe.xml._Access.AttribAccess.resolve(haxe.xml._Access.NodeAccess.resolve(xml1,"common"),"base");
				font.baseLine = Std.parseInt(tmp3);
				let p = haxe.xml._Access.NodeAccess.resolve(xml1,"pages").elements();
				while(p.hasNext()) {
					let p1 = p.next();
					if(haxe.xml._Access.AttribAccess.resolve(p1,"id") == "0") {
						let tilePath = haxe.xml._Access.AttribAccess.resolve(p1,"file");
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe.io.Path.join([haxe.io.Path.directory(path),tilePath]));
						} catch( _g ) {
							haxe.Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe.io.Path(path).file + ".png";
							tile = resolveTile(haxe.io.Path.withExtension(path,"png"));
						}
					} else {
						haxe.Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 62, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					}
				}
				let chars = haxe.xml._Access.NodeAccess.resolve(xml1,"chars").elements();
				let c = chars;
				while(c.hasNext()) {
					let c1 = c.next();
					let t = tile.sub(Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"x")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"y")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"width")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"height")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"yoffset")));
					let fc = new h2d.FontChar(t,Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"xadvance")));
					let kerns = haxe.xml._Access.NodeAccess.resolve(xml1,"kernings").elements();
					let k = kerns;
					while(k.hasNext()) {
						let k1 = k.next();
						if(haxe.xml._Access.AttribAccess.resolve(k1,"second") == haxe.xml._Access.AttribAccess.resolve(c1,"id")) {
							fc.addKerning(Std.parseInt(haxe.xml._Access.AttribAccess.resolve(k1,"first")),Std.parseInt(haxe.xml._Access.AttribAccess.resolve(k1,"amount")));
						}
					}
					let key = Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"id"));
					glyphs.h[key] = fc;
				}
			} else {
				font.tilePath = new haxe.io.Path(path).file + ".png";
				tile = resolveTile(haxe.io.Path.withExtension(path,"png"));
				font.name = haxe.xml._Access.AttribAccess.resolve(xml1,"family");
				let tmp = haxe.xml._Access.AttribAccess.resolve(xml1,"size");
				font.size = font.initSize = Std.parseInt(tmp);
				let tmp1 = haxe.xml._Access.AttribAccess.resolve(xml1,"height");
				font.lineHeight = Std.parseInt(tmp1);
				let kernings = [];
				let c = xml1.elements();
				while(c.hasNext()) {
					let c1 = c.next();
					let r = haxe.xml._Access.AttribAccess.resolve(c1,"rect").split(" ");
					let o = haxe.xml._Access.AttribAccess.resolve(c1,"offset").split(" ");
					let t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
					let fc = new h2d.FontChar(t,Std.parseInt(haxe.xml._Access.AttribAccess.resolve(c1,"width")));
					let code = haxe.xml._Access.AttribAccess.resolve(c1,"code");
					let code1 = code.startsWith("&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
					let k = c1.elements();
					while(k.hasNext()) {
						let k1 = k.next();
						let code = haxe.xml._Access.AttribAccess.resolve(k1,"id");
						let next = code.startsWith("&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
						let adv = Std.parseInt(haxe.xml._Access.AttribAccess.resolve(k1,"advance"));
						if(glyphs.h.hasOwnProperty(next)) {
							glyphs.h[next].addKerning(code1,adv);
						} else {
							kernings.push({ prev : code1, next : next, adv : adv});
						}
					}
					glyphs.h[code1] = fc;
				}
				let _g = 0;
				while(_g < kernings.length) {
					let k = kernings[_g];
					++_g;
					let g = glyphs.h[k.next];
					if(g == null) {
						continue;
					}
					g.addKerning(k.prev,k.adv);
				}
			}
			break;
		case 1868983913:
			let lines = bytes.toString().split("\n");
			let reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
			let idx;
			let pageCount1 = 0;
			let _g1 = 0;
			while(_g1 < lines.length) {
				let line = lines[_g1];
				++_g1;
				idx = line.indexOf(" ");
				switch(HxOverrides.substr(line,0,idx)) {
				case "char":
					let id = 0;
					let x = 0;
					let y = 0;
					let width = 0;
					let height = 0;
					let xoffset = 0;
					let yoffset = 0;
					let xadvance = 0;
					while(idx < line.length && reg.matchSub(line,idx)) {
						switch(reg.matched(1)) {
						case "height":
							let v = reg.matched(2);
							height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
							break;
						case "id":
							let v1 = reg.matched(2);
							id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
							break;
						case "width":
							let v2 = reg.matched(2);
							width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
							break;
						case "x":
							let v3 = reg.matched(2);
							x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
							break;
						case "xadvance":
							let v4 = reg.matched(2);
							xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
							break;
						case "xoffset":
							let v5 = reg.matched(2);
							xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
							break;
						case "y":
							let v6 = reg.matched(2);
							y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
							break;
						case "yoffset":
							let v7 = reg.matched(2);
							yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
							break;
						}
						let pos = reg.matchedPos();
						idx = pos.pos + pos.len;
					}
					let t = tile.sub(x,y,width,height,xoffset,yoffset);
					let fc = new h2d.FontChar(t,xadvance);
					glyphs.h[id] = fc;
					break;
				case "common":
					while(idx < line.length && reg.matchSub(line,idx)) {
						switch(reg.matched(1)) {
						case "base":
							let v = reg.matched(2);
							font.baseLine = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
							break;
						case "lineHeight":
							let v1 = reg.matched(2);
							font.lineHeight = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
							break;
						case "pages":
							let v2 = reg.matched(2);
							pageCount1 = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
							if(pageCount1 != 1) {
								haxe.Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 153, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							}
							break;
						}
						let pos = reg.matchedPos();
						idx = pos.pos + pos.len;
					}
					break;
				case "info":
					while(idx < line.length && reg.matchSub(line,idx)) {
						switch(reg.matched(1)) {
						case "face":
							let v = reg.matched(2);
							font.name = HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v;
							break;
						case "size":
							let v1 = reg.matched(2);
							font.size = font.initSize = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
							break;
						}
						let pos = reg.matchedPos();
						idx = pos.pos + pos.len;
					}
					break;
				case "kerning":
					let first = 0;
					let second = 0;
					let advance = 0;
					while(idx < line.length && reg.matchSub(line,idx)) {
						switch(reg.matched(1)) {
						case "amount":
							let v = reg.matched(2);
							advance = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
							break;
						case "first":
							let v1 = reg.matched(2);
							first = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
							break;
						case "second":
							let v2 = reg.matched(2);
							second = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
							break;
						}
						let pos = reg.matchedPos();
						idx = pos.pos + pos.len;
					}
					let fc1 = glyphs.h[second];
					if(fc1 != null) {
						fc1.addKerning(first,advance);
					}
					break;
				case "page":
					while(idx < line.length && reg.matchSub(line,idx)) {
						if(reg.matched(1) == "file") {
							let v = reg.matched(2);
							let tilePath = HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v;
							try {
								font.tilePath = tilePath;
								tile = resolveTile(haxe.io.Path.join([haxe.io.Path.directory(path),tilePath]));
							} catch( _g ) {
								haxe.Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
								font.tilePath = new haxe.io.Path(path).file + ".png";
								tile = resolveTile(haxe.io.Path.withExtension(path,"png"));
							}
						}
						let pos = reg.matchedPos();
						idx = pos.pos + pos.len;
					}
					break;
				}
			}
			break;
		default:
			let sign = _g;
			throw haxe.Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
		}
		if(glyphs.h[32] == null) {
			let value = new h2d.FontChar(tile.sub(0,0,0,0),font.size >> 1);
			glyphs.h[32] = value;
		}
		font.tile = tile;
		if(font.baseLine == 0) {
			font.baseLine = font.calcBaseLine();
		}
		let fallback = glyphs.h[65533];
		if(fallback == null) {
			fallback = glyphs.h[9633];
		}
		if(fallback == null) {
			fallback = glyphs.h[63];
		}
		if(fallback != null) {
			font.defaultChar = fallback;
		}
		return font;
	}
}
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd.fmt.bfnt.FontParser;
hxd.fmt.bfnt.FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd.fmt.bfnt.Reader = class hxd_fmt_bfnt_Reader {
	constructor(i) {
		this.i = i;
	}
	read(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe.Exception.thrown("Not a BFNT file!");
		}
		let font = null;
		let _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d.Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			let tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			let defaultChar = this.i.readInt32();
			let id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				let t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				let glyph = new h2d.FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				let prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			let ver = _g;
			throw haxe.Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	static parse(bytes,resolveTile) {
		return new hxd.fmt.bfnt.Reader(new haxe.io.BytesInput(bytes)).read(resolveTile);
	}
}
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd.fmt.bfnt.Reader;
hxd.fmt.bfnt.Reader.__name__ = "hxd.fmt.bfnt.Reader";
Object.assign(hxd.fmt.bfnt.Reader.prototype, {
	__class__: hxd.fmt.bfnt.Reader
});
hxd.fmt.hdr = {};
hxd.fmt.hdr.Reader = class hxd_fmt_hdr_Reader {
	static decode(bytes,sRGB) {
		let f = new haxe.io.BytesInput(bytes);
		let width = 0;
		let height = 0;
		let keys_h = Object.create(null);
		while(true) {
			let line = f.readLine();
			if(line == "") {
				break;
			}
			if(HxOverrides.cca(line,0) == 35) {
				continue;
			}
			let nameValue = line.split("=");
			if(nameValue.length > 1) {
				keys_h[nameValue.shift()] = nameValue.join("=");
			}
		}
		let parts = f.readLine().split(" ");
		height = Std.parseInt(parts[1]);
		width = Std.parseInt(parts[3]);
		let gamma = keys_h["GAMMA"] == "1";
		let data = new haxe.io.Bytes(new ArrayBuffer(width * height * 4 * 4));
		let exposure = 1.0;
		let exp = keys_h["EXPOSURE"];
		if(exp != null) {
			let exp1 = parseFloat(exp);
			if(exp1 < 1e-12 || exp1 < 1e12) {
				exposure = exp1;
			}
		}
		let gammaCorrect = sRGB ? 1 : 0.45454545454545453;
		let _g = [];
		let _g1 = 0;
		while(_g1 < 256) {
			let e = _g1++;
			_g.push(Math.pow(e,gammaCorrect));
		}
		let gammaVals = _g;
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < 256) {
			let e = _g3++;
			_g2.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
		}
		let exps = _g2;
		let _g4 = keys_h["FORMAT"];
		if(_g4 == null) {
			let fmt = _g4;
			throw haxe.Exception.thrown("Unsupported HDR format " + fmt);
		} else if(_g4 == "32-bit_rle_rgbe") {
			let dataPos = f.pos;
			let scanLen = width * 4;
			let scanLine = new haxe.io.Bytes(new ArrayBuffer(scanLen));
			let widthBE = width >> 8 | (width & 255) << 8;
			let _g = 0;
			let _g1 = height;
			while(_g < _g1) {
				let y = _g++;
				let h = bytes.getInt32(dataPos);
				if((h & 65535) != 514 || h >>> 16 != widthBE) {
					scanLine.blit(0,bytes,dataPos,width * 4);
					dataPos += width * 4;
				} else {
					dataPos += 4;
					let p = 0;
					let end = width * 4;
					while(p < end) {
						let len = bytes.b[dataPos++];
						if(len > 128) {
							len -= 128;
							scanLine.fill(p,len,bytes.b[dataPos++]);
						} else {
							scanLine.blit(p,bytes,dataPos,len);
							dataPos += len;
						}
						p += len;
					}
				}
				let pos = y * width * 16;
				let _g1 = 0;
				let _g2 = width;
				while(_g1 < _g2) {
					let x = _g1++;
					let e = exps[scanLine.b[x + width * 3]];
					data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
					pos += 4;
					data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
					pos += 4;
					data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
					pos += 4;
					data.setFloat(pos,1.0);
					pos += 4;
				}
			}
		} else {
			let fmt = _g4;
			throw haxe.Exception.thrown("Unsupported HDR format " + fmt);
		}
		return { width : width, height : height, bytes : data, gamma : gamma};
	}
}
$hxClasses["hxd.fmt.hdr.Reader"] = hxd.fmt.hdr.Reader;
hxd.fmt.hdr.Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd.fmt.hmd = {};
hxd.fmt.hmd.Property = $hxEnums["hxd.fmt.hmd.Property"] = { __ename__:true,__constructs__:null
	,CameraFOVY: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxd.fmt.hmd.Property",toString:$estr}; },$_._hx_name="CameraFOVY",$_.__params__ = ["v"],$_)
	,Unused_HasMaterialFlags: {_hx_name:"Unused_HasMaterialFlags",_hx_index:1,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,HasExtraTextures: {_hx_name:"HasExtraTextures",_hx_index:2,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,FourBonesByVertex: {_hx_name:"FourBonesByVertex",_hx_index:3,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
};
hxd.fmt.hmd.Property.__constructs__ = [hxd.fmt.hmd.Property.CameraFOVY,hxd.fmt.hmd.Property.Unused_HasMaterialFlags,hxd.fmt.hmd.Property.HasExtraTextures,hxd.fmt.hmd.Property.FourBonesByVertex];
hxd.fmt.hmd.Property.__empty_constructs__ = [hxd.fmt.hmd.Property.Unused_HasMaterialFlags,hxd.fmt.hmd.Property.HasExtraTextures,hxd.fmt.hmd.Property.FourBonesByVertex];
hxd.fmt.hmd.Position = class hxd_fmt_hmd_Position {
	constructor() {
	}
	loadQuaternion(q) {
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
	}
	get_qw() {
		let qw = 1 - (this.qx * this.qx + this.qy * this.qy + this.qz * this.qz);
		if(qw < 0) {
			return -Math.sqrt(-qw);
		} else {
			return Math.sqrt(qw);
		}
	}
	toMatrix(postScale) {
		if(postScale == null) {
			postScale = false;
		}
		let m = new h3d.MatrixImpl();
		let q = hxd.fmt.hmd.Position.QTMP;
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
		q.toMatrix(m);
		if(postScale) {
			m.translate(this.x,this.y,this.z);
			m.scale(this.sx,this.sy,this.sz);
		} else {
			m._11 *= this.sx;
			m._12 *= this.sx;
			m._13 *= this.sx;
			m._21 *= this.sy;
			m._22 *= this.sy;
			m._23 *= this.sy;
			m._31 *= this.sz;
			m._32 *= this.sz;
			m._33 *= this.sz;
			m.translate(this.x,this.y,this.z);
		}
		return m;
	}
}
$hxClasses["hxd.fmt.hmd.Position"] = hxd.fmt.hmd.Position;
hxd.fmt.hmd.Position.__name__ = "hxd.fmt.hmd.Position";
Object.assign(hxd.fmt.hmd.Position.prototype, {
	__class__: hxd.fmt.hmd.Position
	,__properties__: {get_qw: "get_qw"}
});
hxd.fmt.hmd.Geometry = class hxd_fmt_hmd_Geometry {
	constructor() {
	}
	get_indexCount() {
		let k = 0;
		let _g = 0;
		let _g1 = this.indexCounts;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			k += i;
		}
		return k;
	}
}
$hxClasses["hxd.fmt.hmd.Geometry"] = hxd.fmt.hmd.Geometry;
hxd.fmt.hmd.Geometry.__name__ = "hxd.fmt.hmd.Geometry";
Object.assign(hxd.fmt.hmd.Geometry.prototype, {
	__class__: hxd.fmt.hmd.Geometry
	,__properties__: {get_indexCount: "get_indexCount"}
});
hxd.fmt.hmd.Material = class hxd_fmt_hmd_Material {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.Material"] = hxd.fmt.hmd.Material;
hxd.fmt.hmd.Material.__name__ = "hxd.fmt.hmd.Material";
Object.assign(hxd.fmt.hmd.Material.prototype, {
	__class__: hxd.fmt.hmd.Material
});
hxd.fmt.hmd.SkinJoint = class hxd_fmt_hmd_SkinJoint {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.SkinJoint"] = hxd.fmt.hmd.SkinJoint;
hxd.fmt.hmd.SkinJoint.__name__ = "hxd.fmt.hmd.SkinJoint";
Object.assign(hxd.fmt.hmd.SkinJoint.prototype, {
	__class__: hxd.fmt.hmd.SkinJoint
});
hxd.fmt.hmd.SkinSplit = class hxd_fmt_hmd_SkinSplit {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.SkinSplit"] = hxd.fmt.hmd.SkinSplit;
hxd.fmt.hmd.SkinSplit.__name__ = "hxd.fmt.hmd.SkinSplit";
Object.assign(hxd.fmt.hmd.SkinSplit.prototype, {
	__class__: hxd.fmt.hmd.SkinSplit
});
hxd.fmt.hmd.Skin = class hxd_fmt_hmd_Skin {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.Skin"] = hxd.fmt.hmd.Skin;
hxd.fmt.hmd.Skin.__name__ = "hxd.fmt.hmd.Skin";
Object.assign(hxd.fmt.hmd.Skin.prototype, {
	__class__: hxd.fmt.hmd.Skin
});
hxd.fmt.hmd.Model = class hxd_fmt_hmd_Model {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.Model"] = hxd.fmt.hmd.Model;
hxd.fmt.hmd.Model.__name__ = "hxd.fmt.hmd.Model";
Object.assign(hxd.fmt.hmd.Model.prototype, {
	__class__: hxd.fmt.hmd.Model
});
hxd.fmt.hmd.AnimationFlag = $hxEnums["hxd.fmt.hmd.AnimationFlag"] = { __ename__:true,__constructs__:null
	,HasPosition: {_hx_name:"HasPosition",_hx_index:0,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasRotation: {_hx_name:"HasRotation",_hx_index:1,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasScale: {_hx_name:"HasScale",_hx_index:2,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasUV: {_hx_name:"HasUV",_hx_index:3,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasAlpha: {_hx_name:"HasAlpha",_hx_index:4,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,SingleFrame: {_hx_name:"SingleFrame",_hx_index:5,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasProps: {_hx_name:"HasProps",_hx_index:6,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,Reserved: {_hx_name:"Reserved",_hx_index:7,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
};
hxd.fmt.hmd.AnimationFlag.__constructs__ = [hxd.fmt.hmd.AnimationFlag.HasPosition,hxd.fmt.hmd.AnimationFlag.HasRotation,hxd.fmt.hmd.AnimationFlag.HasScale,hxd.fmt.hmd.AnimationFlag.HasUV,hxd.fmt.hmd.AnimationFlag.HasAlpha,hxd.fmt.hmd.AnimationFlag.SingleFrame,hxd.fmt.hmd.AnimationFlag.HasProps,hxd.fmt.hmd.AnimationFlag.Reserved];
hxd.fmt.hmd.AnimationFlag.__empty_constructs__ = [hxd.fmt.hmd.AnimationFlag.HasPosition,hxd.fmt.hmd.AnimationFlag.HasRotation,hxd.fmt.hmd.AnimationFlag.HasScale,hxd.fmt.hmd.AnimationFlag.HasUV,hxd.fmt.hmd.AnimationFlag.HasAlpha,hxd.fmt.hmd.AnimationFlag.SingleFrame,hxd.fmt.hmd.AnimationFlag.HasProps,hxd.fmt.hmd.AnimationFlag.Reserved];
hxd.fmt.hmd.AnimationObject = class hxd_fmt_hmd_AnimationObject {
	constructor() {
	}
	getStride() {
		let stride = 0;
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasPosition._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasRotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasScale._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasUV._hx_index) != 0) {
			stride += 2;
		}
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasAlpha._hx_index) != 0) {
			++stride;
		}
		if((this.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasProps._hx_index) != 0) {
			stride += this.props.length;
		}
		return stride;
	}
}
$hxClasses["hxd.fmt.hmd.AnimationObject"] = hxd.fmt.hmd.AnimationObject;
hxd.fmt.hmd.AnimationObject.__name__ = "hxd.fmt.hmd.AnimationObject";
Object.assign(hxd.fmt.hmd.AnimationObject.prototype, {
	__class__: hxd.fmt.hmd.AnimationObject
});
hxd.fmt.hmd.AnimationEvent = class hxd_fmt_hmd_AnimationEvent {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.AnimationEvent"] = hxd.fmt.hmd.AnimationEvent;
hxd.fmt.hmd.AnimationEvent.__name__ = "hxd.fmt.hmd.AnimationEvent";
Object.assign(hxd.fmt.hmd.AnimationEvent.prototype, {
	__class__: hxd.fmt.hmd.AnimationEvent
});
hxd.fmt.hmd.Animation = class hxd_fmt_hmd_Animation {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.Animation"] = hxd.fmt.hmd.Animation;
hxd.fmt.hmd.Animation.__name__ = "hxd.fmt.hmd.Animation";
Object.assign(hxd.fmt.hmd.Animation.prototype, {
	__class__: hxd.fmt.hmd.Animation
});
hxd.fmt.hmd.Data = class hxd_fmt_hmd_Data {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.Data"] = hxd.fmt.hmd.Data;
hxd.fmt.hmd.Data.__name__ = "hxd.fmt.hmd.Data";
Object.assign(hxd.fmt.hmd.Data.prototype, {
	__class__: hxd.fmt.hmd.Data
});
hxd.fmt.hmd._Library = {};
hxd.fmt.hmd._Library.FormatMap = class hxd_fmt_hmd__$Library_FormatMap {
	constructor(size,offset,def,prec) {
		this.size = size;
		this.offset = offset;
		this.precision = prec;
		this.def = def;
	}
}
$hxClasses["hxd.fmt.hmd._Library.FormatMap"] = hxd.fmt.hmd._Library.FormatMap;
hxd.fmt.hmd._Library.FormatMap.__name__ = "hxd.fmt.hmd._Library.FormatMap";
Object.assign(hxd.fmt.hmd._Library.FormatMap.prototype, {
	__class__: hxd.fmt.hmd._Library.FormatMap
});
hxd.fmt.hmd.GeometryBuffer = class hxd_fmt_hmd_GeometryBuffer {
	constructor() {
	}
}
$hxClasses["hxd.fmt.hmd.GeometryBuffer"] = hxd.fmt.hmd.GeometryBuffer;
hxd.fmt.hmd.GeometryBuffer.__name__ = "hxd.fmt.hmd.GeometryBuffer";
Object.assign(hxd.fmt.hmd.GeometryBuffer.prototype, {
	__class__: hxd.fmt.hmd.GeometryBuffer
});
hxd.fmt.hmd.Library = class hxd_fmt_hmd_Library {
	constructor(res,header) {
		this.resource = res;
		this.header = header;
		this.cachedPrimitives = [];
		this.cachedAnimations = new haxe.ds.StringMap();
		this.cachedSkin = new haxe.ds.StringMap();
	}
	getData() {
		let entry = this.resource.entry;
		let b = new haxe.io.Bytes(new ArrayBuffer(entry.get_size() - this.header.dataPosition));
		entry.readFull(b,this.header.dataPosition,b.length);
		return b;
	}
	getDefaultFormat(stride) {
		let format1 = [new hxd.BufferInput("position",3)];
		let defs = [null];
		if(stride > 3) {
			format1.push(new hxd.BufferInput("normal",3));
			defs.push(null);
		}
		if(stride > 6) {
			format1.push(new hxd.BufferInput("uv",2));
			defs.push(null);
		}
		if(stride > 8) {
			format1.push(new hxd.BufferInput("color",3));
			let x = 1;
			let y = 1;
			let z = 1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			defs.push(new h3d.VectorImpl(x,y,z));
		}
		if(stride > 11) {
			throw haxe.Exception.thrown("Unsupported stride");
		}
		return { format : hxd.BufferFormat.make(format1), defs : defs};
	}
	load(format1,defaults,modelIndex) {
		if(modelIndex == null) {
			modelIndex = -1;
		}
		let x = 0.;
		let y = 0.;
		let z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		let vtmp_x = x;
		let vtmp_y = y;
		let vtmp_z = z;
		let models = modelIndex < 0 ? this.header.models : [this.header.models[modelIndex]];
		let outVertex = hxd._FloatBuffer.Float32Expand._new(0);
		let outIndex = new Array(0);
		let stride = format1.stride;
		let mid = -1;
		let _g = 0;
		while(_g < models.length) {
			let m = models[_g];
			++_g;
			let geom = this.header.geometries[m.geometry];
			if(geom == null) {
				continue;
			}
			let _g1 = 0;
			let _g2 = m.materials;
			while(_g1 < _g2.length) {
				let mat = _g2[_g1];
				++_g1;
				if(mid < 0) {
					mid = mat;
				}
				if(mid != mat) {
					throw haxe.Exception.thrown("Models have several materials");
				}
			}
			let pos = m.position.toMatrix();
			let data = this.getBuffers(geom,format1,defaults);
			let start = outVertex.pos / stride | 0;
			let _g3 = 0;
			let _g4 = data.vertexes.length / stride | 0;
			while(_g3 < _g4) {
				let i = _g3++;
				let p = i * stride;
				vtmp_x = data.vertexes[p++];
				vtmp_y = data.vertexes[p++];
				vtmp_z = data.vertexes[p++];
				let px = vtmp_x * pos._11 + vtmp_y * pos._21 + vtmp_z * pos._31 + pos._41;
				let py = vtmp_x * pos._12 + vtmp_y * pos._22 + vtmp_z * pos._32 + pos._42;
				let pz = vtmp_x * pos._13 + vtmp_y * pos._23 + vtmp_z * pos._33 + pos._43;
				vtmp_x = px;
				vtmp_y = py;
				vtmp_z = pz;
				if(outVertex.pos == outVertex.array.length) {
					let newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_x;
				if(outVertex.pos == outVertex.array.length) {
					let newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_y;
				if(outVertex.pos == outVertex.array.length) {
					let newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					let newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_z;
				let _g = 0;
				let _g1 = stride - 3;
				while(_g < _g1) {
					let j = _g++;
					let v = data.vertexes[p++];
					if(outVertex.pos == outVertex.array.length) {
						let newSize = outVertex.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						let newArray = new Float32Array(newSize);
						newArray.set(outVertex.array);
						outVertex.array = newArray;
					}
					outVertex.array[outVertex.pos++] = v;
				}
			}
			let _g5 = 0;
			let _g6 = data.indexes;
			while(_g5 < _g6.length) {
				let idx = _g6[_g5];
				++_g5;
				outIndex.push(idx + start);
			}
		}
		return { vertex : outVertex, index : outIndex};
	}
	getBuffers(geom,format1,defaults,material) {
		if(material == 0 && geom.indexCounts.length == 1) {
			material = null;
		}
		let maps = [];
		let index = 0;
		let stride = 0;
		let lowPrec = false;
		let _g_current = 0;
		let _g_array = format1.inputs;
		while(_g_current < _g_array.length) {
			let i = _g_array[_g_current++];
			let i2 = geom.vertexFormat.getInput(i.name);
			let map;
			if(i2 == null) {
				let def = defaults == null ? null : defaults[index];
				if(def == null) {
					throw haxe.Exception.thrown("Missing required " + i.name);
				}
				map = new hxd.fmt.hmd._Library.FormatMap(i.type & 7,0,def,0);
			} else {
				if(i2.type != i.type) {
					throw haxe.Exception.thrown("Requested " + i.name + " " + (i.type == null ? "null" : hxd.InputFormat.toString(i.type)) + " but found " + (i2.type == null ? "null" : hxd.InputFormat.toString(i2.type)));
				}
				map = new hxd.fmt.hmd._Library.FormatMap(i.type & 7,geom.vertexFormat.calculateInputOffset(i2.name),null,i2.precision);
				if(i2.precision != 0) {
					lowPrec = true;
				}
			}
			maps.push(map);
			stride += i.type & 7;
			++index;
		}
		let geomStride = geom.vertexFormat.strideBytes;
		let vsize = geom.vertexCount * geomStride;
		let vbuf = new haxe.io.Bytes(new ArrayBuffer(vsize));
		let entry = this.resource.entry;
		entry.readFull(vbuf,this.header.dataPosition + geom.vertexPosition,vsize);
		let dataPos = this.header.dataPosition + geom.indexPosition;
		let isSmall = geom.vertexCount <= 65536;
		let imult = isSmall ? 2 : 4;
		let isize;
		if(material == null) {
			isize = geom.get_indexCount() * imult;
		} else {
			let ipos = 0;
			let _g = 0;
			let _g1 = material;
			while(_g < _g1) {
				let i = _g++;
				ipos += geom.indexCounts[i];
			}
			dataPos += ipos * imult;
			isize = geom.indexCounts[material] * imult;
		}
		let ibuf = new haxe.io.Bytes(new ArrayBuffer(isize));
		entry.readFull(ibuf,dataPos,isize);
		let buf = new hxd.fmt.hmd.GeometryBuffer();
		if(material == null) {
			buf.vertexes = new Array(stride * geom.vertexCount);
			buf.indexes = new Array(geom.get_indexCount());
			let w = 0;
			let _g = 0;
			let _g1 = geom.vertexCount;
			while(_g < _g1) {
				let vid = _g++;
				let _g1 = 0;
				while(_g1 < maps.length) {
					let m = maps[_g1];
					++_g1;
					if(m.def == null) {
						let _g = 0;
						let _g1 = m.size;
						while(_g < _g1) {
							let i = _g++;
							let this1 = buf.vertexes;
							let index = w++;
							let val;
							if(lowPrec) {
								switch(m.precision) {
								case 0:
									val = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
									break;
								case 1:
									val = hxd.BufferFormat.float16to32(vbuf.getUInt16(vid * geomStride + (i << 1) + m.offset));
									break;
								case 2:
									val = (vbuf.b[vid * geomStride + i + m.offset] & 255) / 255;
									break;
								case 3:
									val = hxd.BufferFormat.floatS8to32(vbuf.b[vid * geomStride + i + m.offset]);
									break;
								}
							} else {
								val = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
							}
							this1[index] = val;
						}
					} else {
						switch(m.size) {
						case 1:
							buf.vertexes[w++] = m.def.x;
							break;
						case 2:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							break;
						case 3:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							break;
						default:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							buf.vertexes[w++] = m.def.w;
						}
					}
				}
			}
			if(isSmall) {
				let r = 0;
				let _g = 0;
				let _g1 = buf.indexes.length;
				while(_g < _g1) {
					let i = _g++;
					buf.indexes[i] = ibuf.b[r++] | ibuf.b[r++] << 8;
				}
			} else {
				let _g = 0;
				let _g1 = buf.indexes.length;
				while(_g < _g1) {
					let i = _g++;
					buf.indexes[i] = ibuf.getInt32(i << 2);
				}
			}
		} else {
			let icount = geom.indexCounts[material];
			let vmap = new Array(geom.vertexCount);
			let vertexes = hxd._FloatBuffer.Float32Expand._new(0);
			buf.indexes = new Array(icount);
			let r = 0;
			let vcount = 0;
			let _g = 0;
			let _g1 = buf.indexes.length;
			while(_g < _g1) {
				let i = _g++;
				let vid = isSmall ? ibuf.b[r++] | ibuf.b[r++] << 8 : ibuf.getInt32(i << 2);
				let rid = vmap[vid];
				if(rid == 0) {
					++vcount;
					rid = vcount;
					vmap[vid] = rid;
					let _g = 0;
					while(_g < maps.length) {
						let m = maps[_g];
						++_g;
						if(m.def == null) {
							let _g = 0;
							let _g1 = m.size;
							while(_g < _g1) {
								let i = _g++;
								let v;
								if(lowPrec) {
									switch(m.precision) {
									case 0:
										v = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
										break;
									case 1:
										v = hxd.BufferFormat.float16to32(vbuf.getUInt16(vid * geomStride + (i << 1) + m.offset));
										break;
									case 2:
										v = (vbuf.b[vid * geomStride + i + m.offset] & 255) / 255;
										break;
									case 3:
										v = hxd.BufferFormat.floatS8to32(vbuf.b[vid * geomStride + i + m.offset]);
										break;
									}
								} else {
									v = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
								}
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
							}
						} else {
							switch(m.size) {
							case 1:
								let v = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
								break;
							case 2:
								let v1 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v1;
								let v2 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v2;
								break;
							case 3:
								let v3 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v3;
								let v4 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v4;
								let v5 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v5;
								break;
							default:
								let v6 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v6;
								let v7 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v7;
								let v8 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v8;
								let v9 = m.def.w;
								if(vertexes.pos == vertexes.array.length) {
									let newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									let newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v9;
							}
						}
					}
				}
				buf.indexes[i] = rid - 1;
			}
			let this1 = vertexes;
			let _g2 = [];
			let _g3 = 0;
			let _g4 = this1.pos;
			while(_g3 < _g4) {
				let i = _g3++;
				_g2.push(this1.array[i]);
			}
			buf.vertexes = _g2;
		}
		return buf;
	}
	makePrimitive(id) {
		let p = this.cachedPrimitives[id];
		if(p != null) {
			return p;
		}
		p = new h3d.prim.HMDModel(this.header.geometries[id],this.header.dataPosition,this);
		p.incref();
		this.cachedPrimitives[id] = p;
		return p;
	}
	dispose() {
		let _g = 0;
		let _g1 = this.cachedPrimitives;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p != null) {
				p.decref();
			}
		}
		this.cachedPrimitives = [];
	}
	makeMaterial(model,mid,loadTexture) {
		let m = this.header.materials[mid];
		let mat = h3d.mat.MaterialSetup.current.createMaterial();
		mat.name = m.name;
		mat.model = this.resource;
		mat.set_blendMode(m.blendMode);
		let props = h3d.mat.MaterialSetup.current.loadMaterialProps(mat);
		if(props == null) {
			props = mat.getDefaultModelProps();
		}
		if(m.diffuseTexture != null) {
			mat.set_texture(loadTexture(m.diffuseTexture));
			if(mat.get_texture() == null) {
				mat.set_texture(h3d.mat.Texture.fromColor(16711935));
			}
		}
		if(m.specularTexture != null) {
			mat.set_specularTexture(loadTexture(m.specularTexture));
		}
		if(m.normalMap != null) {
			mat.set_normalMap(loadTexture(m.normalMap));
		}
		mat.set_props(props);
		return mat;
	}
	makeSkin(skin,geom) {
		let s = this.cachedSkin.h[skin.name];
		if(s != null) {
			return s;
		}
		s = new h3d.anim.Skin(skin.name,0,geom.props != null && geom.props.indexOf(hxd.fmt.hmd.Property.FourBonesByVertex) >= 0 ? 4 : 3);
		s.namedJoints = new haxe.ds.StringMap();
		s.allJoints = [];
		s.boundJoints = [];
		s.rootJoints = [];
		let _g = 0;
		let _g1 = skin.joints;
		while(_g < _g1.length) {
			let joint = _g1[_g];
			++_g;
			let j = new h3d.anim.Joint();
			j.name = joint.name;
			j.index = s.allJoints.length;
			j.defMat = joint.position.toMatrix();
			if(joint.bind >= 0) {
				j.bindIndex = joint.bind;
				j.transPos = joint.transpos.toMatrix(true);
				s.boundJoints[j.bindIndex] = j;
			}
			if(joint.parent >= 0) {
				let p = s.allJoints[joint.parent];
				p.subs.push(j);
				j.parent = p;
			} else {
				s.rootJoints.push(j);
			}
			s.allJoints.push(j);
			s.namedJoints.h[j.name] = j;
		}
		if(skin.split != null) {
			s.splitJoints = [];
			let _g = 0;
			let _g1 = skin.split;
			while(_g < _g1.length) {
				let ss = _g1[_g];
				++_g;
				let s1 = s.splitJoints;
				let ss1 = ss.materialIndex;
				let _g2 = [];
				let _g3 = 0;
				let _g4 = ss.joints;
				while(_g3 < _g4.length) {
					let j = _g4[_g3];
					++_g3;
					_g2.push(s.allJoints[j]);
				}
				s1.push({ material : ss1, joints : _g2});
			}
		}
		this.cachedSkin.h[skin.name] = s;
		return s;
	}
	getModelProperty(objName,p,def) {
		let _g = 0;
		let _g1 = this.header.models;
		while(_g < _g1.length) {
			let m = _g1[_g];
			++_g;
			if(m.name == objName) {
				if(m.props != null) {
					let _g = 0;
					let _g1 = m.props;
					while(_g < _g1.length) {
						let pr = _g1[_g];
						++_g;
						if(pr._hx_index == p._hx_index) {
							return Type.enumParameters(pr)[0];
						}
					}
				}
				return def;
			}
		}
		if(def == null) {
			throw haxe.Exception.thrown("Model " + objName + " not found");
		}
		return def;
	}
	makeObject(loadTexture) {
		if(loadTexture == null) {
			loadTexture = function(_) {
				return h3d.mat.Texture.fromColor(16711935);
			};
		}
		if(this.header.models.length == 0) {
			throw haxe.Exception.thrown("This file does not contain any model");
		}
		let objs = [];
		let _g = 0;
		let _g1 = this.header.models;
		while(_g < _g1.length) {
			let m = _g1[_g];
			++_g;
			let obj;
			if(m.geometry < 0) {
				obj = new h3d.scene.Object();
			} else {
				let prim = this.makePrimitive(m.geometry);
				if(m.skin != null) {
					let skinData = this.makeSkin(m.skin,this.header.geometries[m.geometry]);
					skinData.primitive = prim;
					let _g = [];
					let _g1 = 0;
					let _g2 = m.materials;
					while(_g1 < _g2.length) {
						let mat = _g2[_g1];
						++_g1;
						_g.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d.scene.Skin(skinData,_g);
				} else if(m.materials.length == 1) {
					obj = new h3d.scene.Mesh(prim,this.makeMaterial(m,m.materials[0],loadTexture));
				} else {
					let _g = [];
					let _g1 = 0;
					let _g2 = m.materials;
					while(_g1 < _g2.length) {
						let mat = _g2[_g1];
						++_g1;
						_g.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d.scene.MultiMaterial(prim,_g);
				}
			}
			obj.name = m.name;
			let v = m.position.toMatrix();
			obj.defaultTransform = v;
			let f = 1;
			let b = true;
			if(b) {
				obj.flags |= f;
			} else {
				obj.flags &= ~f;
			}
			objs.push(obj);
			let p = objs[m.parent];
			if(p != null) {
				p.addChild(obj);
			}
		}
		let o = objs[0];
		if(o != null) {
			let f = 256;
			o.flags |= f;
		}
		return o;
	}
	loadAnimation(name) {
		let a = this.cachedAnimations.h[name == null ? "" : name];
		if(a != null) {
			return a;
		}
		let a1 = null;
		if(name == null) {
			if(this.header.animations.length == 0) {
				return null;
			}
			a1 = this.header.animations[0];
		} else {
			let _g = 0;
			let _g1 = this.header.animations;
			while(_g < _g1.length) {
				let a2 = _g1[_g];
				++_g;
				if(a2.name == name) {
					a1 = a2;
					break;
				}
			}
			if(a1 == null) {
				throw haxe.Exception.thrown("Animation " + name + " not found !");
			}
		}
		let l = this.header.version <= 2 ? this.makeLinearAnimation(a1) : this.makeAnimation(a1);
		l.speed = a1.speed;
		l.loop = a1.loop;
		if(a1.events != null) {
			l.setEvents(a1.events);
		}
		l.resourcePath = this.resource.entry.get_path();
		this.cachedAnimations.h[a1.name] = l;
		if(name == null) {
			this.cachedAnimations.h[""] = l;
		}
		return l;
	}
	makeAnimation(a) {
		let b = new h3d.anim.BufferAnimation(a.name,a.frames,a.sampling);
		let stride = 0;
		let singleFrames = [];
		let otherFrames = [];
		let _g = 0;
		let _g1 = a.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			let c = b.addObject(o.name,0);
			let sm = 1;
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.SingleFrame._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.SingleFrame._hx_index;
				singleFrames.push(c);
				sm = 0;
			} else {
				otherFrames.push(c);
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasPosition._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.Position._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasRotation._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.Rotation._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasScale._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.Scale._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasUV._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.UV._hx_index;
				stride += 2 * sm;
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasAlpha._hx_index) != 0) {
				c.layout |= 1 << h3d.anim.DataLayout.Alpha._hx_index;
				stride += sm;
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasProps._hx_index) != 0) {
				let _g = 0;
				let _g1 = o.props.length;
				while(_g < _g1) {
					let i = _g++;
					let c1 = c;
					if(i > 0) {
						c1 = b.addObject(o.name,0);
						if(sm == 0) {
							singleFrames.push(c1);
						} else {
							otherFrames.push(c1);
						}
					}
					c1.layout |= 1 << h3d.anim.DataLayout.Property._hx_index;
					c1.propName = o.props[i];
					stride += sm;
				}
			}
		}
		let pos = 0;
		let _g2 = 0;
		while(_g2 < singleFrames.length) {
			let b = singleFrames[_g2];
			++_g2;
			b.dataOffset = pos;
			pos += b.getStride();
		}
		let singleStride = pos;
		let _g3 = 0;
		while(_g3 < otherFrames.length) {
			let b = otherFrames[_g3];
			++_g3;
			b.dataOffset = pos;
			pos += b.getStride();
		}
		let entry = this.resource.entry;
		let count = stride * a.frames + singleStride;
		let data = new haxe.io.Bytes(new ArrayBuffer(count * 4));
		entry.readFull(data,this.header.dataPosition + a.dataPosition,data.length);
		b.setData(new Float32Array(data.b.buffer),stride);
		return b;
	}
	makeLinearAnimation(a) {
		let l = new h3d.anim.LinearAnimation(a.name,a.frames,a.sampling);
		let entry = this.resource.entry;
		let dataPos = this.header.dataPosition + a.dataPosition;
		let _g = 0;
		let _g1 = a.objects;
		while(_g < _g1.length) {
			let o = _g1[_g];
			++_g;
			let pos = (o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasPosition._hx_index) != 0;
			let rot = (o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasRotation._hx_index) != 0;
			let scale = (o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasScale._hx_index) != 0;
			if(pos || rot || scale) {
				let frameCount = a.frames;
				if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.SingleFrame._hx_index) != 0) {
					frameCount = 1;
				}
				let fl = new Array(frameCount);
				let size = ((pos ? 3 : 0) + (rot ? 3 : 0) + (scale ? 3 : 0)) * 4 * frameCount;
				let data = entry.fetchBytes(dataPos,size);
				dataPos += size;
				let p = 0;
				let _g = 0;
				let _g1 = frameCount;
				while(_g < _g1) {
					let i = _g++;
					let f = new h3d.anim.LinearFrame();
					if(pos) {
						f.tx = data.getFloat(p);
						p += 4;
						f.ty = data.getFloat(p);
						p += 4;
						f.tz = data.getFloat(p);
						p += 4;
					} else {
						f.tx = 0;
						f.ty = 0;
						f.tz = 0;
					}
					if(rot) {
						f.qx = data.getFloat(p);
						p += 4;
						f.qy = data.getFloat(p);
						p += 4;
						f.qz = data.getFloat(p);
						p += 4;
						let qw = 1 - (f.qx * f.qx + f.qy * f.qy + f.qz * f.qz);
						f.qw = qw < 0 ? -Math.sqrt(-qw) : Math.sqrt(qw);
					} else {
						f.qx = 0;
						f.qy = 0;
						f.qz = 0;
						f.qw = 1;
					}
					if(scale) {
						f.sx = data.getFloat(p);
						p += 4;
						f.sy = data.getFloat(p);
						p += 4;
						f.sz = data.getFloat(p);
						p += 4;
					} else {
						f.sx = 1;
						f.sy = 1;
						f.sz = 1;
					}
					fl[i] = f;
				}
				l.addCurve(o.name,fl,true,rot,scale);
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasUV._hx_index) != 0) {
				let fl = new Array(a.frames * 2);
				let size = 8 * a.frames;
				let data = entry.fetchBytes(dataPos,size);
				dataPos += size;
				let _g = 0;
				let _g1 = fl.length;
				while(_g < _g1) {
					let i = _g++;
					fl[i] = data.getFloat(i * 4);
				}
				l.addUVCurve(o.name,fl);
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasAlpha._hx_index) != 0) {
				let fl = new Array(a.frames);
				let size = 4 * a.frames;
				let data = entry.fetchBytes(dataPos,size);
				dataPos += size;
				let _g = 0;
				let _g1 = fl.length;
				while(_g < _g1) {
					let i = _g++;
					fl[i] = data.getFloat(i * 4);
				}
				l.addAlphaCurve(o.name,fl);
			}
			if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasProps._hx_index) != 0) {
				let _g = 0;
				let _g1 = o.props;
				while(_g < _g1.length) {
					let p = _g1[_g];
					++_g;
					let fl = new Array(a.frames);
					let size = 4 * a.frames;
					let data = entry.fetchBytes(dataPos,size);
					dataPos += size;
					let _g2 = 0;
					let _g3 = fl.length;
					while(_g2 < _g3) {
						let i = _g2++;
						fl[i] = data.getFloat(i * 4);
					}
					l.addPropCurve(o.name,p,fl);
				}
			}
		}
		return l;
	}
	loadSkin(geom,skin,optimize) {
		if(optimize == null) {
			optimize = true;
		}
		if(skin.vertexWeights != null) {
			return;
		}
		let bonesPerVertex = skin.bonesPerVertex;
		if(!(bonesPerVertex == 3 || bonesPerVertex == 4)) {
			throw haxe.Exception.thrown("assert");
		}
		let use4Bones = bonesPerVertex == 4;
		skin.vertexCount = geom.vertexCount;
		let format1 = hxd.BufferFormat.make([new hxd.BufferInput("position",3),new hxd.BufferInput("weights",3),new hxd.BufferInput("indexes",9)]);
		let data = this.getBuffers(geom,format1);
		let formatStride = format1.stride;
		skin.vertexWeights = new Array(skin.vertexCount * bonesPerVertex);
		skin.vertexJoints = new Array(skin.vertexCount * bonesPerVertex);
		let _g = 0;
		let _g1 = skin.boundJoints;
		while(_g < _g1.length) {
			let j = _g1[_g];
			++_g;
			j.offsets = new h3d.col.Bounds();
		}
		let vbuf = data.vertexes;
		let idx = 0;
		let bounds_xMin = 1e20;
		let bounds_xMax = -1e20;
		let bounds_yMin = 1e20;
		let bounds_yMax = -1e20;
		let bounds_zMin = 1e20;
		let bounds_zMax = -1e20;
		let out = NaN;
		let ranges;
		if(skin.splitJoints == null) {
			let jointsByBind = [];
			let _g = 0;
			let _g1 = skin.boundJoints;
			while(_g < _g1.length) {
				let j = _g1[_g];
				++_g;
				jointsByBind[j.bindIndex] = j;
			}
			ranges = [{ index : 0, pos : 0, count : data.indexes.length, joints : jointsByBind}];
		} else {
			let idx = 0;
			let triPos = [];
			let pos = 0;
			let _g = 0;
			let _g1 = geom.indexCounts;
			while(_g < _g1.length) {
				let n = _g1[_g];
				++_g;
				triPos.push(pos);
				pos += n;
			}
			let _g2 = [];
			let _g3 = 0;
			let _g4 = skin.splitJoints;
			while(_g3 < _g4.length) {
				let j = _g4[_g3];
				++_g3;
				_g2.push({ index : idx, pos : triPos[idx], count : geom.indexCounts[idx++], joints : j.joints});
			}
			ranges = _g2;
		}
		let _g2 = 0;
		while(_g2 < ranges.length) {
			let r = ranges[_g2];
			++_g2;
			let _g = r.pos;
			let _g1 = r.pos + r.count;
			while(_g < _g1) {
				let idx = _g++;
				let vidx = data.indexes[idx];
				let p = vidx * formatStride;
				let x = vbuf[p];
				if(x != x) {
					continue;
				}
				vbuf[p++] = out;
				let y = vbuf[p++];
				let z = vbuf[p++];
				let w1 = vbuf[p++];
				let w2 = vbuf[p++];
				let w3 = vbuf[p++];
				let w4 = 0.0;
				let vout = vidx * bonesPerVertex;
				skin.vertexWeights[vout] = w1;
				skin.vertexWeights[vout + 1] = w2;
				skin.vertexWeights[vout + 2] = w3;
				if(use4Bones) {
					w4 = 1.0 - w1 - w2 - w3;
					skin.vertexWeights[vout + 3] = w4;
				}
				let w = (w1 == 0 ? 1 : 0) | (w2 == 0 ? 2 : 0) | (w3 == 0 ? 4 : 0) | (w4 == 0 ? 8 : 0);
				let idx1 = haxe.io.FPHelper.floatToI32(vbuf[p++]);
				if(x < bounds_xMin) {
					bounds_xMin = x;
				}
				if(x > bounds_xMax) {
					bounds_xMax = x;
				}
				if(y < bounds_yMin) {
					bounds_yMin = y;
				}
				if(y > bounds_yMax) {
					bounds_yMax = y;
				}
				if(z < bounds_zMin) {
					bounds_zMin = z;
				}
				if(z > bounds_zMax) {
					bounds_zMax = z;
				}
				let _g1 = 0;
				let _g2 = bonesPerVertex;
				while(_g1 < _g2) {
					let i = _g1++;
					if((w & 1 << i) != 0) {
						skin.vertexJoints[vout++] = -1;
						continue;
					}
					let idx = idx1 >> (i << 3) & 255;
					let j = r.joints[idx];
					let _this = j.offsets;
					if(x < _this.xMin) {
						_this.xMin = x;
					}
					if(x > _this.xMax) {
						_this.xMax = x;
					}
					if(y < _this.yMin) {
						_this.yMin = y;
					}
					if(y > _this.yMax) {
						_this.yMax = y;
					}
					if(z < _this.zMin) {
						_this.zMin = z;
					}
					if(z > _this.zMax) {
						_this.zMax = z;
					}
					skin.vertexJoints[vout++] = j.bindIndex;
				}
			}
		}
		if(optimize) {
			let idx = skin.allJoints.length - 1;
			let optOut = 0;
			let refVolume = (bounds_xMax - bounds_xMin) * (bounds_yMax - bounds_yMin) * (bounds_zMax - bounds_zMin);
			while(idx >= 0) {
				let j = skin.allJoints[idx--];
				if(j.offsets == null || j.parent == null || j.parent.offsets == null) {
					continue;
				}
				let poff = j.parent.offsets;
				let _this = j.offsets;
				let dx = _this.xMax - _this.xMin;
				let dy = _this.yMax - _this.yMin;
				let dz = _this.zMax - _this.zMin;
				let x = (_this.xMin + _this.xMax) * 0.5;
				let y = (_this.yMin + _this.yMax) * 0.5;
				let z = (_this.zMin + _this.zMax) * 0.5;
				let r = Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5;
				if(r == null) {
					r = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				let sx = x;
				let sy = y;
				let sz = z;
				let sr = r;
				if(sr == null) {
					sr = 0.;
				}
				if(sz == null) {
					sz = 0.;
				}
				if(sy == null) {
					sy = 0.;
				}
				if(sx == null) {
					sx = 0.;
				}
				let sp_x = sx;
				let sp_y = sy;
				let sp_z = sz;
				let sp_r = sr;
				if(poff.xMin <= sp_x - sp_r && poff.yMin <= sp_y - sp_r && poff.zMin <= sp_z - sp_r && poff.xMax >= sp_x + sp_r && poff.yMax >= sp_y + sp_r && poff.zMax >= sp_z + sp_r) {
					j.offsets = null;
					++optOut;
					continue;
				}
				let b = new h3d.col.Bounds();
				b.xMin = poff.xMin;
				b.xMax = poff.xMax;
				b.yMin = poff.yMin;
				b.yMax = poff.yMax;
				b.zMin = poff.zMin;
				b.zMax = poff.zMax;
				let pext = b;
				let x1 = sp_x;
				let y1 = sp_y;
				let z1 = sp_z;
				let r1 = sp_r;
				if(x1 - r1 < pext.xMin) {
					pext.xMin = x1 - r1;
				}
				if(x1 + r1 > pext.xMax) {
					pext.xMax = x1 + r1;
				}
				if(y1 - r1 < pext.yMin) {
					pext.yMin = y1 - r1;
				}
				if(y1 + r1 > pext.yMax) {
					pext.yMax = y1 + r1;
				}
				if(z1 - r1 < pext.zMin) {
					pext.zMin = z1 - r1;
				}
				if(z1 + r1 > pext.zMax) {
					pext.zMax = z1 + r1;
				}
				let ratio = Math.sqrt(refVolume * 1.5 / ((pext.xMax - pext.xMin) * (pext.yMax - pext.yMin) * (pext.zMax - pext.zMin)));
				let k = (pext.xMax - pext.xMin) * (pext.yMax - pext.yMin) * (pext.zMax - pext.zMin) / ((poff.xMax - poff.xMin) * (poff.yMax - poff.yMin) * (poff.zMax - poff.zMin));
				if(k < ratio) {
					j.parent.offsets = pext;
					j.offsets = null;
					++optOut;
					continue;
				}
			}
		}
		let _g3 = 0;
		let _g4 = skin.allJoints;
		while(_g3 < _g4.length) {
			let j = _g4[_g3];
			++_g3;
			if(j.offsets == null) {
				j.offsetRay = -1;
				continue;
			}
			let b = j.offsets;
			let pt1;
			let pt2;
			let x = (b.xMin + b.xMax) * 0.5;
			let y = (b.yMin + b.yMax) * 0.5;
			let z = (b.zMin + b.zMax) * 0.5;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			let x1 = x;
			let y1 = y;
			let z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			let off_x = x1;
			let off_y = y1;
			let off_z = z1;
			let r;
			if(b.xMax - b.xMin > b.yMax - b.yMin && b.xMax - b.xMin > b.zMax - b.zMin) {
				let a = b.yMax - b.yMin;
				let b1 = b.zMax - b.zMin;
				r = (a < b1 ? b1 : a) * 0.5;
				let x = b.xMin + r;
				let y = off_y;
				let z = off_z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt1 = new h3d.VectorImpl(x,y,z);
				let x1 = b.xMax - r;
				let y1 = off_y;
				let z1 = off_z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				pt2 = new h3d.VectorImpl(x1,y1,z1);
			} else if(b.yMax - b.yMin > b.zMax - b.zMin) {
				let a = b.xMax - b.xMin;
				let b1 = b.zMax - b.zMin;
				r = (a < b1 ? b1 : a) * 0.5;
				let x = off_x;
				let y = b.yMin + r;
				let z = off_z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt1 = new h3d.VectorImpl(x,y,z);
				let x1 = off_x;
				let y1 = b.yMax - r;
				let z1 = off_z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				pt2 = new h3d.VectorImpl(x1,y1,z1);
			} else {
				let a = b.xMax - b.xMin;
				let b1 = b.yMax - b.yMin;
				r = (a < b1 ? b1 : a) * 0.5;
				let x = off_x;
				let y = off_y;
				let z = b.zMin + r;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt1 = new h3d.VectorImpl(x,y,z);
				let x1 = off_x;
				let y1 = off_y;
				let z1 = b.zMax - r;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				pt2 = new h3d.VectorImpl(x1,y1,z1);
			}
			b.xMin = pt1.x;
			b.yMin = pt1.y;
			b.zMin = pt1.z;
			b.xMax = pt2.x;
			b.yMax = pt2.y;
			b.zMax = pt2.z;
			j.offsetRay = r;
		}
	}
}
$hxClasses["hxd.fmt.hmd.Library"] = hxd.fmt.hmd.Library;
hxd.fmt.hmd.Library.__name__ = "hxd.fmt.hmd.Library";
Object.assign(hxd.fmt.hmd.Library.prototype, {
	__class__: hxd.fmt.hmd.Library
});
hxd.fmt.hmd.Reader = class hxd_fmt_hmd_Reader {
	constructor(i) {
		this.i = i;
	}
	readProperty() {
		let _g = this.i.readByte();
		switch(_g) {
		case 0:
			return hxd.fmt.hmd.Property.CameraFOVY(this.i.readFloat());
		case 1:
			throw haxe.Exception.thrown("Obsolete HasMaterialFlags");
		case 2:
			return hxd.fmt.hmd.Property.HasExtraTextures;
		case 3:
			return hxd.fmt.hmd.Property.FourBonesByVertex;
		default:
			let unk = _g;
			throw haxe.Exception.thrown("Unknown property #" + unk);
		}
	}
	readProps() {
		if(this.version == 1) {
			return null;
		}
		let n = this.i.readByte();
		if(n == 0) {
			return null;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = n;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(this.readProperty());
		}
		return _g;
	}
	readName() {
		let b = this.i.readByte();
		if(b == 255) {
			return null;
		}
		return this.i.readString(b);
	}
	readCachedName() {
		let name = this.readName();
		if(name == null) {
			return null;
		}
		if(hxd.fmt.hmd.Reader.HMD_STRINGS == null) {
			hxd.fmt.hmd.Reader.HMD_STRINGS = new haxe.ds.StringMap();
		}
		let n = hxd.fmt.hmd.Reader.HMD_STRINGS.h[name];
		if(n != null) {
			return n;
		}
		hxd.fmt.hmd.Reader.HMD_STRINGS.h[name] = name;
		return name;
	}
	readPosition(hasScale) {
		if(hasScale == null) {
			hasScale = true;
		}
		let p = new hxd.fmt.hmd.Position();
		p.x = this.i.readFloat();
		p.y = this.i.readFloat();
		p.z = this.i.readFloat();
		p.qx = this.i.readFloat();
		p.qy = this.i.readFloat();
		p.qz = this.i.readFloat();
		if(hasScale) {
			p.sx = this.i.readFloat();
			p.sy = this.i.readFloat();
			p.sz = this.i.readFloat();
		} else {
			p.sx = 1;
			p.sy = 1;
			p.sz = 1;
		}
		return p;
	}
	readBounds() {
		let b = new h3d.col.Bounds();
		b.xMin = this.i.readFloat();
		b.yMin = this.i.readFloat();
		b.zMin = this.i.readFloat();
		b.xMax = this.i.readFloat();
		b.yMax = this.i.readFloat();
		b.zMax = this.i.readFloat();
		return b;
	}
	readSkin() {
		let name = this.readCachedName();
		if(name == null) {
			return null;
		}
		let s = new hxd.fmt.hmd.Skin();
		s.props = this.readProps();
		s.name = name;
		s.joints = [];
		let _g = 0;
		let _g1 = this.i.readUInt16();
		while(_g < _g1) {
			let k = _g++;
			let j = new hxd.fmt.hmd.SkinJoint();
			j.props = this.readProps();
			j.name = this.readCachedName();
			let pid = this.i.readUInt16();
			let hasScale = (pid & 32768) != 0;
			if(hasScale) {
				pid &= 32767;
			}
			j.parent = pid - 1;
			j.position = this.readPosition(hasScale);
			j.bind = this.i.readUInt16() - 1;
			if(j.bind >= 0) {
				j.transpos = this.readPosition(hasScale);
			}
			s.joints.push(j);
		}
		let count = this.i.readByte();
		if(count > 0) {
			s.split = [];
			let _g = 0;
			let _g1 = count;
			while(_g < _g1) {
				let k = _g++;
				let ss = new hxd.fmt.hmd.SkinSplit();
				ss.materialIndex = this.i.readByte();
				let _g1 = [];
				let _g2 = 0;
				let _g3 = this.i.readByte();
				while(_g2 < _g3) {
					let k = _g2++;
					_g1.push(this.i.readUInt16());
				}
				ss.joints = _g1;
				s.split.push(ss);
			}
		}
		return s;
	}
	readHeader(fast) {
		if(fast == null) {
			fast = false;
		}
		let d = new hxd.fmt.hmd.Data();
		let h = this.i.readString(3);
		if(h != "HMD") {
			if(HxOverrides.cca(h,0) == 59) {
				throw haxe.Exception.thrown("FBX was not converted to HMD");
			}
			throw haxe.Exception.thrown("Invalid HMD header " + encodeURIComponent(h));
		}
		this.version = this.i.readByte();
		if(this.version > 3) {
			throw haxe.Exception.thrown("Can't read HMD v" + this.version);
		}
		d.version = this.version;
		d.geometries = [];
		d.dataPosition = this.i.readInt32();
		if(fast) {
			this.i = new haxe.io.BytesInput(this.i.read(d.dataPosition - 12));
		}
		d.props = this.readProps();
		let _g = 0;
		let _g1 = this.i.readInt32();
		while(_g < _g1) {
			let k = _g++;
			let g = new hxd.fmt.hmd.Geometry();
			g.props = this.readProps();
			g.vertexCount = this.i.readInt32();
			let stride = this.i.readByte();
			let _g1 = [];
			let _g2 = 0;
			let _g3 = this.i.readByte();
			while(_g2 < _g3) {
				let k = _g2++;
				let name = this.readCachedName();
				let type = this.i.readByte();
				_g1.push(new hxd.BufferInput(name,type & 15,type >> 4));
			}
			g.vertexFormat = hxd.BufferFormat.make(_g1);
			if(stride != g.vertexFormat.stride) {
				throw haxe.Exception.thrown("assert");
			}
			g.vertexPosition = this.i.readInt32();
			let subCount = this.i.readByte();
			if(subCount == 255) {
				subCount = this.i.readInt32();
			}
			let _g4 = [];
			let _g5 = 0;
			let _g6 = subCount;
			while(_g5 < _g6) {
				let k = _g5++;
				_g4.push(this.i.readInt32());
			}
			g.indexCounts = _g4;
			g.indexPosition = this.i.readInt32();
			g.bounds = this.readBounds();
			d.geometries.push(g);
		}
		d.materials = [];
		let _g2 = 0;
		let _g3 = this.i.readInt32();
		while(_g2 < _g3) {
			let k = _g2++;
			let m = new hxd.fmt.hmd.Material();
			m.props = this.readProps();
			m.name = this.readName();
			m.diffuseTexture = this.readName();
			m.blendMode = hxd.fmt.hmd.Reader.BLEND[this.i.readByte()];
			this.i.readByte();
			this.i.readFloat();
			if(m.props != null && m.props.indexOf(hxd.fmt.hmd.Property.HasExtraTextures) >= 0) {
				m.specularTexture = this.readName();
				m.normalMap = this.readName();
			}
			d.materials.push(m);
		}
		d.models = [];
		let _g4 = 0;
		let _g5 = this.i.readInt32();
		while(_g4 < _g5) {
			let k = _g4++;
			let m = new hxd.fmt.hmd.Model();
			m.props = this.readProps();
			m.name = this.readCachedName();
			m.parent = this.i.readInt32() - 1;
			m.follow = this.readCachedName();
			m.position = this.readPosition();
			m.geometry = this.i.readInt32() - 1;
			d.models.push(m);
			if(m.geometry < 0) {
				continue;
			}
			m.materials = [];
			let matCount = this.i.readByte();
			if(matCount == 255) {
				matCount = this.i.readInt32();
			}
			let _g = 0;
			let _g1 = matCount;
			while(_g < _g1) {
				let k = _g++;
				m.materials.push(this.i.readInt32());
			}
			m.skin = this.readSkin();
		}
		d.animations = [];
		let _g6 = 0;
		let _g7 = this.i.readInt32();
		while(_g6 < _g7) {
			let k = _g6++;
			let a = new hxd.fmt.hmd.Animation();
			a.props = this.readProps();
			a.name = this.readName();
			a.frames = this.i.readInt32();
			a.sampling = this.i.readFloat();
			a.speed = this.i.readFloat();
			let flags = this.i.readByte();
			a.loop = (flags & 1) != 0;
			a.dataPosition = this.i.readInt32();
			a.objects = [];
			let _g = 0;
			let _g1 = this.i.readInt32();
			while(_g < _g1) {
				let k = _g++;
				let o = new hxd.fmt.hmd.AnimationObject();
				o.name = this.readCachedName();
				let i = this.i.readByte();
				if(i == null) {
					i = 0;
				}
				o.flags = i;
				a.objects.push(o);
				if((o.flags & 1 << hxd.fmt.hmd.AnimationFlag.HasProps._hx_index) != 0) {
					let _g = [];
					let _g1 = 0;
					let _g2 = this.i.readByte();
					while(_g1 < _g2) {
						let i = _g1++;
						_g.push(this.readName());
					}
					o.props = _g;
				}
			}
			if((flags & 2) != 0) {
				a.events = [];
				let _g = 0;
				let _g1 = this.i.readInt32();
				while(_g < _g1) {
					let k = _g++;
					let e = new hxd.fmt.hmd.AnimationEvent();
					e.frame = this.i.readInt32();
					e.data = this.readCachedName();
					a.events.push(e);
				}
			}
			d.animations.push(a);
		}
		return d;
	}
	read() {
		let h = this.readHeader();
		h.data = this.i.read(this.i.readInt32());
		return h;
	}
}
$hxClasses["hxd.fmt.hmd.Reader"] = hxd.fmt.hmd.Reader;
hxd.fmt.hmd.Reader.__name__ = "hxd.fmt.hmd.Reader";
Object.assign(hxd.fmt.hmd.Reader.prototype, {
	__class__: hxd.fmt.hmd.Reader
});
hxd.fs = {};
hxd.fs.FileEntry = class hxd_fs_FileEntry {
	getBytes() {
		return null;
	}
	readBytes(out,outPos,pos,len) {
		throw haxe.Exception.thrown("readBytes() not implemented");
	}
	fetchBytes(pos,len) {
		let bytes = hxd.fs.FileEntry.TMP_BYTES;
		if(bytes == null || bytes.length < len) {
			let allocSize = len + 65535 & -65536;
			bytes = new haxe.io.Bytes(new ArrayBuffer(allocSize));
			hxd.fs.FileEntry.TMP_BYTES = bytes;
		}
		this.readFull(bytes,pos,len);
		return bytes;
	}
	readFull(bytes,pos,len) {
		if(this.readBytes(bytes,0,pos,len) < len) {
			throw haxe.Exception.thrown(new haxe.io.Eof());
		}
	}
	getSign() {
		let bytes = this.fetchBytes(0,4);
		return bytes.b[0] | bytes.b[1] << 8 | bytes.b[2] << 16 | bytes.b[3] << 24;
	}
	getText() {
		return this.getBytes().toString();
	}
	open() {
		return new hxd.fs.FileInput(this);
	}
	load(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe.Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	loadBitmap(onLoaded) {
		throw haxe.Exception.thrown("loadBitmap() not implemented");
	}
	watch(onChanged) {
	}
	exists(name) {
		return false;
	}
	get(name) {
		return null;
	}
	iterator() {
		return null;
	}
	get_isAvailable() {
		return true;
	}
	get_isDirectory() {
		return false;
	}
	get_size() {
		return 0;
	}
	get_path() {
		throw haxe.Exception.thrown("path() not implemented");
	}
	get_directory() {
		let idx = this.get_path().lastIndexOf("/");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.get_path(),0,idx);
	}
	get_extension() {
		let idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
}
$hxClasses["hxd.fs.FileEntry"] = hxd.fs.FileEntry;
hxd.fs.FileEntry.__name__ = "hxd.fs.FileEntry";
Object.assign(hxd.fs.FileEntry.prototype, {
	__class__: hxd.fs.FileEntry
	,__properties__: {get_isAvailable: "get_isAvailable",get_isDirectory: "get_isDirectory",get_size: "get_size",get_extension: "get_extension",get_directory: "get_directory",get_path: "get_path"}
});
hxd.fs.BytesFileEntry = class hxd_fs_BytesFileEntry extends hxd.fs.FileEntry {
	constructor(path,bytes) {
		super();
		this.fullPath = path;
		this.name = path.split("/").pop();
		this.bytes = bytes;
	}
	get_path() {
		return this.fullPath;
	}
	getBytes() {
		return this.bytes;
	}
	readBytes(out,outPos,pos,len) {
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	load(onReady) {
		haxe.Timer.delay(onReady,1);
	}
	loadBitmap(onLoaded) {
		let mime;
		switch(haxe.io.Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw haxe.Exception.thrown("Cannot determine image encoding, try adding an extension to the resource path");
		}
		let img = new Image();
		img.onload = function() {
			onLoaded(img);
		};
		let tmp = haxe.crypto.Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	exists(name) {
		return false;
	}
	get(name) {
		return null;
	}
	iterator() {
		return new hxd.impl.ArrayIterator_hxd_fs_FileEntry([]);
	}
	get_size() {
		return this.bytes.length;
	}
}
$hxClasses["hxd.fs.BytesFileEntry"] = hxd.fs.BytesFileEntry;
hxd.fs.BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd.fs.BytesFileEntry.__super__ = hxd.fs.FileEntry;
Object.assign(hxd.fs.BytesFileEntry.prototype, {
	__class__: hxd.fs.BytesFileEntry
});
hxd.fs.FileSystem = class hxd_fs_FileSystem {
}
$hxClasses["hxd.fs.FileSystem"] = hxd.fs.FileSystem;
hxd.fs.FileSystem.__name__ = "hxd.fs.FileSystem";
hxd.fs.FileSystem.__isInterface__ = true;
Object.assign(hxd.fs.FileSystem.prototype, {
	__class__: hxd.fs.FileSystem
});
hxd.fs.BytesFileSystem = class hxd_fs_BytesFileSystem {
	constructor() {
	}
	getRoot() {
		throw haxe.Exception.thrown("Not implemented");
	}
	getBytes(path) {
		throw haxe.Exception.thrown("Not implemented");
	}
	exists(path) {
		return this.getBytes(path) != null;
	}
	get(path) {
		let bytes = this.getBytes(path);
		if(bytes == null) {
			throw haxe.Exception.thrown("Resource not found '" + path + "'");
		}
		return new hxd.fs.BytesFileEntry(path,bytes);
	}
	dispose() {
	}
	dir(path) {
		throw haxe.Exception.thrown("Not implemented");
	}
}
$hxClasses["hxd.fs.BytesFileSystem"] = hxd.fs.BytesFileSystem;
hxd.fs.BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd.fs.BytesFileSystem.__interfaces__ = [hxd.fs.FileSystem];
Object.assign(hxd.fs.BytesFileSystem.prototype, {
	__class__: hxd.fs.BytesFileSystem
});
hxd.fs.FileInput = class hxd_fs_FileInput extends haxe.io.Input {
	constructor(entry) {
		super();
		this.nextReadPos = 0;
		this.cacheLen = 0;
		this.cachePos = 0;
		this.entry = entry;
	}
	fetch(dataSize) {
		if(dataSize == null) {
			dataSize = 256;
		}
		let prev = this.cache;
		if(this.cache == null || this.cache.length < dataSize) {
			this.cache = hxd.fs.FileInput.PREFETCH_CACHE;
			if(this.cache != null && this.cache.length >= dataSize) {
				hxd.fs.FileInput.PREFETCH_CACHE = null;
			} else {
				this.cache = new haxe.io.Bytes(new ArrayBuffer(dataSize));
			}
		}
		let startPos = 0;
		if(this.cacheLen > 0) {
			startPos = this.cacheLen;
			dataSize -= this.cacheLen;
			this.cache.blit(0,prev,this.cachePos,this.cacheLen);
		}
		let read = this.entry.readBytes(this.cache,startPos,this.nextReadPos,dataSize);
		this.cachePos = 0;
		this.cacheLen = startPos + read;
		this.nextReadPos += read;
		if(this.cacheLen == 0) {
			throw haxe.Exception.thrown(new haxe.io.Eof());
		}
	}
	skip(nbytes) {
		if(this.cacheLen > 0) {
			let a = this.cacheLen;
			let k = a > nbytes ? nbytes : a;
			this.cachePos += k;
			this.cacheLen -= k;
			nbytes -= k;
		}
		this.nextReadPos += nbytes;
	}
	readByte() {
		if(this.cacheLen == 0) {
			this.fetch();
		}
		let b = this.cache.b[this.cachePos++];
		this.cacheLen--;
		return b;
	}
	readBytes(b,pos,len) {
		let tot = 0;
		if(len < 256 && this.cacheLen < len) {
			this.fetch();
		}
		if(this.cacheLen > 0) {
			let b1 = this.cacheLen;
			let k = len > b1 ? b1 : len;
			b.blit(pos,this.cache,this.cachePos,k);
			this.cachePos += k;
			this.cacheLen -= k;
			len -= k;
			if(len == 0) {
				return k;
			}
			pos += k;
			tot += k;
		}
		if(len > 0) {
			let k = this.entry.readBytes(b,pos,this.nextReadPos,len);
			this.nextReadPos += k;
			tot += k;
		}
		return tot;
	}
	close() {
		if(this.cache != null && (hxd.fs.FileInput.PREFETCH_CACHE == null || hxd.fs.FileInput.PREFETCH_CACHE.length < this.cache.length)) {
			hxd.fs.FileInput.PREFETCH_CACHE = this.cache;
		}
		this.cache = null;
		this.cacheLen = 0;
	}
}
$hxClasses["hxd.fs.FileInput"] = hxd.fs.FileInput;
hxd.fs.FileInput.__name__ = "hxd.fs.FileInput";
hxd.fs.FileInput.__super__ = haxe.io.Input;
Object.assign(hxd.fs.FileInput.prototype, {
	__class__: hxd.fs.FileInput
});
hxd.fs.LoadedBitmap = class hxd_fs_LoadedBitmap {
	static _new(data) {
		return data;
	}
	static toBitmap(this1) {
		let bmp = new hxd.BitmapData(this1.width,this1.height);
		bmp.ctx.drawImage(this1,0,0);
		return bmp;
	}
	static toNative(this1) {
		return this1;
	}
}
hxd.fs.NotFound = class hxd_fs_NotFound {
	constructor(path) {
		this.path = path;
	}
	toString() {
		return "Resource file not found '" + this.path + "'";
	}
}
$hxClasses["hxd.fs.NotFound"] = hxd.fs.NotFound;
hxd.fs.NotFound.__name__ = "hxd.fs.NotFound";
Object.assign(hxd.fs.NotFound.prototype, {
	__class__: hxd.fs.NotFound
});
hxd.impl.BufferFlags = class hxd_impl_BufferFlags {
	static toInt(this1) {
		return this1;
	}
}
hxd.impl.Allocator = class hxd_impl_Allocator {
	constructor() {
	}
	allocBuffer(vertices,format1,flags) {
		if(flags == null) {
			flags = 0;
		}
		let tmp;
		switch(flags) {
		case 0:
			tmp = [h3d.BufferFlag.Dynamic];
			break;
		case 1:
			tmp = null;
			break;
		case 2:
			tmp = [h3d.BufferFlag.UniformBuffer,h3d.BufferFlag.Dynamic];
			break;
		}
		return new h3d.Buffer(vertices,format1,tmp);
	}
	ofFloats(v,format1,flags) {
		if(flags == null) {
			flags = 0;
		}
		let nvert = v.pos / format1.stride | 0;
		return this.ofSubFloats(v,nvert,format1,flags);
	}
	ofSubFloats(v,vertices,format1,flags) {
		if(flags == null) {
			flags = 0;
		}
		let b = this.allocBuffer(vertices,format1,flags);
		b.uploadFloats(v,0,vertices);
		return b;
	}
	disposeBuffer(b) {
		b.dispose();
	}
	allocIndexBuffer(count) {
		return h3d.Indexes._new(count);
	}
	ofIndexes(ib,length) {
		if(length == null) {
			length = -1;
		}
		if(length < 0 && ib != null) {
			length = ib.length;
		}
		let idx = this.allocIndexBuffer(length);
		h3d.Indexes.uploadIndexes(idx,ib,0,length);
		return idx;
	}
	disposeIndexBuffer(i) {
		i.dispose();
	}
	onContextLost() {
	}
	allocFloats(count) {
		let length = count;
		if(length == null) {
			length = 0;
		}
		return hxd._FloatBuffer.Float32Expand._new(length);
	}
	disposeFloats(f) {
	}
	allocIndexes(count) {
		let length = count;
		if(length == null) {
			length = 0;
		}
		return new Array(length);
	}
	disposeIndexes(i) {
	}
	static set(a) {
		hxd.impl.Allocator.inst = a;
	}
	static get() {
		if(hxd.impl.Allocator.inst == null) {
			hxd.impl.Allocator.inst = new hxd.impl.Allocator();
		}
		return hxd.impl.Allocator.inst;
	}
}
$hxClasses["hxd.impl.Allocator"] = hxd.impl.Allocator;
hxd.impl.Allocator.__name__ = "hxd.impl.Allocator";
Object.assign(hxd.impl.Allocator.prototype, {
	__class__: hxd.impl.Allocator
});
hxd.impl.ArrayIterator = class hxd_impl_ArrayIterator {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator"] = hxd.impl.ArrayIterator;
hxd.impl.ArrayIterator.__name__ = "hxd.impl.ArrayIterator";
Object.assign(hxd.impl.ArrayIterator.prototype, {
	__class__: hxd.impl.ArrayIterator
});
hxd.impl.ArrayIterator_h2d_Object = class hxd_impl_ArrayIterator_$h2d_$Object {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_Object"] = hxd.impl.ArrayIterator_h2d_Object;
hxd.impl.ArrayIterator_h2d_Object.__name__ = "hxd.impl.ArrayIterator_h2d_Object";
Object.assign(hxd.impl.ArrayIterator_h2d_Object.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_Object
});
hxd.impl.ArrayIterator_h2d_col_IPoint = class hxd_impl_ArrayIterator_$h2d_$col_$IPoint {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_col_IPoint"] = hxd.impl.ArrayIterator_h2d_col_IPoint;
hxd.impl.ArrayIterator_h2d_col_IPoint.__name__ = "hxd.impl.ArrayIterator_h2d_col_IPoint";
Object.assign(hxd.impl.ArrayIterator_h2d_col_IPoint.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_col_IPoint
});
hxd.impl.ArrayIterator_h2d_col_IPolygon = class hxd_impl_ArrayIterator_$h2d_$col_$IPolygon {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_col_IPolygon"] = hxd.impl.ArrayIterator_h2d_col_IPolygon;
hxd.impl.ArrayIterator_h2d_col_IPolygon.__name__ = "hxd.impl.ArrayIterator_h2d_col_IPolygon";
Object.assign(hxd.impl.ArrayIterator_h2d_col_IPolygon.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_col_IPolygon
});
hxd.impl.ArrayIterator_h2d_col_Point = class hxd_impl_ArrayIterator_$h2d_$col_$Point {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Point"] = hxd.impl.ArrayIterator_h2d_col_Point;
hxd.impl.ArrayIterator_h2d_col_Point.__name__ = "hxd.impl.ArrayIterator_h2d_col_Point";
Object.assign(hxd.impl.ArrayIterator_h2d_col_Point.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_col_Point
});
hxd.impl.ArrayIterator_h2d_col_Polygon = class hxd_impl_ArrayIterator_$h2d_$col_$Polygon {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Polygon"] = hxd.impl.ArrayIterator_h2d_col_Polygon;
hxd.impl.ArrayIterator_h2d_col_Polygon.__name__ = "hxd.impl.ArrayIterator_h2d_col_Polygon";
Object.assign(hxd.impl.ArrayIterator_h2d_col_Polygon.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_col_Polygon
});
hxd.impl.ArrayIterator_h2d_col_Segment = class hxd_impl_ArrayIterator_$h2d_$col_$Segment {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Segment"] = hxd.impl.ArrayIterator_h2d_col_Segment;
hxd.impl.ArrayIterator_h2d_col_Segment.__name__ = "hxd.impl.ArrayIterator_h2d_col_Segment";
Object.assign(hxd.impl.ArrayIterator_h2d_col_Segment.prototype, {
	__class__: hxd.impl.ArrayIterator_h2d_col_Segment
});
hxd.impl.ArrayIterator_h3d_scene_Object = class hxd_impl_ArrayIterator_$h3d_$scene_$Object {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_h3d_scene_Object"] = hxd.impl.ArrayIterator_h3d_scene_Object;
hxd.impl.ArrayIterator_h3d_scene_Object.__name__ = "hxd.impl.ArrayIterator_h3d_scene_Object";
Object.assign(hxd.impl.ArrayIterator_h3d_scene_Object.prototype, {
	__class__: hxd.impl.ArrayIterator_h3d_scene_Object
});
hxd.impl.ArrayIterator_hxd_fs_FileEntry = class hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_hxd_fs_FileEntry"] = hxd.impl.ArrayIterator_hxd_fs_FileEntry;
hxd.impl.ArrayIterator_hxd_fs_FileEntry.__name__ = "hxd.impl.ArrayIterator_hxd_fs_FileEntry";
Object.assign(hxd.impl.ArrayIterator_hxd_fs_FileEntry.prototype, {
	__class__: hxd.impl.ArrayIterator_hxd_fs_FileEntry
});
hxd.impl.ArrayIterator_hxd_res_Any = class hxd_impl_ArrayIterator_$hxd_$res_$Any {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_hxd_res_Any"] = hxd.impl.ArrayIterator_hxd_res_Any;
hxd.impl.ArrayIterator_hxd_res_Any.__name__ = "hxd.impl.ArrayIterator_hxd_res_Any";
Object.assign(hxd.impl.ArrayIterator_hxd_res_Any.prototype, {
	__class__: hxd.impl.ArrayIterator_hxd_res_Any
});
hxd.impl.ArrayIterator_hxd_snd_Channel = class hxd_impl_ArrayIterator_$hxd_$snd_$Channel {
	constructor(a) {
		this.i = 0;
		this.a = a;
		this.l = this.a.length;
	}
	hasNext() {
		return this.i < this.l;
	}
	next() {
		return this.a[this.i++];
	}
}
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd.impl.ArrayIterator_hxd_snd_Channel;
hxd.impl.ArrayIterator_hxd_snd_Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
Object.assign(hxd.impl.ArrayIterator_hxd_snd_Channel.prototype, {
	__class__: hxd.impl.ArrayIterator_hxd_snd_Channel
});
hxd.impl.AsyncLoader = class hxd_impl_AsyncLoader {
}
$hxClasses["hxd.impl.AsyncLoader"] = hxd.impl.AsyncLoader;
hxd.impl.AsyncLoader.__name__ = "hxd.impl.AsyncLoader";
hxd.impl.AsyncLoader.__isInterface__ = true;
Object.assign(hxd.impl.AsyncLoader.prototype, {
	__class__: hxd.impl.AsyncLoader
});
hxd.impl.BitSet = class hxd_impl_BitSet {
	static _new(count) {
		return new haxe.io.Bytes(new ArrayBuffer(count + 7 >> 3));
	}
	static get(this1,index) {
		return (this1.b[index >> 3] & 1 << (index & 7)) != 0;
	}
	static set(this1,index) {
		let p = index >> 3;
		this1.b[p] |= 1 << (index & 7);
	}
	static unset(this1,index) {
		let p = index >> 3;
		this1.b[p] &= ~(1 << (index & 7));
	}
	static toggle(this1,index,b) {
		let p = index >> 3;
		let v = this1.b[p];
		let mask = 1 << (index & 7);
		this1.b[p] = b ? v | mask : v & ~mask;
	}
	static clear(this1,b) {
		if(b == null) {
			b = false;
		}
		this1.fill(0,this1.length,b ? 255 : 0);
	}
}
hxd.impl.MouseMode = $hxEnums["hxd.impl.MouseMode"] = { __ename__:true,__constructs__:null
	,Absolute: {_hx_name:"Absolute",_hx_index:0,__enum__:"hxd.impl.MouseMode",toString:$estr}
	,Relative: ($_=function(callback,restorePos) { return {_hx_index:1,callback:callback,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr}; },$_._hx_name="Relative",$_.__params__ = ["callback","restorePos"],$_)
	,AbsoluteUnbound: ($_=function(restorePos) { return {_hx_index:2,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr}; },$_._hx_name="AbsoluteUnbound",$_.__params__ = ["restorePos"],$_)
};
hxd.impl.MouseMode.__constructs__ = [hxd.impl.MouseMode.Absolute,hxd.impl.MouseMode.Relative,hxd.impl.MouseMode.AbsoluteUnbound];
hxd.impl.MouseMode.__empty_constructs__ = [hxd.impl.MouseMode.Absolute];
hxd.impl.UncheckedBytes = class hxd_impl_UncheckedBytes {
	static _new(v) {
		return v;
	}
	static get(this1,i) {
		return this1[i];
	}
	static set(this1,i,v) {
		this1[i] = v;
		return v;
	}
	static fromBytes(b) {
		return b.b;
	}
}
hxd.res = {};
hxd.res._Any = {};
hxd.res._Any.SingleFileSystem = class hxd_res__$Any_SingleFileSystem extends hxd.fs.BytesFileSystem {
	constructor(path,bytes) {
		super();
		this.path = path;
		this.bytes = bytes;
	}
	getBytes(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
}
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd.res._Any.SingleFileSystem;
hxd.res._Any.SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd.res._Any.SingleFileSystem.__super__ = hxd.fs.BytesFileSystem;
Object.assign(hxd.res._Any.SingleFileSystem.prototype, {
	__class__: hxd.res._Any.SingleFileSystem
});
hxd.res.Resource = class hxd_res_Resource {
	constructor(entry) {
		if(hxd.res.Resource._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(entry);
	}
	_hx_constructor(entry) {
		this.entry = entry;
	}
	get_name() {
		return this.entry.name;
	}
	toString() {
		return this.entry.get_path();
	}
	watch(onChanged) {
		if(hxd.res.Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
}
$hxClasses["hxd.res.Resource"] = hxd.res.Resource;
hxd.res.Resource.__name__ = "hxd.res.Resource";
Object.assign(hxd.res.Resource.prototype, {
	__class__: hxd.res.Resource
	,__properties__: {get_name: "get_name"}
});
hxd.res.Any = class hxd_res_Any extends hxd.res.Resource {
	constructor(loader,entry) {
		super(entry);
		this.loader = loader;
	}
	toModel() {
		return this.loader.loadCache(this.entry.get_path(),hxd.res.Model);
	}
	toTexture() {
		return this.toImage().toTexture();
	}
	toTile() {
		return this.toImage().toTile();
	}
	toText() {
		return this.entry.getText();
	}
	toImage() {
		return this.loader.loadCache(this.entry.get_path(),hxd.res.Image);
	}
	toSound() {
		return this.loader.loadCache(this.entry.get_path(),hxd.res.Sound);
	}
	toPrefab() {
		return this.loader.loadCache(this.entry.get_path(),hxd.res.Resource);
	}
	to(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	iterator() {
		let _g = [];
		let _g1 = this.entry.iterator();
		while(_g1.i < _g1.l) {
			let f = _g1.a[_g1.i++];
			_g.push(new hxd.res.Any(this.loader,f));
		}
		return new hxd.impl.ArrayIterator_hxd_res_Any(_g);
	}
	static fromBytes(path,bytes) {
		let fs = new hxd.res._Any.SingleFileSystem(path,bytes);
		return new hxd.res.Loader(fs).load(path);
	}
}
$hxClasses["hxd.res.Any"] = hxd.res.Any;
hxd.res.Any.__name__ = "hxd.res.Any";
hxd.res.Any.__super__ = hxd.res.Resource;
Object.assign(hxd.res.Any.prototype, {
	__class__: hxd.res.Any
});
hxd.res.BitmapFont = class hxd_res_BitmapFont extends hxd.res.Resource {
	constructor(entry) {
		super(entry);
		this.loader = hxd.res.Loader.currentInstance;
	}
	toFont() {
		if(this.font == null) {
			this.font = hxd.fmt.bfnt.FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	toSdfFont(size,channel,alphaCutoff,smoothing) {
		if(smoothing == null) {
			smoothing = -1;
		}
		if(alphaCutoff == null) {
			alphaCutoff = 0.5;
		}
		if(channel == null) {
			channel = 0;
		}
		if(this.sdfFonts == null) {
			this.sdfFonts = [];
		}
		if(size == null) {
			size = this.toFont().size;
		}
		let _g = 0;
		let _g1 = this.sdfFonts;
		while(_g < _g1.length) {
			let font = _g1[_g];
			++_g;
			let _g2 = font.type;
			if(_g2._hx_index == 1) {
				let fchannel = _g2.channel;
				let falphaCutoff = _g2.alphaCutoff;
				let fsmoothing = _g2.smoothing;
				if(font.size == size && fchannel == channel && falphaCutoff == alphaCutoff && fsmoothing == smoothing) {
					return font;
				}
			}
		}
		let font = hxd.fmt.bfnt.FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveSdfTile));
		font.type = h2d.FontType.SignedDistanceField(channel,alphaCutoff,smoothing);
		font.resizeTo(size);
		this.sdfFonts.push(font);
		return font;
	}
	resolveSdfTile(path) {
		let tex = this.loader.load(path).toTexture();
		tex.set_filter(h3d.mat.Filter.Linear);
		return h2d.Tile.fromTexture(tex);
	}
	resolveTile(path) {
		return this.loader.load(path).toTile();
	}
}
$hxClasses["hxd.res.BitmapFont"] = hxd.res.BitmapFont;
hxd.res.BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd.res.BitmapFont.__super__ = hxd.res.Resource;
Object.assign(hxd.res.BitmapFont.prototype, {
	__class__: hxd.res.BitmapFont
});
hxd.res.DefaultFont = class hxd_res_DefaultFont {
	static get() {
		let engine = h3d.Engine.CURRENT;
		let fnt = engine.resCache.h[hxd.res.DefaultFont.__id__];
		if(fnt == null) {
			let BYTES = hxd.res.Any.fromBytes("hxd/res/defaultFont.png",haxe.Unserializer.run("s3176:iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACPBJREFUeJztnelypDoMRp2p%:6v3PNjhrlCLX1aLIPBPlWppI03bCG0QOfn8:m0zbr8KupnS9FDqRKAzUOhAvBRfqO:tfrSZ86H:ET79o6Rhc%JzzNSD7Xn:XyEH9RPtP4X:6GDDj6ttR:Hb62d9pmX8b487StA4:DFlup5z5MSWS%tL:f6eG4BXDppGQdtApJEtPm0zkf427Oo1fAxtfO2hDIruGXCLgnAD:jNyzSsKxa18yBphyqQ1jqwBN1zHmgcU3V3jHui9xaArkS0%XzTohOX%jvGauzvjMrlUJXuqSeV07G0ekgTovWS1t61vr0CQAez7nkj7uFIELJqmdN7RWvzil7hnnXV5qLOzSMAmlcQub9ZRuEsaNoq0w5RZbN0rye1ASzplWyAiGEXQVK3kZOdRcgy9:FLoRogI02WNc7rRQw3jzsZAfWB7skR44%3jdo6Wv2qfr4rFuUCZlftrT1jjpezSih4b75ClQDMvrizz%82uA1wMCqsKvUv3YO045rxma2vjY3mpPUvuV1WKDzbLtqfNu9:AjA6tl69QM3Zn1Wfl1M8G:CUW4s6b%sWIEXWtM:omNeXrnaDRm:OyIsE1UOfQ1gCwMOLdFCqWnj8Grl5nsjVakRjHMj1DgnEcQvw%OV0AE0wGisfqTKrbBYrZ4BiB:T4ldE8dPsMxU2oEWgZZtoAyMCq2GxtLlWCFbEB%PGIYWv1kxECq0%TbDKITjpirVr9SW2zC:skqqKdUp%QwwbILKwlgZk2mkBlmUVgPPOI3IbL0GwASY2PiMdbPrfVF6:vVctIq5SoVqNdxtrvWXt1:EguYHVL:ZV4Q8F781%KVwD25r8UagTyYE4TjkllmfrU4udtI%XZdrRcm5c1T%3cPXjq9RqEYTewIrau1a%ODVSBomgeL4cLudedG%H2pah4KBQx8gSnWMC:8AvDKwS0fXU5n59Uf7gAXA1dfG1TtM1Bm2ZtKi%PCGaVlpXKrf67ngeI%uFXoW1WdvNH0ztuV3vNBvAOrC30wR0LG7kX0:p3MjoCqPYfiQNI3BK%BEhq31vfYtS5UkN5lCD%NGWMSBxAWyyeyKkAJYc2Z6JrfqpvGYF0IzxqNWoDoPrSeNJ8POMgtJg76rtSEyDNErGzUF5F3ZOq9wI2D%VtbuBsaFfkNGwBGMtUmy3BjUAtxs3x3LOk8mi7zWB6Xw7leCNlb%LRXkrk%wEOpESIlezxlvM%uSWuzQXNx1Ofjqd5Aah:qW5PGDfbjpZzRCGlbwZ5T0TqMHMVoLgCP56Nj0fqo7mhLOeMGoDPx4wE0sW64mRmXLSDaCZvxPjSeNnAGKx:hxcw8%a3Zkc7tTqjyWgbs:4d3w8wW:7AC42l3zF:dH9H9SGedwO9rmEEz4nMpCXuznFoSS5tf9x9e24ByFjqodKAQio6EjfP9C8duzLHoZ0r8oD%LzRyAZY1XN2umux8n0L3OkeygcdnDzMYTSvQvc47G7g4q3xL2EqE8jhbAN6H9YDJ6TaxBeCduJNy3AjkrghySay8QXOU84lZSQ8plj:ioYuIG%axvLUrcoRxHHGHXelgKzkTWSxtLK:7whM8UaGLzs3qJ7P5IxNI0axh%hbAgxhWMGJ01M%KVKIASXQcipVR7MEz524XboQNoKVwPZPNhkpRjD5yRdM53B0c0qKDvE4X9PVw78JYWPc7usEo9cm1TAa0%R:hh44n1UXz1sjaB0dbJATdGoB:R1Dv:c4DGktSez33TNqW96MZtVo:R53sPLQxvGseCWu7y2d7Kji70MgQRUIwM5nNb%1bc8HyK%MAHiMtq2q5ypaOS39rdTz9jMaac4kg87eDpSsp4%bx:iS3UZLOqMQPM44Y3jGuSoCVabERyaCsj:90qs7TG1soWePZbICViWharvnSgrfTwYsz0gjckvUApHcDOdwa9waDvIGjCFZ:2vwzfVeGj7W%qs4ns0ettbMASJvG:WfJ%JAGHOVvI6GSxtMEUfNENK%FH%NtNaz1qzif7B79mcC2AdbG8zVxyNqMtrGkTQqZWmHUqvJjDJg%BZ9Rf552I8qtY%a:jUMnEG3j9V1RvWgUryfqFyXql1etX2aP:vGER8JWCCLdxhME4OlMbWTdLQCRhA%qX1WegVrZEbtjCjQjsDnKM200Y8nLjDaAx%WdVgg8:zfQY%1620Q8grcxpRDcfQvwMN2ivYm7s4GSRkGZLuRvV5T3AP1tAe08q8qtY38KJo4Ejgglbxh3awCJQyL35l:AjAKwN:5CKozAqpRm7zibBBUCMDJFi:p5GlMKcJUbGAm4aIkdlPCpttK9xz1RxMhzAdVCkDmnE5H:GURPXLta7ypHcz248%GLWR6Q%cL7ZdHRVOddWHPt1VRWX6O1mERXuNt6HmBmooGXnlB178MX3vIr5nhCejkUbf7VhgyalyWwngcjqsorxxg5xy%oDeDZ:Du0Qub%2aP6M%XVfSFK90D6ihjranoC2pUgUVVe0VdUw2bmeEKyASx1OwvWfQ7dPqi1XlFe1Vd0nbu1C:%HEeEObuSH:LyRKzSW6QZKvjDXDNKxqvIsR19a:624vKKvW9Zy5nTw5swQO2zGbODmDNdmpWwBmJ%hNo7n7WAJ5L703FN4DD:Sr3RcK6uar0XVnHvHUbHeDqadawaLFA3jbTwW6tH2aC%5oqgfLXYRGcOab5SKOVvz8sY75AneZATyQd:qyt1ByFjkGoCrR6u8gXLtc2tn:51qD22s7Pwi5Z5jEryNtS6jy6U5qfS8HZwFTWp0ogWdj3Wu0nmPWJ8K3HO62gvoul:dhKbBPPWmp:fdwBXwXNGa8TY92ruBzVG%GpoqnUXtp9CeCdza4JvZLhDqyqb3hT8RRDtH5VmyavKKREn0XCW1f3WiDKWmpTpf7GTQc:F6OpCdC3guJdp5C8CzkTY9JAg8Ekh:bxaAPxVMf28WgP7XMMrWAovwhO8I2gxkC8DibAFYnC0Ai6OFgjeL4Pmm0M2L0dzAzSJY2cDNy:E8ELJ5MdsLWJwtAIuzBWBxtgAszhaAxdkCsDi:AYnqZwd25SoPAAAAAElFTkSuQmCC"));
			let DESC = hxd.res.Any.fromBytes("hxd/res/defaultFont.fnt",haxe.Unserializer.run("s14030:PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPEZvbnQgc2l6ZT0iMTIiIGZhbWlseT0iUGl4ZWwgT3BlcmF0b3IiIGhlaWdodD0iMTYiIHN0eWxlPSJSZWd1bGFyIj4KIDxDaGFyIHdpZHRoPSI0IiBvZmZzZXQ9IjAgMTMiIHJlY3Q9IjEgMTIgMCAwIiBjb2RlPSIgIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIgMyAxIDkiIGNvZGU9IiEiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNCAzIDMgMyIgY29kZT0iJnF1b3Q7Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjggMyA2IDkiIGNvZGU9IiMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTUgMSA1IDEzIiBjb2RlPSIkIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIxIDMgNyA5IiBjb2RlPSIlIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI5IDMgNSA5IiBjb2RlPSImYW1wOyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIzNSAzIDEgMyIgY29kZT0iJyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSIzNyAzIDMgOSIgY29kZT0iKCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI0MSAzIDMgOSIgY29kZT0iKSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSAzIDUgNSIgY29kZT0iKiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI1MSA1IDUgNSIgY29kZT0iKyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxMiIgcmVjdD0iNTcgMTEgMiAzIiBjb2RlPSIsIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDgiIHJlY3Q9IjYwIDcgNCAxIiBjb2RlPSItIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDEyIiByZWN0PSI2NSAxMSAxIDEiIGNvZGU9Ii4iLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjcgMyAzIDkiIGNvZGU9Ii8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzEgMyA1IDkiIGNvZGU9IjAiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzcgMyAzIDkiIGNvZGU9IjEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMyA1IDkiIGNvZGU9IjIiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODcgMyA1IDkiIGNvZGU9IjMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTMgMyA1IDkiIGNvZGU9IjQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTkgMyA1IDkiIGNvZGU9IjUiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA1IDMgNSA5IiBjb2RlPSI2Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExMSAzIDUgOSIgY29kZT0iNyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTcgMyA1IDkiIGNvZGU9IjgiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxNSA1IDkiIGNvZGU9IjkiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNiIgcmVjdD0iNyAxNyAxIDciIGNvZGU9IjoiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNiIgcmVjdD0iOSAxNyAyIDkiIGNvZGU9IjsiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTIgMTcgMyA1IiBjb2RlPSImbHQ7Ii8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDciIHJlY3Q9IjE2IDE4IDQgMyIgY29kZT0iPSIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA2IiByZWN0PSIyMSAxNyAzIDUiIGNvZGU9Ij4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjUgMTUgNSA5IiBjb2RlPSI:Ii8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjMxIDE1IDcgOSIgY29kZT0iQCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzOSAxNSA1IDkiIGNvZGU9IkEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDUgMTUgNSA5IiBjb2RlPSJCIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjUxIDE1IDUgOSIgY29kZT0iQyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1NyAxNSA1IDkiIGNvZGU9IkQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjMgMTUgNSA5IiBjb2RlPSJFIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY5IDE1IDUgOSIgY29kZT0iRiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3NSAxNSA1IDkiIGNvZGU9IkciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMTUgNSA5IiBjb2RlPSJIIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg3IDE1IDEgOSIgY29kZT0iSSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4OSAxNSA1IDkiIGNvZGU9IkoiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTUgMTUgNSA5IiBjb2RlPSJLIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwMSAxNSA1IDkiIGNvZGU9IkwiLz4KIDxDaGFyIHdpZHRoPSI5IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA3IDE1IDcgOSIgY29kZT0iTSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTUgMTUgNSA5IiBjb2RlPSJOIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEyMSAxNSA1IDkiIGNvZGU9Ik8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAyNyA1IDkiIGNvZGU9IlAiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNyAyNyA1IDkiIGNvZGU9IlEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgMjcgNSA5IiBjb2RlPSJSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjE5IDI3IDUgOSIgY29kZT0iUyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNSAyNyA1IDkiIGNvZGU9IlQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzEgMjcgNSA5IiBjb2RlPSJVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM3IDI3IDUgOSIgY29kZT0iViIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0MyAyNyA3IDkiIGNvZGU9IlciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgMjcgNSA5IiBjb2RlPSJYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjU3IDI3IDUgOSIgY29kZT0iWSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2MyAyNyA1IDkiIGNvZGU9IloiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjkgMjcgMyA5IiBjb2RlPSJbIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjczIDI3IDMgOSIgY29kZT0iXCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI3NyAyNyAzIDkiIGNvZGU9Il0iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMjcgNSAzIiBjb2RlPSJeIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIwIDE0IiByZWN0PSI4NyAzNyA1IDEiIGNvZGU9Il8iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iOTMgMjcgMiAyIiBjb2RlPSJgIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9Ijk2IDI5IDUgNyIgY29kZT0iYSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMDIgMjcgNSA5IiBjb2RlPSJiIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwOCAyOSA1IDciIGNvZGU9ImMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTE0IDI3IDUgOSIgY29kZT0iZCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMjAgMjkgNSA3IiBjb2RlPSJlIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEgMzkgNSA5IiBjb2RlPSJmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjcgNDEgNSA5IiBjb2RlPSJnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEzIDM5IDUgOSIgY29kZT0iaCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIxOSAzOSAxIDkiIGNvZGU9ImkiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjEgMzkgNSAxMSIgY29kZT0iaiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyAzOSA1IDkiIGNvZGU9ImsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzMgMzkgMSA5IiBjb2RlPSJsIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjM1IDQxIDcgNyIgY29kZT0ibSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI0MyA0MSA1IDciIGNvZGU9Im4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNDkgNDEgNSA3IiBjb2RlPSJvIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDQxIDUgOSIgY29kZT0icCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI2MSA0MSA1IDkiIGNvZGU9InEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNjcgNDEgNSA3IiBjb2RlPSJyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDQxIDUgNyIgY29kZT0icyIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA1IiByZWN0PSI3OSA0MCA1IDgiIGNvZGU9InQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODUgNDEgNSA3IiBjb2RlPSJ1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjkxIDQxIDUgNyIgY29kZT0idiIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA2IiByZWN0PSI5NyA0MSA3IDciIGNvZGU9InciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTA1IDQxIDUgNyIgY29kZT0ieCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMTEgNDEgNSA5IiBjb2RlPSJ5Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjExNyA0MSA1IDciIGNvZGU9InoiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSA1NCA0IDkiIGNvZGU9InsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNiA1NCAxIDkiIGNvZGU9InwiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOCA1NCA0IDkiIGNvZGU9In0iLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgNTQgNiAyIiBjb2RlPSJ%Ii8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjIwIDU2IDEgOSIgY29kZT0iwqEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjIgNTQgNSAxMSIgY29kZT0iwqIiLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjggNTQgNiA5IiBjb2RlPSLCoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNSA1NCA1IDkiIGNvZGU9IsKlIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQxIDU0IDEgOSIgY29kZT0iwqYiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDMgNTQgMyAxIiBjb2RlPSLCqCIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0NyA1NCA3IDkiIGNvZGU9IsKpIi8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDU2IDYgNSIgY29kZT0iwqsiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgOCIgcmVjdD0iNjIgNTggNSAzIiBjb2RlPSLCrCIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA0IiByZWN0PSI2OCA1NCA0IDQiIGNvZGU9IsKwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDU2IDUgNyIgY29kZT0iwrEiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzkgNTQgMiAyIiBjb2RlPSLCtCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI4MiA1NiA1IDkiIGNvZGU9IsK1Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg4IDU0IDcgOSIgY29kZT0iwrYiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgOCIgcmVjdD0iOTYgNTggMSAxIiBjb2RlPSLCtyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMCAxMyIgcmVjdD0iOTggNjMgMyAyIiBjb2RlPSLCuCIvPgogPENoYXIgd2lkdGg9IjgiIG9mZnNldD0iMSA2IiByZWN0PSIxMDIgNTYgNiA1IiBjb2RlPSLCuyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDkgNTYgNSA5IiBjb2RlPSLCvyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMTUgNTEgNSAxMiIgY29kZT0iw4AiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTIxIDUxIDUgMTIiIGNvZGU9IsOBIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEgNjcgNSAxMiIgY29kZT0iw4IiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iNyA2NyA2IDEyIiBjb2RlPSLDgyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSIxNCA2OCA1IDExIiBjb2RlPSLDhCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAwIiByZWN0PSIyMCA2NiA1IDEzIiBjb2RlPSLDhSIvPgogPENoYXIgd2lkdGg9IjExIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjYgNzAgOSA5IiBjb2RlPSLDhiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNiA3MCA1IDExIiBjb2RlPSLDhyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0MiA2NyA1IDEyIiBjb2RlPSLDiCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0OCA2NyA1IDEyIiBjb2RlPSLDiSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI1NCA2NyA1IDEyIiBjb2RlPSLDiiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSI2MCA2OCA1IDExIiBjb2RlPSLDiyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI2NiA2NyAyIDEyIiBjb2RlPSLDjCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSAxIiByZWN0PSI2OSA2NyAyIDEyIiBjb2RlPSLDjSIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI3MiA2NyAzIDEyIiBjb2RlPSLDjiIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAyIiByZWN0PSI3NiA2OCAzIDExIiBjb2RlPSLDjyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMCA0IiByZWN0PSI4MCA3MCA2IDkiIGNvZGU9IsOQIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijg3IDY3IDYgMTIiIGNvZGU9IsORIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijk0IDY3IDUgMTIiIGNvZGU9IsOSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEwMCA2NyA1IDEyIiBjb2RlPSLDkyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMDYgNjcgNSAxMiIgY29kZT0iw5QiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTEyIDY3IDYgMTIiIGNvZGU9IsOVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjExOSA2OCA1IDExIiBjb2RlPSLDliIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxIDg3IDUgNSIgY29kZT0iw5ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNCIgcmVjdD0iNyA4NSA3IDkiIGNvZGU9IsOYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjE1IDgyIDUgMTIiIGNvZGU9IsOZIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjIxIDgyIDUgMTIiIGNvZGU9IsOaIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjI3IDgyIDUgMTIiIGNvZGU9IsObIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjMzIDgzIDUgMTEiIGNvZGU9IsOcIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjM5IDgyIDUgMTIiIGNvZGU9IsOdIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQ1IDg1IDUgOSIgY29kZT0iw54iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgODUgNSA5IiBjb2RlPSLDnyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI1NyA4NCA1IDEwIiBjb2RlPSLDoCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2MyA4NCA1IDEwIiBjb2RlPSLDoSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2OSA4NCA1IDEwIiBjb2RlPSLDoiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI3NSA4NCA2IDEwIiBjb2RlPSLDoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4MiA4NSA1IDkiIGNvZGU9IsOkIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9Ijg4IDgzIDUgMTEiIGNvZGU9IsOlIi8%CiA8Q2hhciB3aWR0aD0iMTEiIG9mZnNldD0iMSA2IiByZWN0PSI5NCA4NyA5IDciIGNvZGU9IsOmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwNCA4NyA1IDkiIGNvZGU9IsOnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjExMCA4NCA1IDEwIiBjb2RlPSLDqCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTYgODQgNSAxMCIgY29kZT0iw6kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMSA5NyA1IDEwIiBjb2RlPSLDqiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3IDk4IDUgOSIgY29kZT0iw6siLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTMgOTcgMiAxMCIgY29kZT0iw6wiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTYgOTcgMiAxMCIgY29kZT0iw60iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTkgOTcgMyAxMCIgY29kZT0iw64iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iMjMgOTggMyA5IiBjb2RlPSLDryIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyA5OCA2IDkiIGNvZGU9IsOwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjM0IDk3IDYgMTAiIGNvZGU9IsOxIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQxIDk3IDUgMTAiIGNvZGU9IsOyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQ3IDk3IDUgMTAiIGNvZGU9IsOzIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjUzIDk3IDUgMTAiIGNvZGU9IsO0Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjU5IDk3IDYgMTAiIGNvZGU9IsO1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY2IDk4IDUgOSIgY29kZT0iw7YiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNzIgMTAwIDUgNSIgY29kZT0iw7ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNiIgcmVjdD0iNzggMTAwIDcgNyIgY29kZT0iw7giLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iODYgOTcgNSAxMCIgY29kZT0iw7kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTIgOTcgNSAxMCIgY29kZT0iw7oiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTggOTcgNSAxMCIgY29kZT0iw7siLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA0IDk4IDUgOSIgY29kZT0iw7wiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTEwIDk3IDUgMTIiIGNvZGU9IsO9Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNiA5OCA1IDExIiBjb2RlPSLDviIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxIDExMCA1IDExIiBjb2RlPSLDvyIvPgo8L0ZvbnQ%Cg"));
			let bmp = new hxd.res.BitmapFont(DESC.entry);
			bmp.loader = BYTES.loader;
			fnt = bmp.toFont();
			engine.resCache.set(hxd.res.DefaultFont,fnt);
		}
		return fnt;
	}
}
$hxClasses["hxd.res.DefaultFont"] = hxd.res.DefaultFont;
hxd.res.DefaultFont.__name__ = "hxd.res.DefaultFont";
hxd.res.Embed = class hxd_res_Embed {
}
$hxClasses["hxd.res.Embed"] = hxd.res.Embed;
hxd.res.Embed.__name__ = "hxd.res.Embed";
hxd.res.ImageFormat = class hxd_res_ImageFormat {
	static get_useLoadBitmap(this1) {
		return this1 == 0;
	}
	static toInt(this1) {
		return this1;
	}
	static getName(this1) {
		switch(this1) {
		case 0:
			return "JPG";
		case 1:
			return "PNG";
		case 2:
			return "GIF";
		case 3:
			return "TGA";
		case 4:
			return "DDS";
		case 5:
			return "RAW";
		case 6:
			return "HDR";
		}
	}
}
hxd.res.ImageFormat.__properties__ = {get_useLoadBitmap: "get_useLoadBitmap"};
hxd.res.ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__:true,__constructs__:null
	,IsCube: {_hx_name:"IsCube",_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_name:"Dxt10Header",_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd.res.ImageInfoFlag.__constructs__ = [hxd.res.ImageInfoFlag.IsCube,hxd.res.ImageInfoFlag.Dxt10Header];
hxd.res.ImageInfoFlag.__empty_constructs__ = [hxd.res.ImageInfoFlag.IsCube,hxd.res.ImageInfoFlag.Dxt10Header];
hxd.res.ImageInfo = class hxd_res_ImageInfo {
	constructor() {
		this.layerCount = 1;
		this.mipOffset = 0;
		this.mipLevels = 1;
		this.height = 0;
		this.width = 0;
		this.flags = 0;
	}
}
$hxClasses["hxd.res.ImageInfo"] = hxd.res.ImageInfo;
hxd.res.ImageInfo.__name__ = "hxd.res.ImageInfo";
Object.assign(hxd.res.ImageInfo.prototype, {
	__class__: hxd.res.ImageInfo
});
hxd.res.Image = class hxd_res_Image extends hxd.res.Resource {
	constructor(entry) {
		super(entry);
	}
	getFormat() {
		return this.getInfo().dataFormat;
	}
	getPixelFormat() {
		return this.getInfo().pixelFormat;
	}
	getSize() {
		return this.getInfo();
	}
	getInfo() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd.res.ImageInfo();
		let f = this.entry.open();
		f.fetch(256);
		let head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe.Exception.caught(_g).unwrap()) instanceof haxe.io.Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			let parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd.PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			let caps = f.readInt32();
			let fourCC = f.readInt32();
			let bpp = f.readInt32();
			let rMask = f.readInt32();
			let gMask = f.readInt32();
			let bMask = f.readInt32();
			let aMask = f.readInt32();
			let caps2 = f.readInt32();
			let cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd.res.ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					switch(bpp) {
					case 16:
						if(rMask == 65535) {
							if(gMask == 0) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd.PixelFormat.R16U;
									} else {
										throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
						} else {
							throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					case 32:
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd.PixelFormat.RGBA;
									} else {
										throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 65535:
							if(gMask == -65536) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd.PixelFormat.RG16U;
									} else {
										throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd.PixelFormat.BGRA;
									} else {
										throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					default:
						throw haxe.Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 36:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.RGBA16U;
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd.PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				let v = (fourCC >>> 24) - 48;
				let tmp;
				switch(v) {
				case 1:
					tmp = hxd.PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd.PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				let dxt = (fourCC >>> 24) - 48;
				let tmp1;
				switch(dxt) {
				case 1:
					tmp1 = hxd.PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp1 = hxd.PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp1 = hxd.PixelFormat.S3TC(3);
					break;
				default:
					tmp1 = null;
				}
				this.inf.pixelFormat = tmp1;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index;
					let dxgi = f.readInt32();
					let tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd.PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd.PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd.PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd.PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd.PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd.PixelFormat.S3TC(7);
						break;
					default:
						throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					let imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				}
			}
			if(this.inf.pixelFormat == null) {
				let fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "" + fourCC;
				}
				throw haxe.Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd.PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				let dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					let colbits = f.readByte();
					let colType = f.readByte();
					let tmp;
					switch(colbits) {
					case 8:
						tmp = hxd.PixelFormat.BGRA;
						break;
					case 16:
						switch(colType) {
						case 0:
							tmp = hxd.PixelFormat.R16U;
							break;
						case 2:
							tmp = hxd.PixelFormat.RGBA16U;
							break;
						case 4:
							tmp = hxd.PixelFormat.RG16U;
							break;
						case 6:
							tmp = hxd.PixelFormat.RGBA16U;
							break;
						default:
							throw haxe.Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
						}
						break;
					default:
						throw haxe.Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd.PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				let len = f.readUInt16();
				let prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd.PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd.PixelFormat.R32F;
				let size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					let size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd.PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe.Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe.Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe.Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		if(hxd.res.Image.MIPMAP_MAX_SIZE != 0 && this.inf.mipLevels > 1) {
			while(((this.inf.width | this.inf.height) & 7) == 0 && this.inf.width >> 1 >= hxd.res.Image.MIPMAP_MAX_SIZE && this.inf.height >> 1 >= hxd.res.Image.MIPMAP_MAX_SIZE) {
				this.inf.width >>= 1;
				this.inf.height >>= 1;
				this.inf.mipLevels--;
				this.inf.mipOffset++;
			}
		}
		hxd.res.Image.customCheckInfo(this);
		return this.inf;
	}
	getPixels(fmt,index) {
		let pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			let bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd.PixelFormat.BGRA) {
				throw haxe.Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			let p;
			try {
				p = hxd.res.NanoJpeg.decode(bytes);
			} catch( _g ) {
				let e = haxe.Exception.caught(_g).unwrap();
				throw haxe.Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd.Pixels(p.width,p.height,p.pixels,hxd.PixelFormat.BGRA);
			break;
		case 1:
			let bytes1 = this.entry.getBytes();
			let png = new format.png.Reader(new haxe.io.BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd.Pixels.alloc(this.inf.width,this.inf.height,this.inf.pixelFormat);
			let pdata = png.read();
			switch(this.inf.pixelFormat._hx_index) {
			case 1:
				format.png.Tools.extract32(pdata,pixels.bytes,false);
				break;
			case 18:case 19:case 20:case 21:
				let pixels1 = pixels.bytes;
				let tmp;
				if(this.inf.pixelFormat == hxd.PixelFormat.RGBA16U) {
					let _g = format.png.Tools.getHeader(pdata).color;
					tmp = _g._hx_index == 1 && _g.alpha == false;
				} else {
					tmp = false;
				}
				format.png.Tools.extract(pdata,pixels1,tmp);
				break;
			default:
				throw haxe.Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			break;
		case 2:
			let bytes2 = this.entry.getBytes();
			let gif = new format.gif.Reader(new haxe.io.BytesInput(bytes2)).read();
			if(fmt == hxd.PixelFormat.RGBA) {
				pixels = new hxd.Pixels(this.inf.width,this.inf.height,format.gif.Tools.extractFullRGBA(gif,0),hxd.PixelFormat.RGBA);
			} else {
				pixels = new hxd.Pixels(this.inf.width,this.inf.height,format.gif.Tools.extractFullBGRA(gif,0),hxd.PixelFormat.BGRA);
			}
			break;
		case 3:
			let bytes3 = this.entry.getBytes();
			let r = new format.tga.Reader(new haxe.io.BytesInput(bytes3)).read();
			if(r.header.imageType != format.tga.ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe.Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			let w = r.header.width;
			let h = r.header.height;
			if(fmt == hxd.PixelFormat.RGBA) {
				pixels = hxd.Pixels.alloc(w,h,hxd.PixelFormat.RGBA);
				let bytes = pixels.bytes;
				let _g = 0;
				let _g1 = w * h;
				while(_g < _g1) {
					let i = _g++;
					let c = r.imageData[i];
					c = c >>> 24 | c << 8;
					bytes.setInt32(i << 2,c);
				}
			} else {
				pixels = hxd.Pixels.alloc(w,h,hxd.PixelFormat.ARGB);
				let access = hxd.PixelsARGB.fromPixels(pixels);
				let p = 0;
				let _g = 0;
				let _g1 = h;
				while(_g < _g1) {
					let y = _g++;
					let _g1 = 0;
					let _g2 = w;
					while(_g1 < _g2) {
						let x = _g1++;
						let c = r.imageData[p++];
						access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
					}
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flipY();
				break;
			case 2:
				break;
			default:
				throw haxe.Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			let pos = 128;
			let mipLevel = 0;
			if((this.inf.flags & 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			index += this.inf.mipOffset;
			if(index > 0) {
				let totLevels = this.inf.mipLevels + this.inf.mipOffset;
				let bpp = hxd.Pixels.calcStride(1,this.inf.pixelFormat);
				let layer = index / totLevels | 0;
				mipLevel = index % totLevels;
				let totSize = 0;
				let _g = 0;
				let _g1 = totLevels;
				while(_g < _g1) {
					let i = _g++;
					let w = this.inf.width << this.inf.mipOffset >> i;
					let h = this.inf.height << this.inf.mipOffset >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					let size = hxd.Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			let bytes4;
			let w1 = this.inf.width >> mipLevel - this.inf.mipOffset;
			let h1 = this.inf.height >> mipLevel - this.inf.mipOffset;
			if(w1 == 0) {
				w1 = 1;
			}
			if(h1 == 0) {
				h1 = 1;
			}
			if(this.inf.mipLevels + this.inf.mipOffset == 1 && (this.inf.flags & 1 << hxd.res.ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes4 = this.entry.getBytes();
			} else {
				let size = hxd.Pixels.calcDataSize(w1,h1,this.inf.pixelFormat);
				bytes4 = new haxe.io.Bytes(new ArrayBuffer(size));
				this.entry.readFull(bytes4,pos,size);
				pos = 0;
			}
			pixels = new hxd.Pixels(w1,h1,bytes4,this.inf.pixelFormat,pos);
			break;
		case 5:
			let bytes5 = this.entry.getBytes();
			pixels = new hxd.Pixels(this.inf.width,this.inf.height,bytes5,this.inf.pixelFormat);
			break;
		case 6:
			let data = hxd.fmt.hdr.Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd.Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		return pixels;
	}
	toBitmap() {
		this.getInfo();
		let bmp = new hxd.BitmapData(this.inf.width,this.inf.height);
		let pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	watchCallb() {
		let w = this.inf.width;
		let h = this.inf.height;
		this.inf = null;
		let s = this.getInfo();
		if(w != s.width || h != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	asyncLoad(data) {
		let tmp;
		if(this.tex != null) {
			let _this = this.tex;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		this.tex.dispose();
		this.tex.flags &= -1 - (1 << h3d.mat.TextureFlags.Loading._hx_index);
		this.tex.format = this.inf.pixelFormat;
		this.tex.width = this.inf.width;
		this.tex.height = this.inf.height;
		this.loadTexture(data);
	}
	loadTexture(asyncData) {
		let _gthis = this;
		if(this.getInfo().dataFormat == 0) {
			this.tex.flags |= 1 << h3d.mat.TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				let bmp1 = hxd.fs.LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				_gthis.tex.flags &= -1 - (1 << h3d.mat.TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					let arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					let _g = 0;
					while(_g < arr.length) {
						let f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd.res.Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
			return;
		}
		let load = function() {
			if((_gthis.enableAsyncLoading || (_gthis.tex.flags & 1 << h3d.mat.TextureFlags.AsyncLoading._hx_index) != 0) && asyncData == null && hxd.res.Image.ASYNC_LOADER.isSupported(_gthis)) {
				_gthis.tex.dispose();
				_gthis.tex.format = hxd.PixelFormat.RGBA;
				_gthis.tex.width = 1;
				_gthis.tex.height = 1;
				_gthis.tex.customMipLevels = 1;
				_gthis.tex.flags |= 1 << h3d.mat.TextureFlags.Loading._hx_index;
				_gthis.tex.alloc();
				_gthis.tex.uploadPixels(hxd.res.Image.BLACK_1x1);
				_gthis.tex.width = _gthis.inf.width;
				_gthis.tex.height = _gthis.inf.height;
				hxd.res.Image.ASYNC_LOADER.load(_gthis);
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				return;
			}
			let t0 = HxOverrides.now() / 1000;
			_gthis.tex.customMipLevels = _gthis.inf.mipLevels;
			_gthis.tex.alloc();
			if(_gthis.inf.dataFormat == 4) {
				let pos = 128;
				if((_gthis.inf.flags & 1 << hxd.res.ImageInfoFlag.Dxt10Header._hx_index) != 0) {
					pos += 20;
				}
				let _g = 0;
				let _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					let layer = _g++;
					let _g1 = 0;
					let _g2 = _gthis.inf.mipOffset;
					while(_g1 < _g2) {
						let mip = _g1++;
						let w = _gthis.inf.width << _gthis.inf.mipOffset >> mip;
						let h = _gthis.inf.height << _gthis.inf.mipOffset >> mip;
						let size = hxd.Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						pos += size;
					}
					let _g3 = 0;
					let _g4 = _gthis.inf.mipLevels;
					while(_g3 < _g4) {
						let mip = _g3++;
						let w = _gthis.inf.width >> mip;
						let h = _gthis.inf.height >> mip;
						if(w == 0) {
							w = 1;
						}
						if(h == 0) {
							h = 1;
						}
						let size = hxd.Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						let bytes = asyncData == null ? _gthis.entry.fetchBytes(pos,size) : asyncData;
						_gthis.tex.uploadPixels(new hxd.Pixels(w,h,bytes,_gthis.inf.pixelFormat,asyncData == null ? 0 : pos),mip,layer);
						pos += size;
					}
				}
			} else {
				let _g = 0;
				let _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					let layer = _g++;
					let _g1 = 0;
					let _g2 = _gthis.inf.mipLevels;
					while(_g1 < _g2) {
						let mip = _g1++;
						let pixels = _gthis.getPixels(_gthis.tex.format,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
			}
			if(hxd.res.Image.LOG_TEXTURE_LOAD && asyncData == null) {
				let time = (HxOverrides.now() / 1000 - t0) * 1000.0;
				let _g = _gthis.inf.pixelFormat;
				let fmtStr;
				if(_g._hx_index == 22) {
					let _g1 = _g.v;
					fmtStr = true;
				} else {
					fmtStr = false;
				}
				let fmtStr1 = fmtStr ? "DXT" : hxd.res.ImageFormat.getName(_gthis.inf.dataFormat);
				haxe.Log.trace(fmtStr1 + " " + (time | 0) + "." + (time * 10 | 0) % 10 + "ms " + _gthis.inf.width + "x" + _gthis.inf.height + " " + _gthis.entry.get_path(),{ fileName : "hxd/res/Image.hx", lineNumber : 597, className : "hxd.res.Image", methodName : "loadTexture"});
			}
			_gthis.tex.realloc = function() {
				_gthis.loadTexture();
			};
			if(hxd.res.Image.ENABLE_AUTO_WATCH) {
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			}
		};
		if(this.entry.get_isAvailable()) {
			load();
		} else {
			this.entry.load(load);
		}
	}
	toTexture() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		let flags = [h3d.mat.TextureFlags.NoAlloc];
		let fmt = this.inf.pixelFormat;
		if(fmt == hxd.PixelFormat.BGRA || fmt == hxd.PixelFormat.ARGB || fmt == hxd.PixelFormat.RGBA) {
			fmt = h3d.mat.Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd.res.ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d.mat.TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d.mat.TextureFlags.MipMapped);
			flags.push(h3d.mat.TextureFlags.ManualMipMapGen);
		}
		if(this.inf.layerCount > 1) {
			this.tex = new h3d.mat.TextureArray(this.inf.width,this.inf.height,this.inf.layerCount,flags,fmt);
		} else {
			this.tex = new h3d.mat.Texture(this.inf.width,this.inf.height,flags,fmt);
		}
		if(hxd.res.Image.DEFAULT_FILTER != h3d.mat.Filter.Linear) {
			this.tex.set_filter(hxd.res.Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd.res.Image.setupTextureFlags(this.tex);
		let _gthis = this;
		if((this.tex.flags & 1 << h3d.mat.TextureFlags.IsArray._hx_index) != 0 || (this.tex.flags & 1 << h3d.mat.TextureFlags.LazyLoading._hx_index) == 0) {
			this.loadTexture();
		} else {
			this.tex.realloc = function() {
				_gthis.loadTexture();
			};
		}
		return this.tex;
	}
	toTile() {
		this.getInfo();
		return h2d.Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	static customCheckInfo(i) {
	}
	static setupTextureFlags(tex) {
	}
}
$hxClasses["hxd.res.Image"] = hxd.res.Image;
hxd.res.Image.__name__ = "hxd.res.Image";
hxd.res.Image.__super__ = hxd.res.Resource;
Object.assign(hxd.res.Image.prototype, {
	__class__: hxd.res.Image
});
hxd.res.Loader = class hxd_res_Loader {
	constructor(fs) {
		this.fs = fs;
		this.cache = new haxe.ds.StringMap();
	}
	cleanCache() {
		this.cache = new haxe.ds.StringMap();
	}
	dir(path) {
		let r = [];
		let entries = this.fs.dir(path);
		let _g = 0;
		while(_g < entries.length) {
			let e = entries[_g];
			++_g;
			r.push(new hxd.res.Any(this,e));
		}
		return r;
	}
	exists(path) {
		return this.fs.exists(path);
	}
	load(path) {
		return new hxd.res.Any(this,this.fs.get(path));
	}
	loadCache(path,c) {
		let res = this.cache.h[path];
		if(res == null) {
			let entry = this.fs.get(path);
			let old = hxd.res.Loader.currentInstance;
			hxd.res.Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd.res.Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js.Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe.Exception.thrown(path + " has been reintrepreted from " + Std.string(js.Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	dispose() {
		this.cleanCache();
		this.fs.dispose();
	}
}
$hxClasses["hxd.res.Loader"] = hxd.res.Loader;
hxd.res.Loader.__name__ = "hxd.res.Loader";
Object.assign(hxd.res.Loader.prototype, {
	__class__: hxd.res.Loader
});
hxd.res.Model = class hxd_res_Model extends hxd.res.Resource {
	constructor(entry) {
		super(entry);
	}
	toHmd() {
		let fs = this.entry.open();
		let hmd = new hxd.fmt.hmd.Reader(fs).readHeader();
		fs.close();
		return new hxd.fmt.hmd.Library(this,hmd);
	}
}
$hxClasses["hxd.res.Model"] = hxd.res.Model;
hxd.res.Model.__name__ = "hxd.res.Model";
hxd.res.Model.__super__ = hxd.res.Resource;
Object.assign(hxd.res.Model.prototype, {
	__class__: hxd.res.Model
});
hxd.res.Filter = $hxEnums["hxd.res.Filter"] = { __ename__:true,__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_name:"Chromatic",_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd.res.Filter.__constructs__ = [hxd.res.Filter.Fast,hxd.res.Filter.Chromatic];
hxd.res.Filter.__empty_constructs__ = [hxd.res.Filter.Fast,hxd.res.Filter.Chromatic];
hxd.res._NanoJpeg = {};
hxd.res._NanoJpeg.FastBytes = class hxd_res__$NanoJpeg_FastBytes {
	static _new(b) {
		return b;
	}
	static get(this1,i) {
		return this1.b[i];
	}
	static set(this1,i,v) {
		this1.b[i] = v;
	}
}
hxd.res._NanoJpeg.Component = class hxd_res__$NanoJpeg_Component {
	constructor() {
	}
}
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd.res._NanoJpeg.Component;
hxd.res._NanoJpeg.Component.__name__ = "hxd.res._NanoJpeg.Component";
Object.assign(hxd.res._NanoJpeg.Component.prototype, {
	__class__: hxd.res._NanoJpeg.Component
});
hxd.res.NanoJpeg = class hxd_res_NanoJpeg {
	constructor() {
		this.comps = [new hxd.res._NanoJpeg.Component(),new hxd.res._NanoJpeg.Component(),new hxd.res._NanoJpeg.Component()].slice(0);
		this.qtab = [new Array(64),new Array(64),new Array(64),new Array(64)].slice(0);
		this.counts = new Array(16);
		this.block = new Array(64);
		this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
		this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
	}
	alloc(nbytes) {
		return new haxe.io.Bytes(new ArrayBuffer(nbytes));
	}
	free(bytes) {
	}
	njInit(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd.res.Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe.io.Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe.io.Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe.io.Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe.io.Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	cleanup() {
		this.bytes = null;
		let _g = 0;
		let _g1 = this.comps;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	njSkip(count) {
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	syntax(flag) {
	}
	get(p) {
		return this.bytes.b[this.pos + p];
	}
	njDecode16(p) {
		return this.bytes.b[this.pos + p] << 8 | this.bytes.b[this.pos + (p + 1)];
	}
	njByteAlign() {
		this.bufbits &= 248;
	}
	njShowBits(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			let newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				let marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	njSkipBits(bits) {
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
	}
	njGetBits(bits) {
		let r = this.njShowBits(bits);
		this.bufbits -= bits;
		return r;
	}
	njDecodeLength() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
	}
	njSkipMarker() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		let count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	njDecodeSOF() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		let ssxmax = 0;
		let ssymax = 0;
		let _g = 0;
		let _g1 = this.ncomp;
		while(_g < _g1) {
			let i = _g++;
			let c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			let c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		let _g2 = 0;
		let _g3 = this.ncomp;
		while(_g2 < _g3) {
			let i = _g2++;
			let c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe.io.Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		let count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	njDecodeDQT() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			let i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			let t = this.qtab[i];
			let _g = 0;
			while(_g < 64) {
				let k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	njDecodeDHT() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			let i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			let vlc = this.vlctab[i];
			let vpos = 0;
			let remain = 65536;
			let spread = 65536;
			let _g = 1;
			while(_g < 17) {
				let codelen = _g++;
				spread >>= 1;
				let currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				let _g1 = 0;
				let _g2 = currcnt;
				while(_g1 < _g2) {
					let i = _g1++;
					let code = this.bytes.b[this.pos + i];
					let _g = 0;
					let _g2 = spread;
					while(_g < _g2) {
						let j = _g++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	njDecodeDRI() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		let count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	njGetVLC(vlc) {
		let value = this.njShowBits(16);
		let bits = vlc.b[value << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value = vlc.b[value << 1 | 1];
		this.vlcCode = value;
		bits = value & 15;
		if(bits == 0) {
			return 0;
		}
		let r = this.njShowBits(bits);
		this.bufbits -= bits;
		value = r;
		if(value < 1 << bits - 1) {
			value += (-1 << bits) + 1;
		}
		return value;
	}
	njRowIDCT(bp) {
		let x1 = this.block[bp + 4] << 11;
		let x2 = this.block[bp + 6];
		let x3 = this.block[bp + 2];
		let x4 = this.block[bp + 1];
		let x5 = this.block[bp + 7];
		let x6 = this.block[bp + 5];
		let x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			let val = this.block[bp + 7] = this.block[bp] << 3;
			let val1 = this.block[bp + 6] = val;
			let val2 = this.block[bp + 5] = val1;
			let val3 = this.block[bp + 4] = val2;
			let val4 = this.block[bp + 3] = val3;
			let val5 = this.block[bp + 2] = val4;
			let val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
			return;
		}
		let x0 = (this.block[bp] << 11) + 128;
		let x8 = 565 * (x4 + x5);
		x4 = x8 + 2276 * x4;
		x5 = x8 - 3406 * x5;
		x8 = 2408 * (x6 + x7);
		x6 = x8 - 799 * x6;
		x7 = x8 - 4017 * x7;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2);
		x2 = x1 - 3784 * x2;
		x3 = x1 + 1568 * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		this.block[bp] = x7 + x1 >> 8;
		this.block[bp + 1] = x3 + x2 >> 8;
		this.block[bp + 2] = x0 + x4 >> 8;
		this.block[bp + 3] = x8 + x6 >> 8;
		this.block[bp + 4] = x8 - x6 >> 8;
		this.block[bp + 5] = x0 - x4 >> 8;
		this.block[bp + 6] = x3 - x2 >> 8;
		this.block[bp + 7] = x7 - x1 >> 8;
	}
	njColIDCT(bp,out,po,stride) {
		let x1 = this.block[bp + 32] << 8;
		let x2 = this.block[bp + 48];
		let x3 = this.block[bp + 16];
		let x4 = this.block[bp + 8];
		let x5 = this.block[bp + 56];
		let x6 = this.block[bp + 40];
		let x7 = this.block[bp + 24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			let x = (this.block[bp] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			return;
		}
		let x0 = (this.block[bp] << 8) + 8192;
		let x8 = 565 * (x4 + x5) + 4;
		x4 = x8 + 2276 * x4 >> 3;
		x5 = x8 - 3406 * x5 >> 3;
		x8 = 2408 * (x6 + x7) + 4;
		x6 = x8 - 799 * x6 >> 3;
		x7 = x8 - 4017 * x7 >> 3;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2) + 4;
		x2 = x1 - 3784 * x2 >> 3;
		x3 = x1 + 1568 * x3 >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		let x = (x7 + x1 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		let x9 = (x3 + x2 >> 14) + 128;
		out.b[po] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
		po += stride;
		let x10 = (x0 + x4 >> 14) + 128;
		out.b[po] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
		po += stride;
		let x11 = (x8 + x6 >> 14) + 128;
		out.b[po] = x11 < 0 ? 0 : x11 > 255 ? 255 : x11;
		po += stride;
		let x12 = (x8 - x6 >> 14) + 128;
		out.b[po] = x12 < 0 ? 0 : x12 > 255 ? 255 : x12;
		po += stride;
		let x13 = (x0 - x4 >> 14) + 128;
		out.b[po] = x13 < 0 ? 0 : x13 > 255 ? 255 : x13;
		po += stride;
		let x14 = (x3 - x2 >> 14) + 128;
		out.b[po] = x14 < 0 ? 0 : x14 > 255 ? 255 : x14;
		po += stride;
		let x15 = (x7 - x1 >> 14) + 128;
		out.b[po] = x15 < 0 ? 0 : x15 > 255 ? 255 : x15;
	}
	njDecodeBlock(c,po) {
		let out = c.pixels;
		let value;
		let coef = 0;
		let _g = 0;
		while(_g < 64) {
			let i = _g++;
			this.block[i] = 0;
		}
		let c1 = c;
		let c2 = c1.dcpred;
		let vlc = this.vlctab[c.dctabsel];
		let value1 = this.njShowBits(16);
		let bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		let tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			let r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		let qt = this.qtab[c.qtsel];
		let at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		do {
			let value1 = this.njShowBits(16);
			let bits = at.b[value1 << 1];
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				let r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
		} while(coef < 63);
		let bp = 0;
		let x0;
		let x8;
		let x1 = this.block[bp + 4] << 11;
		let x2 = this.block[bp + 6];
		let x3 = this.block[bp + 2];
		let x4 = this.block[bp + 1];
		let x5 = this.block[bp + 7];
		let x6 = this.block[bp + 5];
		let x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			let val = this.block[bp + 7] = this.block[bp] << 3;
			let val1 = this.block[bp + 6] = val;
			let val2 = this.block[bp + 5] = val1;
			let val3 = this.block[bp + 4] = val2;
			let val4 = this.block[bp + 3] = val3;
			let val5 = this.block[bp + 2] = val4;
			let val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		let bp1 = 8;
		let x01;
		let x81;
		let x11 = this.block[bp1 + 4] << 11;
		let x21 = this.block[bp1 + 6];
		let x31 = this.block[bp1 + 2];
		let x41 = this.block[bp1 + 1];
		let x51 = this.block[bp1 + 7];
		let x61 = this.block[bp1 + 5];
		let x71 = this.block[bp1 + 3];
		if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
			let val = this.block[bp1 + 7] = this.block[bp1] << 3;
			let val1 = this.block[bp1 + 6] = val;
			let val2 = this.block[bp1 + 5] = val1;
			let val3 = this.block[bp1 + 4] = val2;
			let val4 = this.block[bp1 + 3] = val3;
			let val5 = this.block[bp1 + 2] = val4;
			let val6 = this.block[bp1 + 1] = val5;
			this.block[bp1] = val6;
		} else {
			x01 = (this.block[bp1] << 11) + 128;
			x81 = 565 * (x41 + x51);
			x41 = x81 + 2276 * x41;
			x51 = x81 - 3406 * x51;
			x81 = 2408 * (x61 + x71);
			x61 = x81 - 799 * x61;
			x71 = x81 - 4017 * x71;
			x81 = x01 + x11;
			x01 -= x11;
			x11 = 1108 * (x31 + x21);
			x21 = x11 - 3784 * x21;
			x31 = x11 + 1568 * x31;
			x11 = x41 + x61;
			x41 -= x61;
			x61 = x51 + x71;
			x51 -= x71;
			x71 = x81 + x31;
			x81 -= x31;
			x31 = x01 + x21;
			x01 -= x21;
			x21 = 181 * (x41 + x51) + 128 >> 8;
			x41 = 181 * (x41 - x51) + 128 >> 8;
			this.block[bp1] = x71 + x11 >> 8;
			this.block[bp1 + 1] = x31 + x21 >> 8;
			this.block[bp1 + 2] = x01 + x41 >> 8;
			this.block[bp1 + 3] = x81 + x61 >> 8;
			this.block[bp1 + 4] = x81 - x61 >> 8;
			this.block[bp1 + 5] = x01 - x41 >> 8;
			this.block[bp1 + 6] = x31 - x21 >> 8;
			this.block[bp1 + 7] = x71 - x11 >> 8;
		}
		let bp2 = 16;
		let x02;
		let x82;
		let x12 = this.block[bp2 + 4] << 11;
		let x22 = this.block[bp2 + 6];
		let x32 = this.block[bp2 + 2];
		let x42 = this.block[bp2 + 1];
		let x52 = this.block[bp2 + 7];
		let x62 = this.block[bp2 + 5];
		let x72 = this.block[bp2 + 3];
		if((x12 | x22 | x32 | x42 | x52 | x62 | x72) == 0) {
			let val = this.block[bp2 + 7] = this.block[bp2] << 3;
			let val1 = this.block[bp2 + 6] = val;
			let val2 = this.block[bp2 + 5] = val1;
			let val3 = this.block[bp2 + 4] = val2;
			let val4 = this.block[bp2 + 3] = val3;
			let val5 = this.block[bp2 + 2] = val4;
			let val6 = this.block[bp2 + 1] = val5;
			this.block[bp2] = val6;
		} else {
			x02 = (this.block[bp2] << 11) + 128;
			x82 = 565 * (x42 + x52);
			x42 = x82 + 2276 * x42;
			x52 = x82 - 3406 * x52;
			x82 = 2408 * (x62 + x72);
			x62 = x82 - 799 * x62;
			x72 = x82 - 4017 * x72;
			x82 = x02 + x12;
			x02 -= x12;
			x12 = 1108 * (x32 + x22);
			x22 = x12 - 3784 * x22;
			x32 = x12 + 1568 * x32;
			x12 = x42 + x62;
			x42 -= x62;
			x62 = x52 + x72;
			x52 -= x72;
			x72 = x82 + x32;
			x82 -= x32;
			x32 = x02 + x22;
			x02 -= x22;
			x22 = 181 * (x42 + x52) + 128 >> 8;
			x42 = 181 * (x42 - x52) + 128 >> 8;
			this.block[bp2] = x72 + x12 >> 8;
			this.block[bp2 + 1] = x32 + x22 >> 8;
			this.block[bp2 + 2] = x02 + x42 >> 8;
			this.block[bp2 + 3] = x82 + x62 >> 8;
			this.block[bp2 + 4] = x82 - x62 >> 8;
			this.block[bp2 + 5] = x02 - x42 >> 8;
			this.block[bp2 + 6] = x32 - x22 >> 8;
			this.block[bp2 + 7] = x72 - x12 >> 8;
		}
		let bp3 = 24;
		let x03;
		let x83;
		let x13 = this.block[bp3 + 4] << 11;
		let x23 = this.block[bp3 + 6];
		let x33 = this.block[bp3 + 2];
		let x43 = this.block[bp3 + 1];
		let x53 = this.block[bp3 + 7];
		let x63 = this.block[bp3 + 5];
		let x73 = this.block[bp3 + 3];
		if((x13 | x23 | x33 | x43 | x53 | x63 | x73) == 0) {
			let val = this.block[bp3 + 7] = this.block[bp3] << 3;
			let val1 = this.block[bp3 + 6] = val;
			let val2 = this.block[bp3 + 5] = val1;
			let val3 = this.block[bp3 + 4] = val2;
			let val4 = this.block[bp3 + 3] = val3;
			let val5 = this.block[bp3 + 2] = val4;
			let val6 = this.block[bp3 + 1] = val5;
			this.block[bp3] = val6;
		} else {
			x03 = (this.block[bp3] << 11) + 128;
			x83 = 565 * (x43 + x53);
			x43 = x83 + 2276 * x43;
			x53 = x83 - 3406 * x53;
			x83 = 2408 * (x63 + x73);
			x63 = x83 - 799 * x63;
			x73 = x83 - 4017 * x73;
			x83 = x03 + x13;
			x03 -= x13;
			x13 = 1108 * (x33 + x23);
			x23 = x13 - 3784 * x23;
			x33 = x13 + 1568 * x33;
			x13 = x43 + x63;
			x43 -= x63;
			x63 = x53 + x73;
			x53 -= x73;
			x73 = x83 + x33;
			x83 -= x33;
			x33 = x03 + x23;
			x03 -= x23;
			x23 = 181 * (x43 + x53) + 128 >> 8;
			x43 = 181 * (x43 - x53) + 128 >> 8;
			this.block[bp3] = x73 + x13 >> 8;
			this.block[bp3 + 1] = x33 + x23 >> 8;
			this.block[bp3 + 2] = x03 + x43 >> 8;
			this.block[bp3 + 3] = x83 + x63 >> 8;
			this.block[bp3 + 4] = x83 - x63 >> 8;
			this.block[bp3 + 5] = x03 - x43 >> 8;
			this.block[bp3 + 6] = x33 - x23 >> 8;
			this.block[bp3 + 7] = x73 - x13 >> 8;
		}
		let bp4 = 32;
		let x04;
		let x84;
		let x14 = this.block[bp4 + 4] << 11;
		let x24 = this.block[bp4 + 6];
		let x34 = this.block[bp4 + 2];
		let x44 = this.block[bp4 + 1];
		let x54 = this.block[bp4 + 7];
		let x64 = this.block[bp4 + 5];
		let x74 = this.block[bp4 + 3];
		if((x14 | x24 | x34 | x44 | x54 | x64 | x74) == 0) {
			let val = this.block[bp4 + 7] = this.block[bp4] << 3;
			let val1 = this.block[bp4 + 6] = val;
			let val2 = this.block[bp4 + 5] = val1;
			let val3 = this.block[bp4 + 4] = val2;
			let val4 = this.block[bp4 + 3] = val3;
			let val5 = this.block[bp4 + 2] = val4;
			let val6 = this.block[bp4 + 1] = val5;
			this.block[bp4] = val6;
		} else {
			x04 = (this.block[bp4] << 11) + 128;
			x84 = 565 * (x44 + x54);
			x44 = x84 + 2276 * x44;
			x54 = x84 - 3406 * x54;
			x84 = 2408 * (x64 + x74);
			x64 = x84 - 799 * x64;
			x74 = x84 - 4017 * x74;
			x84 = x04 + x14;
			x04 -= x14;
			x14 = 1108 * (x34 + x24);
			x24 = x14 - 3784 * x24;
			x34 = x14 + 1568 * x34;
			x14 = x44 + x64;
			x44 -= x64;
			x64 = x54 + x74;
			x54 -= x74;
			x74 = x84 + x34;
			x84 -= x34;
			x34 = x04 + x24;
			x04 -= x24;
			x24 = 181 * (x44 + x54) + 128 >> 8;
			x44 = 181 * (x44 - x54) + 128 >> 8;
			this.block[bp4] = x74 + x14 >> 8;
			this.block[bp4 + 1] = x34 + x24 >> 8;
			this.block[bp4 + 2] = x04 + x44 >> 8;
			this.block[bp4 + 3] = x84 + x64 >> 8;
			this.block[bp4 + 4] = x84 - x64 >> 8;
			this.block[bp4 + 5] = x04 - x44 >> 8;
			this.block[bp4 + 6] = x34 - x24 >> 8;
			this.block[bp4 + 7] = x74 - x14 >> 8;
		}
		let bp5 = 40;
		let x05;
		let x85;
		let x15 = this.block[bp5 + 4] << 11;
		let x25 = this.block[bp5 + 6];
		let x35 = this.block[bp5 + 2];
		let x45 = this.block[bp5 + 1];
		let x55 = this.block[bp5 + 7];
		let x65 = this.block[bp5 + 5];
		let x75 = this.block[bp5 + 3];
		if((x15 | x25 | x35 | x45 | x55 | x65 | x75) == 0) {
			let val = this.block[bp5 + 7] = this.block[bp5] << 3;
			let val1 = this.block[bp5 + 6] = val;
			let val2 = this.block[bp5 + 5] = val1;
			let val3 = this.block[bp5 + 4] = val2;
			let val4 = this.block[bp5 + 3] = val3;
			let val5 = this.block[bp5 + 2] = val4;
			let val6 = this.block[bp5 + 1] = val5;
			this.block[bp5] = val6;
		} else {
			x05 = (this.block[bp5] << 11) + 128;
			x85 = 565 * (x45 + x55);
			x45 = x85 + 2276 * x45;
			x55 = x85 - 3406 * x55;
			x85 = 2408 * (x65 + x75);
			x65 = x85 - 799 * x65;
			x75 = x85 - 4017 * x75;
			x85 = x05 + x15;
			x05 -= x15;
			x15 = 1108 * (x35 + x25);
			x25 = x15 - 3784 * x25;
			x35 = x15 + 1568 * x35;
			x15 = x45 + x65;
			x45 -= x65;
			x65 = x55 + x75;
			x55 -= x75;
			x75 = x85 + x35;
			x85 -= x35;
			x35 = x05 + x25;
			x05 -= x25;
			x25 = 181 * (x45 + x55) + 128 >> 8;
			x45 = 181 * (x45 - x55) + 128 >> 8;
			this.block[bp5] = x75 + x15 >> 8;
			this.block[bp5 + 1] = x35 + x25 >> 8;
			this.block[bp5 + 2] = x05 + x45 >> 8;
			this.block[bp5 + 3] = x85 + x65 >> 8;
			this.block[bp5 + 4] = x85 - x65 >> 8;
			this.block[bp5 + 5] = x05 - x45 >> 8;
			this.block[bp5 + 6] = x35 - x25 >> 8;
			this.block[bp5 + 7] = x75 - x15 >> 8;
		}
		let bp6 = 48;
		let x06;
		let x86;
		let x16 = this.block[bp6 + 4] << 11;
		let x26 = this.block[bp6 + 6];
		let x36 = this.block[bp6 + 2];
		let x46 = this.block[bp6 + 1];
		let x56 = this.block[bp6 + 7];
		let x66 = this.block[bp6 + 5];
		let x76 = this.block[bp6 + 3];
		if((x16 | x26 | x36 | x46 | x56 | x66 | x76) == 0) {
			let val = this.block[bp6 + 7] = this.block[bp6] << 3;
			let val1 = this.block[bp6 + 6] = val;
			let val2 = this.block[bp6 + 5] = val1;
			let val3 = this.block[bp6 + 4] = val2;
			let val4 = this.block[bp6 + 3] = val3;
			let val5 = this.block[bp6 + 2] = val4;
			let val6 = this.block[bp6 + 1] = val5;
			this.block[bp6] = val6;
		} else {
			x06 = (this.block[bp6] << 11) + 128;
			x86 = 565 * (x46 + x56);
			x46 = x86 + 2276 * x46;
			x56 = x86 - 3406 * x56;
			x86 = 2408 * (x66 + x76);
			x66 = x86 - 799 * x66;
			x76 = x86 - 4017 * x76;
			x86 = x06 + x16;
			x06 -= x16;
			x16 = 1108 * (x36 + x26);
			x26 = x16 - 3784 * x26;
			x36 = x16 + 1568 * x36;
			x16 = x46 + x66;
			x46 -= x66;
			x66 = x56 + x76;
			x56 -= x76;
			x76 = x86 + x36;
			x86 -= x36;
			x36 = x06 + x26;
			x06 -= x26;
			x26 = 181 * (x46 + x56) + 128 >> 8;
			x46 = 181 * (x46 - x56) + 128 >> 8;
			this.block[bp6] = x76 + x16 >> 8;
			this.block[bp6 + 1] = x36 + x26 >> 8;
			this.block[bp6 + 2] = x06 + x46 >> 8;
			this.block[bp6 + 3] = x86 + x66 >> 8;
			this.block[bp6 + 4] = x86 - x66 >> 8;
			this.block[bp6 + 5] = x06 - x46 >> 8;
			this.block[bp6 + 6] = x36 - x26 >> 8;
			this.block[bp6 + 7] = x76 - x16 >> 8;
		}
		let bp7 = 56;
		let x07;
		let x87;
		let x17 = this.block[bp7 + 4] << 11;
		let x27 = this.block[bp7 + 6];
		let x37 = this.block[bp7 + 2];
		let x47 = this.block[bp7 + 1];
		let x57 = this.block[bp7 + 7];
		let x67 = this.block[bp7 + 5];
		let x77 = this.block[bp7 + 3];
		if((x17 | x27 | x37 | x47 | x57 | x67 | x77) == 0) {
			let val = this.block[bp7 + 7] = this.block[bp7] << 3;
			let val1 = this.block[bp7 + 6] = val;
			let val2 = this.block[bp7 + 5] = val1;
			let val3 = this.block[bp7 + 4] = val2;
			let val4 = this.block[bp7 + 3] = val3;
			let val5 = this.block[bp7 + 2] = val4;
			let val6 = this.block[bp7 + 1] = val5;
			this.block[bp7] = val6;
		} else {
			x07 = (this.block[bp7] << 11) + 128;
			x87 = 565 * (x47 + x57);
			x47 = x87 + 2276 * x47;
			x57 = x87 - 3406 * x57;
			x87 = 2408 * (x67 + x77);
			x67 = x87 - 799 * x67;
			x77 = x87 - 4017 * x77;
			x87 = x07 + x17;
			x07 -= x17;
			x17 = 1108 * (x37 + x27);
			x27 = x17 - 3784 * x27;
			x37 = x17 + 1568 * x37;
			x17 = x47 + x67;
			x47 -= x67;
			x67 = x57 + x77;
			x57 -= x77;
			x77 = x87 + x37;
			x87 -= x37;
			x37 = x07 + x27;
			x07 -= x27;
			x27 = 181 * (x47 + x57) + 128 >> 8;
			x47 = 181 * (x47 - x57) + 128 >> 8;
			this.block[bp7] = x77 + x17 >> 8;
			this.block[bp7 + 1] = x37 + x27 >> 8;
			this.block[bp7 + 2] = x07 + x47 >> 8;
			this.block[bp7 + 3] = x87 + x67 >> 8;
			this.block[bp7 + 4] = x87 - x67 >> 8;
			this.block[bp7 + 5] = x07 - x47 >> 8;
			this.block[bp7 + 6] = x37 - x27 >> 8;
			this.block[bp7 + 7] = x77 - x17 >> 8;
		}
		let po1 = po;
		let stride = c.stride;
		let x08;
		let x88;
		let x18 = this.block[32] << 8;
		let x28 = this.block[48];
		let x38 = this.block[16];
		let x48 = this.block[8];
		let x58 = this.block[56];
		let x68 = this.block[40];
		let x78 = this.block[24];
		if((x18 | x28 | x38 | x48 | x58 | x68 | x78) == 0) {
			let x = (this.block[0] + 32 >> 6) + 128;
			x18 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
		} else {
			x08 = (this.block[0] << 8) + 8192;
			x88 = 565 * (x48 + x58) + 4;
			x48 = x88 + 2276 * x48 >> 3;
			x58 = x88 - 3406 * x58 >> 3;
			x88 = 2408 * (x68 + x78) + 4;
			x68 = x88 - 799 * x68 >> 3;
			x78 = x88 - 4017 * x78 >> 3;
			x88 = x08 + x18;
			x08 -= x18;
			x18 = 1108 * (x38 + x28) + 4;
			x28 = x18 - 3784 * x28 >> 3;
			x38 = x18 + 1568 * x38 >> 3;
			x18 = x48 + x68;
			x48 -= x68;
			x68 = x58 + x78;
			x58 -= x78;
			x78 = x88 + x38;
			x88 -= x38;
			x38 = x08 + x28;
			x08 -= x28;
			x28 = 181 * (x48 + x58) + 128 >> 8;
			x48 = 181 * (x48 - x58) + 128 >> 8;
			let x = (x78 + x18 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			let x1 = (x38 + x28 >> 14) + 128;
			out.b[po1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po1 += stride;
			let x2 = (x08 + x48 >> 14) + 128;
			out.b[po1] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po1 += stride;
			let x3 = (x88 + x68 >> 14) + 128;
			out.b[po1] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po1 += stride;
			let x4 = (x88 - x68 >> 14) + 128;
			out.b[po1] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po1 += stride;
			let x5 = (x08 - x48 >> 14) + 128;
			out.b[po1] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po1 += stride;
			let x6 = (x38 - x28 >> 14) + 128;
			out.b[po1] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po1 += stride;
			let x7 = (x78 - x18 >> 14) + 128;
			out.b[po1] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po2 = 1 + po;
		let stride1 = c.stride;
		let x09;
		let x89;
		let x19 = this.block[33] << 8;
		let x29 = this.block[49];
		let x39 = this.block[17];
		let x49 = this.block[9];
		let x59 = this.block[57];
		let x69 = this.block[41];
		let x79 = this.block[25];
		if((x19 | x29 | x39 | x49 | x59 | x69 | x79) == 0) {
			let x = (this.block[1] + 32 >> 6) + 128;
			x19 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
			out.b[po2] = x19;
			po2 += stride1;
		} else {
			x09 = (this.block[1] << 8) + 8192;
			x89 = 565 * (x49 + x59) + 4;
			x49 = x89 + 2276 * x49 >> 3;
			x59 = x89 - 3406 * x59 >> 3;
			x89 = 2408 * (x69 + x79) + 4;
			x69 = x89 - 799 * x69 >> 3;
			x79 = x89 - 4017 * x79 >> 3;
			x89 = x09 + x19;
			x09 -= x19;
			x19 = 1108 * (x39 + x29) + 4;
			x29 = x19 - 3784 * x29 >> 3;
			x39 = x19 + 1568 * x39 >> 3;
			x19 = x49 + x69;
			x49 -= x69;
			x69 = x59 + x79;
			x59 -= x79;
			x79 = x89 + x39;
			x89 -= x39;
			x39 = x09 + x29;
			x09 -= x29;
			x29 = 181 * (x49 + x59) + 128 >> 8;
			x49 = 181 * (x49 - x59) + 128 >> 8;
			let x = (x79 + x19 >> 14) + 128;
			out.b[po2] = x < 0 ? 0 : x > 255 ? 255 : x;
			po2 += stride1;
			let x1 = (x39 + x29 >> 14) + 128;
			out.b[po2] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po2 += stride1;
			let x2 = (x09 + x49 >> 14) + 128;
			out.b[po2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po2 += stride1;
			let x3 = (x89 + x69 >> 14) + 128;
			out.b[po2] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po2 += stride1;
			let x4 = (x89 - x69 >> 14) + 128;
			out.b[po2] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po2 += stride1;
			let x5 = (x09 - x49 >> 14) + 128;
			out.b[po2] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po2 += stride1;
			let x6 = (x39 - x29 >> 14) + 128;
			out.b[po2] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po2 += stride1;
			let x7 = (x79 - x19 >> 14) + 128;
			out.b[po2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po3 = 2 + po;
		let stride2 = c.stride;
		let x010;
		let x810;
		let x110 = this.block[34] << 8;
		let x210 = this.block[50];
		let x310 = this.block[18];
		let x410 = this.block[10];
		let x510 = this.block[58];
		let x610 = this.block[42];
		let x710 = this.block[26];
		if((x110 | x210 | x310 | x410 | x510 | x610 | x710) == 0) {
			let x = (this.block[2] + 32 >> 6) + 128;
			x110 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
			out.b[po3] = x110;
			po3 += stride2;
		} else {
			x010 = (this.block[2] << 8) + 8192;
			x810 = 565 * (x410 + x510) + 4;
			x410 = x810 + 2276 * x410 >> 3;
			x510 = x810 - 3406 * x510 >> 3;
			x810 = 2408 * (x610 + x710) + 4;
			x610 = x810 - 799 * x610 >> 3;
			x710 = x810 - 4017 * x710 >> 3;
			x810 = x010 + x110;
			x010 -= x110;
			x110 = 1108 * (x310 + x210) + 4;
			x210 = x110 - 3784 * x210 >> 3;
			x310 = x110 + 1568 * x310 >> 3;
			x110 = x410 + x610;
			x410 -= x610;
			x610 = x510 + x710;
			x510 -= x710;
			x710 = x810 + x310;
			x810 -= x310;
			x310 = x010 + x210;
			x010 -= x210;
			x210 = 181 * (x410 + x510) + 128 >> 8;
			x410 = 181 * (x410 - x510) + 128 >> 8;
			let x = (x710 + x110 >> 14) + 128;
			out.b[po3] = x < 0 ? 0 : x > 255 ? 255 : x;
			po3 += stride2;
			let x1 = (x310 + x210 >> 14) + 128;
			out.b[po3] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po3 += stride2;
			let x2 = (x010 + x410 >> 14) + 128;
			out.b[po3] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po3 += stride2;
			let x3 = (x810 + x610 >> 14) + 128;
			out.b[po3] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po3 += stride2;
			let x4 = (x810 - x610 >> 14) + 128;
			out.b[po3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po3 += stride2;
			let x5 = (x010 - x410 >> 14) + 128;
			out.b[po3] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po3 += stride2;
			let x6 = (x310 - x210 >> 14) + 128;
			out.b[po3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po3 += stride2;
			let x7 = (x710 - x110 >> 14) + 128;
			out.b[po3] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po4 = 3 + po;
		let stride3 = c.stride;
		let x011;
		let x811;
		let x111 = this.block[35] << 8;
		let x211 = this.block[51];
		let x311 = this.block[19];
		let x411 = this.block[11];
		let x511 = this.block[59];
		let x611 = this.block[43];
		let x711 = this.block[27];
		if((x111 | x211 | x311 | x411 | x511 | x611 | x711) == 0) {
			let x = (this.block[3] + 32 >> 6) + 128;
			x111 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
			out.b[po4] = x111;
			po4 += stride3;
		} else {
			x011 = (this.block[3] << 8) + 8192;
			x811 = 565 * (x411 + x511) + 4;
			x411 = x811 + 2276 * x411 >> 3;
			x511 = x811 - 3406 * x511 >> 3;
			x811 = 2408 * (x611 + x711) + 4;
			x611 = x811 - 799 * x611 >> 3;
			x711 = x811 - 4017 * x711 >> 3;
			x811 = x011 + x111;
			x011 -= x111;
			x111 = 1108 * (x311 + x211) + 4;
			x211 = x111 - 3784 * x211 >> 3;
			x311 = x111 + 1568 * x311 >> 3;
			x111 = x411 + x611;
			x411 -= x611;
			x611 = x511 + x711;
			x511 -= x711;
			x711 = x811 + x311;
			x811 -= x311;
			x311 = x011 + x211;
			x011 -= x211;
			x211 = 181 * (x411 + x511) + 128 >> 8;
			x411 = 181 * (x411 - x511) + 128 >> 8;
			let x = (x711 + x111 >> 14) + 128;
			out.b[po4] = x < 0 ? 0 : x > 255 ? 255 : x;
			po4 += stride3;
			let x1 = (x311 + x211 >> 14) + 128;
			out.b[po4] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po4 += stride3;
			let x2 = (x011 + x411 >> 14) + 128;
			out.b[po4] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po4 += stride3;
			let x3 = (x811 + x611 >> 14) + 128;
			out.b[po4] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po4 += stride3;
			let x4 = (x811 - x611 >> 14) + 128;
			out.b[po4] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po4 += stride3;
			let x5 = (x011 - x411 >> 14) + 128;
			out.b[po4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po4 += stride3;
			let x6 = (x311 - x211 >> 14) + 128;
			out.b[po4] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po4 += stride3;
			let x7 = (x711 - x111 >> 14) + 128;
			out.b[po4] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po5 = 4 + po;
		let stride4 = c.stride;
		let x012;
		let x812;
		let x112 = this.block[36] << 8;
		let x212 = this.block[52];
		let x312 = this.block[20];
		let x412 = this.block[12];
		let x512 = this.block[60];
		let x612 = this.block[44];
		let x712 = this.block[28];
		if((x112 | x212 | x312 | x412 | x512 | x612 | x712) == 0) {
			let x = (this.block[4] + 32 >> 6) + 128;
			x112 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
			out.b[po5] = x112;
			po5 += stride4;
		} else {
			x012 = (this.block[4] << 8) + 8192;
			x812 = 565 * (x412 + x512) + 4;
			x412 = x812 + 2276 * x412 >> 3;
			x512 = x812 - 3406 * x512 >> 3;
			x812 = 2408 * (x612 + x712) + 4;
			x612 = x812 - 799 * x612 >> 3;
			x712 = x812 - 4017 * x712 >> 3;
			x812 = x012 + x112;
			x012 -= x112;
			x112 = 1108 * (x312 + x212) + 4;
			x212 = x112 - 3784 * x212 >> 3;
			x312 = x112 + 1568 * x312 >> 3;
			x112 = x412 + x612;
			x412 -= x612;
			x612 = x512 + x712;
			x512 -= x712;
			x712 = x812 + x312;
			x812 -= x312;
			x312 = x012 + x212;
			x012 -= x212;
			x212 = 181 * (x412 + x512) + 128 >> 8;
			x412 = 181 * (x412 - x512) + 128 >> 8;
			let x = (x712 + x112 >> 14) + 128;
			out.b[po5] = x < 0 ? 0 : x > 255 ? 255 : x;
			po5 += stride4;
			let x1 = (x312 + x212 >> 14) + 128;
			out.b[po5] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po5 += stride4;
			let x2 = (x012 + x412 >> 14) + 128;
			out.b[po5] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po5 += stride4;
			let x3 = (x812 + x612 >> 14) + 128;
			out.b[po5] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po5 += stride4;
			let x4 = (x812 - x612 >> 14) + 128;
			out.b[po5] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po5 += stride4;
			let x5 = (x012 - x412 >> 14) + 128;
			out.b[po5] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po5 += stride4;
			let x6 = (x312 - x212 >> 14) + 128;
			out.b[po5] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po5 += stride4;
			let x7 = (x712 - x112 >> 14) + 128;
			out.b[po5] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po6 = 5 + po;
		let stride5 = c.stride;
		let x013;
		let x813;
		let x113 = this.block[37] << 8;
		let x213 = this.block[53];
		let x313 = this.block[21];
		let x413 = this.block[13];
		let x513 = this.block[61];
		let x613 = this.block[45];
		let x713 = this.block[29];
		if((x113 | x213 | x313 | x413 | x513 | x613 | x713) == 0) {
			let x = (this.block[5] + 32 >> 6) + 128;
			x113 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
			out.b[po6] = x113;
			po6 += stride5;
		} else {
			x013 = (this.block[5] << 8) + 8192;
			x813 = 565 * (x413 + x513) + 4;
			x413 = x813 + 2276 * x413 >> 3;
			x513 = x813 - 3406 * x513 >> 3;
			x813 = 2408 * (x613 + x713) + 4;
			x613 = x813 - 799 * x613 >> 3;
			x713 = x813 - 4017 * x713 >> 3;
			x813 = x013 + x113;
			x013 -= x113;
			x113 = 1108 * (x313 + x213) + 4;
			x213 = x113 - 3784 * x213 >> 3;
			x313 = x113 + 1568 * x313 >> 3;
			x113 = x413 + x613;
			x413 -= x613;
			x613 = x513 + x713;
			x513 -= x713;
			x713 = x813 + x313;
			x813 -= x313;
			x313 = x013 + x213;
			x013 -= x213;
			x213 = 181 * (x413 + x513) + 128 >> 8;
			x413 = 181 * (x413 - x513) + 128 >> 8;
			let x = (x713 + x113 >> 14) + 128;
			out.b[po6] = x < 0 ? 0 : x > 255 ? 255 : x;
			po6 += stride5;
			let x1 = (x313 + x213 >> 14) + 128;
			out.b[po6] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po6 += stride5;
			let x2 = (x013 + x413 >> 14) + 128;
			out.b[po6] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po6 += stride5;
			let x3 = (x813 + x613 >> 14) + 128;
			out.b[po6] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po6 += stride5;
			let x4 = (x813 - x613 >> 14) + 128;
			out.b[po6] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po6 += stride5;
			let x5 = (x013 - x413 >> 14) + 128;
			out.b[po6] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po6 += stride5;
			let x6 = (x313 - x213 >> 14) + 128;
			out.b[po6] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po6 += stride5;
			let x7 = (x713 - x113 >> 14) + 128;
			out.b[po6] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po7 = 6 + po;
		let stride6 = c.stride;
		let x014;
		let x814;
		let x114 = this.block[38] << 8;
		let x214 = this.block[54];
		let x314 = this.block[22];
		let x414 = this.block[14];
		let x514 = this.block[62];
		let x614 = this.block[46];
		let x714 = this.block[30];
		if((x114 | x214 | x314 | x414 | x514 | x614 | x714) == 0) {
			let x = (this.block[6] + 32 >> 6) + 128;
			x114 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
			out.b[po7] = x114;
			po7 += stride6;
		} else {
			x014 = (this.block[6] << 8) + 8192;
			x814 = 565 * (x414 + x514) + 4;
			x414 = x814 + 2276 * x414 >> 3;
			x514 = x814 - 3406 * x514 >> 3;
			x814 = 2408 * (x614 + x714) + 4;
			x614 = x814 - 799 * x614 >> 3;
			x714 = x814 - 4017 * x714 >> 3;
			x814 = x014 + x114;
			x014 -= x114;
			x114 = 1108 * (x314 + x214) + 4;
			x214 = x114 - 3784 * x214 >> 3;
			x314 = x114 + 1568 * x314 >> 3;
			x114 = x414 + x614;
			x414 -= x614;
			x614 = x514 + x714;
			x514 -= x714;
			x714 = x814 + x314;
			x814 -= x314;
			x314 = x014 + x214;
			x014 -= x214;
			x214 = 181 * (x414 + x514) + 128 >> 8;
			x414 = 181 * (x414 - x514) + 128 >> 8;
			let x = (x714 + x114 >> 14) + 128;
			out.b[po7] = x < 0 ? 0 : x > 255 ? 255 : x;
			po7 += stride6;
			let x1 = (x314 + x214 >> 14) + 128;
			out.b[po7] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po7 += stride6;
			let x2 = (x014 + x414 >> 14) + 128;
			out.b[po7] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po7 += stride6;
			let x3 = (x814 + x614 >> 14) + 128;
			out.b[po7] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po7 += stride6;
			let x4 = (x814 - x614 >> 14) + 128;
			out.b[po7] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po7 += stride6;
			let x5 = (x014 - x414 >> 14) + 128;
			out.b[po7] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po7 += stride6;
			let x6 = (x314 - x214 >> 14) + 128;
			out.b[po7] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po7 += stride6;
			let x7 = (x714 - x114 >> 14) + 128;
			out.b[po7] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
		let po8 = 7 + po;
		let stride7 = c.stride;
		let x015;
		let x815;
		let x115 = this.block[39] << 8;
		let x215 = this.block[55];
		let x315 = this.block[23];
		let x415 = this.block[15];
		let x515 = this.block[63];
		let x615 = this.block[47];
		let x715 = this.block[31];
		if((x115 | x215 | x315 | x415 | x515 | x615 | x715) == 0) {
			let x = (this.block[7] + 32 >> 6) + 128;
			x115 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
			out.b[po8] = x115;
			po8 += stride7;
		} else {
			x015 = (this.block[7] << 8) + 8192;
			x815 = 565 * (x415 + x515) + 4;
			x415 = x815 + 2276 * x415 >> 3;
			x515 = x815 - 3406 * x515 >> 3;
			x815 = 2408 * (x615 + x715) + 4;
			x615 = x815 - 799 * x615 >> 3;
			x715 = x815 - 4017 * x715 >> 3;
			x815 = x015 + x115;
			x015 -= x115;
			x115 = 1108 * (x315 + x215) + 4;
			x215 = x115 - 3784 * x215 >> 3;
			x315 = x115 + 1568 * x315 >> 3;
			x115 = x415 + x615;
			x415 -= x615;
			x615 = x515 + x715;
			x515 -= x715;
			x715 = x815 + x315;
			x815 -= x315;
			x315 = x015 + x215;
			x015 -= x215;
			x215 = 181 * (x415 + x515) + 128 >> 8;
			x415 = 181 * (x415 - x515) + 128 >> 8;
			let x = (x715 + x115 >> 14) + 128;
			out.b[po8] = x < 0 ? 0 : x > 255 ? 255 : x;
			po8 += stride7;
			let x1 = (x315 + x215 >> 14) + 128;
			out.b[po8] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po8 += stride7;
			let x2 = (x015 + x415 >> 14) + 128;
			out.b[po8] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po8 += stride7;
			let x3 = (x815 + x615 >> 14) + 128;
			out.b[po8] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po8 += stride7;
			let x4 = (x815 - x615 >> 14) + 128;
			out.b[po8] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po8 += stride7;
			let x5 = (x015 - x415 >> 14) + 128;
			out.b[po8] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po8 += stride7;
			let x6 = (x315 - x215 >> 14) + 128;
			out.b[po8] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po8 += stride7;
			let x7 = (x715 - x115 >> 14) + 128;
			out.b[po8] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
		}
	}
	notSupported() {
		throw haxe.Exception.thrown("This JPG file is not supported");
	}
	njDecodeScan() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		let _g = 0;
		let _g1 = this.ncomp;
		while(_g < _g1) {
			let i = _g++;
			let c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		let start = this.bytes.b[this.pos];
		let count = this.bytes.b[this.pos + 1];
		let other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		let count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		let mbx = 0;
		let mby = 0;
		let rstcount = this.rstinterval;
		let nextrst = 0;
		while(true) {
			let _g = 0;
			let _g1 = this.ncomp;
			while(_g < _g1) {
				let i = _g++;
				let c = this.comps[i];
				let _g1 = 0;
				let _g2 = c.ssy;
				while(_g1 < _g2) {
					let sby = _g1++;
					let _g = 0;
					let _g2 = c.ssx;
					while(_g < _g2) {
						let sbx = _g++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				let r = this.njShowBits(16);
				this.bufbits -= 16;
				let i = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	njUpsampleH(c) {
		let xmax = c.width - 3;
		let cout = new haxe.io.Bytes(new ArrayBuffer(c.width * c.height << 1));
		let lout = cout;
		let lin = c.pixels;
		let pi = 0;
		let po = 0;
		let _g = 0;
		let _g1 = c.height;
		while(_g < _g1) {
			let y = _g++;
			let x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			let x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			let x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			let _g1 = 0;
			let _g2 = xmax;
			while(_g1 < _g2) {
				let x = _g1++;
				let x1 = -9 * lin.b[pi + x] + 111 * lin.b[pi + x + 1] + 29 * lin.b[pi + x + 2] + -3 * lin.b[pi + x + 3] + 64 >> 7;
				lout.b[po + (x << 1) + 3] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
				let x2 = -3 * lin.b[pi + x] + 29 * lin.b[pi + x + 1] + 111 * lin.b[pi + x + 2] + -9 * lin.b[pi + x + 3] + 64 >> 7;
				lout.b[po + (x << 1) + 4] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			}
			pi += c.stride;
			po += c.width << 1;
			let x3 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			let x4 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			let x5 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	njUpsampleV(c) {
		let w = c.width;
		let s1 = c.stride;
		let s2 = s1 + s1;
		let out = new haxe.io.Bytes(new ArrayBuffer(c.width * c.height << 1));
		let pi = 0;
		let po = 0;
		let cout = out;
		let cin = c.pixels;
		let _g = 0;
		let _g1 = w;
		while(_g < _g1) {
			let x = _g++;
			po = x;
			pi = po;
			let x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			let x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			let x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			let _g1 = 0;
			let _g2 = c.height - 2;
			while(_g1 < _g2) {
				let y = _g1++;
				let x = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
				po += w;
				let x1 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
				po += w;
				pi += s1;
			}
			pi += s1;
			let x4 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
			po += w;
			let x5 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			po += w;
			let x6 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	njUpsample(c) {
		let xshift = 0;
		let yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		let out = new haxe.io.Bytes(new ArrayBuffer(c.width * c.height));
		let lin = c.pixels;
		let pout = 0;
		let lout = out;
		let _g = 0;
		let _g1 = c.height;
		while(_g < _g1) {
			let y = _g++;
			let pin = (y >> yshift) * c.stride;
			let _g1 = 0;
			let _g2 = c.width;
			while(_g1 < _g2) {
				let x = _g1++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	njConvert() {
		let _g = 0;
		let _g1 = this.ncomp;
		while(_g < _g1) {
			let i = _g++;
			let c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe.Exception.thrown("assert");
			}
		}
		let pixels = new haxe.io.Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			let py = this.comps[0].pixels;
			let pcb = this.comps[1].pixels;
			let pcr = this.comps[2].pixels;
			let pix = pixels;
			let k1 = 0;
			let k2 = 0;
			let k3 = 0;
			let out = 0;
			let _g = 0;
			let _g1 = this.height;
			while(_g < _g1) {
				let yy = _g++;
				let _g1 = 0;
				let _g2 = this.width;
				while(_g1 < _g2) {
					let x = _g1++;
					let y = py.b[k1++] << 8;
					let cb = pcb.b[k2++] - 128;
					let cr = pcr.b[k3++] - 128;
					let x1 = y + 359 * cr + 128 >> 8;
					let r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					let x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					let g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					let x3 = y + 454 * cb + 128 >> 8;
					let b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe.Exception.thrown("TODO");
		}
		return pixels;
	}
	njDecode() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe.Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe.Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe.io.Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe.io.Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe.io.Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe.io.Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe.Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				let count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe.Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					let count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw haxe.Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		let pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	static CF(x) {
		let x1 = x + 64 >> 7;
		if(x1 < 0) {
			return 0;
		} else if(x1 > 255) {
			return 255;
		} else {
			return x1;
		}
	}
	static njClip(x) {
		if(x < 0) {
			return 0;
		} else if(x > 255) {
			return 255;
		} else {
			return x;
		}
	}
	static decode(bytes,filter,position,size) {
		if(size == null) {
			size = -1;
		}
		if(position == null) {
			position = 0;
		}
		if(hxd.res.NanoJpeg.inst == null) {
			hxd.res.NanoJpeg.inst = new hxd.res.NanoJpeg();
		}
		hxd.res.NanoJpeg.inst.njInit(bytes,position,size,filter);
		return hxd.res.NanoJpeg.inst.njDecode();
	}
}
$hxClasses["hxd.res.NanoJpeg"] = hxd.res.NanoJpeg;
hxd.res.NanoJpeg.__name__ = "hxd.res.NanoJpeg";
Object.assign(hxd.res.NanoJpeg.prototype, {
	__class__: hxd.res.NanoJpeg
});
hxd.res.SoundFormat = $hxEnums["hxd.res.SoundFormat"] = { __ename__:true,__constructs__:null
	,Wav: {_hx_name:"Wav",_hx_index:0,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,Mp3: {_hx_name:"Mp3",_hx_index:1,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,OggVorbis: {_hx_name:"OggVorbis",_hx_index:2,__enum__:"hxd.res.SoundFormat",toString:$estr}
};
hxd.res.SoundFormat.__constructs__ = [hxd.res.SoundFormat.Wav,hxd.res.SoundFormat.Mp3,hxd.res.SoundFormat.OggVorbis];
hxd.res.SoundFormat.__empty_constructs__ = [hxd.res.SoundFormat.Wav,hxd.res.SoundFormat.Mp3,hxd.res.SoundFormat.OggVorbis];
hxd.res.Sound = class hxd_res_Sound extends hxd.res.Resource {
	constructor(entry) {
		hxd.res.Resource._hx_skip_constructor = true;
		super();
		hxd.res.Resource._hx_skip_constructor = false;
		this._hx_constructor(entry);
	}
	_hx_constructor(entry) {
		this.lastPlay = 0.;
		super._hx_constructor(entry);
	}
	getData() {
		if(this.data != null) {
			return this.data;
		}
		let bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd.snd.Mp3Data(bytes);
			break;
		case 79:
			throw haxe.Exception.thrown("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd.snd.WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw haxe.Exception.thrown("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd.res.Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	dispose() {
		this.stop();
		this.data = null;
	}
	stop() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	play(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = HxOverrides.now() / 1000;
		this.channel = hxd.snd.Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	watchCallb() {
		let old = this.data;
		this.data = null;
		let data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				let manager = hxd.snd.Manager.get();
				let ch = manager.getAll(this);
				while(ch.hasNext()) {
					let ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	static supportedFormat(fmt) {
		switch(fmt._hx_index) {
		case 0:case 1:
			return true;
		case 2:
			return false;
		}
	}
	static startWorker() {
		return false;
	}
}
$hxClasses["hxd.res.Sound"] = hxd.res.Sound;
hxd.res.Sound.__name__ = "hxd.res.Sound";
hxd.res.Sound.__super__ = hxd.res.Resource;
Object.assign(hxd.res.Sound.prototype, {
	__class__: hxd.res.Sound
});
hxd.snd = {};
hxd.snd.ChannelBase = class hxd_snd_ChannelBase {
	constructor() {
		if(hxd.snd.ChannelBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.volume = 1.;
		this.bindedEffects = [];
		this.effects = [];
		this.mute = false;
		this.priority = 0.;
	}
	getEffect(etype) {
		if(this.effects == null) {
			return null;
		}
		let _g = 0;
		let _g1 = this.effects;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let e1 = js.Boot.__downcastCheck(e,etype) ? e : null;
			if(e1 != null) {
				return e1;
			}
		}
		return null;
	}
	set_volume(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	fadeTo(volume,time,onEnd) {
		if(time == null) {
			time = 1.;
		}
		this.currentFade = { start : HxOverrides.now() / 1000, duration : time, startVolume : this.volume, targetVolume : volume, onEnd : onEnd};
	}
	updateCurrentVolume(now) {
		if(this.currentFade != null) {
			let f = this.currentFade;
			let dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	addEffect(e) {
		if(e == null) {
			throw haxe.Exception.thrown("Can't add null effect");
		}
		if(this.effects.indexOf(e) >= 0) {
			throw haxe.Exception.thrown("effect already added on this channel");
		}
		this.effects.push(e);
		return e;
	}
	removeEffect(e) {
		HxOverrides.remove(this.effects,e);
	}
}
$hxClasses["hxd.snd.ChannelBase"] = hxd.snd.ChannelBase;
hxd.snd.ChannelBase.__name__ = "hxd.snd.ChannelBase";
Object.assign(hxd.snd.ChannelBase.prototype, {
	__class__: hxd.snd.ChannelBase
	,__properties__: {set_volume: "set_volume"}
});
hxd.snd.Channel = class hxd_snd_Channel extends hxd.snd.ChannelBase {
	constructor() {
		hxd.snd.ChannelBase._hx_skip_constructor = true;
		super();
		hxd.snd.ChannelBase._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.queue = [];
		this.positionChanged = false;
		this.isLoading = false;
		this.isVirtual = false;
		this.lastStamp = 0.0;
		this.audibleVolume = 1.0;
		this.allowVirtual = true;
		this.loop = false;
		this.pause = false;
		this.position = 0.0;
		super._hx_constructor();
		this.id = hxd.snd.Channel.ID++;
	}
	onEnd() {
	}
	set_position(v) {
		this.lastStamp = HxOverrides.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	set_pause(v) {
		if(!v) {
			this.lastStamp = HxOverrides.now() / 1000;
		}
		return this.pause = v;
	}
	updateCurrentVolume(now) {
		if(this.pause && this.currentFade != null) {
			let f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		super.updateCurrentVolume(now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			let _g = 0;
			let _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			let _g2 = 0;
			let _g3 = this.effects;
			while(_g2 < _g3.length) {
				let e = _g3[_g2];
				++_g2;
				this.currentVolume *= e.getVolumeModifier();
			}
		}
	}
	calcAudibleVolume(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			let _g = 0;
			let _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			let _g2 = 0;
			let _g3 = this.effects;
			while(_g2 < _g3.length) {
				let e = _g3[_g2];
				++_g2;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	queueSound(sound) {
		this.queue.push(sound);
	}
	stop() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	isReleased() {
		return this.manager == null;
	}
}
$hxClasses["hxd.snd.Channel"] = hxd.snd.Channel;
hxd.snd.Channel.__name__ = "hxd.snd.Channel";
hxd.snd.Channel.__super__ = hxd.snd.ChannelBase;
Object.assign(hxd.snd.Channel.prototype, {
	__class__: hxd.snd.Channel
	,__properties__: Object.assign({}, hxd.snd.ChannelBase.prototype.__properties__, {set_pause: "set_pause",set_position: "set_position"})
});
hxd.snd.ChannelGroup = class hxd_snd_ChannelGroup extends hxd.snd.ChannelBase {
	constructor(name) {
		super();
		this.name = name;
	}
}
$hxClasses["hxd.snd.ChannelGroup"] = hxd.snd.ChannelGroup;
hxd.snd.ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd.snd.ChannelGroup.__super__ = hxd.snd.ChannelBase;
Object.assign(hxd.snd.ChannelGroup.prototype, {
	__class__: hxd.snd.ChannelGroup
});
hxd.snd.SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__:true,__constructs__:null
	,UI8: {_hx_name:"UI8",_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_name:"I16",_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_name:"F32",_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd.snd.SampleFormat.__constructs__ = [hxd.snd.SampleFormat.UI8,hxd.snd.SampleFormat.I16,hxd.snd.SampleFormat.F32];
hxd.snd.SampleFormat.__empty_constructs__ = [hxd.snd.SampleFormat.UI8,hxd.snd.SampleFormat.I16,hxd.snd.SampleFormat.F32];
hxd.snd.Data = class hxd_snd_Data {
	isLoading() {
		return false;
	}
	decode(out,outPos,sampleStart,sampleCount) {
		let bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			let s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw haxe.Exception.thrown(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			let count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	resample(rate,format1,channels) {
		if(this.sampleFormat == format1 && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		let newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		let bpp = this.getBytesPerSample();
		let data = new haxe.io.Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		let out = channels * newSamples;
		let out1;
		switch(format1._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		let out2 = new haxe.io.Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format1,channels,this.samples);
		let data1 = new hxd.snd.WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format1;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	resampleBuffer(out,outPos,input,inPos,rate,format1,channels,samples) {
		let bpp = this.getBytesPerSample();
		let newSamples = Math.ceil(samples * (rate / this.samplingRate));
		let resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd.snd.SampleFormat.I16 && format1 == hxd.snd.SampleFormat.I16 && channels == 1 && this.channels == 2) {
			let r = inPos;
			let w = outPos;
			let _g = 0;
			let _g1 = samples;
			while(_g < _g1) {
				let i = _g++;
				let sl = input.getUInt16(r);
				r += 2;
				let sr = input.getUInt16(r);
				r += 2;
				let s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) != 0) {
						sl |= -65536;
					}
					if((sr & 32768) != 0) {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		let srcChannels = this.channels;
		let commonChannels = channels < srcChannels ? channels : srcChannels;
		let extraChannels = channels - commonChannels;
		let sval = 0.;
		let ival = 0;
		let _g = 0;
		let _g1 = newSamples;
		while(_g < _g1) {
			let i = _g++;
			let targetSample = i / (newSamples - 1) * (samples - 1);
			let isample = targetSample | 0;
			let offset = targetSample - isample;
			let srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			let _g1 = 0;
			let _g2 = commonChannels;
			while(_g1 < _g2) {
				let k = _g1++;
				let sval1;
				let sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					let v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						let v = input.getUInt16(srcPos + bpp);
						sval2 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format1._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			let _g3 = 0;
			let _g4 = extraChannels;
			while(_g3 < _g4) {
				let i = _g3++;
				switch(format1._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	decodeBuffer(out,outPos,sampleStart,sampleCount) {
		throw haxe.Exception.thrown("Not implemented");
	}
	getBytesPerSample() {
		let tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	load(onEnd) {
		onEnd();
	}
	get_duration() {
		return this.samples / this.samplingRate;
	}
	static formatBytes(format1) {
		switch(format1._hx_index) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 4;
		}
	}
}
$hxClasses["hxd.snd.Data"] = hxd.snd.Data;
hxd.snd.Data.__name__ = "hxd.snd.Data";
Object.assign(hxd.snd.Data.prototype, {
	__class__: hxd.snd.Data
	,__properties__: {get_duration: "get_duration"}
});
hxd.snd.EffectDriver = class hxd_snd_EffectDriver {
	constructor() {
		if(hxd.snd.EffectDriver._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
	}
	acquire() {
	}
	release() {
	}
	update(e) {
	}
	bind(e,source) {
	}
	apply(e,source) {
	}
	unbind(e,source) {
	}
}
$hxClasses["hxd.snd.EffectDriver"] = hxd.snd.EffectDriver;
hxd.snd.EffectDriver.__name__ = "hxd.snd.EffectDriver";
Object.assign(hxd.snd.EffectDriver.prototype, {
	__class__: hxd.snd.EffectDriver
});
hxd.snd.DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__:true,__constructs__:null
	,MasterVolume: {_hx_name:"MasterVolume",_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd.snd.DriverFeature.__constructs__ = [hxd.snd.DriverFeature.MasterVolume];
hxd.snd.DriverFeature.__empty_constructs__ = [hxd.snd.DriverFeature.MasterVolume];
hxd.snd.Driver = class hxd_snd_Driver {
}
$hxClasses["hxd.snd.Driver"] = hxd.snd.Driver;
hxd.snd.Driver.__name__ = "hxd.snd.Driver";
hxd.snd.Driver.__isInterface__ = true;
Object.assign(hxd.snd.Driver.prototype, {
	__class__: hxd.snd.Driver
});
hxd.snd.Effect = class hxd_snd_Effect {
	constructor(type) {
		this.refs = 0;
		this.priority = 0;
		this.retainTime = 0.0;
		this.lastStamp = 0.0;
		let managerDriver = hxd.snd.Manager.get().driver;
		if(managerDriver != null) {
			this.driver = managerDriver.getEffectDriver(type);
		}
	}
	applyAudibleVolumeModifier(v) {
		return v;
	}
	getVolumeModifier() {
		return 1;
	}
}
$hxClasses["hxd.snd.Effect"] = hxd.snd.Effect;
hxd.snd.Effect.__name__ = "hxd.snd.Effect";
Object.assign(hxd.snd.Effect.prototype, {
	__class__: hxd.snd.Effect
});
hxd.snd.Listener = class hxd_snd_Listener {
	constructor() {
		this.position = new h3d.VectorImpl(0.,0.,0.);
		this.velocity = new h3d.VectorImpl(0.,0.,0.);
		let x = 1;
		let y = 0;
		let z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.direction = new h3d.VectorImpl(x,y,z);
		let x1 = 0;
		let y1 = 0;
		let z1 = 1;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		this.up = new h3d.VectorImpl(x1,y1,z1);
	}
	syncCamera(cam) {
		let _this = this.position;
		let v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		let _this1 = this.direction;
		let x = cam.target.x - cam.pos.x;
		let y = cam.target.y - cam.pos.y;
		let z = cam.target.z - cam.pos.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = z;
		let _this2 = this.direction;
		let k = _this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this2.x *= k;
		_this2.y *= k;
		_this2.z *= k;
		let _this3 = this.up;
		let v1 = cam.up;
		_this3.x = v1.x;
		_this3.y = v1.y;
		_this3.z = v1.z;
	}
}
$hxClasses["hxd.snd.Listener"] = hxd.snd.Listener;
hxd.snd.Listener.__name__ = "hxd.snd.Listener";
Object.assign(hxd.snd.Listener.prototype, {
	__class__: hxd.snd.Listener
});
hxd.snd.Source = class hxd_snd_Source {
	constructor(driver) {
		this.start = 0;
		this.playing = false;
		this.volume = -1.0;
		this.id = hxd.snd.Source.ID++;
		this.handle = driver.createSource();
		this.buffers = [];
	}
	dispose() {
		hxd.snd.Manager.get().driver.destroySource(this.handle);
	}
}
$hxClasses["hxd.snd.Source"] = hxd.snd.Source;
hxd.snd.Source.__name__ = "hxd.snd.Source";
Object.assign(hxd.snd.Source.prototype, {
	__class__: hxd.snd.Source
});
hxd.snd.Buffer = class hxd_snd_Buffer {
	constructor(driver) {
		this.end = 0;
		this.handle = driver.createBuffer();
		this.refs = 0;
		this.lastStop = HxOverrides.now() / 1000;
	}
	dispose() {
		hxd.snd.Manager.get().driver.destroyBuffer(this.handle);
	}
}
$hxClasses["hxd.snd.Buffer"] = hxd.snd.Buffer;
hxd.snd.Buffer.__name__ = "hxd.snd.Buffer";
Object.assign(hxd.snd.Buffer.prototype, {
	__class__: hxd.snd.Buffer
});
hxd.snd.Manager = class hxd_snd_Manager {
	constructor() {
		this.suspended = false;
		this.timeOffset = 0.;
		try {
			this.driver = new hxd.snd.webaudio.Driver();
		} catch( _g ) {
			if(typeof(haxe.Exception.caught(_g).unwrap()) == "string") {
				this.driver = null;
			} else {
				throw _g;
			}
		}
		this.masterVolume = 1.0;
		this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd.snd.DriverFeature.MasterVolume);
		this.masterSoundGroup = new hxd.snd.SoundGroup("master");
		this.masterChannelGroup = new hxd.snd.ChannelGroup("master");
		this.listener = new hxd.snd.Listener();
		this.soundBufferMap = new haxe.ds.StringMap();
		this.soundBufferKeys = [];
		this.freeStreamBuffers = [];
		this.effectGC = [];
		this.soundBufferCount = 0;
		if(this.driver != null) {
			this.sources = [];
			let _g = 0;
			let _g1 = hxd.snd.Manager.MAX_SOURCES;
			while(_g < _g1) {
				let i = _g++;
				this.sources.push(new hxd.snd.Source(this.driver));
			}
		}
		this.cachedBytes = new haxe.io.Bytes(new ArrayBuffer(24));
		this.resampleBytes = new haxe.io.Bytes(new ArrayBuffer(hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
	}
	getTmpBytes(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe.io.Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	getResampleBytes(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe.io.Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	stopAll() {
		while(this.channels != null) this.channels.stop();
	}
	stopAllNotLooping() {
		let c = this.channels;
		while(c != null) {
			let n = c.next;
			if(!c.loop) {
				c.stop();
			}
			c = n;
		}
	}
	stopByName(name) {
		let c = this.channels;
		while(c != null) {
			let n = c.next;
			if(c.soundGroup != null && c.soundGroup.name == name) {
				c.stop();
			}
			c = n;
		}
	}
	getAll(sound) {
		let ch = this.channels;
		let result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd.impl.ArrayIterator_hxd_snd_Channel(result);
	}
	cleanCache() {
		let i = 0;
		while(i < this.soundBufferKeys.length) {
			let k = this.soundBufferKeys[i];
			let b = this.soundBufferMap.h[k];
			++i;
			if(b.refs > 0) {
				continue;
			}
			let _this = this.soundBufferMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
				delete(_this.h[k]);
			}
			HxOverrides.remove(this.soundBufferKeys,k);
			--i;
			b.dispose();
			--this.soundBufferCount;
		}
	}
	dispose() {
		this.stopAll();
		if(this.driver != null) {
			let _g = 0;
			let _g1 = this.sources;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				s.dispose();
			}
			let h = this.soundBufferMap.h;
			let b_h = h;
			let b_keys = Object.keys(h);
			let b_length = b_keys.length;
			let b_current = 0;
			while(b_current < b_length) {
				let b = b_h[b_keys[b_current++]];
				b.dispose();
			}
			let _g2 = 0;
			let _g3 = this.freeStreamBuffers;
			while(_g2 < _g3.length) {
				let b = _g3[_g2];
				++_g2;
				b.dispose();
			}
			let _g4 = 0;
			let _g5 = this.effectGC;
			while(_g4 < _g5.length) {
				let e = _g5[_g4];
				++_g4;
				e.driver.release();
			}
			this.driver.dispose();
		}
		this.sources = null;
		this.soundBufferMap = null;
		this.soundBufferKeys = null;
		this.freeStreamBuffers = null;
		this.effectGC = null;
		this.updateEvent.stop();
		hxd.snd.Manager.instance = null;
	}
	play(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		let sdat = sound.getData();
		if(sdat.samples == 0) {
			throw haxe.Exception.thrown(Std.string(sound) + " has no samples");
		}
		let c = new hxd.snd.Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		c.lastStamp = HxOverrides.now() / 1000;
		this.channels = c;
		return c;
	}
	updateVirtualChannels(now) {
		let c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			let a = now - c.lastStamp;
			c.set_position(c.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			let next = c.next;
			while(c.position >= c.duration) {
				c.set_position(c.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	update() {
		if(this.timeOffset != 0) {
			let c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			let _g = 0;
			let _g1 = this.sources;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				let _g2 = 0;
				let _g3 = s.buffers;
				while(_g2 < _g3.length) {
					let b = _g3[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = HxOverrides.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		let _g = 0;
		let _g1 = this.sources;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			let lastBuffer = null;
			let count = this.driver.getProcessedBuffers(s.handle);
			let _g2 = 0;
			let _g3 = count;
			while(_g2 < _g3) {
				let i = _g2++;
				let b = this.unqueueBuffer(s);
				if(b == null) {
					continue;
				}
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			let playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c.set_position(s.start / this.targetRate + playedSamples / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd.snd.Manager.BUFFER_QUEUE_LENGTH) {
				let b = s.buffers[s.buffers.length - 1];
				if(!b.isEnd) {
					this.queueBuffer(s,b.sound,b.start + b.samples);
				} else if(c.queue.length > 0) {
					let snd = c.queue[0];
					if(this.queueBuffer(s,snd,0)) {
						c.queue.shift();
					}
				} else if(c.loop) {
					this.queueBuffer(s,b.sound,0);
				}
			}
		}
		let c = this.channels;
		while(c != null) {
			c.calcAudibleVolume(this.now);
			if(c.isLoading && !c.sound.getData().isLoading()) {
				c.isLoading = false;
			}
			c.isVirtual = this.suspended || c.pause || c.mute || c.channelGroup.mute || c.allowVirtual && c.audibleVolume < hxd.snd.Manager.VIRTUAL_VOLUME_THRESHOLD || c.isLoading;
			c = c.next;
		}
		let list = this.channels;
		let cmp = $bind(this,this.sortChannel);
		let tmp;
		if(list == null) {
			tmp = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						let i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		let audibleCount = 0;
		let c1 = this.channels;
		while(c1 != null && !c1.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c1.isVirtual = true;
			} else if(c1.soundGroup.maxAudible >= 0) {
				if(c1.soundGroup.lastUpdate != this.now) {
					c1.soundGroup.lastUpdate = this.now;
					c1.soundGroup.numAudible = 0;
				}
				if(++c1.soundGroup.numAudible > c1.soundGroup.maxAudible) {
					c1.isVirtual = true;
					--audibleCount;
				}
			}
			c1 = c1.next;
		}
		let _g2 = 0;
		let _g3 = this.sources;
		while(_g2 < _g3.length) {
			let s = _g3[_g2];
			++_g2;
			if(s.channel == null || !s.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s);
		}
		let c2 = this.channels;
		while(c2 != null) {
			if(c2.source != null || c2.isVirtual) {
				c2 = c2.next;
				continue;
			}
			let s = null;
			let _g = 0;
			let _g1 = this.sources;
			while(_g < _g1.length) {
				let s2 = _g1[_g];
				++_g;
				if(s2.channel == null) {
					s = s2;
					break;
				}
			}
			if(s == null) {
				throw haxe.Exception.thrown("could not get a source");
			}
			s.channel = c2;
			c2.source = s;
			this.checkTargetFormat(c2.sound.getData(),c2.soundGroup.mono);
			s.start = Math.floor(c2.position * this.targetRate);
			if(s.start < 0) {
				s.start = 0;
			}
			this.queueBuffer(s,c2.sound,s.start);
			c2.positionChanged = false;
			c2 = c2.next;
		}
		let usedEffects = null;
		let volume = this.hasMasterVolume ? 1. : this.masterVolume;
		let _g4 = 0;
		let _g5 = this.sources;
		while(_g4 < _g5.length) {
			let s = _g5[_g4];
			++_g4;
			let c = s.channel;
			if(c == null) {
				continue;
			}
			let v = c.currentVolume * volume;
			if(s.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s.volume = v;
				this.driver.setSourceVolume(s.handle,v);
			}
			if(!s.playing) {
				this.driver.playSource(s.handle);
				s.playing = true;
			}
			let i = c.bindedEffects.length;
			while(--i >= 0) {
				let e = c.bindedEffects[i];
				if(c.effects.indexOf(e) < 0 && c.channelGroup.effects.indexOf(e) < 0) {
					this.unbindEffect(c,s,e);
				}
			}
			let _g = 0;
			let _g1 = c.channelGroup.effects;
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				if(c.bindedEffects.indexOf(e) < 0) {
					this.bindEffect(c,s,e);
				}
			}
			let _g2 = 0;
			let _g3 = c.effects;
			while(_g2 < _g3.length) {
				let e = _g3[_g2];
				++_g2;
				if(c.bindedEffects.indexOf(e) < 0) {
					this.bindEffect(c,s,e);
				}
			}
			let _g6 = 0;
			let _g7 = c.bindedEffects;
			while(_g6 < _g7.length) {
				let e = _g7[_g6];
				++_g6;
				usedEffects = hxd.snd.Manager.regEffect(usedEffects,e);
			}
		}
		let list1 = usedEffects;
		let cmp1 = $bind(this,this.sortEffect);
		if(list1 == null) {
			usedEffects = null;
		} else {
			let insize = 1;
			let nmerges;
			let psize = 0;
			let qsize = 0;
			let p;
			let q;
			let e;
			let tail;
			while(true) {
				p = list1;
				list1 = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					let _g = 0;
					let _g1 = insize;
					while(_g < _g1) {
						let i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp1(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list1 = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			usedEffects = list1;
		}
		let e = usedEffects;
		while(e != null) {
			e.driver.update(e);
			e = e.next;
		}
		let _g6 = 0;
		let _g7 = this.sources;
		while(_g6 < _g7.length) {
			let s = _g7[_g6];
			++_g6;
			let c = s.channel;
			if(c == null) {
				continue;
			}
			let _g = 0;
			let _g1 = c.bindedEffects;
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				e.driver.apply(e,s.handle);
			}
		}
		let _g8 = 0;
		let _g9 = this.effectGC;
		while(_g8 < _g9.length) {
			let e = _g9[_g8];
			++_g8;
			if(this.now - e.lastStamp > e.retainTime) {
				e.driver.release();
				HxOverrides.remove(this.effectGC,e);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		let _this = this.listener.direction;
		let k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		let _this1 = this.listener.up;
		let k1 = _this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z;
		if(k1 < 1e-20) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		_this1.x *= k1;
		_this1.y *= k1;
		_this1.z *= k1;
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd.snd.Manager.SOUND_BUFFER_CACHE_SIZE) {
			let now = HxOverrides.now() / 1000;
			let i = 0;
			while(i < this.soundBufferKeys.length) {
				let k = this.soundBufferKeys[i];
				let b = this.soundBufferMap.h[k];
				++i;
				if(b.refs > 0 || b.lastStop + 60.0 > now) {
					continue;
				}
				let _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i;
				b.dispose();
				--this.soundBufferCount;
			}
		}
	}
	progressiveDecodeBuffer(s,snd,start) {
		let data = snd.getData();
		let samples = Math.ceil(hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd.snd.Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		let end = start + hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		let bpp = data.getBytesPerSample();
		let reqSize = hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe.io.Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		let remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	queueBuffer(s,snd,start) {
		let data = snd.getData();
		let sgroup = s.channel.soundGroup;
		let b = null;
		if(data.get_duration() <= hxd.snd.Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd.snd.Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	unqueueBuffer(s) {
		let b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = HxOverrides.now() / 1000;
		}
		return b;
	}
	bindEffect(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	unbindEffect(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	releaseSource(s) {
		if(s.channel != null) {
			let _g = 0;
			let _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	checkTargetFormat(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		let tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd.snd.SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd.snd.SampleFormat.I16;
			break;
		case 2:
			tmp = hxd.snd.SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	getSoundBuffer(snd,grp) {
		let data = snd.getData();
		let mono = grp.mono;
		let key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		let b = this.soundBufferMap.h[key];
		let _gthis = this;
		if(b == null) {
			b = new hxd.snd.Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	fillSoundBuffer(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		let length = dat.samples * dat.getBytesPerSample();
		let bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	getStreamBuffer(src,snd,grp,start) {
		let data = snd.getData();
		let b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd.snd.Buffer(this.driver);
			b.isStream = true;
		}
		let samples = hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		let size = samples * data.getBytesPerSample();
		let bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			let size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			let size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			let resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	sortChannel(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	sortEffect(a,b) {
		return b.priority - a.priority;
	}
	releaseChannel(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			let prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		let _g = 0;
		let _g1 = c.effects;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		let snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	static get() {
		if(hxd.snd.Manager.instance == null) {
			hxd.snd.Manager.instance = new hxd.snd.Manager();
			hxd.snd.Manager.instance.updateEvent = haxe.MainLoop.add(($_=hxd.snd.Manager.instance,$bind($_,$_.update)));
			hxd.snd.Manager.instance.updateEvent.isBlocking = false;
		}
		return hxd.snd.Manager.instance;
	}
	static regEffect(list,e) {
		let l = list;
		while(l != null) {
			if(l == e) {
				return list;
			}
			l = l.next;
		}
		e.next = list;
		return e;
	}
}
$hxClasses["hxd.snd.Manager"] = hxd.snd.Manager;
hxd.snd.Manager.__name__ = "hxd.snd.Manager";
Object.assign(hxd.snd.Manager.prototype, {
	__class__: hxd.snd.Manager
});
hxd.snd.Mp3Data = class hxd_snd_Mp3Data extends hxd.snd.Data {
	constructor(bytes) {
		super();
		let mp = new format.mp3.Reader(new haxe.io.BytesInput(bytes)).read();
		this.samples = mp.sampleCount;
		let frame = mp.frames[0].data;
		let lame = -1;
		let _g = 0;
		let _g1 = frame.length - 24;
		while(_g < _g1) {
			let i = _g++;
			if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
				lame = i;
				break;
			}
		}
		if(lame >= 0) {
			let startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
			let start = startEnd >> 12;
			let end = startEnd & 4095;
			this.samples -= start + end + 1152;
		}
		let header = mp.frames[0].header;
		this.sampleFormat = hxd.snd.SampleFormat.F32;
		this.samplingRate = format.mp3.MPEG.srEnum2Num(header.samplingRate);
		this.channels = header.channelMode == format.mp3.ChannelMode.Mono ? 1 : 2;
		let ctx = hxd.snd.webaudio.Context.get();
		if(ctx == null) {
			return;
		}
		ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
		let decodedRate = ctx.sampleRate | 0;
		this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
		this.samplingRate = decodedRate;
	}
	isLoading() {
		return this.buffer == null;
	}
	load(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	processBuffer(buf) {
		let left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe.io.Bytes.ofData(left.buffer);
			return;
		}
		let right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		let join = new Float32Array(left.length * 2);
		let w = 0;
		let _g = 0;
		let _g1 = buf.length;
		while(_g < _g1) {
			let i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe.io.Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	decodeBuffer(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
}
$hxClasses["hxd.snd.Mp3Data"] = hxd.snd.Mp3Data;
hxd.snd.Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd.snd.Mp3Data.__super__ = hxd.snd.Data;
Object.assign(hxd.snd.Mp3Data.prototype, {
	__class__: hxd.snd.Mp3Data
});
hxd.snd.SoundGroup = class hxd_snd_SoundGroup {
	constructor(name) {
		this.name = name;
		this.maxAudible = -1;
		this.volume = 1;
		this.mono = false;
	}
}
$hxClasses["hxd.snd.SoundGroup"] = hxd.snd.SoundGroup;
hxd.snd.SoundGroup.__name__ = "hxd.snd.SoundGroup";
Object.assign(hxd.snd.SoundGroup.prototype, {
	__class__: hxd.snd.SoundGroup
});
hxd.snd.WavData = class hxd_snd_WavData extends hxd.snd.Data {
	constructor(bytes) {
		super();
		if(bytes != null) {
			this.init(new format.wav.Reader(new haxe.io.BytesInput(bytes)).read());
		}
	}
	init(d) {
		let h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		let tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd.snd.SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd.snd.SampleFormat.I16;
			break;
		default:
			throw haxe.Exception.thrown("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	decodeBuffer(out,outPos,sampleStart,sampleCount) {
		let bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
}
$hxClasses["hxd.snd.WavData"] = hxd.snd.WavData;
hxd.snd.WavData.__name__ = "hxd.snd.WavData";
hxd.snd.WavData.__super__ = hxd.snd.Data;
Object.assign(hxd.snd.WavData.prototype, {
	__class__: hxd.snd.WavData
});
hxd.snd.effect = {};
hxd.snd.effect.LowPass = class hxd_snd_effect_LowPass extends hxd.snd.Effect {
	constructor() {
		super("lowpass");
		this.priority = 100;
		this.gainHF = 1.0;
	}
}
$hxClasses["hxd.snd.effect.LowPass"] = hxd.snd.effect.LowPass;
hxd.snd.effect.LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd.snd.effect.LowPass.__super__ = hxd.snd.Effect;
Object.assign(hxd.snd.effect.LowPass.prototype, {
	__class__: hxd.snd.effect.LowPass
});
hxd.snd.effect.Pitch = class hxd_snd_effect_Pitch extends hxd.snd.Effect {
	constructor(value) {
		if(value == null) {
			value = 1.0;
		}
		super("pitch");
		this.value = value;
	}
}
$hxClasses["hxd.snd.effect.Pitch"] = hxd.snd.effect.Pitch;
hxd.snd.effect.Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd.snd.effect.Pitch.__super__ = hxd.snd.Effect;
Object.assign(hxd.snd.effect.Pitch.prototype, {
	__class__: hxd.snd.effect.Pitch
});
hxd.snd.effect.Spatialization = class hxd_snd_effect_Spatialization extends hxd.snd.Effect {
	constructor() {
		super("spatialization");
		this.position = new h3d.VectorImpl(0.,0.,0.);
		this.velocity = new h3d.VectorImpl(0.,0.,0.);
		this.direction = new h3d.VectorImpl(0.,0.,0.);
		this.referenceDistance = 1.0;
		this.rollOffFactor = 1.0;
	}
	getVolumeModifier() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		let _this = hxd.snd.Manager.get().listener.position;
		let v = this.position;
		let dx = v.x - _this.x;
		let dy = v.y - _this.y;
		let dz = v.z - _this.z;
		let dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		let volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	applyAudibleVolumeModifier(v) {
		let _this = hxd.snd.Manager.get().listener.position;
		let v1 = this.position;
		let dx = v1.x - _this.x;
		let dy = v1.y - _this.y;
		let dz = v1.z - _this.z;
		let dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		let b = this.referenceDistance;
		if(dist < b) {
			dist = b;
		}
		if(this.maxDistance != null) {
			let b = this.maxDistance;
			if(dist > b) {
				dist = b;
			}
		}
		let volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
}
$hxClasses["hxd.snd.effect.Spatialization"] = hxd.snd.effect.Spatialization;
hxd.snd.effect.Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd.snd.effect.Spatialization.__super__ = hxd.snd.Effect;
Object.assign(hxd.snd.effect.Spatialization.prototype, {
	__class__: hxd.snd.effect.Spatialization
});
hxd.snd.webaudio = {};
hxd.snd.webaudio.BufferHandle = class hxd_snd_webaudio_BufferHandle {
	constructor() {
	}
}
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd.snd.webaudio.BufferHandle;
hxd.snd.webaudio.BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
Object.assign(hxd.snd.webaudio.BufferHandle.prototype, {
	__class__: hxd.snd.webaudio.BufferHandle
});
hxd.snd.webaudio.SourceHandle = class hxd_snd_webaudio_SourceHandle {
	constructor() {
		this.buffers = [];
		this.sampleOffset = 0;
		this.pitch = 1;
		this.firstPlay = true;
	}
	updateDestination() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd.snd.webaudio.Context.destination);
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	applyPitch() {
		let t = 0.;
		let _g = 0;
		let _g1 = this.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
}
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd.snd.webaudio.SourceHandle;
hxd.snd.webaudio.SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
Object.assign(hxd.snd.webaudio.SourceHandle.prototype, {
	__class__: hxd.snd.webaudio.SourceHandle
});
hxd.snd.webaudio.BufferPlayback = class hxd_snd_webaudio_BufferPlayback {
	constructor() {
	}
	get_currentSample() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	set(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	start(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			let _g = [];
			let _g1 = 0;
			let _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				let i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			let channels = _g;
			let j = 0;
			let fade = 0.;
			while(j < 10) {
				let i = 0;
				while(i < channels.length) {
					channels[i][j] *= fade;
					++i;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	readjust(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		let ctx = source.driver.ctx;
		let shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		let elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	restart(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		let ctx = hxd.snd.webaudio.Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	stop(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	onBufferConsumed(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	clear() {
		this.buffer = null;
		this.node = null;
	}
}
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd.snd.webaudio.BufferPlayback;
hxd.snd.webaudio.BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
Object.assign(hxd.snd.webaudio.BufferPlayback.prototype, {
	__class__: hxd.snd.webaudio.BufferPlayback
	,__properties__: {get_currentSample: "get_currentSample"}
});
hxd.snd.webaudio.Context = class hxd_snd_webaudio_Context {
	static get() {
		if(hxd.snd.webaudio.Context.ctx == null) {
			try {
				hxd.snd.webaudio.Context.ctx = new AudioContext();
			} catch( _g ) {
				try {
					hxd.snd.webaudio.Context.ctx = new window.webkitAudioContext();
				} catch( _g ) {
					hxd.snd.webaudio.Context.ctx = null;
				}
			}
			if(hxd.snd.webaudio.Context.ctx == null) {
				throw haxe.Exception.thrown("WebAudio API not available in this browser!");
			}
			if(hxd.snd.webaudio.Context.ctx.state == "suspended") {
				hxd.snd.webaudio.Context.waitForPageInput();
			}
			hxd.snd.webaudio.Context.ctx.addEventListener("statechange",function(_) {
				if(hxd.snd.webaudio.Context.ctx.state == "suspended") {
					hxd.snd.webaudio.Context.waitForPageInput();
				}
			});
			hxd.snd.webaudio.Context.bufferPool = [];
			hxd.snd.webaudio.Context.gainPool = [];
			hxd.snd.webaudio.Context.masterGain = hxd.snd.webaudio.Context.ctx.createGain();
			hxd.snd.webaudio.Context.masterGain.connect(hxd.snd.webaudio.Context.ctx.destination);
			hxd.snd.webaudio.Context.destination = hxd.snd.webaudio.Context.masterGain;
		}
		return hxd.snd.webaudio.Context.ctx;
	}
	static getGain() {
		if(hxd.snd.webaudio.Context.gainPool.length != 0) {
			return hxd.snd.webaudio.Context.gainPool.pop();
		} else {
			return hxd.snd.webaudio.Context.ctx.createGain();
		}
	}
	static putGain(gain) {
		hxd.snd.webaudio.Context.gainPool.push(gain);
		gain.gain.value = 1;
	}
	static waitForPageInput() {
		if(!hxd.snd.webaudio.Context.suspended) {
			window.document.addEventListener("click",hxd.snd.webaudio.Context.resumeContext);
			window.document.addEventListener("keydown",hxd.snd.webaudio.Context.resumeContext);
			window.document.body.addEventListener("keydown",hxd.snd.webaudio.Context.resumeContext);
			window.document.body.addEventListener("touchend",hxd.snd.webaudio.Context.resumeContext);
			hxd.snd.webaudio.Context.suspended = true;
		}
	}
	static resumeContext(_) {
		if(hxd.snd.webaudio.Context.suspended) {
			if(hxd.snd.webaudio.Context.ctx != null) {
				hxd.snd.webaudio.Context.ctx.resume();
			}
			window.document.removeEventListener("click",hxd.snd.webaudio.Context.resumeContext);
			window.document.removeEventListener("keydown",hxd.snd.webaudio.Context.resumeContext);
			window.document.body.removeEventListener("keydown",hxd.snd.webaudio.Context.resumeContext);
			window.document.body.removeEventListener("touchend",hxd.snd.webaudio.Context.resumeContext);
			hxd.snd.webaudio.Context.suspended = false;
		}
	}
	static getBuffer(channels,sampleCount,rate) {
		let _g = 0;
		let _g1 = hxd.snd.webaudio.Context.bufferPool;
		while(_g < _g1.length) {
			let pool = _g1[_g];
			++_g;
			if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
				if(pool.pool.length != 0) {
					return pool.pool.pop();
				} else {
					return hxd.snd.webaudio.Context.ctx.createBuffer(channels,sampleCount,rate);
				}
			}
		}
		let pool = new hxd.snd.webaudio._Context.BufferPool(channels,sampleCount,rate);
		hxd.snd.webaudio.Context.bufferPool.push(pool);
		return hxd.snd.webaudio.Context.ctx.createBuffer(channels,sampleCount,rate);
	}
	static putBuffer(buf) {
		let rate = buf.sampleRate | 0;
		let _g = 0;
		let _g1 = hxd.snd.webaudio.Context.bufferPool;
		while(_g < _g1.length) {
			let pool = _g1[_g];
			++_g;
			if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
				pool.pool.push(buf);
				break;
			}
		}
	}
}
$hxClasses["hxd.snd.webaudio.Context"] = hxd.snd.webaudio.Context;
hxd.snd.webaudio.Context.__name__ = "hxd.snd.webaudio.Context";
hxd.snd.webaudio._Context = {};
hxd.snd.webaudio._Context.BufferPool = class hxd_snd_webaudio__$Context_BufferPool {
	constructor(channels,samples,rate) {
		this.pool = [];
		this.channels = channels;
		this.samples = samples;
		this.rate = rate;
	}
}
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd.snd.webaudio._Context.BufferPool;
hxd.snd.webaudio._Context.BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
Object.assign(hxd.snd.webaudio._Context.BufferPool.prototype, {
	__class__: hxd.snd.webaudio._Context.BufferPool
});
hxd.snd.webaudio.Driver = class hxd_snd_webaudio_Driver {
	constructor() {
		this.playbackPool = [];
		this.ctx = hxd.snd.webaudio.Context.get();
	}
	getBuffer(channels,sampleCount,rate) {
		return hxd.snd.webaudio.Context.getBuffer(channels,sampleCount,rate);
	}
	putBuffer(buf) {
		hxd.snd.webaudio.Context.putBuffer(buf);
	}
	getGain() {
		if(hxd.snd.webaudio.Context.gainPool.length != 0) {
			return hxd.snd.webaudio.Context.gainPool.pop();
		} else {
			return hxd.snd.webaudio.Context.ctx.createGain();
		}
	}
	putGain(gain) {
		hxd.snd.webaudio.Context.gainPool.push(gain);
		gain.gain.value = 1;
	}
	hasFeature(d) {
		return true;
	}
	setMasterVolume(value) {
		hxd.snd.webaudio.Context.masterGain.gain.value = value;
	}
	setListenerParams(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	createSource() {
		let s = new hxd.snd.webaudio.SourceHandle();
		s.driver = this;
		s.gain = hxd.snd.webaudio.Context.gainPool.length != 0 ? hxd.snd.webaudio.Context.gainPool.pop() : hxd.snd.webaudio.Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	playSource(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				let time = this.ctx.currentTime;
				let _g = 0;
				let _g1 = source.buffers;
				while(_g < _g1.length) {
					let b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	stopSource(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	setSourceVolume(source,value) {
		source.gain.gain.value = value;
	}
	destroySource(source) {
		this.stopSource(source);
		source.gain.disconnect();
		source.driver = null;
		let gain = source.gain;
		hxd.snd.webaudio.Context.gainPool.push(gain);
		gain.gain.value = 1;
		source.gain = null;
		let _g = 0;
		let _g1 = source.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			b.stop();
			b.clear();
			this.playbackPool.push(b);
		}
		source.buffers = [];
	}
	createBuffer() {
		let b = new hxd.snd.webaudio.BufferHandle();
		b.samples = 0;
		return b;
	}
	setBufferData(buffer,data,size,format1,channelCount,samplingRate) {
		let sampleCount;
		switch(format1._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		let sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd.snd.webaudio.Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd.snd.webaudio.Context.putBuffer(buffer.inst);
			buffer.inst = hxd.snd.webaudio.Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format1._hx_index) {
		case 0:
			let ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				let chn = buffer.inst.getChannelData(0);
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					chn[i] = (ui8[i] - 128) / 128;
				}
			} else {
				let left = buffer.inst.getChannelData(0);
				let right = buffer.inst.getChannelData(1);
				let r = 0;
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					left[i] = (ui8[r] - 128) / 128;
					right[i] = (ui8[r + 1] - 128) / 128;
					r += channelCount;
				}
			}
			break;
		case 1:
			let i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				let chn = buffer.inst.getChannelData(0);
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					chn[i] = i16[i] / 32768;
				}
			} else {
				let left = buffer.inst.getChannelData(0);
				let right = buffer.inst.getChannelData(1);
				let r = 0;
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					left[i] = i16[r] / 32768;
					right[i] = i16[r + 1] / 32768;
					r += channelCount;
				}
			}
			break;
		case 2:
			let f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				let chn = buffer.inst.getChannelData(0);
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					chn[i] = f32[i];
				}
			} else {
				let left = buffer.inst.getChannelData(0);
				let right = buffer.inst.getChannelData(1);
				let r = 0;
				let _g = 0;
				let _g1 = sampleCount1;
				while(_g < _g1) {
					let i = _g++;
					left[i] = f32[r];
					right[i] = f32[r + 1];
					r += channelCount;
				}
			}
			break;
		}
	}
	destroyBuffer(buffer) {
		if(buffer.inst != null) {
			hxd.snd.webaudio.Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	queueBuffer(source,buffer,sampleStart,endOfStream) {
		let buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd.snd.webaudio.BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				let t = source.buffers[source.buffers.length - 2].ends;
				let tmp = this.ctx;
				let tmp1;
				if(isFinite(t)) {
					let b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	unqueueBuffer(source,buffer) {
		let i = 0;
		while(i < source.buffers.length) {
			let b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	getProcessedBuffers(source) {
		let cnt = 0;
		let _g = 0;
		let _g1 = source.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	getPlayedSampleCount(source) {
		let consumed = 0;
		let buf = null;
		let _g = 0;
		let _g1 = source.buffers;
		while(_g < _g1.length) {
			let b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	update() {
	}
	dispose() {
	}
	getEffectDriver(type) {
		switch(type) {
		case "lowpass":
			return new hxd.snd.webaudio.LowPassDriver();
		case "pitch":
			return new hxd.snd.webaudio.PitchDriver();
		case "spatialization":
			return new hxd.snd.webaudio.SpatializationDriver();
		default:
			return new hxd.snd.EffectDriver();
		}
	}
	get_masterGain() {
		return hxd.snd.webaudio.Context.masterGain;
	}
	set_destination(node) {
		return hxd.snd.webaudio.Context.destination = node;
	}
	get_destination() {
		return hxd.snd.webaudio.Context.destination;
	}
}
$hxClasses["hxd.snd.webaudio.Driver"] = hxd.snd.webaudio.Driver;
hxd.snd.webaudio.Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd.snd.webaudio.Driver.__interfaces__ = [hxd.snd.Driver];
Object.assign(hxd.snd.webaudio.Driver.prototype, {
	__class__: hxd.snd.webaudio.Driver
	,__properties__: {set_destination: "set_destination",get_destination: "get_destination",get_masterGain: "get_masterGain"}
});
hxd.snd.webaudio.LowPassDriver = class hxd_snd_webaudio_LowPassDriver extends hxd.snd.EffectDriver {
	constructor() {
		hxd.snd.EffectDriver._hx_skip_constructor = true;
		super();
		hxd.snd.EffectDriver._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.pool = [];
		super._hx_constructor();
	}
	get(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		let node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	bind(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	apply(e,source) {
		let min = 40;
		let max = source.driver.ctx.sampleRate / 2;
		let octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	unbind(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
}
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd.snd.webaudio.LowPassDriver;
hxd.snd.webaudio.LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd.snd.webaudio.LowPassDriver.__super__ = hxd.snd.EffectDriver;
Object.assign(hxd.snd.webaudio.LowPassDriver.prototype, {
	__class__: hxd.snd.webaudio.LowPassDriver
});
hxd.snd.webaudio.PitchDriver = class hxd_snd_webaudio_PitchDriver extends hxd.snd.EffectDriver {
	constructor() {
		super();
	}
	apply(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	unbind(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
}
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd.snd.webaudio.PitchDriver;
hxd.snd.webaudio.PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd.snd.webaudio.PitchDriver.__super__ = hxd.snd.EffectDriver;
Object.assign(hxd.snd.webaudio.PitchDriver.prototype, {
	__class__: hxd.snd.webaudio.PitchDriver
});
hxd.snd.webaudio.SpatializationDriver = class hxd_snd_webaudio_SpatializationDriver extends hxd.snd.EffectDriver {
	constructor() {
		hxd.snd.EffectDriver._hx_skip_constructor = true;
		super();
		hxd.snd.EffectDriver._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.pool = [];
		super._hx_constructor();
	}
	get(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		let node = ctx.createPanner();
		return node;
	}
	bind(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	apply(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		let maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	unbind(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
}
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd.snd.webaudio.SpatializationDriver;
hxd.snd.webaudio.SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd.snd.webaudio.SpatializationDriver.__super__ = hxd.snd.EffectDriver;
Object.assign(hxd.snd.webaudio.SpatializationDriver.prototype, {
	__class__: hxd.snd.webaudio.SpatializationDriver
});
hxsl.BufferKind = $hxEnums["hxsl.BufferKind"] = { __ename__:true,__constructs__:null
	,Uniform: {_hx_name:"Uniform",_hx_index:0,__enum__:"hxsl.BufferKind",toString:$estr}
	,RW: {_hx_name:"RW",_hx_index:1,__enum__:"hxsl.BufferKind",toString:$estr}
};
hxsl.BufferKind.__constructs__ = [hxsl.BufferKind.Uniform,hxsl.BufferKind.RW];
hxsl.BufferKind.__empty_constructs__ = [hxsl.BufferKind.Uniform,hxsl.BufferKind.RW];
hxsl.Type = $hxEnums["hxsl.Type"] = { __ename__:true,__constructs__:null
	,TVoid: {_hx_name:"TVoid",_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TVec",$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_name:"TMat3",_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_name:"TMat4",_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_name:"TMat3x4",_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBytes",$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_name:"TSampler2D",_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_name:"TSampler2DArray",_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_name:"TSamplerCube",_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TStruct",$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TFun",$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size,kind) { return {_hx_index:16,t:t,size:size,kind:kind,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBuffer",$_.__params__ = ["t","size","kind"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TChannel",$_.__params__ = ["size"],$_)
	,TMat2: {_hx_name:"TMat2",_hx_index:18,__enum__:"hxsl.Type",toString:$estr}
};
hxsl.Type.__constructs__ = [hxsl.Type.TVoid,hxsl.Type.TInt,hxsl.Type.TBool,hxsl.Type.TFloat,hxsl.Type.TString,hxsl.Type.TVec,hxsl.Type.TMat3,hxsl.Type.TMat4,hxsl.Type.TMat3x4,hxsl.Type.TBytes,hxsl.Type.TSampler2D,hxsl.Type.TSampler2DArray,hxsl.Type.TSamplerCube,hxsl.Type.TStruct,hxsl.Type.TFun,hxsl.Type.TArray,hxsl.Type.TBuffer,hxsl.Type.TChannel,hxsl.Type.TMat2];
hxsl.Type.__empty_constructs__ = [hxsl.Type.TVoid,hxsl.Type.TInt,hxsl.Type.TBool,hxsl.Type.TFloat,hxsl.Type.TString,hxsl.Type.TMat3,hxsl.Type.TMat4,hxsl.Type.TMat3x4,hxsl.Type.TSampler2D,hxsl.Type.TSampler2DArray,hxsl.Type.TSamplerCube,hxsl.Type.TMat2];
hxsl.VecType = $hxEnums["hxsl.VecType"] = { __ename__:true,__constructs__:null
	,VInt: {_hx_name:"VInt",_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_name:"VFloat",_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_name:"VBool",_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl.VecType.__constructs__ = [hxsl.VecType.VInt,hxsl.VecType.VFloat,hxsl.VecType.VBool];
hxsl.VecType.__empty_constructs__ = [hxsl.VecType.VInt,hxsl.VecType.VFloat,hxsl.VecType.VBool];
hxsl.SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__:true,__constructs__:null
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SConst",$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SVar",$_.__params__ = ["v"],$_)
};
hxsl.SizeDecl.__constructs__ = [hxsl.SizeDecl.SConst,hxsl.SizeDecl.SVar];
hxsl.SizeDecl.__empty_constructs__ = [];
hxsl.Error = class hxsl_Error {
	constructor(msg,pos) {
		this.msg = msg;
		this.pos = pos;
	}
	toString() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	static t(msg,pos) {
		throw haxe.Exception.thrown(new hxsl.Error(msg,pos));
	}
}
$hxClasses["hxsl.Error"] = hxsl.Error;
hxsl.Error.__name__ = "hxsl.Error";
Object.assign(hxsl.Error.prototype, {
	__class__: hxsl.Error
});
hxsl.VarKind = $hxEnums["hxsl.VarKind"] = { __ename__:true,__constructs__:null
	,Global: {_hx_name:"Global",_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_name:"Input",_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_name:"Param",_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_name:"Var",_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_name:"Output",_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl.VarKind.__constructs__ = [hxsl.VarKind.Global,hxsl.VarKind.Input,hxsl.VarKind.Param,hxsl.VarKind.Var,hxsl.VarKind.Local,hxsl.VarKind.Output,hxsl.VarKind.Function];
hxsl.VarKind.__empty_constructs__ = [hxsl.VarKind.Global,hxsl.VarKind.Input,hxsl.VarKind.Param,hxsl.VarKind.Var,hxsl.VarKind.Local,hxsl.VarKind.Output,hxsl.VarKind.Function];
hxsl.VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["max"],$_)
	,Private: {_hx_name:"Private",_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_name:"Nullable",_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_name:"PerObject",_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Name",$_.__params__ = ["n"],$_)
	,Shared: {_hx_name:"Shared",_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Precision",$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Range",$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_name:"Ignore",_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="PerInstance",$_.__params__ = ["v"],$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Doc",$_.__params__ = ["s"],$_)
	,Borrow: ($_=function(source) { return {_hx_index:11,source:source,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Borrow",$_.__params__ = ["source"],$_)
	,Sampler: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Sampler",$_.__params__ = ["name"],$_)
};
hxsl.VarQualifier.__constructs__ = [hxsl.VarQualifier.Const,hxsl.VarQualifier.Private,hxsl.VarQualifier.Nullable,hxsl.VarQualifier.PerObject,hxsl.VarQualifier.Name,hxsl.VarQualifier.Shared,hxsl.VarQualifier.Precision,hxsl.VarQualifier.Range,hxsl.VarQualifier.Ignore,hxsl.VarQualifier.PerInstance,hxsl.VarQualifier.Doc,hxsl.VarQualifier.Borrow,hxsl.VarQualifier.Sampler];
hxsl.VarQualifier.__empty_constructs__ = [hxsl.VarQualifier.Private,hxsl.VarQualifier.Nullable,hxsl.VarQualifier.PerObject,hxsl.VarQualifier.Shared,hxsl.VarQualifier.Ignore];
hxsl.Prec = $hxEnums["hxsl.Prec"] = { __ename__:true,__constructs__:null
	,Low: {_hx_name:"Low",_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_name:"Medium",_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_name:"High",_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl.Prec.__constructs__ = [hxsl.Prec.Low,hxsl.Prec.Medium,hxsl.Prec.High];
hxsl.Prec.__empty_constructs__ = [hxsl.Prec.Low,hxsl.Prec.Medium,hxsl.Prec.High];
hxsl.Const = $hxEnums["hxsl.Const"] = { __ename__:true,__constructs__:null
	,CNull: {_hx_name:"CNull",_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CBool",$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["v"],$_)
};
hxsl.Const.__constructs__ = [hxsl.Const.CNull,hxsl.Const.CBool,hxsl.Const.CInt,hxsl.Const.CFloat,hxsl.Const.CString];
hxsl.Const.__empty_constructs__ = [hxsl.Const.CNull];
hxsl.ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__:true,__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EConst",$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EIdent",$_.__params__ = ["i"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EParenthesis",$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EField",$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EUnop",$_.__params__ = ["op","e1"],$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="ECall",$_.__params__ = ["e","args"],$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EBlock",$_.__params__ = ["el"],$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EVars",$_.__params__ = ["v"],$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EFunction",$_.__params__ = ["f"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EIf",$_.__params__ = ["econd","eif","eelse"],$_)
	,EDiscard: {_hx_name:"EDiscard",_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EFor",$_.__params__ = ["v","loop","block"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EReturn",$_.__params__ = ["e"],$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EArray",$_.__params__ = ["e","eindex"],$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EArrayDecl",$_.__params__ = ["el"],$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="ESwitch",$_.__params__ = ["e","cases","def"],$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EWhile",$_.__params__ = ["cond","loop","normalWhile"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EMeta",$_.__params__ = ["name","args","e"],$_)
};
hxsl.ExprDef.__constructs__ = [hxsl.ExprDef.EConst,hxsl.ExprDef.EIdent,hxsl.ExprDef.EParenthesis,hxsl.ExprDef.EField,hxsl.ExprDef.EBinop,hxsl.ExprDef.EUnop,hxsl.ExprDef.ECall,hxsl.ExprDef.EBlock,hxsl.ExprDef.EVars,hxsl.ExprDef.EFunction,hxsl.ExprDef.EIf,hxsl.ExprDef.EDiscard,hxsl.ExprDef.EFor,hxsl.ExprDef.EReturn,hxsl.ExprDef.EBreak,hxsl.ExprDef.EContinue,hxsl.ExprDef.EArray,hxsl.ExprDef.EArrayDecl,hxsl.ExprDef.ESwitch,hxsl.ExprDef.EWhile,hxsl.ExprDef.EMeta];
hxsl.ExprDef.__empty_constructs__ = [hxsl.ExprDef.EDiscard,hxsl.ExprDef.EBreak,hxsl.ExprDef.EContinue];
hxsl.TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__:true,__constructs__:null
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVar",$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TGlobal",$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TParenthesis",$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBlock",$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBinop",$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TUnop",$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVarDecl",$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TCall",$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwiz",$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TIf",$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_name:"TDiscard",_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TReturn",$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TFor",$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_name:"TContinue",_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_name:"TBreak",_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArrayDecl",$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwitch",$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TWhile",$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["m","args","e"],$_)
};
hxsl.TExprDef.__constructs__ = [hxsl.TExprDef.TConst,hxsl.TExprDef.TVar,hxsl.TExprDef.TGlobal,hxsl.TExprDef.TParenthesis,hxsl.TExprDef.TBlock,hxsl.TExprDef.TBinop,hxsl.TExprDef.TUnop,hxsl.TExprDef.TVarDecl,hxsl.TExprDef.TCall,hxsl.TExprDef.TSwiz,hxsl.TExprDef.TIf,hxsl.TExprDef.TDiscard,hxsl.TExprDef.TReturn,hxsl.TExprDef.TFor,hxsl.TExprDef.TContinue,hxsl.TExprDef.TBreak,hxsl.TExprDef.TArray,hxsl.TExprDef.TArrayDecl,hxsl.TExprDef.TSwitch,hxsl.TExprDef.TWhile,hxsl.TExprDef.TMeta];
hxsl.TExprDef.__empty_constructs__ = [hxsl.TExprDef.TDiscard,hxsl.TExprDef.TContinue,hxsl.TExprDef.TBreak];
hxsl.FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__:true,__constructs__:null
	,Vertex: {_hx_name:"Vertex",_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_name:"Fragment",_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_name:"Init",_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_name:"Helper",_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Main: {_hx_name:"Main",_hx_index:4,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl.FunctionKind.__constructs__ = [hxsl.FunctionKind.Vertex,hxsl.FunctionKind.Fragment,hxsl.FunctionKind.Init,hxsl.FunctionKind.Helper,hxsl.FunctionKind.Main];
hxsl.FunctionKind.__empty_constructs__ = [hxsl.FunctionKind.Vertex,hxsl.FunctionKind.Fragment,hxsl.FunctionKind.Init,hxsl.FunctionKind.Helper,hxsl.FunctionKind.Main];
hxsl.TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__:true,__constructs__:null
	,Radians: {_hx_name:"Radians",_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_name:"Degrees",_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_name:"Sin",_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_name:"Cos",_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_name:"Tan",_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_name:"Asin",_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_name:"Acos",_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_name:"Atan",_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_name:"Pow",_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_name:"Exp",_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_name:"Log",_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_name:"Exp2",_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_name:"Log2",_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_name:"Sqrt",_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_name:"Inversesqrt",_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_name:"Abs",_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_name:"Sign",_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_name:"Floor",_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_name:"Ceil",_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_name:"Fract",_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_name:"Mod",_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_name:"Clamp",_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_name:"Mix",_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_name:"Step",_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_name:"Smoothstep",_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_name:"Length",_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_name:"Distance",_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_name:"Normalize",_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_name:"LReflect",_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_name:"Texture",_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_name:"TextureLod",_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_name:"Texel",_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_name:"TextureSize",_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_name:"ToInt",_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_name:"ToFloat",_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_name:"ToBool",_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_name:"Vec2",_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_name:"Vec3",_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_name:"Vec4",_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_name:"IVec2",_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_name:"IVec3",_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_name:"IVec4",_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_name:"BVec2",_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_name:"BVec3",_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_name:"BVec4",_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_name:"Mat2",_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_name:"Mat3",_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_name:"Mat4",_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_name:"Mat3x4",_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_name:"Saturate",_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_name:"Pack",_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_name:"Unpack",_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_name:"PackNormal",_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_name:"UnpackNormal",_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_name:"ScreenToUv",_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_name:"UvToScreen",_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_name:"DFdx",_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_name:"DFdy",_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_name:"Fwidth",_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_name:"ChannelRead",_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_name:"ChannelReadLod",_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_name:"ChannelFetch",_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_name:"ChannelTextureSize",_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_name:"Trace",_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_name:"VertexID",_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_name:"InstanceID",_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_name:"FragCoord",_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_name:"FrontFacing",_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToInt: {_hx_name:"FloatBitsToInt",_hx_index:72,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToUint: {_hx_name:"FloatBitsToUint",_hx_index:73,__enum__:"hxsl.TGlobal",toString:$estr}
	,IntBitsToFloat: {_hx_name:"IntBitsToFloat",_hx_index:74,__enum__:"hxsl.TGlobal",toString:$estr}
	,UintBitsToFloat: {_hx_name:"UintBitsToFloat",_hx_index:75,__enum__:"hxsl.TGlobal",toString:$estr}
	,RoundEven: {_hx_name:"RoundEven",_hx_index:76,__enum__:"hxsl.TGlobal",toString:$estr}
	,SetLayout: {_hx_name:"SetLayout",_hx_index:77,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl.TGlobal.__constructs__ = [hxsl.TGlobal.Radians,hxsl.TGlobal.Degrees,hxsl.TGlobal.Sin,hxsl.TGlobal.Cos,hxsl.TGlobal.Tan,hxsl.TGlobal.Asin,hxsl.TGlobal.Acos,hxsl.TGlobal.Atan,hxsl.TGlobal.Pow,hxsl.TGlobal.Exp,hxsl.TGlobal.Log,hxsl.TGlobal.Exp2,hxsl.TGlobal.Log2,hxsl.TGlobal.Sqrt,hxsl.TGlobal.Inversesqrt,hxsl.TGlobal.Abs,hxsl.TGlobal.Sign,hxsl.TGlobal.Floor,hxsl.TGlobal.Ceil,hxsl.TGlobal.Fract,hxsl.TGlobal.Mod,hxsl.TGlobal.Min,hxsl.TGlobal.Max,hxsl.TGlobal.Clamp,hxsl.TGlobal.Mix,hxsl.TGlobal.Step,hxsl.TGlobal.Smoothstep,hxsl.TGlobal.Length,hxsl.TGlobal.Distance,hxsl.TGlobal.Dot,hxsl.TGlobal.Cross,hxsl.TGlobal.Normalize,hxsl.TGlobal.LReflect,hxsl.TGlobal.Texture,hxsl.TGlobal.TextureLod,hxsl.TGlobal.Texel,hxsl.TGlobal.TextureSize,hxsl.TGlobal.ToInt,hxsl.TGlobal.ToFloat,hxsl.TGlobal.ToBool,hxsl.TGlobal.Vec2,hxsl.TGlobal.Vec3,hxsl.TGlobal.Vec4,hxsl.TGlobal.IVec2,hxsl.TGlobal.IVec3,hxsl.TGlobal.IVec4,hxsl.TGlobal.BVec2,hxsl.TGlobal.BVec3,hxsl.TGlobal.BVec4,hxsl.TGlobal.Mat2,hxsl.TGlobal.Mat3,hxsl.TGlobal.Mat4,hxsl.TGlobal.Mat3x4,hxsl.TGlobal.Saturate,hxsl.TGlobal.Pack,hxsl.TGlobal.Unpack,hxsl.TGlobal.PackNormal,hxsl.TGlobal.UnpackNormal,hxsl.TGlobal.ScreenToUv,hxsl.TGlobal.UvToScreen,hxsl.TGlobal.DFdx,hxsl.TGlobal.DFdy,hxsl.TGlobal.Fwidth,hxsl.TGlobal.ChannelRead,hxsl.TGlobal.ChannelReadLod,hxsl.TGlobal.ChannelFetch,hxsl.TGlobal.ChannelTextureSize,hxsl.TGlobal.Trace,hxsl.TGlobal.VertexID,hxsl.TGlobal.InstanceID,hxsl.TGlobal.FragCoord,hxsl.TGlobal.FrontFacing,hxsl.TGlobal.FloatBitsToInt,hxsl.TGlobal.FloatBitsToUint,hxsl.TGlobal.IntBitsToFloat,hxsl.TGlobal.UintBitsToFloat,hxsl.TGlobal.RoundEven,hxsl.TGlobal.SetLayout];
hxsl.TGlobal.__empty_constructs__ = [hxsl.TGlobal.Radians,hxsl.TGlobal.Degrees,hxsl.TGlobal.Sin,hxsl.TGlobal.Cos,hxsl.TGlobal.Tan,hxsl.TGlobal.Asin,hxsl.TGlobal.Acos,hxsl.TGlobal.Atan,hxsl.TGlobal.Pow,hxsl.TGlobal.Exp,hxsl.TGlobal.Log,hxsl.TGlobal.Exp2,hxsl.TGlobal.Log2,hxsl.TGlobal.Sqrt,hxsl.TGlobal.Inversesqrt,hxsl.TGlobal.Abs,hxsl.TGlobal.Sign,hxsl.TGlobal.Floor,hxsl.TGlobal.Ceil,hxsl.TGlobal.Fract,hxsl.TGlobal.Mod,hxsl.TGlobal.Min,hxsl.TGlobal.Max,hxsl.TGlobal.Clamp,hxsl.TGlobal.Mix,hxsl.TGlobal.Step,hxsl.TGlobal.Smoothstep,hxsl.TGlobal.Length,hxsl.TGlobal.Distance,hxsl.TGlobal.Dot,hxsl.TGlobal.Cross,hxsl.TGlobal.Normalize,hxsl.TGlobal.LReflect,hxsl.TGlobal.Texture,hxsl.TGlobal.TextureLod,hxsl.TGlobal.Texel,hxsl.TGlobal.TextureSize,hxsl.TGlobal.ToInt,hxsl.TGlobal.ToFloat,hxsl.TGlobal.ToBool,hxsl.TGlobal.Vec2,hxsl.TGlobal.Vec3,hxsl.TGlobal.Vec4,hxsl.TGlobal.IVec2,hxsl.TGlobal.IVec3,hxsl.TGlobal.IVec4,hxsl.TGlobal.BVec2,hxsl.TGlobal.BVec3,hxsl.TGlobal.BVec4,hxsl.TGlobal.Mat2,hxsl.TGlobal.Mat3,hxsl.TGlobal.Mat4,hxsl.TGlobal.Mat3x4,hxsl.TGlobal.Saturate,hxsl.TGlobal.Pack,hxsl.TGlobal.Unpack,hxsl.TGlobal.PackNormal,hxsl.TGlobal.UnpackNormal,hxsl.TGlobal.ScreenToUv,hxsl.TGlobal.UvToScreen,hxsl.TGlobal.DFdx,hxsl.TGlobal.DFdy,hxsl.TGlobal.Fwidth,hxsl.TGlobal.ChannelRead,hxsl.TGlobal.ChannelReadLod,hxsl.TGlobal.ChannelFetch,hxsl.TGlobal.ChannelTextureSize,hxsl.TGlobal.Trace,hxsl.TGlobal.VertexID,hxsl.TGlobal.InstanceID,hxsl.TGlobal.FragCoord,hxsl.TGlobal.FrontFacing,hxsl.TGlobal.FloatBitsToInt,hxsl.TGlobal.FloatBitsToUint,hxsl.TGlobal.IntBitsToFloat,hxsl.TGlobal.UintBitsToFloat,hxsl.TGlobal.RoundEven,hxsl.TGlobal.SetLayout];
hxsl.Component = $hxEnums["hxsl.Component"] = { __ename__:true,__constructs__:null
	,X: {_hx_name:"X",_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_name:"Y",_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_name:"Z",_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_name:"W",_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl.Component.__constructs__ = [hxsl.Component.X,hxsl.Component.Y,hxsl.Component.Z,hxsl.Component.W];
hxsl.Component.__empty_constructs__ = [hxsl.Component.X,hxsl.Component.Y,hxsl.Component.Z,hxsl.Component.W];
hxsl.Tools = class hxsl_Tools {
	static allocVarId() {
		return ++hxsl.Tools.UID;
	}
	static getName(v) {
		if(v.qualifiers == null) {
			return v.name;
		}
		let _g = 0;
		let _g1 = v.qualifiers;
		while(_g < _g1.length) {
			let q = _g1[_g];
			++_g;
			if(q._hx_index == 4) {
				let n = q.n;
				return n;
			}
		}
		return v.name;
	}
	static getDoc(v) {
		if(v.qualifiers == null) {
			return null;
		}
		let _g = 0;
		let _g1 = v.qualifiers;
		while(_g < _g1.length) {
			let q = _g1[_g];
			++_g;
			if(q._hx_index == 10) {
				let s = q.s;
				return s;
			}
		}
		return null;
	}
	static getConstBits(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 1:
			let _g1 = 0;
			let _g2 = v.qualifiers;
			while(_g1 < _g2.length) {
				let q = _g2[_g1];
				++_g1;
				if(q._hx_index == 0) {
					let n = q.max;
					if(n != null) {
						let bits = 0;
						while(n >= 1 << bits) ++bits;
						return bits;
					}
					return 8;
				}
			}
			break;
		case 2:
			return 1;
		case 17:
			let _g3 = _g.size;
			return 3 + hxsl.Tools.MAX_CHANNELS_BITS;
		default:
		}
		return 0;
	}
	static isConst(v) {
		let _g = v.type;
		let tmp;
		if(_g._hx_index == 17) {
			let _g1 = _g.size;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return true;
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 0) {
					let _g = q.max;
					return true;
				}
			}
		}
		return false;
	}
	static isStruct(v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let _g1 = _g.vl;
			return true;
		} else {
			return false;
		}
	}
	static isArray(v) {
		let _g = v.type;
		if(_g._hx_index == 15) {
			let _g1 = _g.t;
			let _g2 = _g.size;
			return true;
		} else {
			return false;
		}
	}
	static hasQualifier(v,q) {
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q2 = _g1[_g];
				++_g;
				if(q2 == q) {
					return true;
				}
			}
		}
		return false;
	}
	static hasBorrowQualifier(v,path) {
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 11) {
					let s = q.source;
					return path == s;
				}
			}
		}
		return false;
	}
	static isSampler(t) {
		switch(t._hx_index) {
		case 10:case 11:case 12:
			return true;
		case 17:
			let _g = t.size;
			return true;
		default:
			return false;
		}
	}
	static toString(t) {
		switch(t._hx_index) {
		case 5:
			let size = t.size;
			let t1 = t.t;
			let prefix;
			switch(t1._hx_index) {
			case 0:
				prefix = "I";
				break;
			case 1:
				prefix = "";
				break;
			case 2:
				prefix = "B";
				break;
			}
			return prefix + "Vec" + size;
		case 9:
			let n = t.size;
			return "Bytes" + n;
		case 13:
			let vl = t.vl;
			let _g = [];
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				_g.push(v.name + " : " + hxsl.Tools.toString(v.type));
			}
			return "{" + _g.join(",") + "}";
		case 15:
			let t2 = t.t;
			let s = t.size;
			let tmp = hxsl.Tools.toString(t2) + "[";
			let tmp1;
			switch(s._hx_index) {
			case 0:
				let i = s.v;
				tmp1 = "" + i;
				break;
			case 1:
				let v = s.v;
				tmp1 = v.name;
				break;
			}
			return tmp + tmp1 + "]";
		case 16:
			let t3 = t.t;
			let s1 = t.size;
			let k = t.kind;
			let prefix1;
			switch(k._hx_index) {
			case 0:
				prefix1 = "buffer";
				break;
			case 1:
				prefix1 = "rwbuffer";
				break;
			}
			let tmp2 = prefix1 + " " + hxsl.Tools.toString(t3) + "[";
			let tmp3;
			switch(s1._hx_index) {
			case 0:
				let i1 = s1.v;
				tmp3 = "" + i1;
				break;
			case 1:
				let v1 = s1.v;
				tmp3 = v1.name;
				break;
			}
			return tmp2 + tmp3 + "]";
		default:
			return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name,1,null);
		}
	}
	static toType(t) {
		switch(t._hx_index) {
		case 0:
			return hxsl.Type.TInt;
		case 1:
			return hxsl.Type.TFloat;
		case 2:
			return hxsl.Type.TBool;
		}
	}
	static hasSideEffect(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			return false;
		case 1:
			let _g2 = _g.v;
			return false;
		case 2:
			let _g3 = _g.g;
			return false;
		case 3:
			let e1 = _g.e;
			return hxsl.Tools.hasSideEffect(e1);
		case 4:
			let el = _g.el;
			let _g4 = 0;
			while(_g4 < el.length) {
				let e = el[_g4];
				++_g4;
				if(hxsl.Tools.hasSideEffect(e)) {
					return true;
				}
			}
			return false;
		case 5:
			let _g5 = _g.op;
			let _g6 = _g.e1;
			let _g7 = _g.e2;
			switch(_g5._hx_index) {
			case 4:
				return true;
			case 20:
				let _g8 = _g5.op;
				return true;
			default:
				let e11 = _g6;
				let e2 = _g7;
				if(!hxsl.Tools.hasSideEffect(e11)) {
					return hxsl.Tools.hasSideEffect(e2);
				} else {
					return true;
				}
			}
			break;
		case 6:
			let _g9 = _g.op;
			let e12 = _g.e1;
			return hxsl.Tools.hasSideEffect(e12);
		case 7:
			let _g10 = _g.v;
			let _g11 = _g.init;
			return true;
		case 8:
			let _g12 = _g.e;
			let _g13 = _g.args;
			let _g14 = _g12.e;
			let _g15 = _g12.p;
			let _g16 = _g12.t;
			if(_g14._hx_index == 2) {
				if(_g14.g._hx_index == 77) {
					return true;
				} else {
					let e = _g12;
					let pl = _g13;
					let _g = e.e;
					let tmp;
					if(_g._hx_index == 2) {
						let _g1 = _g.g;
						tmp = true;
					} else {
						tmp = false;
					}
					if(!tmp) {
						return true;
					}
					let _g1 = 0;
					while(_g1 < pl.length) {
						let p = pl[_g1];
						++_g1;
						if(hxsl.Tools.hasSideEffect(p)) {
							return true;
						}
					}
					return false;
				}
			} else {
				let e = _g12;
				let pl = _g13;
				let _g = e.e;
				let tmp;
				if(_g._hx_index == 2) {
					let _g1 = _g.g;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					return true;
				}
				let _g1 = 0;
				while(_g1 < pl.length) {
					let p = pl[_g1];
					++_g1;
					if(hxsl.Tools.hasSideEffect(p)) {
						return true;
					}
				}
				return false;
			}
			break;
		case 9:
			let _g17 = _g.regs;
			let e3 = _g.e;
			return hxsl.Tools.hasSideEffect(e3);
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			if(!(hxsl.Tools.hasSideEffect(econd) || hxsl.Tools.hasSideEffect(eif))) {
				if(eelse != null) {
					return hxsl.Tools.hasSideEffect(eelse);
				} else {
					return false;
				}
			} else {
				return true;
			}
			break;
		case 12:
			let _g18 = _g.e;
			return true;
		case 13:
			let _g19 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			if(!hxsl.Tools.hasSideEffect(it)) {
				return hxsl.Tools.hasSideEffect(loop);
			} else {
				return true;
			}
			break;
		case 11:case 14:case 15:
			return true;
		case 16:
			let e4 = _g.e;
			let index = _g.index;
			if(!hxsl.Tools.hasSideEffect(e4)) {
				return hxsl.Tools.hasSideEffect(index);
			} else {
				return true;
			}
			break;
		case 17:
			let el1 = _g.el;
			let _g20 = 0;
			while(_g20 < el1.length) {
				let e = el1[_g20];
				++_g20;
				if(hxsl.Tools.hasSideEffect(e)) {
					return true;
				}
			}
			return false;
		case 18:
			let e5 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			let _g21 = 0;
			while(_g21 < cases.length) {
				let c = cases[_g21];
				++_g21;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					if(hxsl.Tools.hasSideEffect(v)) {
						return true;
					}
				}
				if(hxsl.Tools.hasSideEffect(c.expr)) {
					return true;
				}
			}
			if(!hxsl.Tools.hasSideEffect(e5)) {
				if(def != null) {
					return hxsl.Tools.hasSideEffect(def);
				} else {
					return false;
				}
			} else {
				return true;
			}
			break;
		case 19:
			let _g22 = _g.normalWhile;
			let e6 = _g.e;
			let loop1 = _g.loop;
			if(!hxsl.Tools.hasSideEffect(e6)) {
				return hxsl.Tools.hasSideEffect(loop1);
			} else {
				return true;
			}
			break;
		case 20:
			let _g23 = _g.m;
			let _g24 = _g.args;
			let e7 = _g.e;
			return hxsl.Tools.hasSideEffect(e7);
		}
	}
	static iter(e,f) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			break;
		case 1:
			let _g2 = _g.v;
			break;
		case 2:
			let _g3 = _g.g;
			break;
		case 3:
			let e1 = _g.e;
			f(e1);
			break;
		case 4:
			let el = _g.el;
			let _g4 = 0;
			while(_g4 < el.length) {
				let e = el[_g4];
				++_g4;
				f(e);
			}
			break;
		case 5:
			let _g5 = _g.op;
			let e11 = _g.e1;
			let e2 = _g.e2;
			f(e11);
			f(e2);
			break;
		case 6:
			let _g6 = _g.op;
			let e12 = _g.e1;
			f(e12);
			break;
		case 7:
			let _g7 = _g.v;
			let init = _g.init;
			if(init != null) {
				f(init);
			}
			break;
		case 8:
			let e3 = _g.e;
			let args = _g.args;
			f(e3);
			let _g8 = 0;
			while(_g8 < args.length) {
				let a = args[_g8];
				++_g8;
				f(a);
			}
			break;
		case 9:
			let _g9 = _g.regs;
			let e4 = _g.e;
			f(e4);
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			f(econd);
			f(eif);
			if(eelse != null) {
				f(eelse);
			}
			break;
		case 12:
			let e5 = _g.e;
			if(e5 != null) {
				f(e5);
			}
			break;
		case 13:
			let _g10 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			f(it);
			f(loop);
			break;
		case 11:case 14:case 15:
			break;
		case 16:
			let e6 = _g.e;
			let index = _g.index;
			f(e6);
			f(index);
			break;
		case 17:
			let el1 = _g.el;
			let _g11 = 0;
			while(_g11 < el1.length) {
				let e = el1[_g11];
				++_g11;
				f(e);
			}
			break;
		case 18:
			let e7 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			f(e7);
			let _g12 = 0;
			while(_g12 < cases.length) {
				let c = cases[_g12];
				++_g12;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					f(v);
				}
				f(c.expr);
			}
			if(def != null) {
				f(def);
			}
			break;
		case 19:
			let _g13 = _g.normalWhile;
			let e8 = _g.e;
			let loop1 = _g.loop;
			f(e8);
			f(loop1);
			break;
		case 20:
			let _g14 = _g.m;
			let _g15 = _g.args;
			let e9 = _g.e;
			f(e9);
			break;
		}
	}
	static map(e,f) {
		let ed;
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			ed = e.e;
			break;
		case 1:
			let _g2 = _g.v;
			ed = e.e;
			break;
		case 2:
			let _g3 = _g.g;
			ed = e.e;
			break;
		case 3:
			let e1 = _g.e;
			ed = hxsl.TExprDef.TParenthesis(f(e1));
			break;
		case 4:
			let el = _g.el;
			let _g4 = [];
			let _g5 = 0;
			while(_g5 < el.length) {
				let e = el[_g5];
				++_g5;
				_g4.push(f(e));
			}
			ed = hxsl.TExprDef.TBlock(_g4);
			break;
		case 5:
			let op = _g.op;
			let e11 = _g.e1;
			let e2 = _g.e2;
			ed = hxsl.TExprDef.TBinop(op,f(e11),f(e2));
			break;
		case 6:
			let op1 = _g.op;
			let e12 = _g.e1;
			ed = hxsl.TExprDef.TUnop(op1,f(e12));
			break;
		case 7:
			let v = _g.v;
			let init = _g.init;
			ed = hxsl.TExprDef.TVarDecl(v,init != null ? f(init) : null);
			break;
		case 8:
			let e3 = _g.e;
			let args = _g.args;
			let ed1 = f(e3);
			let _g6 = [];
			let _g7 = 0;
			while(_g7 < args.length) {
				let a = args[_g7];
				++_g7;
				_g6.push(f(a));
			}
			ed = hxsl.TExprDef.TCall(ed1,_g6);
			break;
		case 9:
			let e4 = _g.e;
			let c = _g.regs;
			ed = hxsl.TExprDef.TSwiz(f(e4),c);
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			ed = hxsl.TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
			break;
		case 12:
			let e5 = _g.e;
			ed = hxsl.TExprDef.TReturn(e5 != null ? f(e5) : null);
			break;
		case 13:
			let v1 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			ed = hxsl.TExprDef.TFor(v1,f(it),f(loop));
			break;
		case 11:case 14:case 15:
			ed = e.e;
			break;
		case 16:
			let e6 = _g.e;
			let index = _g.index;
			ed = hxsl.TExprDef.TArray(f(e6),f(index));
			break;
		case 17:
			let el1 = _g.el;
			let _g8 = [];
			let _g9 = 0;
			while(_g9 < el1.length) {
				let e = el1[_g9];
				++_g9;
				_g8.push(f(e));
			}
			ed = hxsl.TExprDef.TArrayDecl(_g8);
			break;
		case 18:
			let e7 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			let ed2 = f(e7);
			let _g10 = [];
			let _g11 = 0;
			while(_g11 < cases.length) {
				let c = cases[_g11];
				++_g11;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(f(v));
				}
				_g10.push({ values : _g, expr : f(c.expr)});
			}
			ed = hxsl.TExprDef.TSwitch(ed2,_g10,def == null ? null : f(def));
			break;
		case 19:
			let e8 = _g.e;
			let loop1 = _g.loop;
			let normalWhile = _g.normalWhile;
			ed = hxsl.TExprDef.TWhile(f(e8),f(loop1),normalWhile);
			break;
		case 20:
			let m = _g.m;
			let args1 = _g.args;
			let e9 = _g.e;
			ed = hxsl.TExprDef.TMeta(m,args1,f(e9));
			break;
		}
		return { e : ed, t : e.t, p : e.p};
	}
	static size(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:case 3:
			return 1;
		case 5:
			let _g = t.t;
			let n = t.size;
			return n;
		case 6:
			return 9;
		case 7:
			return 16;
		case 8:
			return 12;
		case 9:
			let s = t.size;
			return s;
		case 2:case 4:case 10:case 11:case 12:
			return 0;
		case 13:
			let vl = t.vl;
			let s1 = 0;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				s1 += hxsl.Tools.size(v.type);
			}
			return s1;
		case 14:
			let _g2 = t.variants;
			return 0;
		case 15:
			let _g3 = t.t;
			let _g4 = t.size;
			switch(_g4._hx_index) {
			case 0:
				let v = _g4.v;
				let t1 = _g3;
				return hxsl.Tools.size(t1) * v;
			case 1:
				let _g5 = _g4.v;
				return 0;
			}
			break;
		case 16:
			let _g6 = t.size;
			let _g7 = t.kind;
			if(_g6._hx_index == 0) {
				let v = _g6.v;
				let t1 = t.t;
				return hxsl.Tools.size(t1) * v;
			} else {
				return 0;
			}
			break;
		case 17:
			let n1 = t.size;
			return n1;
		case 18:
			return 4;
		}
	}
	static evalConst(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let c = _g.c;
			switch(c._hx_index) {
			case 0:
				return null;
			case 1:
				let b = c.b;
				return b;
			case 2:
				let i = c.v;
				return i;
			case 3:
				let f = c.v;
				return f;
			case 4:
				let s = c.v;
				return s;
			}
			break;
		case 8:
			let _g1 = _g.e;
			let _g2 = _g.args;
			let _g3 = _g1.e;
			let _g4 = _g1.p;
			let _g5 = _g1.t;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 40:case 41:
					let args = _g2;
					let _g6 = [];
					let _g7 = 0;
					while(_g7 < args.length) {
						let a = args[_g7];
						++_g7;
						_g6.push(hxsl.Tools.evalConst(a));
					}
					let vals = _g6;
					if(vals.length == 1) {
						let x = vals[0];
						let y = vals[0];
						let z = vals[0];
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						return new h3d.VectorImpl(x,y,z);
					}
					let x = vals[0];
					let y = vals[1];
					let z = vals[2];
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					return new h3d.VectorImpl(x,y,z);
				case 42:
					let args1 = _g2;
					let _g8 = [];
					let _g9 = 0;
					while(_g9 < args1.length) {
						let a = args1[_g9];
						++_g9;
						_g8.push(hxsl.Tools.evalConst(a));
					}
					let vals1 = _g8;
					if(vals1.length == 1) {
						let x = vals1[0];
						let y = vals1[0];
						let z = vals1[0];
						let w = vals1[0];
						if(w == null) {
							w = 1.;
						}
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						return new h3d.Vector4Impl(x,y,z,w);
					}
					let x1 = vals1[0];
					let y1 = vals1[1];
					let z1 = vals1[2];
					let w = vals1[3];
					if(w == null) {
						w = 1.;
					}
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					return new h3d.Vector4Impl(x1,y1,z1,w);
				default:
					throw haxe.Exception.thrown("Unhandled constant init " + hxsl.Printer.toString(e));
				}
			} else {
				throw haxe.Exception.thrown("Unhandled constant init " + hxsl.Printer.toString(e));
			}
			break;
		default:
			throw haxe.Exception.thrown("Unhandled constant init " + hxsl.Printer.toString(e));
		}
	}
}
$hxClasses["hxsl.Tools"] = hxsl.Tools;
hxsl.Tools.__name__ = "hxsl.Tools";
hxsl.Tools2 = class hxsl_Tools2 {
	static toString(g) {
		let n = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
		return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
	}
}
$hxClasses["hxsl.Tools2"] = hxsl.Tools2;
hxsl.Tools2.__name__ = "hxsl.Tools2";
hxsl.Tools3 = class hxsl_Tools3 {
	static toString(s) {
		return hxsl.Printer.shaderToString(s);
	}
}
$hxClasses["hxsl.Tools3"] = hxsl.Tools3;
hxsl.Tools3.__name__ = "hxsl.Tools3";
hxsl.Tools4 = class hxsl_Tools4 {
	static toString(e) {
		return hxsl.Printer.toString(e);
	}
}
$hxClasses["hxsl.Tools4"] = hxsl.Tools4;
hxsl.Tools4.__name__ = "hxsl.Tools4";
hxsl.BatchShader = class hxsl_BatchShader extends hxsl.Shader {
	constructor() {
		hxsl.Shader._hx_skip_constructor = true;
		super();
		hxsl.Shader._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.Batch_Count__ = 0;
		super._hx_constructor();
	}
	get_Batch_HasOffset() {
		return this.Batch_HasOffset__;
	}
	set_Batch_HasOffset(_v) {
		this.constModified = true;
		return this.Batch_HasOffset__ = _v;
	}
	get_Batch_Count() {
		return this.Batch_Count__;
	}
	set_Batch_Count(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	get_Batch_Buffer() {
		return this.Batch_Buffer__;
	}
	set_Batch_Buffer(_v) {
		return this.Batch_Buffer__ = _v;
	}
	updateConstants(globals) {
		this.constBits = 0;
		if(this.Batch_HasOffset__) {
			this.constBits |= 1;
		}
		let v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe.Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v << 1;
		this.updateConstantsFinal(globals);
	}
	getParamValue(index) {
		switch(index) {
		case 0:
			return this.Batch_HasOffset__;
		case 1:
			return this.Batch_Count__;
		case 2:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	getParamFloatValue(index) {
		return 0.;
	}
	setParamIndexValue(index,val) {
		switch(index) {
		case 0:
			this.Batch_HasOffset__ = val;
			break;
		case 1:
			this.Batch_Count__ = val;
			break;
		case 2:
			this.Batch_Buffer__ = val;
			break;
		default:
		}
	}
	setParamIndexFloatValue(index,val) {
	}
	clone() {
		let s = Object.create(hxsl.BatchShader.prototype);
		s.shader = this.shader;
		s.Batch_HasOffset__ = this.Batch_HasOffset__;
		s.Batch_Count__ = this.Batch_Count__;
		s.Batch_Buffer__ = this.Batch_Buffer__;
		return s;
	}
}
$hxClasses["hxsl.BatchShader"] = hxsl.BatchShader;
hxsl.BatchShader.__name__ = "hxsl.BatchShader";
hxsl.BatchShader.__super__ = hxsl.Shader;
Object.assign(hxsl.BatchShader.prototype, {
	__class__: hxsl.BatchShader
	,__properties__: {set_Batch_Buffer: "set_Batch_Buffer",get_Batch_Buffer: "get_Batch_Buffer",set_Batch_Count: "set_Batch_Count",get_Batch_Count: "get_Batch_Count",set_Batch_HasOffset: "set_Batch_HasOffset",get_Batch_HasOffset: "get_Batch_HasOffset"}
});
hxsl.BatchInstanceParams = class hxsl_BatchInstanceParams {
	constructor(forcedPerInstance) {
		this.forcedPerInstance = forcedPerInstance;
	}
	getSignature() {
		if(this.cachedSignature == null) {
			let _g = 0;
			let _g1 = this.forcedPerInstance;
			while(_g < _g1.length) {
				let fp = _g1[_g];
				++_g;
				fp.params.sort(Reflect.compare);
			}
			let _g2 = [];
			let _g3 = 0;
			let _g4 = this.forcedPerInstance;
			while(_g3 < _g4.length) {
				let s = _g4[_g3];
				++_g3;
				_g2.push(s.shader + "=" + s.params.join(","));
			}
			this.cachedSignature = HxOverrides.substr(haxe.crypto.Md5.encode(_g2.join(";")),0,8);
		}
		return this.cachedSignature;
	}
}
$hxClasses["hxsl.BatchInstanceParams"] = hxsl.BatchInstanceParams;
hxsl.BatchInstanceParams.__name__ = "hxsl.BatchInstanceParams";
Object.assign(hxsl.BatchInstanceParams.prototype, {
	__class__: hxsl.BatchInstanceParams
});
hxsl.SearchMap = class hxsl_SearchMap {
	constructor() {
		this.minId = 0;
		this.nexts = [];
	}
	set(id,s) {
		if(this.minId == 0) {
			this.minId = id;
			this.nexts = [s];
			return;
		}
		let offset = id - this.minId;
		if(offset < 0) {
			let n = [];
			let _g = 0;
			let _g1 = this.nexts.length;
			while(_g < _g1) {
				let i = _g++;
				n[i - offset] = this.nexts[i];
			}
			this.nexts = n;
			this.minId += offset;
			offset = 0;
		}
		this.nexts[offset] = s;
	}
	get(id) {
		return this.nexts[id - this.minId];
	}
}
$hxClasses["hxsl.SearchMap"] = hxsl.SearchMap;
hxsl.SearchMap.__name__ = "hxsl.SearchMap";
Object.assign(hxsl.SearchMap.prototype, {
	__class__: hxsl.SearchMap
});
hxsl.Cache = class hxsl_Cache {
	constructor() {
		this.linkCache = new hxsl.SearchMap();
		this.linkShaders = new haxe.ds.StringMap();
		this.batchShaders = new haxe.ds.ObjectMap();
		this.batchShadersParams = new haxe.ds.StringMap();
		this.byID = new haxe.ds.StringMap();
	}
	getLinkShader(vars) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < vars.length) {
			let v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		let key = _g.join(",");
		let shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		let s = new hxsl.SharedShader("");
		let id = HxOverrides.substr(haxe.crypto.Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		let pos = null;
		let outVars_h = Object.create(null);
		let outputCount = 0;
		let tvec4 = hxsl.Type.TVec(4,hxsl.VecType.VFloat);
		let makeVec = function(g,size,args,makeOutExpr) {
			let out = [];
			let rem = size;
			let _g = 0;
			let _g1 = args.length;
			while(_g < _g1) {
				let i = _g++;
				let e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl.Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(g), t : hxsl.Type.TVoid, p : pos},out), t : hxsl.Type.TVec(size,hxsl.VecType.VFloat), p : pos};
		};
		let makeVar = function(name,t,parent) {
			let path = parent == null ? name : hxsl.Tools.getName(parent) + "." + name;
			let v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl.Tools.allocVarId(), name : name, type : t, kind : hxsl.VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				let _g = parent.type;
				if(_g._hx_index == 13) {
					let vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe.Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		let makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				let v1 = v.v;
				return { e : hxsl.TExprDef.TConst(hxsl.Const.CFloat(v1)), t : hxsl.Type.TFloat, p : pos};
			case 1:
				let vname = v.v;
				let size = v.size;
				let v2 = outVars_h[vname];
				if(v2 != null) {
					return { e : hxsl.TExprDef.TVar(v2), t : v2.type, p : pos};
				}
				let path = vname.split(".");
				let parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl.Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v2 = makeVar(path.shift(),rem == 1 ? hxsl.Type.TFloat : hxsl.Type.TVec(rem,hxsl.VecType.VFloat),parent);
				return { e : hxsl.TExprDef.TVar(v2), t : v2.type, p : pos};
			case 2:
				let v3 = v.v;
				return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.PackNormal), t : hxsl.Type.TVoid, p : pos},[makeOutExpr(v3,3)]), t : tvec4, p : pos};
			case 3:
				let v4 = v.v;
				return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Pack), t : hxsl.Type.TVoid, p : pos},[makeOutExpr(v4,1)]), t : tvec4, p : pos};
			case 4:
				let args = v.a;
				return makeVec(hxsl.TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				let args1 = v.a;
				return makeVec(hxsl.TGlobal.Vec3,3,args1,makeOutExpr);
			case 6:
				let args2 = v.a;
				return makeVec(hxsl.TGlobal.Vec4,4,args2,makeOutExpr);
			case 7:
				let v5 = v.a;
				let comps = v.swiz;
				return { e : hxsl.TExprDef.TSwiz(makeOutExpr(v5,4),comps), t : hxsl.Type.TVec(comps.length,hxsl.VecType.VFloat), p : pos};
			}
		};
		let makeOutput = function(v) {
			outputCount += 1;
			let ov = { id : hxsl.Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl.VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssign,{ e : hxsl.TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl.Type.TVoid, p : pos};
		};
		let defineFun = function(kind,vars) {
			let fv = { id : hxsl.Tools.allocVarId(), type : hxsl.Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl.VarKind.Function};
			let _g = [];
			let _g1 = 0;
			while(_g1 < vars.length) {
				let v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			let f = { kind : kind, ref : fv, args : [], ret : hxsl.Type.TVoid, expr : { e : hxsl.TExprDef.TBlock(_g), p : pos, t : hxsl.Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl.FunctionKind.Vertex,[hxsl.Output.Value("output.position")]);
		defineFun(hxsl.FunctionKind.Fragment,vars);
		shader = Object.create(hxsl.Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	link(shaders,mode) {
		let c = this.linkCache;
		let _g_l = shaders;
		let _g_last = null;
		while(_g_l != _g_last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			let s1 = s;
			let i = s1.instance;
			let cs = c.nexts[i.id - c.minId];
			if(cs == null) {
				cs = new hxsl.SearchMap();
				c.set(i.id,cs);
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,mode);
		}
		return c.linked;
	}
	compileRuntimeShader(shaders,mode) {
		let shaderDatas = [];
		let index = 0;
		let _g_l = shaders;
		let _g_last = null;
		while(_g_l != _g_last) {
			let s = _g_l.s;
			_g_l = _g_l.next;
			let s1 = s;
			let i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe.ds.ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		let linker = new hxsl.Linker(mode);
		let s;
		try {
			let _g = [];
			let _g1 = 0;
			while(_g1 < shaderDatas.length) {
				let s = shaderDatas[_g1];
				++_g1;
				_g.push(s.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl.Error)) {
				let e = _g1;
				let _g = [];
				let _g2 = 0;
				while(_g2 < shaderDatas.length) {
					let s = shaderDatas[_g2];
					++_g2;
					_g.push(hxsl.Printer.shaderToString(s.inst.shader));
				}
				let shaders = _g;
				e.msg += "\n\nin\n\n" + shaders.join("\n-----\n");
				throw haxe.Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(mode == hxsl.LinkMode.Batch) {
			let checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl.VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl.VarQualifier.PerObject);
					}
					if(v.kind != hxsl.VarKind.Var) {
						v.kind = hxsl.VarKind.Local;
					}
				}
				let _g = v.type;
				if(_g._hx_index == 13) {
					let vl = _g.vl;
					let _g1 = 0;
					while(_g1 < vl.length) {
						let v = vl[_g1];
						++_g1;
						checkRec(v);
					}
				}
			};
			let _g = 0;
			let _g1 = s.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		let prev = s;
		let splitter = new hxsl.Splitter();
		let sl;
		try {
			sl = splitter.split(s);
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl.Error)) {
				let e = _g1;
				e.msg += "\n\nin\n\n" + hxsl.Printer.shaderToString(s);
				throw haxe.Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		let paramVars = new haxe.ds.IntMap();
		let _g = 0;
		let _g1 = linker.allVars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl.VarKind.Param) {
				let _g = v.v.type;
				if(_g._hx_index == 13) {
					let _g1 = _g.vl;
					continue;
				}
				let inf = shaderDatas[v.instanceIndex];
				let nv = splitter.varMap.h[v.v.__id__];
				paramVars.h[nv == null ? v.id : nv.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		let prev1 = sl;
		let sl1 = new hxsl.Dce().dce(sl);
		let r = this.buildRuntimeShader(sl1,paramVars);
		r.mode = mode;
		let _g2 = [];
		let _g_l1 = shaders;
		let _g_last1 = null;
		while(_g_l1 != _g_last1) {
			let s = _g_l1.s;
			_g_l1 = _g_l1.next;
			let s1 = s;
			_g2.push(new hxsl.ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g2, signature : null};
		let _g3 = 0;
		let _g4 = shaderDatas.length;
		while(_g3 < _g4) {
			let i = _g3++;
			let s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		let _g5 = [];
		let _g6 = 0;
		let _g7 = r.spec.instances;
		while(_g6 < _g7.length) {
			let i = _g7[_g6];
			++_g6;
			_g5.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		let signParts = _g5;
		let tmp = signParts.join(":");
		r.spec.signature = haxe.crypto.Md5.encode(tmp);
		let _g8 = [];
		let _g9 = 0;
		let _g10 = r.getShaders();
		while(_g9 < _g10.length) {
			let s = _g10[_g9];
			++_g9;
			_g8.push(hxsl.Printer.shaderToString(s.data));
		}
		r.signature = haxe.crypto.Md5.encode(_g8.join(""));
		let r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	buildRuntimeShader(shaders,paramVars) {
		let r = new hxsl.RuntimeShader();
		r.globals = new haxe.ds.IntMap();
		let _g = 0;
		while(_g < shaders.length) {
			let s = shaders[_g];
			++_g;
			let kind;
			switch(s.name) {
			case "fragment":
				kind = hxsl.FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl.FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl.FunctionKind.Vertex;
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			let fl = this.flattenShader(s,kind,paramVars);
			fl.kind = kind;
			switch(kind._hx_index) {
			case 0:
				r.vertex = fl;
				break;
			case 1:
				r.fragment = fl;
				break;
			case 4:
				r.vertex = fl;
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			this.initGlobals(r,fl);
		}
		return r;
	}
	initGlobals(r,s) {
		let p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		let p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	getPath(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	flattenShader(s,kind,params) {
		let flat = new hxsl.Flatten();
		let c = new hxsl.RuntimeShaderData();
		let data = flat.flatten(s,kind);
		let textures = [];
		c.texturesCount = 0;
		let g = flat.allocData.keys();
		while(g.hasNext()) {
			let g1 = g.next();
			let alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				let _g = [];
				let _g1 = 0;
				while(_g1 < alloc.length) {
					let a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl.AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				let out = _g;
				let _g2 = 0;
				let _g3 = out.length - 1;
				while(_g2 < _g3) {
					let i = _g2++;
					out[i].next = out[i + 1];
				}
				let _g4 = g1.type;
				if(_g4._hx_index == 15) {
					let _g = _g4.t;
					let _g1 = _g4.size;
					if(_g._hx_index == 5) {
						if(_g.size == 4) {
							if(_g.t._hx_index == 1) {
								if(_g1._hx_index == 0) {
									let size = _g1.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe.Exception.thrown("assert");
								}
							} else {
								throw haxe.Exception.thrown("assert");
							}
						} else {
							throw haxe.Exception.thrown("assert");
						}
					} else {
						throw haxe.Exception.thrown("assert");
					}
				} else {
					throw haxe.Exception.thrown("assert");
				}
				break;
			case 2:
				let out1 = [];
				let count = 0;
				let _g5 = 0;
				while(_g5 < alloc.length) {
					let a = alloc[_g5];
					++_g5;
					if(a.v == null) {
						continue;
					}
					let p = params.h[a.v.id];
					if(p == null) {
						let ap = new hxsl.AllocParam(a.v.name,a.pos,-1,-1,a.v.type);
						ap.perObjectGlobal = new hxsl.AllocGlobal(-1,this.getPath(a.v),a.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					let ap = new hxsl.AllocParam(a.v.name,a.pos,p.instance,p.index,a.v.type);
					let _g = a.v.type;
					if(_g._hx_index == 15) {
						let _g1 = _g.size;
						let t = _g.t;
						if(hxsl.Tools.isSampler(t)) {
							ap.pos = -a.size;
							count += a.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap);
				}
				let _g6 = 0;
				let _g7 = out1.length - 1;
				while(_g6 < _g7) {
					let i = _g6++;
					out1[i].next = out1[i + 1];
				}
				let _g8 = g1.type;
				if(_g8._hx_index == 15) {
					let _g = _g8.t;
					let _g1 = _g8.size;
					let t = _g;
					if(hxsl.Tools.isSampler(t)) {
						textures.push({ t : t, all : out1});
						c.texturesCount += count;
					} else {
						switch(_g._hx_index) {
						case 5:
							if(_g.size == 4) {
								if(_g.t._hx_index == 1) {
									if(_g1._hx_index == 0) {
										let size = _g1.v;
										c.params = out1[0];
										c.paramsSize = size;
									} else {
										throw haxe.Exception.thrown("assert");
									}
								} else {
									throw haxe.Exception.thrown("assert");
								}
							} else {
								throw haxe.Exception.thrown("assert");
							}
							break;
						case 16:
							let _g2 = _g.t;
							let _g3 = _g.size;
							let _g4 = _g.kind;
							if(c.buffers == null) {
								c.buffers = out1[0];
								c.bufferCount = out1.length;
							} else {
								let p = c.buffers;
								while(p.next != null) p = p.next;
								p.next = out1[0];
								c.bufferCount += out1.length;
							}
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
					}
				} else {
					throw haxe.Exception.thrown("assert");
				}
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			let _g = 1;
			let _g1 = textures.length;
			while(_g < _g1) {
				let i = _g++;
				let prevAll = textures[i - 1].all;
				let prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	makeBatchShader(rt,shaders,params) {
		let batchMap;
		if(params == null) {
			batchMap = this.batchShaders;
		} else {
			let this1 = this.batchShadersParams;
			let key = params.getSignature();
			batchMap = this1.h[key];
			if(batchMap == null) {
				batchMap = new haxe.ds.ObjectMap();
				let this1 = this.batchShadersParams;
				let key = params.getSignature();
				this1.h[key] = batchMap;
			}
		}
		let sh = batchMap.h[rt.__id__];
		if(sh == null) {
			sh = this.createBatchShader(rt,shaders,params);
			batchMap.set(rt,sh);
		}
		let shader = Object.create(hxsl.BatchShader.prototype);
		shader.shader = sh.shader;
		shader.params = sh.params;
		shader.paramsSize = sh.size;
		return shader;
	}
	isPerInstance(v) {
		if(v.qualifiers == null) {
			return false;
		}
		let _g = 0;
		let _g1 = v.qualifiers;
		while(_g < _g1.length) {
			let q = _g1[_g];
			++_g;
			let tmp;
			switch(q._hx_index) {
			case 3:
				tmp = true;
				break;
			case 9:
				let _g2 = q.v;
				tmp = true;
				break;
			default:
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	createBatchShader(rt,shaders,params) {
		let s = new hxsl.SharedShader("");
		let id = HxOverrides.substr(params == null ? rt.spec.signature : haxe.crypto.Md5.encode(rt.spec.signature + params.getSignature()),0,8);
		let declVar = function(name,t,kind) {
			return { id : hxsl.Tools.allocVarId(), type : t, name : name, kind : kind};
		};
		let instancedParams = [];
		if(params != null) {
			let forcedPerInstance = params.forcedPerInstance;
			let instanceIndex = 1;
			let forcedIndex = forcedPerInstance.length - 1;
			let s = shaders;
			while(s != null && forcedIndex >= 0) {
				if(s.s.shader.data.name == forcedPerInstance[forcedIndex].shader) {
					instancedParams[instanceIndex] = forcedPerInstance[forcedIndex].params;
					--forcedIndex;
				}
				++instanceIndex;
				s = s.next;
			}
		}
		let pos = null;
		let hasOffset = declVar("Batch_HasOffset",hxsl.Type.TBool,hxsl.VarKind.Param);
		let inputOffset = declVar("Batch_Start",hxsl.Type.TFloat,hxsl.VarKind.Input);
		hasOffset.qualifiers = [hxsl.VarQualifier.Const()];
		inputOffset.qualifiers = [hxsl.VarQualifier.PerInstance(1)];
		let vcount = declVar("Batch_Count",hxsl.Type.TInt,hxsl.VarKind.Param);
		let vbuffer = declVar("Batch_Buffer",hxsl.Type.TBuffer(hxsl.Type.TVec(4,hxsl.VecType.VFloat),hxsl.SizeDecl.SVar(vcount),hxsl.BufferKind.Uniform),hxsl.VarKind.Param);
		let voffset = declVar("Batch_Offset",hxsl.Type.TInt,hxsl.VarKind.Local);
		let ebuffer = { e : hxsl.TExprDef.TVar(vbuffer), p : pos, t : vbuffer.type};
		let eoffset = { e : hxsl.TExprDef.TVar(voffset), p : pos, t : voffset.type};
		let tvec4 = hxsl.Type.TVec(4,hxsl.VecType.VFloat);
		let countBits = 16;
		vcount.qualifiers = [hxsl.VarQualifier.Const(1 << countBits)];
		s.data = { name : "batchShader_" + id, vars : [vcount,hasOffset,vbuffer,voffset,inputOffset], funs : []};
		let getVarRec = null;
		getVarRec = function(v,name,kind) {
			if(v.kind == kind && v.name == name) {
				return v;
			}
			let _g = v.type;
			if(_g._hx_index == 13) {
				let vl = _g.vl;
				let _g1 = 0;
				while(_g1 < vl.length) {
					let v = vl[_g1];
					++_g1;
					let v1 = getVarRec(v,name,kind);
					if(v1 != null) {
						return v1;
					}
				}
			}
			return null;
		};
		let getVar = function(p) {
			let s = shaders;
			if(p.perObjectGlobal != null) {
				let path = p.perObjectGlobal.path.split(".");
				while(s != null) {
					let _g = 0;
					let _g1 = s.s.shader.data.vars;
					while(_g < _g1.length) {
						let v = _g1[_g];
						++_g;
						if(v.name != path[0]) {
							continue;
						}
						let v1 = getVarRec(v,p.name,hxsl.VarKind.Global);
						if(v1 != null) {
							return v1;
						}
					}
					s = s.next;
				}
			} else {
				let i = p.instance - 1;
				while(i > 0) {
					--i;
					s = s.next;
				}
				let name = p.name;
				while(true) {
					let _g = 0;
					let _g1 = s.s.shader.data.vars;
					while(_g < _g1.length) {
						let v = _g1[_g];
						++_g;
						let v1 = getVarRec(v,name,hxsl.VarKind.Param);
						if(v1 != null) {
							return v1;
						}
					}
					let cc = HxOverrides.cca(name,name.length - 1);
					if(cc >= 48 && cc <= 57) {
						name = HxOverrides.substr(name,0,-1);
					} else {
						break;
					}
				}
			}
			throw haxe.Exception.thrown("Var not found " + p.name);
		};
		let params1 = null;
		let used = [];
		let addParam = function(p) {
			let size;
			let _g = p.type;
			switch(_g._hx_index) {
			case 3:
				size = 1;
				break;
			case 5:
				if(_g.t._hx_index == 1) {
					let n = _g.size;
					size = n;
				} else {
					throw haxe.Exception.thrown("Unsupported batch var type " + Std.string(p.type));
				}
				break;
			case 7:
				size = 16;
				break;
			default:
				throw haxe.Exception.thrown("Unsupported batch var type " + Std.string(p.type));
			}
			let index;
			if(size >= 4) {
				index = used.length << 2;
				let _g = 0;
				let _g1 = size >> 2;
				while(_g < _g1) {
					let i = _g++;
					used.push(15);
				}
			} else if(size == 1) {
				let best = -1;
				let _g = 0;
				let _g1 = used.length;
				while(_g < _g1) {
					let i = _g++;
					if(used[i] != 15 && (best < 0 || used[best] < used[i])) {
						best = i;
					}
				}
				if(best < 0) {
					best = used.length;
					used.push(0);
				}
				index = best << 2;
				let _g2 = 0;
				while(_g2 < 4) {
					let k = _g2++;
					let bit = 3 - k;
					if((used[best] & 1 << bit) == 0) {
						used[best] |= 1 << bit;
						index += bit;
						break;
					}
				}
			} else {
				let k = size == 2 ? 3 : 7;
				let best = -1;
				let _g = 0;
				let _g1 = used.length;
				while(_g < _g1) {
					let i = _g++;
					if((used[i] & k) == 0) {
						used[i] |= k;
						best = i;
						break;
					}
				}
				if(best < 0) {
					best = used.length;
					used.push(k);
				}
				index = best << 2;
			}
			let p2 = new hxsl.AllocParam(p.name,index,p.instance,p.index,p.type);
			p2.perObjectGlobal = p.perObjectGlobal;
			p2.next = params1;
			params1 = p2;
		};
		let p = rt.vertex.params;
		let _gthis = this;
		while(p != null) {
			let v = getVar(p);
			let params = instancedParams[p.instance];
			if(params != null && params.indexOf(v.name) >= 0 ? true : _gthis.isPerInstance(v)) {
				addParam(p);
			}
			p = p.next;
		}
		let p1 = rt.fragment.params;
		while(p1 != null) {
			let v = getVar(p1);
			let params = instancedParams[p1.instance];
			if(params != null && params.indexOf(v.name) >= 0 ? true : _gthis.isPerInstance(v)) {
				addParam(p1);
			}
			p1 = p1.next;
		}
		let parentVars = new haxe.ds.ObjectMap();
		let swiz = [[hxsl.Component.X],[hxsl.Component.Y],[hxsl.Component.Z],[hxsl.Component.W]];
		let readOffset = function(index) {
			return { e : hxsl.TExprDef.TArray(ebuffer,{ e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,eoffset,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos}), t : tvec4, p : pos};
		};
		let extractVar = function(v) {
			let vreal = declVar(v.name,v.type,hxsl.VarKind.Local);
			if(v.perObjectGlobal != null) {
				let path = v.perObjectGlobal.path.split(".");
				path.pop();
				let cur = vreal;
				while(path.length > 0) {
					let key = path.join(".");
					let name = path.pop();
					let vp = parentVars.h[path.__id__];
					if(vp == null) {
						vp = declVar(name,hxsl.Type.TStruct([]),hxsl.VarKind.Local);
						parentVars.set(path,vp);
					}
					let _g = vp.type;
					if(_g._hx_index == 13) {
						let vl = _g.vl;
						vl.push(cur);
					}
					cur.parent = vp;
					cur = vp;
				}
			}
			s.data.vars.push(vreal);
			let index = v.pos >> 2;
			let extract;
			let _g = v.type;
			switch(_g._hx_index) {
			case 3:
				extract = { p : pos, t : v.type, e : hxsl.TExprDef.TSwiz(readOffset(index),swiz[v.pos & 3])};
				break;
			case 5:
				let _g1 = _g.t;
				switch(_g.size) {
				case 2:
					if(_g1._hx_index == 1) {
						let swiz;
						switch(v.pos & 3) {
						case 0:
							swiz = [hxsl.Component.X,hxsl.Component.Y];
							break;
						case 1:
							swiz = [hxsl.Component.Y,hxsl.Component.Z];
							break;
						default:
							swiz = [hxsl.Component.Z,hxsl.Component.W];
						}
						extract = { p : pos, t : v.type, e : hxsl.TExprDef.TSwiz(readOffset(index),swiz)};
					} else {
						throw haxe.Exception.thrown("assert");
					}
					break;
				case 3:
					if(_g1._hx_index == 1) {
						extract = { p : pos, t : v.type, e : hxsl.TExprDef.TSwiz(readOffset(index),(v.pos & 3) == 0 ? [hxsl.Component.X,hxsl.Component.Y,hxsl.Component.Z] : [hxsl.Component.Y,hxsl.Component.Z,hxsl.Component.W])};
					} else {
						throw haxe.Exception.thrown("assert");
					}
					break;
				case 4:
					if(_g1._hx_index == 1) {
						extract = readOffset(index);
					} else {
						throw haxe.Exception.thrown("assert");
					}
					break;
				default:
					throw haxe.Exception.thrown("assert");
				}
				break;
			case 7:
				extract = { p : pos, t : v.type, e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mat4), t : hxsl.Type.TVoid, p : pos},[readOffset(index),readOffset(index + 1),readOffset(index + 2),readOffset(index + 3)])};
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			return { p : pos, e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssign,{ e : hxsl.TExprDef.TVar(vreal), p : pos, t : v.type},extract), t : hxsl.Type.TVoid};
		};
		let exprs = [];
		let stride = used.length;
		let p2 = params1;
		while(p2 != null) {
			exprs.push(extractVar(p2));
			p2 = p2.next;
		}
		let inits = [];
		inits.push({ p : pos, e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssign,eoffset,{ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.InstanceID), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVoid});
		inits.push({ p : pos, e : hxsl.TExprDef.TIf({ e : hxsl.TExprDef.TVar(hasOffset), t : hxsl.Type.TBool, p : pos},{ p : pos, e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssignOp(haxe.macro.Binop.OpAdd),eoffset,{ e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.ToInt), t : hxsl.Type.TVoid, p : pos},[{ p : pos, t : hxsl.Type.TFloat, e : hxsl.TExprDef.TVar(inputOffset)}]), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVoid},null), t : hxsl.Type.TVoid});
		inits.push({ p : pos, t : hxsl.Type.TInt, e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssignOp(haxe.macro.Binop.OpMult),eoffset,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(stride)), t : hxsl.Type.TInt, p : pos})});
		let fv = declVar("init",hxsl.Type.TFun([]),hxsl.VarKind.Function);
		let f = { kind : hxsl.FunctionKind.Init, ref : fv, args : [], ret : hxsl.Type.TVoid, expr : { e : hxsl.TExprDef.TBlock(inits.concat(exprs)), p : pos, t : hxsl.Type.TVoid}};
		s.data.funs.push(f);
		s.consts = new hxsl.ShaderConst(vcount,1,countBits + 1);
		s.consts.globalId = 0;
		s.consts.next = new hxsl.ShaderConst(hasOffset,0,1);
		s.consts.next.globalId = 0;
		return { shader : s, params : params1, size : stride};
	}
	static get() {
		let c = hxsl.Cache.INST;
		if(c == null) {
			c = new hxsl.Cache();
			hxsl.Cache.INST = c;
		}
		return c;
	}
	static set(c) {
		hxsl.Cache.INST = c;
	}
	static clear() {
		hxsl.Cache.INST = null;
	}
}
$hxClasses["hxsl.Cache"] = hxsl.Cache;
hxsl.Cache.__name__ = "hxsl.Cache";
Object.assign(hxsl.Cache.prototype, {
	__class__: hxsl.Cache
});
hxsl.Channel = $hxEnums["hxsl.Channel"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_name:"R",_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_name:"G",_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_name:"B",_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_name:"A",_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_name:"PackedFloat",_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_name:"PackedNormal",_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl.Channel.__constructs__ = [hxsl.Channel.Unknown,hxsl.Channel.R,hxsl.Channel.G,hxsl.Channel.B,hxsl.Channel.A,hxsl.Channel.PackedFloat,hxsl.Channel.PackedNormal];
hxsl.Channel.__empty_constructs__ = [hxsl.Channel.Unknown,hxsl.Channel.R,hxsl.Channel.G,hxsl.Channel.B,hxsl.Channel.A,hxsl.Channel.PackedFloat,hxsl.Channel.PackedNormal];
hxsl.Clone = class hxsl_Clone {
	constructor() {
		this.varMap = new haxe.ds.IntMap();
	}
	tvar(v) {
		let v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl.Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	tfun(f) {
		let tmp = this.ttype(f.ret);
		let f1 = f.kind;
		let tmp1 = this.tvar(f.ref);
		let _g = [];
		let _g1 = 0;
		let _g2 = f.args;
		while(_g1 < _g2.length) {
			let a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	ttype(t) {
		switch(t._hx_index) {
		case 13:
			let vl = t.vl;
			let _g = [];
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl.Type.TStruct(_g);
		case 14:
			let vars = t.variants;
			return hxsl.Type.TFun(vars);
		case 15:
			let t1 = t.t;
			let size = t.size;
			let tmp = this.ttype(t1);
			let tmp1;
			switch(size._hx_index) {
			case 0:
				let _g2 = size.v;
				tmp1 = size;
				break;
			case 1:
				let v = size.v;
				tmp1 = hxsl.SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl.Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	texpr(e) {
		let e2 = hxsl.Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		let _g = e2.e;
		let tmp;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			tmp = hxsl.TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			let v1 = _g.v;
			let init = _g.init;
			tmp = hxsl.TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			let v2 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			tmp = hxsl.TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	shader(s) {
		let s1 = s.name;
		let _g = [];
		let _g1 = 0;
		let _g2 = s.vars;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		let tmp = _g;
		let _g3 = [];
		let _g4 = 0;
		let _g5 = s.funs;
		while(_g4 < _g5.length) {
			let f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g3};
	}
	static shaderData(s) {
		return new hxsl.Clone().shader(s);
	}
}
$hxClasses["hxsl.Clone"] = hxsl.Clone;
hxsl.Clone.__name__ = "hxsl.Clone";
Object.assign(hxsl.Clone.prototype, {
	__class__: hxsl.Clone
});
hxsl._Dce = {};
hxsl._Dce.Exit = class hxsl__$Dce_Exit {
	constructor() {
	}
}
$hxClasses["hxsl._Dce.Exit"] = hxsl._Dce.Exit;
hxsl._Dce.Exit.__name__ = "hxsl._Dce.Exit";
Object.assign(hxsl._Dce.Exit.prototype, {
	__class__: hxsl._Dce.Exit
});
hxsl._Dce.VarDeps = class hxsl__$Dce_VarDeps {
	constructor(v) {
		this.v = v;
		this.used = false;
		this.deps = new haxe.ds.IntMap();
	}
}
$hxClasses["hxsl._Dce.VarDeps"] = hxsl._Dce.VarDeps;
hxsl._Dce.VarDeps.__name__ = "hxsl._Dce.VarDeps";
Object.assign(hxsl._Dce.VarDeps.prototype, {
	__class__: hxsl._Dce.VarDeps
});
hxsl.Dce = class hxsl_Dce {
	constructor() {
	}
	debug(msg,pos) {
	}
	dce(shaders) {
		this.used = new haxe.ds.IntMap();
		this.channelVars = [];
		let inputs = [];
		let _g = 0;
		while(_g < shaders.length) {
			let s = shaders[_g];
			++_g;
			let _g1 = 0;
			let _g2 = s.vars;
			while(_g1 < _g2.length) {
				let v = _g2[_g1];
				++_g1;
				let i = this.get(v);
				if(v.kind == hxsl.VarKind.Input) {
					inputs.push(i);
				}
				let tmp;
				if(v.kind != hxsl.VarKind.Output) {
					let _g = v.type;
					if(_g._hx_index == 16) {
						let _g1 = _g.t;
						let _g2 = _g.size;
						tmp = _g.kind._hx_index == 1;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					i.keep = true;
				}
			}
		}
		let _g1 = 0;
		while(_g1 < shaders.length) {
			let s = shaders[_g1];
			++_g1;
			let _g = 0;
			let _g2 = s.funs;
			while(_g < _g2.length) {
				let f = _g2[_g];
				++_g;
				this.check(f.expr,[],[]);
			}
		}
		let outExprs = [];
		do {
			let v = this.used.iterator();
			while(v.hasNext()) {
				let v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			let _g = 0;
			while(_g < inputs.length) {
				let v = inputs[_g];
				++_g;
				this.markRec(v);
			}
			outExprs = [];
			let _g1 = 0;
			while(_g1 < shaders.length) {
				let s = shaders[_g1];
				++_g1;
				let _g = 0;
				let _g2 = s.funs;
				while(_g < _g2.length) {
					let f = _g2[_g];
					++_g;
					outExprs.push(this.mapExpr(f.expr,false));
				}
			}
			this.markAsKeep = false;
			let _g2 = 0;
			while(_g2 < outExprs.length) {
				let e = outExprs[_g2];
				++_g2;
				this.checkBranches(e);
			}
		} while(this.markAsKeep);
		let _g2 = 0;
		while(_g2 < shaders.length) {
			let s = shaders[_g2];
			++_g2;
			let _g = 0;
			let _g1 = s.funs;
			while(_g < _g1.length) {
				let f = _g1[_g];
				++_g;
				f.expr = outExprs.shift();
			}
		}
		let v = this.used.iterator();
		while(v.hasNext()) {
			let v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl.VarKind.Input) {
				continue;
			}
			let _g = 0;
			while(_g < shaders.length) {
				let s = shaders[_g];
				++_g;
				HxOverrides.remove(s.vars,v1.v);
			}
		}
		return shaders.slice();
	}
	get(v) {
		let vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl._Dce.VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	markRec(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		let d = v.deps.iterator();
		while(d.hasNext()) {
			let d1 = d.next();
			this.markRec(d1);
		}
	}
	link(v,writeTo) {
		let vd = this.get(v);
		let _g = 0;
		while(_g < writeTo.length) {
			let w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	check(e,writeTo,isAffected) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			let el = _g.el;
			let noWrite = [];
			let _g1 = 0;
			let _g2 = el.length;
			while(_g1 < _g2) {
				let i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			let _g3 = _g.op;
			let _g4 = _g.e1;
			let _g5 = _g.e2;
			switch(_g3._hx_index) {
			case 4:
				let _g6 = _g4.e;
				let _g7 = _g4.p;
				let _g8 = _g4.t;
				switch(_g6._hx_index) {
				case 1:
					let v1 = _g6.v;
					let e1 = _g5;
					let v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					let _g9 = _g6.e;
					let _g10 = _g6.regs;
					let _g11 = _g9.e;
					let _g12 = _g9.p;
					let _g13 = _g9.t;
					if(_g11._hx_index == 1) {
						let v = _g11.v;
						let e = _g5;
						let v1 = this.get(v);
						writeTo.push(v1);
						this.check(e,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				case 16:
					let _g14 = _g6.e;
					let _g15 = _g14.e;
					let _g16 = _g14.p;
					let _g17 = _g14.t;
					if(_g15._hx_index == 1) {
						let v = _g15.v;
						let i = _g6.index;
						let e = _g5;
						let v1 = this.get(v);
						writeTo.push(v1);
						this.check(i,writeTo,isAffected);
						this.check(e,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g18 = this;
					let writeTo1 = writeTo;
					let isAffected1 = isAffected;
					hxsl.Tools.iter(e,function(e) {
						_g18.check(e,writeTo1,isAffected1);
					});
				}
				break;
			case 20:
				let _g19 = _g3.op;
				let _g20 = _g4.e;
				let _g21 = _g4.p;
				let _g22 = _g4.t;
				switch(_g20._hx_index) {
				case 1:
					let v3 = _g20.v;
					let e2 = _g5;
					let v4 = this.get(v3);
					writeTo.push(v4);
					this.check(e2,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v4) < 0) {
						isAffected.push(v4);
					}
					break;
				case 9:
					let _g23 = _g20.e;
					let _g24 = _g20.regs;
					let _g25 = _g23.e;
					let _g26 = _g23.p;
					let _g27 = _g23.t;
					if(_g25._hx_index == 1) {
						let v = _g25.v;
						let e = _g5;
						let v1 = this.get(v);
						writeTo.push(v1);
						this.check(e,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				case 16:
					let _g28 = _g20.e;
					let _g29 = _g28.e;
					let _g30 = _g28.p;
					let _g31 = _g28.t;
					if(_g29._hx_index == 1) {
						let v = _g29.v;
						let i = _g20.index;
						let e = _g5;
						let v1 = this.get(v);
						writeTo.push(v1);
						this.check(i,writeTo,isAffected);
						this.check(e,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g32 = this;
					let writeTo2 = writeTo;
					let isAffected2 = isAffected;
					hxsl.Tools.iter(e,function(e) {
						_g32.check(e,writeTo2,isAffected2);
					});
				}
				break;
			default:
				let _g33 = this;
				let writeTo3 = writeTo;
				let isAffected3 = isAffected;
				hxsl.Tools.iter(e,function(e) {
					_g33.check(e,writeTo3,isAffected3);
				});
			}
			break;
		case 7:
			let v5 = _g.v;
			let init = _g.init;
			if(init != null) {
				writeTo.push(this.get(v5));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				let _g = this;
				let writeTo1 = writeTo;
				let isAffected1 = isAffected;
				hxsl.Tools.iter(e,function(e) {
					_g.check(e,writeTo1,isAffected1);
				});
			}
			break;
		case 8:
			let _g34 = _g.e;
			let _g35 = _g.args;
			let _g36 = _g34.e;
			let _g37 = _g34.p;
			let _g38 = _g34.t;
			if(_g36._hx_index == 2) {
				switch(_g36.g._hx_index) {
				case 63:
					if(_g35.length == 3) {
						let _g = _g35[0];
						let _g1 = _g35[2];
						let _g2 = _g.e;
						let _g3 = _g.p;
						let _g4 = _g.t;
						if(_g2._hx_index == 1) {
							let _g = _g1.e;
							let _g3 = _g1.p;
							let _g4 = _g1.t;
							if(_g._hx_index == 0) {
								let _g1 = _g.c;
								if(_g1._hx_index == 2) {
									let cid = _g1.v;
									let uv = _g35[1];
									let c = _g2.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									let _g = this;
									let writeTo1 = writeTo;
									let isAffected1 = isAffected;
									hxsl.Tools.iter(e,function(e) {
										_g.check(e,writeTo1,isAffected1);
									});
								}
							} else {
								let _g = this;
								let writeTo1 = writeTo;
								let isAffected1 = isAffected;
								hxsl.Tools.iter(e,function(e) {
									_g.check(e,writeTo1,isAffected1);
								});
							}
						} else {
							let _g = this;
							let writeTo1 = writeTo;
							let isAffected1 = isAffected;
							hxsl.Tools.iter(e,function(e) {
								_g.check(e,writeTo1,isAffected1);
							});
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				case 64:
					if(_g35.length == 4) {
						let _g = _g35[0];
						let _g1 = _g35[3];
						let _g2 = _g.e;
						let _g3 = _g.p;
						let _g4 = _g.t;
						if(_g2._hx_index == 1) {
							let _g = _g1.e;
							let _g3 = _g1.p;
							let _g4 = _g1.t;
							if(_g._hx_index == 0) {
								let _g1 = _g.c;
								if(_g1._hx_index == 2) {
									let cid = _g1.v;
									let lod = _g35[2];
									let uv = _g35[1];
									let c = _g2.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									let _g = this;
									let writeTo1 = writeTo;
									let isAffected1 = isAffected;
									hxsl.Tools.iter(e,function(e) {
										_g.check(e,writeTo1,isAffected1);
									});
								}
							} else {
								let _g = this;
								let writeTo1 = writeTo;
								let isAffected1 = isAffected;
								hxsl.Tools.iter(e,function(e) {
									_g.check(e,writeTo1,isAffected1);
								});
							}
						} else {
							let _g = this;
							let writeTo1 = writeTo;
							let isAffected1 = isAffected;
							hxsl.Tools.iter(e,function(e) {
								_g.check(e,writeTo1,isAffected1);
							});
						}
					} else {
						let _g = this;
						let writeTo1 = writeTo;
						let isAffected1 = isAffected;
						hxsl.Tools.iter(e,function(e) {
							_g.check(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					let _g39 = this;
					let writeTo4 = writeTo;
					let isAffected4 = isAffected;
					hxsl.Tools.iter(e,function(e) {
						_g39.check(e,writeTo4,isAffected4);
					});
				}
			} else {
				let _g = this;
				let writeTo1 = writeTo;
				let isAffected1 = isAffected;
				hxsl.Tools.iter(e,function(e) {
					_g.check(e,writeTo1,isAffected1);
				});
			}
			break;
		case 10:
			let e3 = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			let affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			let len = affect.length;
			let _g40 = 0;
			while(_g40 < writeTo.length) {
				let v = writeTo[_g40];
				++_g40;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(e3,affect,isAffected);
			let _g41 = 0;
			let _g42 = len;
			while(_g41 < _g42) {
				let i = _g41++;
				let v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			let v6 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			let affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			let _g43 = 0;
			while(_g43 < affect1.length) {
				let v = affect1[_g43];
				++_g43;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			let _g44 = this;
			let writeTo5 = writeTo;
			let isAffected5 = isAffected;
			hxsl.Tools.iter(e,function(e) {
				_g44.check(e,writeTo5,isAffected5);
			});
		}
	}
	checkBranches(e) {
		let _g = e.e;
		if(_g._hx_index == 10) {
			let _g1 = _g.eif;
			let _g2 = _g.eelse;
			let cond = _g.econd;
			let writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl.Tools.iter(e,$bind(this,this.checkBranches));
	}
	mapExpr(e,isVar) {
		let _gthis = this;
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			let el = _g.el;
			let out = [];
			let count = 0;
			let _g1 = 0;
			while(_g1 < el.length) {
				let e = el[_g1];
				++_g1;
				let isVar1 = isVar && count == el.length - 1;
				let e1 = this.mapExpr(e,isVar1);
				if(hxsl.Tools.hasSideEffect(e1) || isVar1) {
					out.push(e1);
				}
				++count;
			}
			return { e : hxsl.TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			let _g2 = _g.op;
			let _g3 = _g.e1;
			let _g4 = _g.e2;
			switch(_g2._hx_index) {
			case 4:
				let _g5 = _g3.e;
				let _g6 = _g3.p;
				let _g7 = _g3.t;
				switch(_g5._hx_index) {
				case 1:
					let v = _g5.v;
					if(!this.get(v).used) {
						return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					let _g8 = _g5.e;
					let _g9 = _g5.regs;
					let _g10 = _g8.e;
					let _g11 = _g8.p;
					let _g12 = _g8.t;
					if(_g10._hx_index == 1) {
						let v = _g10.v;
						if(!this.get(v).used) {
							return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					let _g13 = _g5.e;
					let _g14 = _g5.index;
					let _g15 = _g13.e;
					let _g16 = _g13.p;
					let _g17 = _g13.t;
					if(_g15._hx_index == 1) {
						let v = _g15.v;
						if(!this.get(v).used) {
							return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl.Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				let _g18 = _g2.op;
				let _g19 = _g3.e;
				let _g20 = _g3.p;
				let _g21 = _g3.t;
				switch(_g19._hx_index) {
				case 1:
					let v1 = _g19.v;
					if(!this.get(v1).used) {
						return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					let _g22 = _g19.e;
					let _g23 = _g19.regs;
					let _g24 = _g22.e;
					let _g25 = _g22.p;
					let _g26 = _g22.t;
					if(_g24._hx_index == 1) {
						let v = _g24.v;
						if(!this.get(v).used) {
							return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					let _g27 = _g19.e;
					let _g28 = _g19.index;
					let _g29 = _g27.e;
					let _g30 = _g27.p;
					let _g31 = _g27.t;
					if(_g29._hx_index == 1) {
						let v = _g29.v;
						if(!this.get(v).used) {
							return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl.Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl.Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			let _g32 = _g.init;
			let v2 = _g.v;
			if(!this.get(v2).used) {
				return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl.Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			let _g33 = _g.e;
			let _g34 = _g.args;
			let _g35 = _g33.e;
			let _g36 = _g33.p;
			let _g37 = _g33.t;
			if(_g35._hx_index == 2) {
				switch(_g35.g._hx_index) {
				case 63:
					if(_g34.length == 3) {
						let _g = _g34[0];
						let _g1 = _g34[2];
						let _g2 = _g1.e;
						let _g3 = _g1.p;
						let _g4 = _g1.t;
						if(_g2._hx_index == 0) {
							let _g = _g2.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let uv = _g34[1];
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Texture), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_g34.length == 4) {
						let _g = _g34[0];
						let _g1 = _g34[3];
						let _g2 = _g1.e;
						let _g3 = _g1.p;
						let _g4 = _g1.t;
						if(_g2._hx_index == 0) {
							let _g = _g2.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let lod = _g34[2];
								let uv = _g34[1];
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.TextureLod), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					switch(_g34.length) {
					case 3:
						let _g38 = _g34[0];
						let _g39 = _g34[2];
						let _g40 = _g39.e;
						let _g41 = _g39.p;
						let _g42 = _g39.t;
						if(_g40._hx_index == 0) {
							let _g = _g40.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let pos = _g34[1];
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Texel), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						let _g43 = _g34[0];
						let _g44 = _g34[3];
						let _g45 = _g44.e;
						let _g46 = _g44.p;
						let _g47 = _g44.t;
						if(_g45._hx_index == 0) {
							let _g = _g45.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let lod = _g34[2];
								let pos = _g34[1];
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Texel), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_g34.length) {
					case 2:
						let _g48 = _g34[0];
						let _g49 = _g34[1];
						let _g50 = _g49.e;
						let _g51 = _g49.p;
						let _g52 = _g49.t;
						if(_g50._hx_index == 0) {
							let _g = _g50.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.TextureSize), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						let _g53 = _g34[0];
						let _g54 = _g34[2];
						let _g55 = _g54.e;
						let _g56 = _g54.p;
						let _g57 = _g54.t;
						if(_g55._hx_index == 0) {
							let _g = _g55.c;
							if(_g._hx_index == 2) {
								let cid = _g.v;
								let lod = _g34[1];
								let c = this.channelVars[cid];
								return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.TextureSize), p : e.p, t : hxsl.Type.TVoid},[{ e : hxsl.TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl.Type.TVoid, p : e.p};
							} else {
								return hxsl.Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl.Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl.Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl.Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl.Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			let e1 = _g.econd;
			let econd = _g.eif;
			let eelse = _g.eelse;
			let e2 = this.mapExpr(e1,true);
			let econd1 = this.mapExpr(econd,isVar);
			let eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl.Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl.Tools.hasSideEffect(eelse1))) {
				return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl.TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			let v3 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			let it1 = this.mapExpr(it,true);
			let loop1 = this.mapExpr(loop,false);
			if(!hxsl.Tools.hasSideEffect(loop1)) {
				return { e : hxsl.TExprDef.TConst(hxsl.Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl.TExprDef.TFor(v3,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl.Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
}
$hxClasses["hxsl.Dce"] = hxsl.Dce;
hxsl.Dce.__name__ = "hxsl.Dce";
Object.assign(hxsl.Dce.prototype, {
	__class__: hxsl.Dce
});
hxsl.Eval = class hxsl_Eval {
	constructor() {
		this.varMap = new haxe.ds.ObjectMap();
		this.funMap = new haxe.ds.ObjectMap();
		this.constants = new haxe.ds.IntMap();
	}
	setConstant(v,c) {
		this.constants.h[v.id] = hxsl.TExprDef.TConst(c);
	}
	mapVar(v) {
		let v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		let _g = v.type;
		let v21;
		if(_g._hx_index == 17) {
			let _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl.Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		let _g1 = v2.type;
		switch(_g1._hx_index) {
		case 13:
			let vl = _g1.vl;
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < vl.length) {
				let v = vl[_g3];
				++_g3;
				_g2.push(this.mapVar(v));
			}
			v2.type = hxsl.Type.TStruct(_g2);
			break;
		case 15:
			let _g4 = _g1.size;
			if(_g4._hx_index == 1) {
				let vs = _g4.v;
				let t = _g1.t;
				let c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						let _g = c.c;
						if(_g._hx_index == 2) {
							let v = _g.v;
							let _g1 = v2.type;
							let tmp;
							switch(_g1._hx_index) {
							case 15:
								let _g2 = _g1.t;
								let _g3 = _g1.size;
								tmp = hxsl.Type.TArray(t,hxsl.SizeDecl.SConst(v));
								break;
							case 16:
								let _g4 = _g1.t;
								let _g5 = _g1.size;
								let kind = _g1.kind;
								tmp = hxsl.Type.TBuffer(t,hxsl.SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe.Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					let vs2 = this.mapVar(vs);
					let _g = v2.type;
					let tmp;
					switch(_g._hx_index) {
					case 15:
						let _g1 = _g.t;
						let _g2 = _g.size;
						tmp = hxsl.Type.TArray(t,hxsl.SizeDecl.SVar(vs2));
						break;
					case 16:
						let _g3 = _g.t;
						let _g4 = _g.size;
						let kind = _g.kind;
						tmp = hxsl.Type.TBuffer(t,hxsl.SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe.Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		case 16:
			let _g5 = _g1.size;
			let _g6 = _g1.kind;
			if(_g5._hx_index == 1) {
				let vs = _g5.v;
				let t = _g1.t;
				let c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						let _g = c.c;
						if(_g._hx_index == 2) {
							let v = _g.v;
							let _g1 = v2.type;
							let tmp;
							switch(_g1._hx_index) {
							case 15:
								let _g2 = _g1.t;
								let _g3 = _g1.size;
								tmp = hxsl.Type.TArray(t,hxsl.SizeDecl.SConst(v));
								break;
							case 16:
								let _g4 = _g1.t;
								let _g5 = _g1.size;
								let kind = _g1.kind;
								tmp = hxsl.Type.TBuffer(t,hxsl.SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe.Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl.Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					let vs2 = this.mapVar(vs);
					let _g = v2.type;
					let tmp;
					switch(_g._hx_index) {
					case 15:
						let _g1 = _g.t;
						let _g2 = _g.size;
						tmp = hxsl.Type.TArray(t,hxsl.SizeDecl.SVar(vs2));
						break;
					case 16:
						let _g3 = _g.t;
						let _g4 = _g.size;
						let kind = _g.kind;
						tmp = hxsl.Type.TBuffer(t,hxsl.SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe.Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		default:
		}
		return v2;
	}
	checkSamplerRec(t) {
		if(hxsl.Tools.isSampler(t)) {
			return true;
		}
		switch(t._hx_index) {
		case 13:
			let vl = t.vl;
			let _g = 0;
			while(_g < vl.length) {
				let v = vl[_g];
				++_g;
				if(this.checkSamplerRec(v.type)) {
					return true;
				}
			}
			return false;
		case 15:
			let _g1 = t.size;
			let t1 = t.t;
			return this.checkSamplerRec(t1);
		case 16:
			let _g2 = t.t;
			let _g3 = t.size;
			let _g4 = t.kind;
			return true;
		default:
		}
		return false;
	}
	needsInline(f) {
		let _g = 0;
		let _g1 = f.args;
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(this.checkSamplerRec(a.type)) {
				return true;
			}
		}
		return false;
	}
	eval(s) {
		let funs = [];
		let _g = 0;
		let _g1 = s.funs;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			let f1 = f.kind;
			let f2 = this.mapVar(f.ref);
			let _g2 = [];
			let _g3 = 0;
			let _g4 = f.args;
			while(_g3 < _g4.length) {
				let a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			let f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(f.kind == hxsl.FunctionKind.Helper && this.inlineCalls || this.needsInline(f21)) {
				this.funMap.set(f21.ref,f);
			} else {
				funs.push(f21);
			}
		}
		let _g2 = 0;
		let _g3 = funs.length;
		while(_g2 < _g3) {
			let i = _g2++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		let s1 = s.name;
		let _g4 = [];
		let _g5 = 0;
		let _g6 = s.vars;
		while(_g5 < _g6.length) {
			let v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	hasReturn(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	hasReturnLoop(e) {
		let _g = e.e;
		if(_g._hx_index == 12) {
			let _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl.Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	handleReturn(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		let _g = e.e;
		switch(_g._hx_index) {
		case 3:
			let v = _g.e;
			let v1 = this.handleReturn(v,isFinal);
			return { e : hxsl.TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			let el = _g.el;
			let i = 0;
			let last = el.length;
			let out = [];
			_hx_loop1: while(i < last) {
				let e = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e,isFinal));
				} else {
					let _g = e.e;
					switch(_g._hx_index) {
					case 10:
						if(_g.eelse == null) {
							let eif = _g.eif;
							let econd = _g.econd;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl.TExprDef.TIf(econd,eif,{ e : hxsl.TExprDef.TBlock(el.slice(i)), t : e.t, p : e.p}), t : e.t, p : e.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e));
							}
						} else {
							out.push(this.handleReturn(e));
						}
						break;
					case 12:
						let e1 = _g.e;
						out.push(this.handleReturn(e1,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e));
					}
				}
			}
			let t = isFinal ? out.length == 0 ? hxsl.Type.TVoid : out[out.length - 1].t : e.t;
			return { e : hxsl.TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			let cond = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			if(eelse != null && isFinal) {
				let cond1 = this.handleReturn(cond);
				let eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl.TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl.Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			let v2 = _g.e;
			if(!isFinal) {
				hxsl.Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl.TExprDef.TBlock([]), t : hxsl.Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl.Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	handleReturnDef(e) {
		return this.handleReturn(e);
	}
	evalCall(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				let _g = args[0];
				let _g1 = _g.e;
				let _g2 = _g.p;
				let _g3 = _g.t;
				if(_g1._hx_index == 0) {
					let _g = _g1.c;
					if(_g._hx_index == 2) {
						let i = _g.v;
						return hxsl.TExprDef.TConst(hxsl.Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			let i;
			let _g = args[0].e;
			if(_g._hx_index == 0) {
				let _g1 = _g.c;
				if(_g1._hx_index == 2) {
					let i1 = _g1.v;
					i = i1;
				} else {
					hxsl.Error.t("Cannot eval complex channel " + hxsl.Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe.Exception.thrown("assert");
				}
			} else {
				hxsl.Error.t("Cannot eval complex channel " + hxsl.Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe.Exception.thrown("assert");
			}
			let channel = oldArgs[0];
			let _g1 = channel.e;
			let channel1;
			if(_g1._hx_index == 1) {
				let v = _g1.v;
				channel1 = hxsl.TExprDef.TVar(this.mapVar(v));
			} else {
				throw haxe.Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			let count;
			let _g2 = channel.t;
			if(_g2._hx_index == 17) {
				let i = _g2.size;
				count = i;
			} else {
				throw haxe.Exception.thrown("assert");
			}
			let channelMode = Type.createEnumIndex(hxsl.Channel,i & 7,null);
			let targs = [channel];
			let _g3 = 1;
			let _g4 = args.length;
			while(_g3 < _g4) {
				let i = _g3++;
				targs.push(args[i]);
			}
			targs.push({ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(i >> 3)), t : hxsl.Type.TInt, p : pos});
			let tget = { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(g), t : hxsl.Type.TVoid, p : pos},targs), t : hxsl.Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				let zero = { e : hxsl.TExprDef.TConst(hxsl.Const.CFloat(0.)), t : hxsl.Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal([hxsl.TGlobal.Vec2,hxsl.TGlobal.Vec3,hxsl.TGlobal.Vec4][count - 2]), t : hxsl.Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				let tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl.Component.X];
						break;
					case 2:
						tmp = [hxsl.Component.Y];
						break;
					case 3:
						tmp = [hxsl.Component.Z];
						break;
					case 4:
						tmp = [hxsl.Component.W];
						break;
					default:
						throw haxe.Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl.Component.X,hxsl.Component.Y];
						break;
					case 2:
						tmp = [hxsl.Component.Y,hxsl.Component.Z];
						break;
					case 3:
						tmp = [hxsl.Component.Z,hxsl.Component.W];
						break;
					default:
						throw haxe.Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl.Component.X,hxsl.Component.Y,hxsl.Component.Z];
						break;
					case 2:
						tmp = [hxsl.Component.Y,hxsl.Component.Z,hxsl.Component.W];
						break;
					default:
						throw haxe.Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe.Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl.TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Unpack), t : hxsl.Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.UnpackNormal), t : hxsl.Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			let args1 = args;
			let _g5 = 0;
			while(_g5 < args1.length) {
				let a = args1[_g5];
				++_g5;
				haxe.Log.trace(hxsl.Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl.TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	constantsToString() {
		let _g = [];
		let c = this.constants.keys();
		while(c.hasNext()) {
			let c1 = c.next();
			_g.push(c1 + " => " + hxsl.Printer.toString({ e : this.constants.h[c1], t : hxsl.Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	ifBlock(e) {
		let tmp;
		if(e != null) {
			let _g = e.e;
			let tmp1;
			if(_g._hx_index == 10) {
				let _g1 = _g.econd;
				let _g2 = _g.eif;
				let _g3 = _g.eelse;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl.TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	evalExpr(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		let _gthis = this;
		let d;
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.c;
			d = e.e;
			break;
		case 1:
			let v = _g.v;
			let c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				let v2 = this.mapVar(v);
				d = hxsl.TExprDef.TVar(v2);
			}
			break;
		case 2:
			let _g2 = _g.g;
			d = e.e;
			break;
		case 3:
			let e1 = _g.e;
			let e2 = this.evalExpr(e1,isVal);
			let _g3 = e2.e;
			if(_g3._hx_index == 0) {
				let _g = _g3.c;
				d = e2.e;
			} else {
				d = hxsl.TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			let el = _g.el;
			let out = [];
			let last = el.length - 1;
			let _g4 = 0;
			let _g5 = el.length;
			while(_g4 < _g5) {
				let i = _g4++;
				let isVal1 = isVal && i == last;
				let e = this.evalExpr(el[i],isVal1);
				let _g = e.e;
				switch(_g._hx_index) {
				case 0:
					let _g1 = _g.c;
					if(isVal1) {
						out.push(e);
					}
					break;
				case 1:
					let _g2 = _g.v;
					if(isVal1) {
						out.push(e);
					}
					break;
				default:
					out.push(e);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl.FunctionKind.Init ? out[0].e : hxsl.TExprDef.TBlock(out);
			break;
		case 5:
			let op = _g.op;
			let e11 = _g.e1;
			let e21 = _g.e2;
			let e12 = this.evalExpr(e11);
			let e22 = this.evalExpr(e21);
			switch(op._hx_index) {
			case 0:
				let _g6 = e12.e;
				let _g7 = e22.e;
				if(_g6._hx_index == 0) {
					let _g = _g6.c;
					switch(_g._hx_index) {
					case 2:
						if(_g7._hx_index == 0) {
							let _g1 = _g7.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a + b | 0));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g7._hx_index == 0) {
							let _g1 = _g7.c;
							if(_g1._hx_index == 3) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(a + b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				let _g8 = e12.e;
				let _g9 = e22.e;
				if(_g8._hx_index == 0) {
					let _g = _g8.c;
					switch(_g._hx_index) {
					case 2:
						if(_g9._hx_index == 0) {
							let _g1 = _g9.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a * b | 0));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9._hx_index == 0) {
							let _g1 = _g9.c;
							if(_g1._hx_index == 3) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(a * b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				let _g10 = e12.e;
				let _g11 = e22.e;
				if(_g10._hx_index == 0) {
					let _g = _g10.c;
					switch(_g._hx_index) {
					case 2:
						if(_g11._hx_index == 0) {
							let _g1 = _g11.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a / b | 0));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g11._hx_index == 0) {
							let _g1 = _g11.c;
							if(_g1._hx_index == 3) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(a / b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				let _g12 = e12.e;
				let _g13 = e22.e;
				if(_g12._hx_index == 0) {
					let _g = _g12.c;
					switch(_g._hx_index) {
					case 2:
						if(_g13._hx_index == 0) {
							let _g1 = _g13.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a - b | 0));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g13._hx_index == 0) {
							let _g1 = _g13.c;
							if(_g1._hx_index == 3) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(a - b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 21:
				d = hxsl.TExprDef.TBinop(op,e12,e22);
				break;
			case 5:
				let _g14 = e12.e;
				let _g15 = e22.e;
				if(_g14._hx_index == 0) {
					let _g = _g14.c;
					switch(_g._hx_index) {
					case 0:
						d = _g15._hx_index == 0 ? _g15.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g15._hx_index == 0) {
							let _g = _g15.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g15._hx_index == 0) {
							let _g = _g15.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g15._hx_index == 0) {
							let _g = _g15.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g15._hx_index == 0) {
							let _g = _g15.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				let _g16 = e12.e;
				let _g17 = e22.e;
				if(_g16._hx_index == 0) {
					let _g = _g16.c;
					switch(_g._hx_index) {
					case 0:
						d = _g17._hx_index == 0 ? _g17.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g17._hx_index == 0) {
							let _g = _g17.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g17._hx_index == 0) {
							let _g = _g17.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g17._hx_index == 0) {
							let _g = _g17.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g17._hx_index == 0) {
							let _g = _g17.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				let _g18 = e12.e;
				let _g19 = e22.e;
				if(_g18._hx_index == 0) {
					let _g = _g18.c;
					switch(_g._hx_index) {
					case 0:
						d = _g19._hx_index == 0 ? _g19.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g19._hx_index == 0) {
							let _g = _g19.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g19._hx_index == 0) {
							let _g = _g19.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g19._hx_index == 0) {
							let _g = _g19.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g19._hx_index == 0) {
							let _g = _g19.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				let _g20 = e12.e;
				let _g21 = e22.e;
				if(_g20._hx_index == 0) {
					let _g = _g20.c;
					switch(_g._hx_index) {
					case 0:
						d = _g21._hx_index == 0 ? _g21.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g21._hx_index == 0) {
							let _g = _g21.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g21._hx_index == 0) {
							let _g = _g21.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g21._hx_index == 0) {
							let _g = _g21.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g21._hx_index == 0) {
							let _g = _g21.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(true));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				let _g22 = e12.e;
				let _g23 = e22.e;
				if(_g22._hx_index == 0) {
					let _g = _g22.c;
					switch(_g._hx_index) {
					case 0:
						d = _g23._hx_index == 0 ? _g23.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(false)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g23._hx_index == 0) {
							let _g = _g23.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g23._hx_index == 0) {
							let _g = _g23.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g23._hx_index == 0) {
							let _g = _g23.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g23._hx_index == 0) {
							let _g = _g23.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				let _g24 = e12.e;
				let _g25 = e22.e;
				if(_g24._hx_index == 0) {
					let _g = _g24.c;
					switch(_g._hx_index) {
					case 0:
						d = _g25._hx_index == 0 ? _g25.c._hx_index == 0 ? hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TConst(hxsl.Const.CBool(true)) : hxsl.TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						let _g1 = _g.b;
						if(_g25._hx_index == 0) {
							let _g = _g25.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 1:
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						let _g2 = _g.v;
						if(_g25._hx_index == 0) {
							let _g = _g25.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 2:
								let b = _g.v;
								let a = _g2;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						let _g3 = _g.v;
						if(_g25._hx_index == 0) {
							let _g = _g25.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 3:
								let b = _g.v;
								let a = _g3;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						let _g4 = _g.v;
						if(_g25._hx_index == 0) {
							let _g = _g25.c;
							switch(_g._hx_index) {
							case 0:
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(false));
								break;
							case 4:
								let b = _g.v;
								let a = _g4;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				let _g26 = e12.e;
				let _g27 = e22.e;
				if(_g26._hx_index == 0) {
					let _g = _g26.c;
					if(_g._hx_index == 2) {
						if(_g27._hx_index == 0) {
							let _g1 = _g27.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a & b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				let _g28 = e12.e;
				let _g29 = e22.e;
				if(_g28._hx_index == 0) {
					let _g = _g28.c;
					if(_g._hx_index == 2) {
						if(_g29._hx_index == 0) {
							let _g1 = _g29.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a | b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				let _g30 = e12.e;
				let _g31 = e22.e;
				if(_g30._hx_index == 0) {
					let _g = _g30.c;
					if(_g._hx_index == 2) {
						if(_g31._hx_index == 0) {
							let _g1 = _g31.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a ^ b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				let _g32 = e12.e;
				let _g33 = e22.e;
				if(_g32._hx_index == 0) {
					let _g = _g32.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						if(_g33._hx_index == 0) {
							let _g = _g33.c;
							if(_g._hx_index == 1) {
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a && b));
							} else {
								let a = _g1;
								d = a == false ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e22.e;
							}
						} else {
							let a = _g1;
							d = a == false ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e22.e;
						}
					} else if(_g33._hx_index == 0) {
						let _g = _g33.c;
						if(_g._hx_index == 1) {
							let a = _g.b;
							d = a == false ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e12.e;
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g33._hx_index == 0) {
					let _g = _g33.c;
					if(_g._hx_index == 1) {
						let a = _g.b;
						d = a == false ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e12.e;
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				let _g34 = e12.e;
				let _g35 = e22.e;
				if(_g34._hx_index == 0) {
					let _g = _g34.c;
					if(_g._hx_index == 1) {
						let _g1 = _g.b;
						if(_g35._hx_index == 0) {
							let _g = _g35.c;
							if(_g._hx_index == 1) {
								let b = _g.b;
								let a = _g1;
								d = hxsl.TExprDef.TConst(hxsl.Const.CBool(a || b));
							} else {
								let a = _g1;
								d = a == true ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e22.e;
							}
						} else {
							let a = _g1;
							d = a == true ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e22.e;
						}
					} else if(_g35._hx_index == 0) {
						let _g = _g35.c;
						if(_g._hx_index == 1) {
							let a = _g.b;
							d = a == true ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e12.e;
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g35._hx_index == 0) {
					let _g = _g35.c;
					if(_g._hx_index == 1) {
						let a = _g.b;
						d = a == true ? hxsl.TExprDef.TConst(hxsl.Const.CBool(a)) : e12.e;
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				let _g36 = e12.e;
				let _g37 = e22.e;
				if(_g36._hx_index == 0) {
					let _g = _g36.c;
					if(_g._hx_index == 2) {
						if(_g37._hx_index == 0) {
							let _g1 = _g37.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a << b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				let _g38 = e12.e;
				let _g39 = e22.e;
				if(_g38._hx_index == 0) {
					let _g = _g38.c;
					if(_g._hx_index == 2) {
						if(_g39._hx_index == 0) {
							let _g1 = _g39.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a >> b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				let _g40 = e12.e;
				let _g41 = e22.e;
				if(_g40._hx_index == 0) {
					let _g = _g40.c;
					if(_g._hx_index == 2) {
						if(_g41._hx_index == 0) {
							let _g1 = _g41.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a >>> b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				let _g42 = e12.e;
				let _g43 = e22.e;
				if(_g42._hx_index == 0) {
					let _g = _g42.c;
					switch(_g._hx_index) {
					case 2:
						if(_g43._hx_index == 0) {
							let _g1 = _g43.c;
							if(_g1._hx_index == 2) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CInt(a % b | 0));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g43._hx_index == 0) {
							let _g1 = _g43.c;
							if(_g1._hx_index == 3) {
								let b = _g1.v;
								let a = _g.v;
								d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(a % b));
							} else {
								d = hxsl.TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl.TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl.TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl.TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 20:
				let _g44 = op.op;
				d = hxsl.TExprDef.TBinop(op,e12,e22);
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			break;
		case 6:
			let op1 = _g.op;
			let e3 = _g.e1;
			let e4 = this.evalExpr(e3);
			let _g45 = e4.e;
			if(_g45._hx_index == 0) {
				let c = _g45.c;
				switch(op1._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						let b = c.b;
						d = hxsl.TExprDef.TConst(hxsl.Const.CBool(!b));
					} else {
						d = hxsl.TExprDef.TUnop(op1,e4);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						let i = c.v;
						d = hxsl.TExprDef.TConst(hxsl.Const.CInt(-i));
						break;
					case 3:
						let f = c.v;
						d = hxsl.TExprDef.TConst(hxsl.Const.CFloat(-f));
						break;
					default:
						d = hxsl.TExprDef.TUnop(op1,e4);
					}
					break;
				default:
					d = hxsl.TExprDef.TUnop(op1,e4);
				}
			} else {
				d = hxsl.TExprDef.TUnop(op1,e4);
			}
			break;
		case 7:
			let v1 = _g.v;
			let init = _g.init;
			d = hxsl.TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			let c1 = _g.e;
			let eargs = _g.args;
			let c2 = this.evalExpr(c1);
			let _g46 = [];
			let _g47 = 0;
			while(_g47 < eargs.length) {
				let a = eargs[_g47];
				++_g47;
				_g46.push(this.evalExpr(a));
			}
			let args = _g46;
			let _g48 = c2.e;
			switch(_g48._hx_index) {
			case 1:
				let v2 = _g48.v;
				if(this.funMap.h.__keys__[v2.__id__] != null) {
					let f = this.funMap.h[v2.__id__];
					let outExprs = [];
					let undo = [];
					let _g = 0;
					let _g1 = f.args.length;
					while(_g < _g1) {
						let i = _g++;
						let v = f.args[i];
						let e = args[i];
						let _g1 = e.e;
						switch(_g1._hx_index) {
						case 0:
							let _g2 = _g1.c;
							let old = this.constants.h[v.id];
							undo.push(function() {
								if(old == null) {
									_gthis.constants.remove(v.id);
								} else {
									_gthis.constants.h[v.id] = old;
								}
							});
							this.constants.h[v.id] = e.e;
							break;
						case 1:
							let _g3 = _g1.v;
							let _g4 = _g3.id;
							let _g5 = _g3.name;
							let _g6 = _g3.parent;
							let _g7 = _g3.qualifiers;
							let _g8 = _g3.type;
							switch(_g3.kind._hx_index) {
							case 0:case 1:case 2:
								let old1 = this.constants.h[v.id];
								undo.push(function() {
									if(old1 == null) {
										_gthis.constants.remove(v.id);
									} else {
										_gthis.constants.h[v.id] = old1;
									}
								});
								this.constants.h[v.id] = e.e;
								break;
							default:
								let old2 = this.varMap.h[v.__id__];
								if(old2 == null) {
									undo.push(function() {
										_gthis.varMap.remove(v);
									});
								} else {
									this.varMap.remove(v);
									undo.push(function() {
										_gthis.varMap.set(v,old2);
									});
								}
								let v2 = this.mapVar(v);
								outExprs.push({ e : hxsl.TExprDef.TVarDecl(v2,e), t : hxsl.Type.TVoid, p : e.p});
							}
							break;
						default:
							let old3 = this.varMap.h[v.__id__];
							if(old3 == null) {
								undo.push(function() {
									_gthis.varMap.remove(v);
								});
							} else {
								this.varMap.remove(v);
								undo.push(function() {
									_gthis.varMap.set(v,old3);
								});
							}
							let v21 = this.mapVar(v);
							outExprs.push({ e : hxsl.TExprDef.TVarDecl(v21,e), t : hxsl.Type.TVoid, p : e.p});
						}
					}
					let e = this.handleReturn(this.evalExpr(f.expr,false),true);
					let _g2 = 0;
					while(_g2 < undo.length) {
						let u = undo[_g2];
						++_g2;
						u();
					}
					let _g3 = e.e;
					if(_g3._hx_index == 4) {
						let el = _g3.el;
						let _g = 0;
						while(_g < el.length) {
							let e = el[_g];
							++_g;
							outExprs.push(e);
						}
					} else {
						outExprs.push(e);
					}
					d = hxsl.TExprDef.TBlock(outExprs);
				} else {
					d = hxsl.TExprDef.TCall(c2,args);
				}
				break;
			case 2:
				let g = _g48.g;
				let v3 = this.evalCall(g,args,eargs,e.p);
				d = v3 != null ? v3 : hxsl.TExprDef.TCall(c2,args);
				break;
			default:
				d = hxsl.Error.t("Cannot eval non-static call expresssion '" + new hxsl.Printer().exprString(c2) + "'",c2.p);
			}
			break;
		case 9:
			let e5 = _g.e;
			let r = _g.regs;
			d = hxsl.TExprDef.TSwiz(this.evalExpr(e5),r.slice());
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			let econd1 = this.evalExpr(econd);
			let _g49 = econd1.e;
			if(_g49._hx_index == 0) {
				let _g = _g49.c;
				if(_g._hx_index == 1) {
					let b = _g.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl.TExprDef.TConst(hxsl.Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.ToFloat), t : hxsl.Type.TFun([]), p : econd1.p},[econd1]), t : hxsl.Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						let _g = eelse.e;
						if(_g._hx_index == 0 && _g.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl.TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.ToFloat), t : hxsl.Type.TFun([]), p : econd1.p},[econd1]), t : hxsl.Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					let _g = eelse.e;
					if(_g._hx_index == 0 && _g.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl.TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl.TExprDef.TDiscard;
			break;
		case 12:
			let e6 = _g.e;
			d = hxsl.TExprDef.TReturn(e6 == null ? null : this.evalExpr(e6));
			break;
		case 13:
			let v4 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			let v21 = this.mapVar(v4);
			let it1 = this.evalExpr(it);
			let e7;
			let _g50 = it1.e;
			if(_g50._hx_index == 5) {
				let _g = _g50.e1;
				let _g1 = _g50.e2;
				if(_g50.op._hx_index == 21) {
					let _g2 = _g.e;
					let _g3 = _g.p;
					let _g4 = _g.t;
					if(_g2._hx_index == 0) {
						let _g = _g2.c;
						if(_g._hx_index == 2) {
							let _g2 = _g1.e;
							let _g3 = _g1.p;
							let _g4 = _g1.t;
							if(_g2._hx_index == 0) {
								let _g1 = _g2.c;
								if(_g1._hx_index == 2) {
									let len = _g1.v;
									let start = _g.v;
									if(this.unrollLoops) {
										let out = [];
										let _g = start;
										let _g1 = len;
										while(_g < _g1) {
											let i = _g++;
											this.constants.h[v4.id] = hxsl.TExprDef.TConst(hxsl.Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v4.id);
										e7 = hxsl.TExprDef.TBlock(out);
									} else {
										e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e7 = hxsl.TExprDef.TFor(v21,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v4);
			d = e7;
			break;
		case 14:
			d = hxsl.TExprDef.TContinue;
			break;
		case 15:
			d = hxsl.TExprDef.TBreak;
			break;
		case 16:
			let e13 = _g.e;
			let e23 = _g.index;
			let e14 = this.evalExpr(e13);
			let e24 = this.evalExpr(e23);
			let _g51 = e14.e;
			let _g52 = e24.e;
			if(_g51._hx_index == 17) {
				if(_g52._hx_index == 0) {
					let _g = _g52.c;
					if(_g._hx_index == 2) {
						let i = _g.v;
						let el = _g51.el;
						d = i >= 0 && i < el.length ? el[i].e : hxsl.TExprDef.TArray(e14,e24);
					} else {
						d = hxsl.TExprDef.TArray(e14,e24);
					}
				} else {
					d = hxsl.TExprDef.TArray(e14,e24);
				}
			} else {
				d = hxsl.TExprDef.TArray(e14,e24);
			}
			break;
		case 17:
			let el1 = _g.el;
			let _g53 = [];
			let _g54 = 0;
			while(_g54 < el1.length) {
				let e = el1[_g54];
				++_g54;
				_g53.push(this.evalExpr(e));
			}
			d = hxsl.TExprDef.TArrayDecl(_g53);
			break;
		case 18:
			let e8 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			let e9 = this.evalExpr(e8);
			let _g55 = [];
			let _g56 = 0;
			while(_g56 < cases.length) {
				let c = cases[_g56];
				++_g56;
				let _g = [];
				let _g1 = 0;
				let _g2 = c.values;
				while(_g1 < _g2.length) {
					let v = _g2[_g1];
					++_g1;
					_g.push(this.evalExpr(v));
				}
				_g55.push({ values : _g, expr : this.evalExpr(c.expr,isVal)});
			}
			let cases1 = _g55;
			let def1 = def == null ? null : this.evalExpr(def,isVal);
			let hasCase = false;
			let _g57 = e9.e;
			if(_g57._hx_index == 0) {
				let c = _g57.c;
				if(c._hx_index == 2) {
					let val = c.v;
					let _g = 0;
					while(_g < cases1.length) {
						let c = cases1[_g];
						++_g;
						let _g1 = 0;
						let _g2 = c.values;
						while(_g1 < _g2.length) {
							let v = _g2[_g1];
							++_g1;
							let _g = v.e;
							if(_g._hx_index == 0) {
								let cst = _g.c;
								switch(cst._hx_index) {
								case 2:
									let k = cst.v;
									if(k == val) {
										return c.expr;
									}
									break;
								case 3:
									let k1 = cst.v;
									if(k1 == val) {
										return c.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe.Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl.TExprDef.TSwitch(e9,cases1,def1) : def1 == null ? hxsl.TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			let cond = _g.e;
			let loop1 = _g.loop;
			let normalWhile = _g.normalWhile;
			let cond1 = this.evalExpr(cond);
			let loop2 = this.evalExpr(loop1,false);
			d = hxsl.TExprDef.TWhile(cond1,this.ifBlock(loop2),normalWhile);
			break;
		case 20:
			let name = _g.m;
			let args1 = _g.args;
			let e10 = _g.e;
			let e25;
			if(name == "unroll") {
				let old = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e10,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e10,isVal);
			}
			d = hxsl.TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
}
$hxClasses["hxsl.Eval"] = hxsl.Eval;
hxsl.Eval.__name__ = "hxsl.Eval";
Object.assign(hxsl.Eval.prototype, {
	__class__: hxsl.Eval
});
hxsl._Flatten = {};
hxsl._Flatten.Alloc = class hxsl__$Flatten_Alloc {
	constructor(g,t,pos,size) {
		this.g = g;
		this.t = t;
		this.pos = pos;
		this.size = size;
	}
}
$hxClasses["hxsl._Flatten.Alloc"] = hxsl._Flatten.Alloc;
hxsl._Flatten.Alloc.__name__ = "hxsl._Flatten.Alloc";
Object.assign(hxsl._Flatten.Alloc.prototype, {
	__class__: hxsl._Flatten.Alloc
});
hxsl.ARead = $hxEnums["hxsl.ARead"] = { __ename__:true,__constructs__:null
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AIndex",$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AOffset",$_.__params__ = ["a","stride","delta"],$_)
};
hxsl.ARead.__constructs__ = [hxsl.ARead.AIndex,hxsl.ARead.AOffset];
hxsl.ARead.__empty_constructs__ = [];
hxsl.Flatten = class hxsl_Flatten {
	constructor() {
	}
	flatten(s,kind) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		this.varMap = new haxe.ds.ObjectMap();
		this.allocData = new haxe.ds.ObjectMap();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		let prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		case 4:
			prefix = "compute";
			break;
		default:
			throw haxe.Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl.VarKind.Global,this.globals,hxsl.VecType.VFloat);
		this.pack(prefix + "Params",hxsl.VarKind.Param,this.params,hxsl.VecType.VFloat);
		let allVars = this.globals.concat(this.params);
		let textures = this.packTextures(prefix + "Textures",allVars,hxsl.Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl.Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl.Type.TSampler2DArray));
		this.packBuffers("buffers",allVars,hxsl.BufferKind.Uniform);
		this.packBuffers("rwbuffers",allVars,hxsl.BufferKind.RW);
		let _g2 = [];
		let _g3 = 0;
		let _g4 = s.funs;
		while(_g3 < _g4.length) {
			let f = _g4[_g3];
			++_g3;
			_g2.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		let funs = _g2;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	mapFun(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	mapExpr(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			let a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl.ARead.AIndex(a));
			}
			break;
		case 16:
			let _g1 = _g.e;
			let _g2 = _g1.e;
			let _g3 = _g1.t;
			if(_g2._hx_index == 1) {
				let v = _g2.v;
				let vp = _g1.p;
				let eindex = _g.index;
				let _g3 = eindex.e;
				let e1;
				if(_g3._hx_index == 0) {
					let _g = _g3.c;
					if(_g._hx_index == 2) {
						let _g1 = _g.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					let a = this.varMap.h[v.__id__];
					if(a != null) {
						let _g = v.type;
						if(_g._hx_index == 15) {
							let _g1 = _g.t;
							let _g2 = _g.size;
							let t = _g1;
							if(hxsl.Tools.isSampler(t)) {
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl.ARead.AOffset(a,1,eindex));
							} else {
								let t = _g1;
								let stride = this.varSize(t,a.t);
								if(stride == 0 || (stride & 3) != 0) {
									throw haxe.Exception.thrown(new hxsl.Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
								}
								stride >>= 2;
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl.ARead.AOffset(a,stride,stride == 1 ? eindex : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpMult,eindex,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(stride)), t : hxsl.Type.TInt, p : vp}), t : hxsl.Type.TInt, p : vp}));
							}
						} else {
							throw haxe.Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl.Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl.Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl.Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	mkInt(v,pos) {
		return { e : hxsl.TExprDef.TConst(hxsl.Const.CInt(v)), t : hxsl.Type.TInt, p : pos};
	}
	readIndex(a,index,pos) {
		let offs = a.t == null ? a.pos : a.pos >> 2;
		return { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs + index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a.t), p : pos};
	}
	readOffset(a,stride,delta,index,pos) {
		let index1 = (a.t == null ? a.pos : a.pos >> 2) + index;
		let offset = index1 == 0 ? delta : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index1)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
		return { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a.g), t : a.g.type, p : pos},offset), t : hxsl.Type.TVec(4,a.t), p : pos};
	}
	access(a,t,pos,acc) {
		switch(t._hx_index) {
		case 6:
			let tmp = this.access(a,hxsl.Type.TMat3x4,pos,acc);
			return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mat3), t : hxsl.Type.TFun([]), p : pos},[tmp]), t : hxsl.Type.TMat3, p : pos};
		case 7:
			let tmp1 = hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mat4);
			let tmp2 = hxsl.Type.TFun([]);
			let tmp3;
			switch(acc._hx_index) {
			case 0:
				let a1 = acc.a;
				let offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				let a2 = acc.a;
				let stride = acc.stride;
				let delta = acc.delta;
				let index = a2.t == null ? a2.pos : a2.pos >> 2;
				let offset = index == 0 ? delta : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp3 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl.Type.TVec(4,a2.t), p : pos};
				break;
			}
			let tmp4;
			switch(acc._hx_index) {
			case 0:
				let a3 = acc.a;
				let offs1 = a3.t == null ? a3.pos : a3.pos >> 2;
				tmp4 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs1 + 1)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				let a4 = acc.a;
				let stride1 = acc.stride;
				let delta1 = acc.delta;
				let index1 = (a4.t == null ? a4.pos : a4.pos >> 2) + 1;
				let offset1 = index1 == 0 ? delta1 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta1,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index1)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp4 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl.Type.TVec(4,a4.t), p : pos};
				break;
			}
			let tmp5;
			switch(acc._hx_index) {
			case 0:
				let a5 = acc.a;
				let offs2 = a5.t == null ? a5.pos : a5.pos >> 2;
				tmp5 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs2 + 2)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				let a6 = acc.a;
				let stride2 = acc.stride;
				let delta2 = acc.delta;
				let index2 = (a6.t == null ? a6.pos : a6.pos >> 2) + 2;
				let offset2 = index2 == 0 ? delta2 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta2,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index2)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp5 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl.Type.TVec(4,a6.t), p : pos};
				break;
			}
			let tmp6;
			switch(acc._hx_index) {
			case 0:
				let a7 = acc.a;
				let offs3 = a7.t == null ? a7.pos : a7.pos >> 2;
				tmp6 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs3 + 3)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				let a8 = acc.a;
				let stride3 = acc.stride;
				let delta3 = acc.delta;
				let index3 = (a8.t == null ? a8.pos : a8.pos >> 2) + 3;
				let offset3 = index3 == 0 ? delta3 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta3,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index3)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp6 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl.Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl.TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl.Type.TMat4, p : pos};
		case 8:
			let tmp7 = hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mat3x4);
			let tmp8 = hxsl.Type.TFun([]);
			let tmp9;
			switch(acc._hx_index) {
			case 0:
				let a9 = acc.a;
				let offs4 = a9.t == null ? a9.pos : a9.pos >> 2;
				tmp9 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs4)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				let a10 = acc.a;
				let stride4 = acc.stride;
				let delta4 = acc.delta;
				let index4 = a10.t == null ? a10.pos : a10.pos >> 2;
				let offset4 = index4 == 0 ? delta4 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta4,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index4)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp9 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl.Type.TVec(4,a10.t), p : pos};
				break;
			}
			let tmp10;
			switch(acc._hx_index) {
			case 0:
				let a11 = acc.a;
				let offs5 = a11.t == null ? a11.pos : a11.pos >> 2;
				tmp10 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs5 + 1)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				let a12 = acc.a;
				let stride5 = acc.stride;
				let delta5 = acc.delta;
				let index5 = (a12.t == null ? a12.pos : a12.pos >> 2) + 1;
				let offset5 = index5 == 0 ? delta5 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta5,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index5)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp10 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl.Type.TVec(4,a12.t), p : pos};
				break;
			}
			let tmp11;
			switch(acc._hx_index) {
			case 0:
				let a13 = acc.a;
				let offs6 = a13.t == null ? a13.pos : a13.pos >> 2;
				tmp11 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs6 + 2)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				let a14 = acc.a;
				let stride6 = acc.stride;
				let delta6 = acc.delta;
				let index6 = (a14.t == null ? a14.pos : a14.pos >> 2) + 2;
				let offset6 = index6 == 0 ? delta6 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta6,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index6)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				tmp11 = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl.Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl.TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl.Type.TMat3x4, p : pos};
		case 15:
			let _g = t.size;
			if(_g._hx_index == 0) {
				let len = _g.v;
				let t1 = t.t;
				let stride = a.size / len | 0;
				let _g1 = [];
				let _g2 = 0;
				let _g3 = len;
				while(_g2 < _g3) {
					let i = _g2++;
					let a1 = new hxsl._Flatten.Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g1.push(this.access(a1,t1,pos,hxsl.ARead.AIndex(a1)));
				}
				let earr = _g1;
				return { e : hxsl.TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl.Tools.isSampler(t)) {
					let e;
					switch(acc._hx_index) {
					case 0:
						let a = acc.a;
						let offs = a.t == null ? a.pos : a.pos >> 2;
						e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a.t), p : pos};
						break;
					case 1:
						let a1 = acc.a;
						let stride = acc.stride;
						let delta = acc.delta;
						let index = a1.t == null ? a1.pos : a1.pos >> 2;
						let offset = index == 0 ? delta : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
						e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl.Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				let size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl.Error.t("Access not supported for " + hxsl.Tools.toString(t),null);
				}
				let e;
				switch(acc._hx_index) {
				case 0:
					let a1 = acc.a;
					let offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					let a2 = acc.a;
					let stride = acc.stride;
					let delta = acc.delta;
					let index = a2.t == null ? a2.pos : a2.pos >> 2;
					let offset = index == 0 ? delta : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
					e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl.Type.TVec(4,a2.t), p : pos};
					break;
				}
				if(size == 4) {
					if(a.pos == -1) {
						return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Vec4), t : hxsl.Type.TFun([]), p : pos},[{ e : hxsl.TExprDef.TConst(hxsl.Const.CFloat(0)), t : hxsl.Type.TFloat, p : pos}]), t : hxsl.Type.TVec(4,hxsl.VecType.VFloat), p : pos};
					}
					if((a.pos & 3) != 0) {
						throw haxe.Exception.thrown("assert");
					}
				} else {
					let sw = [];
					let _g = 0;
					let _g1 = size;
					while(_g < _g1) {
						let i = _g++;
						sw.push(hxsl.Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl.TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl.Type.TFloat;
					e = this.toInt(e);
					break;
				case 5:
					if(t.t._hx_index == 0) {
						let size = t.size;
						e.t = hxsl.Type.TVec(size,hxsl.VecType.VFloat);
						e = { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal([hxsl.TGlobal.IVec2,hxsl.TGlobal.IVec3,hxsl.TGlobal.IVec4][size - 2]), t : hxsl.Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl.Tools.isSampler(t)) {
				let e;
				switch(acc._hx_index) {
				case 0:
					let a = acc.a;
					let offs = a.t == null ? a.pos : a.pos >> 2;
					e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a.t), p : pos};
					break;
				case 1:
					let a1 = acc.a;
					let stride = acc.stride;
					let delta = acc.delta;
					let index = a1.t == null ? a1.pos : a1.pos >> 2;
					let offset = index == 0 ? delta : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
					e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl.Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			let size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl.Error.t("Access not supported for " + hxsl.Tools.toString(t),null);
			}
			let e;
			switch(acc._hx_index) {
			case 0:
				let a15 = acc.a;
				let offs7 = a15.t == null ? a15.pos : a15.pos >> 2;
				e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a15.g), t : a15.g.type, p : pos},{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(offs7)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TVec(4,a15.t), p : pos};
				break;
			case 1:
				let a16 = acc.a;
				let stride7 = acc.stride;
				let delta7 = acc.delta;
				let index7 = a16.t == null ? a16.pos : a16.pos >> 2;
				let offset7 = index7 == 0 ? delta7 : { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAdd,delta7,{ e : hxsl.TExprDef.TConst(hxsl.Const.CInt(index7)), t : hxsl.Type.TInt, p : pos}), t : hxsl.Type.TInt, p : pos};
				e = { e : hxsl.TExprDef.TArray({ e : hxsl.TExprDef.TVar(a16.g), t : a16.g.type, p : pos},offset7), t : hxsl.Type.TVec(4,a16.t), p : pos};
				break;
			}
			if(size == 4) {
				if(a.pos == -1) {
					return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Vec4), t : hxsl.Type.TFun([]), p : pos},[{ e : hxsl.TExprDef.TConst(hxsl.Const.CFloat(0)), t : hxsl.Type.TFloat, p : pos}]), t : hxsl.Type.TVec(4,hxsl.VecType.VFloat), p : pos};
				}
				if((a.pos & 3) != 0) {
					throw haxe.Exception.thrown("assert");
				}
			} else {
				let sw = [];
				let _g = 0;
				let _g1 = size;
				while(_g < _g1) {
					let i = _g++;
					sw.push(hxsl.Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl.TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl.Type.TFloat;
				e = this.toInt(e);
				break;
			case 5:
				if(t.t._hx_index == 0) {
					let size = t.size;
					e.t = hxsl.Type.TVec(size,hxsl.VecType.VFloat);
					e = { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal([hxsl.TGlobal.IVec2,hxsl.TGlobal.IVec3,hxsl.TGlobal.IVec4][size - 2]), t : hxsl.Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	toInt(e) {
		if(e.t == hxsl.Type.TInt) {
			return e;
		}
		return { e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.ToInt), t : hxsl.Type.TFun([]), p : e.p},[e]), t : hxsl.Type.TInt, p : e.p};
	}
	optimize(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 8:
			let _g1 = _g.e;
			let _g2 = _g.args;
			let _g3 = _g1.e;
			let _g4 = _g1.p;
			let _g5 = _g1.t;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 52) {
					if(_g2.length == 1) {
						let _g = _g2[0];
						let _g1 = _g.e;
						let _g3 = _g.p;
						let _g4 = _g.t;
						if(_g1._hx_index == 8) {
							let _g = _g1.e;
							let _g2 = _g.e;
							let _g3 = _g.p;
							let _g4 = _g.t;
							if(_g2._hx_index == 2) {
								if(_g2.g._hx_index == 51) {
									let args = _g1.args;
									let rem = 0;
									let size = 0;
									while(size < 4) {
										let t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl.VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										let _g = 0;
										let _g1 = rem;
										while(_g < _g1) {
											let i = _g++;
											args.pop();
										}
										let emat;
										let _g2 = e.e;
										if(_g2._hx_index == 8) {
											let _g = _g2.args;
											let e = _g2.e;
											emat = e;
										} else {
											throw haxe.Exception.thrown("assert");
										}
										return { e : hxsl.TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			let _g6 = _g.e;
			let _g7 = _g.index;
			let _g8 = _g6.e;
			let _g9 = _g6.p;
			let _g10 = _g6.t;
			if(_g8._hx_index == 17) {
				let _g = _g7.e;
				let _g1 = _g7.p;
				let _g2 = _g7.t;
				if(_g._hx_index == 0) {
					let _g1 = _g.c;
					if(_g1._hx_index == 2) {
						let i = _g1.v;
						let el = _g8.el;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl.Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	packTextures(name,vars,t) {
		let alloc = [];
		let g = { id : hxsl.Tools.allocVarId(), name : name, type : t, kind : hxsl.VarKind.Param};
		let pos = 0;
		let samplers = [];
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			let count = 1;
			if(v.type != t) {
				let _g = v.type;
				switch(_g._hx_index) {
				case 15:
					let _g1 = _g.size;
					if(_g1._hx_index == 0) {
						let n = _g1.v;
						let t2 = _g.t;
						if(t2 == t) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					let _g2 = _g.size;
					if(t != hxsl.Type.TSampler2D) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			let a = new hxsl._Flatten.Alloc(g,null,pos,count);
			a.v = v;
			if(v.qualifiers != null) {
				let _g = 0;
				let _g1 = v.qualifiers;
				while(_g < _g1.length) {
					let q = _g1[_g];
					++_g;
					if(q._hx_index == 12) {
						let name = q.name;
						let _g = 0;
						let _g1 = count;
						while(_g < _g1) {
							let i = _g++;
							samplers[pos + i] = name;
						}
					}
				}
			}
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl.Type.TArray(t,hxsl.SizeDecl.SConst(pos));
		if(samplers.length > 0) {
			let _g = 0;
			let _g1 = pos;
			while(_g < _g1) {
				let i = _g++;
				if(samplers[i] == null) {
					samplers[i] = "";
				}
			}
			if(g.qualifiers == null) {
				g.qualifiers = [];
			}
			g.qualifiers.push(hxsl.VarQualifier.Sampler(samplers.join(",")));
		}
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	packBuffers(name,vars,kind) {
		let alloc = [];
		let g = { id : hxsl.Tools.allocVarId(), name : name, type : hxsl.Type.TVoid, kind : hxsl.VarKind.Param};
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			let _g1 = v.type;
			if(_g1._hx_index == 16) {
				let _g = _g1.t;
				let _g2 = _g1.size;
				let k = _g1.kind;
				if(kind == k) {
					let a = new hxsl._Flatten.Alloc(g,null,alloc.length,1);
					a.v = v;
					alloc.push(a);
					this.outVars.push(v);
				}
			}
		}
		g.type = hxsl.Type.TArray(hxsl.Type.TBuffer(hxsl.Type.TVoid,hxsl.SizeDecl.SConst(0),kind),hxsl.SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	pack(name,kind,vars,t) {
		let alloc = [];
		let apos = 0;
		let g = { id : hxsl.Tools.allocVarId(), name : name, type : hxsl.Type.TVec(0,t), kind : kind};
		let _g = 0;
		while(_g < vars.length) {
			let v = vars[_g];
			++_g;
			let tmp;
			if(!hxsl.Tools.isSampler(v.type)) {
				let _g = v.type;
				if(_g._hx_index == 16) {
					let _g1 = _g.t;
					let _g2 = _g.size;
					let _g3 = _g.kind;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			let _g1 = v.type;
			if(_g1._hx_index == 15) {
				let _g = _g1.size;
				let t = _g1.t;
				if(hxsl.Tools.isSampler(t)) {
					continue;
				}
			}
			let size = this.varSize(v.type,t);
			if(size == 0) {
				let a = new hxsl._Flatten.Alloc(g,t,-1,size);
				a.v = v;
				this.varMap.set(v,a);
				continue;
			}
			let best = null;
			let _g2 = 0;
			while(_g2 < alloc.length) {
				let a = alloc[_g2];
				++_g2;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				let free = best.size - size;
				if(free > 0) {
					let i = alloc.indexOf(best);
					let a = new hxsl._Flatten.Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				let a = new hxsl._Flatten.Alloc(g,t,apos,size);
				apos += size;
				a.v = v;
				this.varMap.set(v,a);
				alloc.push(a);
				let pad = (4 - size % 4) % 4;
				if(pad > 0) {
					let a = new hxsl._Flatten.Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a);
				}
			}
		}
		g.type = hxsl.Type.TArray(hxsl.Type.TVec(4,t),hxsl.SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	varSize(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl.VecType.VFloat) {
				return 1;
			} else {
				throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			let n = v.size;
			let t2 = v.t;
			if(t == t2) {
				return n;
			} else {
				throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl.VecType.VFloat) {
				return 16;
			} else {
				throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl.VecType.VFloat) {
				return 12;
			} else {
				throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			let _g = v.size;
			if(_g._hx_index == 0) {
				let n = _g.v;
				let at = v.t;
				return this.varSize(at,t) * n;
			} else {
				throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe.Exception.thrown(hxsl.Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	gatherVar(v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				this.gatherVar(v);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl.Tools.hasQualifier(v,hxsl.VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
}
$hxClasses["hxsl.Flatten"] = hxsl.Flatten;
hxsl.Flatten.__name__ = "hxsl.Flatten";
Object.assign(hxsl.Flatten.prototype, {
	__class__: hxsl.Flatten
});
hxsl.GlobalSlot = class hxsl_GlobalSlot {
	static _new(name) {
		return hxsl.Globals.allocID(name);
	}
	static toInt(this1) {
		return this1;
	}
	static set(this1,globals,v) {
		globals.map.h[this1] = v;
	}
	static get(this1,globals) {
		return globals.map.h[this1];
	}
}
hxsl.Globals = class hxsl_Globals {
	constructor() {
		this.channels = [];
		this.map = new haxe.ds.IntMap();
	}
	set(path,v) {
		let this1 = this.map;
		let key = hxsl.Globals.allocID(path);
		this1.h[key] = v;
	}
	get(path) {
		let this1 = this.map;
		let key = hxsl.Globals.allocID(path);
		return this1.h[key];
	}
	fastSet(id,v) {
		this.map.h[id] = v;
	}
	fastGet(id) {
		return this.map.h[id];
	}
	resetChannels() {
		this.maxChannels = 0;
	}
	allocChannelID(t) {
		let _g = 0;
		let _g1 = this.maxChannels;
		while(_g < _g1) {
			let i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl.Tools.MAX_CHANNELS_BITS) {
			throw haxe.Exception.thrown("Too many unique channels");
		}
		let i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	static allocID(path) {
		if(hxsl.Globals.MAP == null) {
			hxsl.Globals.MAP = new haxe.ds.StringMap();
			hxsl.Globals.ALL = [];
		}
		let id = hxsl.Globals.MAP.h[path];
		if(id == null) {
			id = hxsl.Globals.ALL.length;
			hxsl.Globals.ALL.push(path);
			hxsl.Globals.MAP.h[path] = id;
		}
		return id;
	}
	static getIDName(id) {
		return hxsl.Globals.ALL[id];
	}
}
$hxClasses["hxsl.Globals"] = hxsl.Globals;
hxsl.Globals.__name__ = "hxsl.Globals";
Object.assign(hxsl.Globals.prototype, {
	__class__: hxsl.Globals
});
js.Boot = class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js.Boot.__nativeClassName(o);
			if(name != null) {
				return js.Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js.Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js.Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js.Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js.Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js.Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js.Boot.__interfLoop(js.Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js.Boot.__interfLoop(js.Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js.Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe.Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js.Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js.Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = "js.Boot";
hxsl.GlslOut = class hxsl_GlslOut {
	constructor() {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.exprIds = 0;
		this.varNames = new haxe.ds.IntMap();
		this.allNames = new haxe.ds.StringMap();
	}
	get_isES() {
		return this.glES != null;
	}
	get_isES2() {
		if(this.glES != null) {
			return this.glES <= 2;
		} else {
			return false;
		}
	}
	add(v) {
		this.buf.b += Std.string(v);
	}
	ident(v) {
		let v1 = this.varName(v);
		this.buf.b += Std.string(v1);
	}
	decl(s) {
		let _g = 0;
		let _g1 = this.decls;
		while(_g < _g1.length) {
			let d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	addType(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			let size = t.size;
			let k = t.t;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl.GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			let n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			let vl = t.vl;
			this.buf.b += Std.string("struct { ");
			let _g = 0;
			while(_g < vl.length) {
				let v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			let _g1 = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			let t1 = t.t;
			let size1 = t.size;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size1._hx_index) {
			case 0:
				let _g2 = size1.v;
				if(_g2 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						let v = _g2;
						this.buf.b += Std.string(v);
					}
				} else {
					let v = _g2;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				let v = size1.v;
				let v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			let _g3 = t.t;
			let _g4 = t.size;
			let _g5 = t.kind;
			throw haxe.Exception.thrown("assert");
		case 17:
			let n1 = t.size;
			this.buf.b += Std.string("channel" + n1);
			break;
		case 18:
			this.buf.b += Std.string("mat2");
			break;
		}
	}
	addVar(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 15:
			let t = _g.t;
			let size = _g.size;
			let old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				let _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						let n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					let n = _g1;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				let v1 = size.v;
				let v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			let t1 = _g.t;
			let size1 = _g.size;
			let kind = _g.kind;
			if(kind != hxsl.BufferKind.Uniform) {
				throw haxe.Exception.thrown("TODO");
			}
			this.buf.b += Std.string((this.isVertex ? "vertex_" : "") + "uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl.Type.TArray(t1,size1);
			this.addVar(v);
			v.type = hxsl.Type.TBuffer(t1,size1,kind);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			let v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	addValue(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			let el = _g.el;
			let name = "val" + this.exprIds++;
			let tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			let el2 = el.slice();
			let last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl.TExprDef.TReturn(last), t : e.t, p : last.p};
			let e2 = { t : hxsl.Type.TVoid, e : hxsl.TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			let _g1 = _g.m;
			let _g2 = _g.args;
			let e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	addBlock(e,tabs) {
		this.addExpr(e,tabs);
	}
	getFunName(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl.Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			let _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				let _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			let _g2 = args[0].t;
			switch(_g2._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				let _g3 = _g2.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:
			return "texelFetch";
		case 36:
			let _g4 = args[0].t;
			switch(_g4._hx_index) {
			case 10:
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 11:
				this.decl("vec3 _textureSize(sampler2DArray sampler, int lod) { return vec3(textureSize(sampler, lod)); }");
				break;
			case 12:
				this.decl("vec2 _textureSize(samplerCube sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 17:
				let _g5 = _g4.size;
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			default:
			}
			return "_textureSize";
		case 50:
			if(args[0].t == hxsl.Type.TMat3x4) {
				this.decl(hxsl.GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl.GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			if(this.isVertex) {
				throw haxe.Exception.thrown("Can't use " + Std.string(g) + " in vertex shader");
			}
			if(this.version < 300) {
				this.decl("#extension GL_OES_standard_derivatives:enable");
			}
			break;
		case 73:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("int _floatBitsToUint( float v) { return int(floatBitsToUint(v)); }");
			this.decl("ivec2 _floatBitsToUint( vec2 v ) { return ivec2(floatBitsToUint(v)); }");
			this.decl("ivec3 _floatBitsToUint( vec3 v ) { return ivec3(floatBitsToUint(v)); }");
			this.decl("ivec4 _floatBitsToUint( vec4 v ) { return ivec4(floatBitsToUint(v)); }");
			break;
		case 72:case 74:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			break;
		case 75:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("float _uintBitsToFloat( int v ) { return uintBitsToFloat(uint(v)); }");
			this.decl("vec2 _uintBitsToFloat( ivec2 v ) { return uintBitsToFloat(uvec2(v)); }");
			this.decl("vec3 _uintBitsToFloat( ivec3 v ) { return uintBitsToFloat(uvec3(v)); }");
			this.decl("vec4 _uintBitsToFloat( ivec4 v ) { return uintBitsToFloat(uvec4(v)); }");
			break;
		default:
		}
		return hxsl.GlslOut.GLOBALS[g._hx_index];
	}
	addExpr(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				let b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				let v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				let f = c.v;
				let str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				let v1 = c.v;
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			let v2 = _g.v;
			let v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			let g = _g.g;
			this.buf.b += Std.string(hxsl.GlslOut.GLOBALS[g._hx_index]);
			break;
		case 3:
			let e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			let el = _g.el;
			this.buf.b += Std.string("{\n");
			let t2 = tabs + "\t";
			let _g1 = 0;
			while(_g1 < el.length) {
				let e = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e,t2);
				this.newLine(e);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			let op = _g.op;
			let e11 = _g.e1;
			let e2 = _g.e2;
			let _g2 = e11.t;
			let _g3 = e2.t;
			switch(op._hx_index) {
			case 1:
				if(_g2._hx_index == 5) {
					if(_g2.size == 3) {
						if(_g2.t._hx_index == 1) {
							if(_g3._hx_index == 8) {
								this.decl(hxsl.GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								let tmp;
								if(op._hx_index == 20) {
									let _g = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e11,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								let v = hxsl.Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							let v = hxsl.Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g2._hx_index == 5) {
					let _g = _g2.t;
					if(_g3._hx_index == 5) {
						let _g = _g3.size;
						let _g1 = _g3.t;
						let n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						let v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe.Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e11,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl.Type.TInt) {
					let tmp;
					if(op._hx_index == 20) {
						let _g = op.op;
						tmp = true;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mod), t : hxsl.Type.TFun([]), p : e.p},[e11,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g2._hx_index == 5) {
						if(_g2.size == 3) {
							if(_g2.t._hx_index == 1) {
								if(_g3._hx_index == 8) {
									this.decl(hxsl.GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									let tmp;
									if(op._hx_index == 20) {
										let _g = op.op;
										tmp = true;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.addValue(e11,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e11,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" ");
									let v = hxsl.Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								let v = hxsl.Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							let v = hxsl.Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl.Type.TInt) {
						let tmp;
						if(op._hx_index == 20) {
							let _g = op.op;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl.TExprDef.TCall({ e : hxsl.TExprDef.TGlobal(hxsl.TGlobal.Mod), t : hxsl.Type.TFun([]), p : e.p},[e11,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						let v = hxsl.Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					let v4 = hxsl.Printer.opStr(op);
					this.buf.b += Std.string(v4);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += Std.string(" ");
				let v5 = hxsl.Printer.opStr(op);
				this.buf.b += Std.string(v5);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			let op1 = _g.op;
			let e12 = _g.e1;
			let v6;
			switch(op1._hx_index) {
			case 0:
				v6 = "++";
				break;
			case 1:
				v6 = "--";
				break;
			case 2:
				v6 = "!";
				break;
			case 3:
				v6 = "-";
				break;
			case 4:
				v6 = "~";
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			this.buf.b += Std.string(v6);
			this.addValue(e12,tabs);
			break;
		case 7:
			let v7 = _g.v;
			let init = _g.init;
			this.locals.h[v7.id] = v7;
			if(init != null) {
				let v = this.varName(v7);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			let _g4 = _g.e;
			let _g5 = _g.args;
			let _g6 = _g4.e;
			let _g7 = _g4.p;
			let _g8 = _g4.t;
			if(_g6._hx_index == 2) {
				let _g = _g6.g;
				switch(_g._hx_index) {
				case 35:
					let g = _g;
					let args = _g5;
					let v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 36:
					let g1 = _g;
					let args1 = _g5;
					let v1 = this.getFunName(g1,args1,e.t);
					this.buf.b += Std.string(v1);
					this.buf.b += Std.string("(");
					this.addValue(args1[0],tabs);
					if(args1.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args1[1],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 53:
					if(_g5.length == 1) {
						let e = _g5[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						let v = _g4;
						let args = _g5;
						let _g = v.e;
						if(_g._hx_index == 2) {
							let g = _g.g;
							let v = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						let first = true;
						let _g1 = 0;
						while(_g1 < args.length) {
							let e = args[_g1];
							++_g1;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					let v2 = _g4;
					let args2 = _g5;
					let _g1 = v2.e;
					if(_g1._hx_index == 2) {
						let g = _g1.g;
						let v = this.getFunName(g,args2,e.t);
						this.buf.b += Std.string(v);
					} else {
						this.addValue(v2,tabs);
					}
					this.buf.b += Std.string("(");
					let first = true;
					let _g2 = 0;
					while(_g2 < args2.length) {
						let e = args2[_g2];
						++_g2;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				let v = _g4;
				let args = _g5;
				let _g = v.e;
				if(_g._hx_index == 2) {
					let g = _g.g;
					let v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				let first = true;
				let _g1 = 0;
				while(_g1 < args.length) {
					let e = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			let e3 = _g.e;
			let regs = _g.regs;
			if(e3.t._hx_index == 3) {
				let _g = 0;
				while(_g < regs.length) {
					let r = regs[_g];
					++_g;
					if(r != hxsl.Component.X) {
						throw haxe.Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e3,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e3,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e3,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e3,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe.Exception.thrown("assert");
				}
			} else {
				this.addValue(e3,tabs);
				this.buf.b += Std.string(".");
				let _g = 0;
				while(_g < regs.length) {
					let r = regs[_g];
					++_g;
					let _this = this.buf;
					let _this1 = _this.b;
					let tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			let e4 = _g.e;
			if(e4 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e4,tabs);
			}
			break;
		case 13:
			let v8 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			this.locals.h[v8.id] = v8;
			let _g9 = it.e;
			if(_g9._hx_index == 5) {
				if(_g9.op._hx_index == 21) {
					let e1 = _g9.e1;
					let e2 = _g9.e2;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v8.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v8.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v8.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe.Exception.thrown("assert");
				}
			} else {
				throw haxe.Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			let e5 = _g.e;
			let index = _g.index;
			this.addValue(e5,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			let el1 = _g.el;
			let _g10 = e.t;
			if(_g10._hx_index == 15) {
				let _g = _g10.size;
				let t = _g10.t;
				this.addType(t);
			} else {
				throw haxe.Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el1.length + "]");
			this.buf.b += Std.string("(");
			let first = true;
			let _g11 = 0;
			while(_g11 < el1.length) {
				let e = el1[_g11];
				++_g11;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			let _g12 = _g.e;
			let _g13 = _g.cases;
			let _g14 = _g.def;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			let _g15 = _g.e;
			let _g16 = _g.loop;
			if(_g.normalWhile == false) {
				let loop = _g16;
				let e = _g15;
				let old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				let loop = _g16;
				let e = _g15;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			let _g17 = _g.m;
			let _g18 = _g.args;
			let e6 = _g.e;
			this.addExpr(e6,tabs);
			break;
		}
	}
	varName(v) {
		if(v.kind == hxsl.VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		let n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(v.kind == hxsl.VarKind.Var) {
			n += "_varying";
		}
		if(Object.prototype.hasOwnProperty.call(hxsl.GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			let k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	newLine(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	isBlock(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 4:
			let _g1 = _g.el;
			return true;
		case 13:
			let _g2 = _g.v;
			let _g3 = _g.it;
			let loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			let _g4 = _g.e;
			if(_g.normalWhile == true) {
				let loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	initVar(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			let _g = v.type;
			let tmp;
			if(_g._hx_index == 16) {
				let _g1 = _g.t;
				let _g2 = _g.size;
				let _g3 = _g.kind;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					let p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	initVars(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe.ds.IntMap();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	run(s) {
		this.locals = new haxe.ds.IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		if(s.funs.length != 1) {
			throw haxe.Exception.thrown("assert");
		}
		let f = s.funs[0];
		this.isVertex = f.kind == hxsl.FunctionKind.Vertex;
		if(this.isVertex) {
			this.decl("precision highp float;");
		} else {
			this.decl("precision mediump float;");
		}
		this.initVars(s);
		let tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		let _g = f.expr.e;
		if(_g._hx_index == 4) {
			let el = _g.el;
			let _g1 = 0;
			while(_g1 < el.length) {
				let e = el[_g1];
				++_g1;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		if(this.isVertex) {
			this.buf.b += Std.string("\tgl_Position.z += gl_Position.z - gl_Position.w;\n");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		let locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		let _g1 = 0;
		while(_g1 < locals.length) {
			let v = locals[_g1];
			++_g1;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		let _g2 = 0;
		let _g3 = this.exprValues;
		while(_g2 < _g3.length) {
			let e = _g3[_g2];
			++_g2;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	static compile(s) {
		let out = new hxsl.GlslOut();
		out.glES = 1;
		out.version = 100;
		return out.run(s);
	}
}
$hxClasses["hxsl.GlslOut"] = hxsl.GlslOut;
hxsl.GlslOut.__name__ = "hxsl.GlslOut";
Object.assign(hxsl.GlslOut.prototype, {
	__class__: hxsl.GlslOut
	,__properties__: {get_isES2: "get_isES2",get_isES: "get_isES"}
});
hxsl._Linker = {};
hxsl._Linker.AllocatedVar = class hxsl__$Linker_AllocatedVar {
	constructor() {
	}
}
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl._Linker.AllocatedVar;
hxsl._Linker.AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
Object.assign(hxsl._Linker.AllocatedVar.prototype, {
	__class__: hxsl._Linker.AllocatedVar
});
hxsl._Linker.ShaderInfos = class hxsl__$Linker_ShaderInfos {
	constructor(n,v) {
		this.name = n;
		this.uid = hxsl._Linker.ShaderInfos.UID++;
		this.vertex = v;
		this.processed = new haxe.ds.IntMap();
		this.usedFunctions = [];
		this.readMap = new haxe.ds.IntMap();
		this.readVars = [];
		this.writeMap = new haxe.ds.IntMap();
		this.writeVars = [];
	}
}
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl._Linker.ShaderInfos;
hxsl._Linker.ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
Object.assign(hxsl._Linker.ShaderInfos.prototype, {
	__class__: hxsl._Linker.ShaderInfos
});
hxsl.Linker = class hxsl_Linker {
	constructor(mode) {
		this.debugDepth = 0;
		this.mode = mode;
	}
	debug(msg,pos) {
	}
	error(msg,p) {
		return hxsl.Error.t(msg,p);
	}
	mergeVar(path,v,v2,p,shaderName) {
		switch(v.kind._hx_index) {
		case 2:
			if(!(shaderName != null && hxsl.Tools.hasBorrowQualifier(v2,shaderName))) {
				throw haxe.Exception.thrown("assert");
			}
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 6:
			throw haxe.Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl.VarKind.Local && v2.kind != hxsl.VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		let _g = v.type;
		let _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				let fl2 = _g1.vl;
				let fl1 = _g.vl;
				let _g2 = 0;
				while(_g2 < fl1.length) {
					let f1 = fl1[_g2];
					++_g2;
					let ft = null;
					let _g = 0;
					while(_g < fl2.length) {
						let f2 = fl2[_g];
						++_g;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p,shaderName).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p,shaderName);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl.Tools.toString(v.type) + " should be " + hxsl.Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl.Tools.toString(v.type) + " should be " + hxsl.Tools.toString(v2.type),p);
		}
	}
	allocVar(v,p,shaderName,path,parent) {
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p,shaderName);
			let p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		let key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					let n = q.n;
					key = n;
				}
			}
		}
		let v2 = this.varMap.h[key];
		let vname = v.name;
		let _gthis = this;
		if(v2 != null) {
			let _g = 0;
			let _g1 = v2.merged;
			while(_g < _g1.length) {
				let vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			let tmp;
			let borrowed = hxsl.Tools.hasBorrowQualifier(v2.v,shaderName);
			if(!(v.kind == hxsl.VarKind.Param && !borrowed && !hxsl.Tools.hasQualifier(v,hxsl.VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl.VarKind.Function || (v.kind == hxsl.VarKind.Var || v.kind == hxsl.VarKind.Local) && hxsl.Tools.hasQualifier(v,hxsl.VarQualifier.Private))) {
				let v1 = v2.v;
				let borrowed = hxsl.Tools.hasBorrowQualifier(v,v2.rootShaderName);
				tmp = v1.kind == hxsl.VarKind.Param && !borrowed && !hxsl.Tools.hasQualifier(v1,hxsl.VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl.VarKind.Function || (v1.kind == hxsl.VarKind.Var || v1.kind == hxsl.VarKind.Local) && hxsl.Tools.hasQualifier(v1,hxsl.VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl.VarKind.Param && v2.v.kind == hxsl.VarKind.Param) {
				let k = 2;
				while(true) {
					let a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					let _g = 0;
					let _g1 = a.merged;
					while(_g < _g1.length) {
						let vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				if(v.kind == hxsl.VarKind.Input) {
					let _this = this.varMap;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
					this.varMap.h[key + k] = v2;
					v2.v.name += k;
					v2.path += k;
				} else {
					vname += k;
					key += k;
				}
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p,v2.rootShaderName);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		let v21 = { id : hxsl.Tools.allocVarId(), name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		let a = new hxsl._Linker.AllocatedVar();
		a.v = v21;
		a.merged = [v];
		a.path = key;
		a.id = v21.id;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		a.rootShaderName = shaderName;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		let _g = v21.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = [];
			let _g2 = 0;
			while(_g2 < vl.length) {
				let v = vl[_g2];
				++_g2;
				_g1.push(this.allocVar(v,p,shaderName,key,a).v);
			}
			v21.type = hxsl.Type.TStruct(_g1);
		}
		return a;
	}
	mapExprVar(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				let v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
					if(!this.curShader.readMap.h.hasOwnProperty(v1.id)) {
						this.curShader.readMap.h[v1.id] = v1;
						this.curShader.readVars.push(v1);
					}
					if(this.curShader.vertex == null && v1.v.kind == hxsl.VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl.TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			let op = _g.op;
			let e1 = _g.e1;
			let e2 = _g.e2;
			let _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					let _g2 = _g1.v;
					let v1 = _g2;
					if(!this.locals.h.hasOwnProperty(v1.id)) {
						let e21 = this.mapExprVar(e2);
						let v = this.allocVar(v1,e1.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v.id)) {
							this.curShader.writeMap.h[v.id] = v;
							this.curShader.writeVars.push(v);
						}
						return { e : hxsl.TExprDef.TBinop(op,{ e : hxsl.TExprDef.TVar(v.v), t : v.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						let v = _g2;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							let e11 = this.mapExprVar(e1);
							let e21 = this.mapExprVar(e2);
							let v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl.TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					let _g3 = _g1.e;
					let _g4 = _g1.regs;
					let _g5 = _g3.e;
					let _g6 = _g3.p;
					let _g7 = _g3.t;
					if(_g5._hx_index == 1) {
						let v = _g5.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							let e11 = this.mapExprVar(e1);
							let e21 = this.mapExprVar(e2);
							let v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl.TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				let _g8 = op.op;
				switch(_g1._hx_index) {
				case 1:
					let v2 = _g1.v;
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						let e11 = this.mapExprVar(e1);
						let e21 = this.mapExprVar(e2);
						let v = this.allocVar(v2,e11.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v.id)) {
							this.curShader.writeMap.h[v.id] = v;
							this.curShader.writeVars.push(v);
						}
						return { e : hxsl.TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					let _g9 = _g1.e;
					let _g10 = _g1.regs;
					let _g11 = _g9.e;
					let _g12 = _g9.p;
					let _g13 = _g9.t;
					if(_g11._hx_index == 1) {
						let v = _g11.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							let e11 = this.mapExprVar(e1);
							let e21 = this.mapExprVar(e2);
							let v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl.TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			let _g14 = _g.init;
			let v3 = _g.v;
			this.locals.h[v3.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			let _g15 = _g.it;
			let _g16 = _g.loop;
			let v4 = _g.v;
			this.locals.h[v4.id] = true;
			break;
		default:
		}
		return hxsl.Tools.map(e,$bind(this,this.mapExprVar));
	}
	addShader(name,vertex,e,p) {
		let s = new hxsl._Linker.ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	sortByPriorityDesc(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	buildDependency(s,v,isWritten) {
		let found = !isWritten;
		let _g = 0;
		let _g1 = this.shaders;
		while(_g < _g1.length) {
			let parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.writeMap.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.readMap.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl.VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	initDependencies(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe.ds.ObjectMap();
		let _g = 0;
		let _g1 = s.readVars;
		while(_g < _g1.length) {
			let r = _g1[_g];
			++_g;
			this.buildDependency(s,r,s.writeMap.h.hasOwnProperty(r.id));
		}
		if(s.vertex == null) {
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	collect(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		let _g = [];
		let d = cur.deps.keys();
		while(d.hasNext()) {
			let d1 = d.next();
			_g.push(d1);
		}
		let deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		let _g1 = 0;
		while(_g1 < deps.length) {
			let d = deps[_g1];
			++_g1;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	link(shadersData) {
		this.varMap = new haxe.ds.StringMap();
		this.varIdMap = new haxe.ds.IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe.ds.IntMap();
		let dupShaders = [];
		let _g = [];
		let _g_current = 0;
		let _g_array = shadersData;
		while(_g_current < _g_array.length) {
			let _g_value = _g_array[_g_current];
			let _g_key = _g_current++;
			let i = _g_key;
			let s = _g_value;
			if(shadersData.indexOf(s) < i) {
				let s2 = hxsl.Clone.shaderData(s);
				dupShaders.push({ origin : s, cloned : s2});
				_g.push(s2);
			} else {
				_g.push(s);
			}
		}
		shadersData = _g;
		this.curInstance = 0;
		let outVars = [];
		let _g1 = 0;
		while(_g1 < shadersData.length) {
			let s = shadersData[_g1];
			++_g1;
			this.isBatchShader = this.mode == hxsl.LinkMode.Batch && s.name.startsWith("batchShader_");
			let _g = 0;
			let _g2 = s.vars;
			while(_g < _g2.length) {
				let v = _g2[_g];
				++_g;
				let v2 = this.allocVar(v,null,s.name);
				if(this.isBatchShader && v2.v.kind == hxsl.VarKind.Param && !v2.path.startsWith("Batch_")) {
					v2.v.kind = hxsl.VarKind.Local;
				}
				if(v.kind == hxsl.VarKind.Output) {
					outVars.push(v);
				}
			}
			let _g3 = 0;
			let _g4 = s.funs;
			while(_g3 < _g4.length) {
				let f = _g4[_g3];
				++_g3;
				let v = this.allocVar(f.ref,f.expr.p);
				v.kind = f.kind;
			}
			this.curInstance++;
		}
		let priority = 0;
		let initPrio_init = [-3000];
		let initPrio_vert = [-2000];
		let initPrio_frag = [-1000];
		let _g2 = 0;
		while(_g2 < shadersData.length) {
			let s = shadersData[_g2];
			++_g2;
			let _g = 0;
			let _g1 = s.funs;
			while(_g < _g1.length) {
				let f = _g1[_g];
				++_g;
				let v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe.Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					if(this.mode == hxsl.LinkMode.Compute) {
						let e = v.kind;
						throw haxe.Exception.thrown("Unexpected " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name.toLowerCase() + "() function in compute shader");
					}
					this.addShader(s.name + "." + (v.kind == hxsl.FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl.FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					let prio;
					let status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					let _g2 = f.expr.e;
					if(_g2._hx_index == 4) {
						let el = _g2.el;
						let index = 0;
						let _g = 0;
						while(_g < el.length) {
							let e = el[_g];
							++_g;
							this.addShader(s.name + "." + f.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe.Exception.thrown("Unexpected helper function in linker " + v.v.name);
				case 4:
					if(this.mode != hxsl.LinkMode.Compute) {
						throw haxe.Exception.thrown("Unexpected main() outside compute shader");
					}
					this.addShader(s.name,true,f.expr,priority).isCompute = true;
					break;
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		let uid = 0;
		let _g3 = 0;
		let _g4 = this.shaders;
		while(_g3 < _g4.length) {
			let s = _g4[_g3];
			++_g3;
			s.uid = uid++;
		}
		let entry = new hxsl._Linker.ShaderInfos("<entry>",false);
		entry.deps = new haxe.ds.ObjectMap();
		let _g5 = 0;
		while(_g5 < outVars.length) {
			let v = outVars[_g5];
			++_g5;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		let _g6 = 0;
		let _g7 = this.shaders;
		while(_g6 < _g7.length) {
			let s = _g7[_g6];
			++_g6;
			if(s.hasDiscard || s.isCompute) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		let _g8 = 0;
		let _g9 = this.shaders;
		while(_g8 < _g9.length) {
			let s = _g9[_g8];
			++_g8;
			if(s.vertex != null) {
				continue;
			}
			let onlyParams = true;
			let _g = 0;
			let _g1 = s.readVars;
			while(_g < _g1.length) {
				let r = _g1[_g];
				++_g;
				if(r.v.kind != hxsl.VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		let v = [];
		let f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe.Exception.thrown("assert");
		}
		let _g10 = 0;
		let _g11 = this.shaders;
		while(_g10 < _g11.length) {
			let s = _g11[_g10];
			++_g10;
			s.marked = null;
		}
		let _g12 = 0;
		let _g13 = v.concat(f);
		while(_g12 < _g13.length) {
			let s = _g13[_g12];
			++_g12;
			let d = s.deps.keys();
			while(d.hasNext()) {
				let d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		let outVars1 = [];
		let varMap_h = { };
		let addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars1.push(v.v);
			}
		};
		let _g14 = 0;
		let _g15 = v.concat(f);
		while(_g14 < _g15.length) {
			let s = _g15[_g14];
			++_g14;
			let _g = 0;
			let _g1 = s.readVars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				addVar(v);
			}
			let _g2 = 0;
			let _g3 = s.writeVars;
			while(_g2 < _g3.length) {
				let v = _g3[_g2];
				++_g2;
				addVar(v);
			}
		}
		let cleanVar = null;
		cleanVar = function(v) {
			let _g = v.type;
			if(_g._hx_index == 13) {
				let vl = _g.vl;
				if(v.kind != hxsl.VarKind.Input) {
					let vout = [];
					let _g = 0;
					while(_g < vl.length) {
						let v = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v.id)) {
							cleanVar(v);
							vout.push(v);
						}
					}
					v.type = hxsl.Type.TStruct(vout);
				}
			}
		};
		let _g16 = 0;
		while(_g16 < outVars1.length) {
			let v = outVars1[_g16];
			++_g16;
			cleanVar(v);
		}
		let build = function(kind,name,a) {
			let v = { id : hxsl.Tools.allocVarId(), name : name, type : hxsl.Type.TFun([{ ret : hxsl.Type.TVoid, args : []}]), kind : hxsl.VarKind.Function};
			outVars1.push(v);
			let exprs = [];
			let _g = 0;
			while(_g < a.length) {
				let s = a[_g];
				++_g;
				let _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					let el = _g1.el;
					let _g = 0;
					while(_g < el.length) {
						let e = el[_g];
						++_g;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			let expr = { e : hxsl.TExprDef.TBlock(exprs), t : hxsl.Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			return { kind : kind, ref : v, ret : hxsl.Type.TVoid, args : [], expr : expr};
		};
		let funs = this.mode == hxsl.LinkMode.Compute ? [build(hxsl.FunctionKind.Main,"main",v)] : [build(hxsl.FunctionKind.Vertex,"vertex",v),build(hxsl.FunctionKind.Fragment,"fragment",f)];
		let _g17 = 0;
		while(_g17 < dupShaders.length) {
			let d = dupShaders[_g17];
			++_g17;
			let _g = 0;
			let _g1 = d.cloned.vars.length;
			while(_g < _g1) {
				let i = _g++;
				this.allocVar(d.cloned.vars[i],null).merged.unshift(d.origin.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
}
$hxClasses["hxsl.Linker"] = hxsl.Linker;
hxsl.Linker.__name__ = "hxsl.Linker";
Object.assign(hxsl.Linker.prototype, {
	__class__: hxsl.Linker
});
hxsl.Output = $hxEnums["hxsl.Output"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackNormal",$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackFloat",$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec2",$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec3",$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec4",$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Swiz",$_.__params__ = ["a","swiz"],$_)
};
hxsl.Output.__constructs__ = [hxsl.Output.Const,hxsl.Output.Value,hxsl.Output.PackNormal,hxsl.Output.PackFloat,hxsl.Output.Vec2,hxsl.Output.Vec3,hxsl.Output.Vec4,hxsl.Output.Swiz];
hxsl.Output.__empty_constructs__ = [];
hxsl.Printer = class hxsl_Printer {
	constructor(varId) {
		if(varId == null) {
			varId = false;
		}
		this.varId = varId;
	}
	add(v) {
		this.buffer.b += Std.string(v);
	}
	shaderString(s) {
		this.buffer = new StringBuf();
		let _g = 0;
		let _g1 = s.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		let _g2 = 0;
		let _g3 = s.funs;
		while(_g2 < _g3.length) {
			let f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	varString(v) {
		this.buffer = new StringBuf();
		this.addVar(v,null);
		return this.buffer.b;
	}
	funString(f) {
		this.buffer = new StringBuf();
		this.addFun(f);
		return this.buffer.b;
	}
	exprString(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	addVar(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				let v;
				switch(q._hx_index) {
				case 0:
					let max = q.max;
					v = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v = "private";
					break;
				case 2:
					v = "nullable";
					break;
				case 3:
					v = "perObject";
					break;
				case 4:
					let n = q.n;
					v = "name('" + n + "')";
					break;
				case 5:
					v = "shared";
					break;
				case 6:
					let p = q.p;
					v = $hxEnums[p.__enum__].__constructs__[p._hx_index]._hx_name.toLowerCase() + "p";
					break;
				case 7:
					let min = q.min;
					let max1 = q.max;
					v = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v = "ignore";
					break;
				case 9:
					let n1 = q.v;
					v = "perInstance(" + n1 + ")";
					break;
				case 10:
					let s = q.s;
					v = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				case 11:
					let s1 = q.source;
					v = "borrow(" + s1 + ")";
					break;
				case 12:
					let s2 = q.name;
					v = "sampler(" + s2 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			this.buffer.b += Std.string("{");
			let first = true;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v,v.kind,tabs,v);
			}
			this.buffer.b += Std.string("}");
		} else {
			let v1 = hxsl.Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	addFun(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		let first = true;
		let _g = 0;
		let _g1 = f.args;
		while(_g < _g1.length) {
			let a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl.VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		let v = ") : " + hxsl.Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	addVarName(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	addConst(c) {
		let _this = this.buffer;
		let _this1 = _this.b;
		let tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			let b = c.b;
			tmp = b;
			break;
		case 2:
			let i = c.v;
			tmp = i;
			break;
		case 3:
			let f = c.v;
			tmp = f;
			break;
		case 4:
			let s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	addExpr(e,tabs) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let c = _g.c;
			this.addConst(c);
			break;
		case 1:
			let v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			let g = _g.g;
			let v1 = hxsl.Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			let e1 = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			let el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			let _g1 = 0;
			while(_g1 < el.length) {
				let e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			let op = _g.op;
			let e11 = _g.e1;
			let e2 = _g.e2;
			this.addExpr(e11,tabs);
			let v2 = " " + hxsl.Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e2,tabs);
			break;
		case 6:
			let op1 = _g.op;
			let e3 = _g.e1;
			let v3;
			switch(op1._hx_index) {
			case 0:
				v3 = "++";
				break;
			case 1:
				v3 = "--";
				break;
			case 2:
				v3 = "!";
				break;
			case 3:
				v3 = "-";
				break;
			case 4:
				v3 = "~";
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			this.buffer.b += Std.string(v3);
			this.addExpr(e3,tabs);
			break;
		case 7:
			let v4 = _g.v;
			let init = _g.init;
			this.addVar(v4,hxsl.VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			let e4 = _g.e;
			let el1 = _g.args;
			this.addExpr(e4,tabs);
			this.buffer.b += Std.string("(");
			let first = true;
			let _g2 = 0;
			while(_g2 < el1.length) {
				let e = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			let e5 = _g.e;
			let regs = _g.regs;
			this.addExpr(e5,tabs);
			this.buffer.b += Std.string(".");
			let _g3 = 0;
			while(_g3 < regs.length) {
				let r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl.Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			let cond = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			let e6 = _g.e;
			this.buffer.b += Std.string("return");
			if(e6 != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e6,tabs);
			}
			break;
		case 13:
			let v5 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v5);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			let e12 = _g.e;
			let e21 = _g.index;
			this.addExpr(e12,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e21,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			let el2 = _g.el;
			this.buffer.b += Std.string("[");
			let first1 = true;
			let _g4 = 0;
			while(_g4 < el2.length) {
				let e = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			let e7 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e7,tabs);
			this.buffer.b += Std.string(") {");
			let old = tabs;
			let _g5 = 0;
			while(_g5 < cases.length) {
				let c = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				let first = true;
				let _g = 0;
				let _g1 = c.values;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			let _g6 = _g.e;
			let _g7 = _g.loop;
			if(_g.normalWhile == false) {
				let loop = _g7;
				let e = _g6;
				let old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				let loop = _g7;
				let e = _g6;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				let old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			let m = _g.m;
			let args = _g.args;
			let e8 = _g.e;
			this.buffer.b += Std.string("@");
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				let first = true;
				let _g = 0;
				while(_g < args.length) {
					let c = args[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e8,tabs);
			break;
		}
	}
	static opStr(op) {
		switch(op._hx_index) {
		case 0:
			return "+";
		case 1:
			return "*";
		case 2:
			return "/";
		case 3:
			return "-";
		case 4:
			return "=";
		case 5:
			return "==";
		case 6:
			return "!=";
		case 7:
			return ">";
		case 8:
			return ">=";
		case 9:
			return "<";
		case 10:
			return "<=";
		case 11:
			return "&";
		case 12:
			return "|";
		case 13:
			return "^";
		case 14:
			return "&&";
		case 15:
			return "||";
		case 16:
			return "<<";
		case 17:
			return ">>";
		case 18:
			return ">>>";
		case 19:
			return "%";
		case 20:
			let op1 = op.op;
			return hxsl.Printer.opStr(op1) + "=";
		case 21:
			return "...";
		case 22:
			return "=>";
		default:
			return "??" + Std.string(op);
		}
	}
	static toString(e,varId) {
		if(varId == null) {
			varId = false;
		}
		return new hxsl.Printer(varId).exprString(e);
	}
	static shaderToString(s,varId) {
		if(varId == null) {
			varId = false;
		}
		return new hxsl.Printer(varId).shaderString(s);
	}
	static check(s,from) {
		try {
			let vars = new haxe.ds.IntMap();
			let regVars = [];
			let regVar = null;
			regVar = function(v,reg) {
				if(reg) {
					if(vars.h.hasOwnProperty(v.id)) {
						throw haxe.Exception.thrown("Duplicate var " + v.id);
					}
					vars.h[v.id] = v;
					regVars.push(v);
				} else {
					vars.remove(v.id);
				}
				let _g = v.type;
				if(_g._hx_index == 13) {
					let vl = _g.vl;
					let _g1 = 0;
					while(_g1 < vl.length) {
						let v = vl[_g1];
						++_g1;
						regVar(v,reg);
					}
				}
			};
			let checkExpr = null;
			checkExpr = function(e) {
				let _g = e.e;
				switch(_g._hx_index) {
				case 1:
					let v = _g.v;
					if(!vars.h.hasOwnProperty(v.id)) {
						throw haxe.Exception.thrown("Unbound var " + v.name + "@" + v.id);
					}
					break;
				case 4:
					let el = _g.el;
					let old = regVars;
					regVars = [];
					let _g1 = 0;
					while(_g1 < el.length) {
						let e = el[_g1];
						++_g1;
						checkExpr(e);
					}
					let _g2 = 0;
					while(_g2 < regVars.length) {
						let v = regVars[_g2];
						++_g2;
						regVar(v,false);
					}
					regVars = old;
					break;
				case 7:
					let v1 = _g.v;
					let init = _g.init;
					if(init != null) {
						checkExpr(init);
					}
					regVar(v1,true);
					break;
				case 13:
					let v2 = _g.v;
					let it = _g.it;
					let loop = _g.loop;
					checkExpr(it);
					regVar(v2,true);
					checkExpr(loop);
					regVar(v2,false);
					break;
				default:
					hxsl.Tools.iter(e,checkExpr);
				}
			};
			let _g = 0;
			let _g1 = s.vars;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				regVar(v,true);
			}
			let _g2 = 0;
			let _g3 = s.funs;
			while(_g2 < _g3.length) {
				let f = _g3[_g2];
				++_g2;
				let _g = 0;
				let _g1 = f.args;
				while(_g < _g1.length) {
					let v = _g1[_g];
					++_g;
					regVar(v,true);
				}
				checkExpr(f.expr);
				let _g4 = 0;
				let _g5 = f.args;
				while(_g4 < _g5.length) {
					let v = _g5[_g4];
					++_g4;
					regVar(v,false);
				}
			}
		} catch( _g ) {
			let _g1 = haxe.Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				let e = _g1;
				let msg = e + "\n    in\n" + hxsl.Printer.shaderToString(s,true);
				if(from != null) {
					let _g = [];
					let _g1 = 0;
					while(_g1 < from.length) {
						let s = from[_g1];
						++_g1;
						_g.push(hxsl.Printer.shaderToString(s,true));
					}
					msg += "\n    from\n\n" + _g.join("\n\n");
				}
				throw haxe.Exception.thrown(msg);
			} else {
				throw _g;
			}
		}
	}
}
$hxClasses["hxsl.Printer"] = hxsl.Printer;
hxsl.Printer.__name__ = "hxsl.Printer";
Object.assign(hxsl.Printer.prototype, {
	__class__: hxsl.Printer
});
hxsl.LinkMode = $hxEnums["hxsl.LinkMode"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxsl.LinkMode",toString:$estr}
	,Batch: {_hx_name:"Batch",_hx_index:1,__enum__:"hxsl.LinkMode",toString:$estr}
	,Compute: {_hx_name:"Compute",_hx_index:2,__enum__:"hxsl.LinkMode",toString:$estr}
};
hxsl.LinkMode.__constructs__ = [hxsl.LinkMode.Default,hxsl.LinkMode.Batch,hxsl.LinkMode.Compute];
hxsl.LinkMode.__empty_constructs__ = [hxsl.LinkMode.Default,hxsl.LinkMode.Batch,hxsl.LinkMode.Compute];
hxsl.AllocParam = class hxsl_AllocParam {
	constructor(name,pos,instance,index,type) {
		this.name = name;
		this.pos = pos;
		this.instance = instance;
		this.index = index;
		this.type = type;
	}
	clone(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		let p = new hxsl.AllocParam(this.name,this.pos,this.instance,this.index,this.type);
		if(this.perObjectGlobal != null) {
			p.perObjectGlobal = this.perObjectGlobal.clone(resetGID);
		}
		if(this.next != null) {
			p.next = this.next.clone(resetGID);
		}
		return p;
	}
}
$hxClasses["hxsl.AllocParam"] = hxsl.AllocParam;
hxsl.AllocParam.__name__ = "hxsl.AllocParam";
Object.assign(hxsl.AllocParam.prototype, {
	__class__: hxsl.AllocParam
});
hxsl.AllocGlobal = class hxsl_AllocGlobal {
	constructor(pos,path,type) {
		this.pos = pos;
		this.path = path;
		this.gid = hxsl.Globals.allocID(path);
		this.type = type;
	}
	clone(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		let g = new hxsl.AllocGlobal(this.pos,this.path,this.type);
		if(this.next != null) {
			g.next = this.next.clone(resetGID);
		}
		if(resetGID) {
			g.gid = 0;
		}
		return g;
	}
}
$hxClasses["hxsl.AllocGlobal"] = hxsl.AllocGlobal;
hxsl.AllocGlobal.__name__ = "hxsl.AllocGlobal";
Object.assign(hxsl.AllocGlobal.prototype, {
	__class__: hxsl.AllocGlobal
});
hxsl.RuntimeShaderData = class hxsl_RuntimeShaderData {
	constructor() {
	}
}
$hxClasses["hxsl.RuntimeShaderData"] = hxsl.RuntimeShaderData;
hxsl.RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
Object.assign(hxsl.RuntimeShaderData.prototype, {
	__class__: hxsl.RuntimeShaderData
});
hxsl.ShaderInstanceDesc = class hxsl_ShaderInstanceDesc {
	constructor(shader,bits) {
		this.shader = shader;
		this.bits = bits;
	}
}
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl.ShaderInstanceDesc;
hxsl.ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
Object.assign(hxsl.ShaderInstanceDesc.prototype, {
	__class__: hxsl.ShaderInstanceDesc
});
hxsl.RuntimeShader = class hxsl_RuntimeShader {
	constructor() {
		this.id = hxsl.RuntimeShader.UID++;
	}
	get_compute() {
		return this.vertex;
	}
	set_compute(v) {
		return this.vertex = v;
	}
	hasGlobal(gid) {
		return this.globals.h.hasOwnProperty(gid);
	}
	getShaders() {
		if(this.mode == hxsl.LinkMode.Compute) {
			return [this.vertex];
		} else {
			return [this.vertex,this.fragment];
		}
	}
}
$hxClasses["hxsl.RuntimeShader"] = hxsl.RuntimeShader;
hxsl.RuntimeShader.__name__ = "hxsl.RuntimeShader";
Object.assign(hxsl.RuntimeShader.prototype, {
	__class__: hxsl.RuntimeShader
	,__properties__: {set_compute: "set_compute",get_compute: "get_compute"}
});
hxsl.Serializer = class hxsl_Serializer {
	constructor() {
		this.tid = 1;
		this.uid = 1;
	}
	writeArr(arr,f) {
		this.writeVarInt(arr.length);
		let _g = 0;
		while(_g < arr.length) {
			let v = arr[_g];
			++_g;
			f(v);
		}
	}
	readArr(f) {
		let _g = [];
		let _g1 = 0;
		let _g2 = this.readVarInt();
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(f());
		}
		return _g;
	}
	readVarInt() {
		let b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	writeVarInt(id) {
		if(id < 128) {
			this.out.addByte(id);
		} else {
			let n = id >> 8;
			if(n >= 127) {
				this.out.addByte(255);
				this.out.addInt32(n);
			} else {
				this.out.addByte(n | 128);
				this.out.addByte(id & 255);
			}
		}
	}
	writeID(id) {
		let id2 = this.idMap.h[id];
		if(id2 == null) {
			id2 = this.uid++;
			this.idMap.h[id] = id2;
		}
		this.writeVarInt(id2);
	}
	readID() {
		return this.readVarInt();
	}
	writeTID(t) {
		let tid = this.typeIdMap.get(t);
		if(tid != null) {
			this.writeVarInt(tid);
			return false;
		}
		tid = this.tid++;
		this.typeIdMap.set(t,tid);
		this.writeVarInt(tid);
		return true;
	}
	writeType(t) {
		this.out.addByte(t._hx_index);
		switch(t._hx_index) {
		case 5:
			let size = t.size;
			let t1 = t.t;
			this.out.addByte(size | t1._hx_index << 3);
			break;
		case 9:
			let size1 = t.size;
			this.out.addInt32(size1);
			break;
		case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 8:case 10:case 11:case 12:case 18:
			break;
		case 13:
			let vl = t.vl;
			if(this.writeTID(t)) {
				let f = $bind(this,this.writeVar);
				this.writeVarInt(vl.length);
				let _g = 0;
				while(_g < vl.length) {
					let v = vl[_g];
					++_g;
					f(v);
				}
			}
			break;
		case 14:
			let variants = t.variants;
			break;
		case 15:
			let t2 = t.t;
			let size2 = t.size;
			this.writeType(t2);
			switch(size2._hx_index) {
			case 0:
				let v = size2.v;
				this.out.addByte(0);
				this.writeVarInt(v);
				break;
			case 1:
				let v1 = size2.v;
				this.writeVar(v1);
				break;
			}
			break;
		case 16:
			let _g = t.t;
			let _g1 = t.size;
			let _g2 = t.kind;
			if(_g2._hx_index == 0) {
				let size = _g1;
				let t = _g;
				this.writeType(t);
				switch(size._hx_index) {
				case 0:
					let v = size.v;
					this.out.addByte(0);
					this.writeVarInt(v);
					break;
				case 1:
					let v1 = size.v;
					this.writeVar(v1);
					break;
				}
			} else {
				let kind = _g2;
				let size = _g1;
				let t = _g;
				this.out.addByte(kind._hx_index + 128);
				this.writeType(t);
				switch(size._hx_index) {
				case 0:
					let v = size.v;
					this.out.addByte(0);
					this.writeVarInt(v);
					break;
				case 1:
					let v1 = size.v;
					this.writeVar(v1);
					break;
				}
			}
			break;
		case 17:
			let size3 = t.size;
			this.out.addByte(size3);
			break;
		}
	}
	readType() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl.Type.TVoid;
		case 1:
			return hxsl.Type.TInt;
		case 2:
			return hxsl.Type.TBool;
		case 3:
			return hxsl.Type.TFloat;
		case 4:
			return hxsl.Type.TString;
		case 5:
			let bits = this.input.readByte();
			let v = hxsl.Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl.Type.TVec(bits & 7,Type.createEnumIndex(hxsl.VecType,bits >> 3,null));
				hxsl.Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl.Type.TMat3;
		case 7:
			return hxsl.Type.TMat4;
		case 8:
			return hxsl.Type.TMat3x4;
		case 9:
			return hxsl.Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl.Type.TSampler2D;
		case 11:
			return hxsl.Type.TSampler2DArray;
		case 12:
			return hxsl.Type.TSamplerCube;
		case 13:
			let id = this.readVarInt();
			let t = this.types[id];
			if(t != null) {
				return t;
			}
			let f = $bind(this,this.readVar);
			let _g = [];
			let _g1 = 0;
			let _g2 = this.readVarInt();
			while(_g1 < _g2) {
				let i = _g1++;
				_g.push(f());
			}
			t = hxsl.Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl.Type.TFun(null);
		case 15:
			let t1 = this.readType();
			let v1 = this.readVar();
			return hxsl.Type.TArray(t1,v1 == null ? hxsl.SizeDecl.SConst(this.readVarInt()) : hxsl.SizeDecl.SVar(v1));
		case 16:
			let tag = this.input.readByte();
			let kind = hxsl.BufferKind.Uniform;
			if((tag & 128) == 0) {
				let fh = this.input;
				fh.set_position(fh.pos - 1);
			} else {
				kind = Type.createEnumIndex(hxsl.BufferKind,tag & 127,null);
			}
			let t2 = this.readType();
			let v2 = this.readVar();
			return hxsl.Type.TBuffer(t2,v2 == null ? hxsl.SizeDecl.SConst(this.readVarInt()) : hxsl.SizeDecl.SVar(v2),kind);
		case 17:
			return hxsl.Type.TChannel(this.input.readByte());
		case 18:
			return hxsl.Type.TMat2;
		default:
			throw haxe.Exception.thrown("assert");
		}
	}
	writeString(s) {
		let bytes = haxe.io.Bytes.ofString(s);
		this.writeVarInt(bytes.length);
		this.out.add(bytes);
	}
	readString() {
		let len = this.readVarInt();
		let s = this.input.read(len).getString(0,len);
		return s;
	}
	writeVar(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		this.writeID(v.id);
		if(this.varMap.h.hasOwnProperty(v.id)) {
			return;
		}
		this.varMap.h[v.id] = v;
		this.writeString(v.name);
		this.writeType(v.type);
		this.out.addByte(v.kind._hx_index);
		this.writeVar(v.parent);
		if(v.qualifiers == null) {
			this.out.addByte(0);
		} else {
			this.out.addByte(v.qualifiers.length);
			let _g = 0;
			let _g1 = v.qualifiers;
			while(_g < _g1.length) {
				let q = _g1[_g];
				++_g;
				this.out.addByte(q._hx_index);
				switch(q._hx_index) {
				case 0:
					let max = q.max;
					this.out.addInt32(max == null ? 0 : max);
					break;
				case 4:
					let n = q.n;
					this.writeString(n);
					break;
				case 6:
					let p = q.p;
					this.out.addByte(p._hx_index);
					break;
				case 7:
					let min = q.min;
					let max1 = q.max;
					this.out.addDouble(min);
					this.out.addDouble(max1);
					break;
				case 1:case 2:case 3:case 5:case 8:
					break;
				case 9:
					let v = q.v;
					this.out.addInt32(v);
					break;
				case 10:
					let s = q.s;
					this.writeString(s);
					break;
				case 11:
					let s1 = q.source;
					this.writeString(s1);
					break;
				case 12:
					let s2 = q.name;
					this.writeString(s2);
					break;
				}
			}
		}
	}
	writeFun(f) {
		this.out.addByte(f.kind._hx_index);
		this.writeVar(f.ref);
		let arr = f.args;
		let f1 = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		let _g = 0;
		while(_g < arr.length) {
			let v = arr[_g];
			++_g;
			f1(v);
		}
		this.writeType(f.ret);
		this.writeExpr(f.expr);
	}
	writeConst(c) {
		this.out.addByte(c._hx_index);
		switch(c._hx_index) {
		case 0:
			break;
		case 1:
			let b = c.b;
			this.out.addByte(b ? 1 : 0);
			break;
		case 2:
			let v = c.v;
			this.out.addInt32(v);
			break;
		case 3:
			let v1 = c.v;
			this.out.addDouble(v1);
			break;
		case 4:
			let v2 = c.v;
			this.writeString(v2);
			break;
		}
	}
	writeExpr(e) {
		if(e == null) {
			this.out.addByte(0);
			return;
		}
		this.out.addByte(e.e._hx_index + 1);
		let _gthis = this;
		let _g = e.e;
		switch(_g._hx_index) {
		case 0:
			let c = _g.c;
			this.writeConst(c);
			break;
		case 1:
			let v = _g.v;
			this.writeVar(v);
			break;
		case 2:
			let g = _g.g;
			this.out.addByte(g._hx_index);
			break;
		case 3:
			let e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 4:
			let el = _g.el;
			let f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			let _g1 = 0;
			while(_g1 < el.length) {
				let v = el[_g1];
				++_g1;
				f(v);
			}
			break;
		case 5:
			let op = _g.op;
			let e11 = _g.e1;
			let e2 = _g.e2;
			if(op._hx_index == 20) {
				let op1 = op.op;
				this.out.addByte(op1._hx_index | 128);
			} else {
				this.out.addByte(op._hx_index);
			}
			this.writeExpr(e11);
			this.writeExpr(e2);
			break;
		case 6:
			let op1 = _g.op;
			let e12 = _g.e1;
			this.out.addByte(op1._hx_index);
			this.writeExpr(e12);
			break;
		case 7:
			let v1 = _g.v;
			let init = _g.init;
			this.writeVar(v1);
			this.writeExpr(init);
			break;
		case 8:
			let e3 = _g.e;
			let args = _g.args;
			this.writeExpr(e3);
			let f1 = $bind(this,this.writeExpr);
			this.writeVarInt(args.length);
			let _g2 = 0;
			while(_g2 < args.length) {
				let v = args[_g2];
				++_g2;
				f1(v);
			}
			break;
		case 9:
			let e4 = _g.e;
			let regs = _g.regs;
			this.writeExpr(e4);
			if(regs.length == 0) {
				throw haxe.Exception.thrown("assert");
			}
			let bits = regs.length - 1;
			let k = 2;
			let _g3 = 0;
			while(_g3 < regs.length) {
				let r = regs[_g3];
				++_g3;
				bits |= r._hx_index << k;
				k += 2;
			}
			this.out.addByte(bits & 255);
			this.out.addByte(bits >> 8);
			break;
		case 10:
			let econd = _g.econd;
			let eif = _g.eif;
			let eelse = _g.eelse;
			this.writeExpr(econd);
			this.writeExpr(eif);
			this.writeExpr(eelse);
			break;
		case 11:
			break;
		case 12:
			let e5 = _g.e;
			this.writeExpr(e5);
			break;
		case 13:
			let v2 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			this.writeVar(v2);
			this.writeExpr(it);
			this.writeExpr(loop);
			break;
		case 14:
			break;
		case 15:
			break;
		case 16:
			let e6 = _g.e;
			let index = _g.index;
			this.writeExpr(e6);
			this.writeExpr(index);
			break;
		case 17:
			let el1 = _g.el;
			let f2 = $bind(this,this.writeExpr);
			this.writeVarInt(el1.length);
			let _g4 = 0;
			while(_g4 < el1.length) {
				let v = el1[_g4];
				++_g4;
				f2(v);
			}
			break;
		case 18:
			let e7 = _g.e;
			let cases = _g.cases;
			let def = _g.def;
			this.writeExpr(e7);
			this.writeVarInt(cases.length);
			let _g5 = 0;
			while(_g5 < cases.length) {
				let v = cases[_g5];
				++_g5;
				let arr = v.values;
				let f = $bind(_gthis,_gthis.writeExpr);
				_gthis.writeVarInt(arr.length);
				let _g = 0;
				while(_g < arr.length) {
					let v = arr[_g];
					++_g;
					f(v);
				}
				_gthis.writeExpr(v.expr);
			}
			this.writeExpr(def);
			break;
		case 19:
			let e8 = _g.e;
			let loop1 = _g.loop;
			let normalWhile = _g.normalWhile;
			this.writeExpr(e8);
			this.writeExpr(loop1);
			this.out.addByte(normalWhile ? 1 : 0);
			break;
		case 20:
			let m = _g.m;
			let args1 = _g.args;
			let e9 = _g.e;
			this.writeString(m);
			let f3 = $bind(this,this.writeConst);
			this.writeVarInt(args1.length);
			let _g6 = 0;
			while(_g6 < args1.length) {
				let v = args1[_g6];
				++_g6;
				f3(v);
			}
			this.writeExpr(e9);
			break;
		}
		this.writeType(e.t);
	}
	readConst() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl.Const.CNull;
		case 1:
			return hxsl.Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl.Const.CInt(this.input.readInt32());
		case 3:
			return hxsl.Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl.Const.CString(this.readString());
		default:
			throw haxe.Exception.thrown("assert");
		}
	}
	readExpr() {
		let k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		let _gthis = this;
		let e;
		switch(k) {
		case 0:
			e = hxsl.TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl.TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl.TExprDef.TGlobal(hxsl.Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl.TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			let f = $bind(this,this.readExpr);
			let _g = [];
			let _g1 = 0;
			let _g2 = this.readVarInt();
			while(_g1 < _g2) {
				let i = _g1++;
				_g.push(f());
			}
			e = hxsl.TExprDef.TBlock(_g);
			break;
		case 5:
			let op = this.input.readByte();
			e = hxsl.TExprDef.TBinop(op >= 128 ? haxe.macro.Binop.OpAssignOp(hxsl.Serializer.BOPS[op & 127]) : hxsl.Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl.TExprDef.TUnop(hxsl.Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl.TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			let e1 = this.readExpr();
			let f1 = $bind(this,this.readExpr);
			let _g3 = [];
			let _g4 = 0;
			let _g5 = this.readVarInt();
			while(_g4 < _g5) {
				let i = _g4++;
				_g3.push(f1());
			}
			e = hxsl.TExprDef.TCall(e1,_g3);
			break;
		case 9:
			let e2 = this.readExpr();
			let bits = this.input.readUInt16();
			let swiz = hxsl.Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				let _g = [];
				let _g1 = 0;
				let _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					let i = _g1++;
					_g.push(hxsl.Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl.Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl.TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl.TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl.TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl.TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl.TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl.TExprDef.TContinue;
			break;
		case 15:
			e = hxsl.TExprDef.TBreak;
			break;
		case 16:
			e = hxsl.TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			let f2 = $bind(this,this.readExpr);
			let _g6 = [];
			let _g7 = 0;
			let _g8 = this.readVarInt();
			while(_g7 < _g8) {
				let i = _g7++;
				_g6.push(f2());
			}
			e = hxsl.TExprDef.TArrayDecl(_g6);
			break;
		case 18:
			let e3 = this.readExpr();
			let _g9 = [];
			let _g10 = 0;
			let _g11 = this.readVarInt();
			while(_g10 < _g11) {
				let i = _g10++;
				let f = $bind(_gthis,_gthis.readExpr);
				let _g = [];
				let _g1 = 0;
				let _g2 = _gthis.readVarInt();
				while(_g1 < _g2) {
					let i = _g1++;
					_g.push(f());
				}
				_g9.push({ values : _g, expr : _gthis.readExpr()});
			}
			e = hxsl.TExprDef.TSwitch(e3,_g9,this.readExpr());
			break;
		case 19:
			e = hxsl.TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			let e4 = this.readString();
			let f3 = $bind(this,this.readConst);
			let _g12 = [];
			let _g13 = 0;
			let _g14 = this.readVarInt();
			while(_g13 < _g14) {
				let i = _g13++;
				_g12.push(f3());
			}
			e = hxsl.TExprDef.TMeta(e4,_g12,this.readExpr());
			break;
		default:
			throw haxe.Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	readVar() {
		let id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		let v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl.Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl.Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		let nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			let _g = 0;
			let _g1 = nq;
			while(_g < _g1) {
				let i = _g++;
				let qid = this.input.readByte();
				let q;
				switch(qid) {
				case 0:
					let n = this.input.readInt32();
					q = hxsl.VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl.VarQualifier.Private;
					break;
				case 2:
					q = hxsl.VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl.VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl.VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl.VarQualifier.Shared;
					break;
				case 6:
					q = hxsl.VarQualifier.Precision(hxsl.Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl.VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl.VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl.VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl.VarQualifier.Doc(this.readString());
					break;
				case 11:
					q = hxsl.VarQualifier.Borrow(this.readString());
					break;
				case 12:
					q = hxsl.VarQualifier.Sampler(this.readString());
					break;
				default:
					throw haxe.Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	readFun() {
		let tmp = hxsl.Serializer.FKIND[this.input.readByte()];
		let tmp1 = this.readVar();
		let f = $bind(this,this.readVar);
		let _g = [];
		let _g1 = 0;
		let _g2 = this.readVarInt();
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	unserialize(data) {
		this.input = new haxe.io.BytesInput(haxe.crypto.Base64.decode(data,false));
		if(this.input.readByte() != (hxsl.Serializer.SIGN & 255) || this.input.readByte() != (hxsl.Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl.Serializer.SIGN >> 16 & 255)) {
			throw haxe.Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe.ds.IntMap();
		this.types = [];
		let tmp = this.readString();
		let f = $bind(this,this.readVar);
		let _g = [];
		let _g1 = 0;
		let _g2 = this.readVarInt();
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(f());
		}
		let tmp1 = _g;
		let f1 = $bind(this,this.readFun);
		let _g3 = [];
		let _g4 = 0;
		let _g5 = this.readVarInt();
		while(_g4 < _g5) {
			let i = _g4++;
			_g3.push(f1());
		}
		return { name : tmp, vars : tmp1, funs : _g3};
	}
	serialize(s) {
		this.varMap = new haxe.ds.IntMap();
		this.idMap = new haxe.ds.IntMap();
		this.typeIdMap = new haxe.ds.EnumValueMap();
		this.out = new haxe.io.BytesBuffer();
		this.out.addByte(hxsl.Serializer.SIGN & 255);
		this.out.addByte(hxsl.Serializer.SIGN >> 8 & 255);
		this.out.addByte(hxsl.Serializer.SIGN >> 16 & 255);
		this.writeString(s.name);
		let arr = s.vars;
		let f = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		let _g = 0;
		while(_g < arr.length) {
			let v = arr[_g];
			++_g;
			f(v);
		}
		let arr1 = s.funs;
		let f1 = $bind(this,this.writeFun);
		this.writeVarInt(arr1.length);
		let _g1 = 0;
		while(_g1 < arr1.length) {
			let v = arr1[_g1];
			++_g1;
			f1(v);
		}
		return haxe.crypto.Base64.encode(this.out.getBytes(),false);
	}
	static run(s) {
		return new hxsl.Serializer().serialize(s);
	}
}
$hxClasses["hxsl.Serializer"] = hxsl.Serializer;
hxsl.Serializer.__name__ = "hxsl.Serializer";
Object.assign(hxsl.Serializer.prototype, {
	__class__: hxsl.Serializer
});
hxsl.ShaderList = class hxsl_ShaderList {
	constructor(s,n) {
		this.s = s;
		this.next = n;
	}
	clone() {
		return new hxsl.ShaderList(this.s.clone(),this.next == null ? null : this.next.clone());
	}
	iterator() {
		return new hxsl._ShaderList.ShaderIterator(this,null);
	}
	iterateTo(s) {
		return new hxsl._ShaderList.ShaderIterator(this,s);
	}
	static addSort(s,shaders) {
		let prev = null;
		let hd = shaders;
		while(hd != null && hd.s.priority < s.priority) {
			prev = hd;
			hd = hd.next;
		}
		if(prev == null) {
			let l = new hxsl.ShaderList(s,shaders);
			hxsl.ShaderList.checkSize(l);
			return l;
		}
		prev.next = new hxsl.ShaderList(s,prev.next);
		hxsl.ShaderList.checkSize(shaders);
		return shaders;
	}
	static checkSize(list) {
		if(hxsl.ShaderList.MAX_LIST_SIZE <= 0) {
			return;
		}
		let hd = list;
		let count = 0;
		while(hd != null) {
			if(!hxsl.ShaderList.ALLOW_DUPLICATES && hd.next != null && hd.next.s == hd.s) {
				throw haxe.Exception.thrown("Duplicate shader " + Std.string(hd.s));
			}
			++count;
			hd = hd.next;
		}
		if(count > hxsl.ShaderList.MAX_LIST_SIZE) {
			throw haxe.Exception.thrown("Too many shaders");
		}
	}
}
$hxClasses["hxsl.ShaderList"] = hxsl.ShaderList;
hxsl.ShaderList.__name__ = "hxsl.ShaderList";
Object.assign(hxsl.ShaderList.prototype, {
	__class__: hxsl.ShaderList
});
hxsl._ShaderList = {};
hxsl._ShaderList.ShaderIterator = class hxsl__$ShaderList_ShaderIterator {
	constructor(l,last) {
		this.l = l;
		this.last = last;
	}
	hasNext() {
		return this.l != this.last;
	}
	next() {
		let s = this.l.s;
		this.l = this.l.next;
		return s;
	}
}
$hxClasses["hxsl._ShaderList.ShaderIterator"] = hxsl._ShaderList.ShaderIterator;
hxsl._ShaderList.ShaderIterator.__name__ = "hxsl._ShaderList.ShaderIterator";
Object.assign(hxsl._ShaderList.ShaderIterator.prototype, {
	__class__: hxsl._ShaderList.ShaderIterator
});
hxsl.ShaderInstance = class hxsl_ShaderInstance {
	constructor(shader) {
		this.id = ++hxsl.ShaderInstance.UID;
		this.shader = shader;
		this.params = new haxe.ds.IntMap();
	}
}
$hxClasses["hxsl.ShaderInstance"] = hxsl.ShaderInstance;
hxsl.ShaderInstance.__name__ = "hxsl.ShaderInstance";
Object.assign(hxsl.ShaderInstance.prototype, {
	__class__: hxsl.ShaderInstance
});
hxsl.ShaderGlobal = class hxsl_ShaderGlobal {
	constructor(v,gid) {
		this.v = v;
		this.globalId = gid;
	}
}
$hxClasses["hxsl.ShaderGlobal"] = hxsl.ShaderGlobal;
hxsl.ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
Object.assign(hxsl.ShaderGlobal.prototype, {
	__class__: hxsl.ShaderGlobal
});
hxsl.ShaderConst = class hxsl_ShaderConst {
	constructor(v,pos,bits) {
		this.v = v;
		this.pos = pos;
		this.bits = bits;
	}
}
$hxClasses["hxsl.ShaderConst"] = hxsl.ShaderConst;
hxsl.ShaderConst.__name__ = "hxsl.ShaderConst";
Object.assign(hxsl.ShaderConst.prototype, {
	__class__: hxsl.ShaderConst
});
hxsl.SharedShader = class hxsl_SharedShader {
	constructor(src) {
		this.instanceCache = new haxe.ds.IntMap();
		this.consts = null;
		this.globals = [];
		if(src == "") {
			return;
		}
		this.data = new hxsl.Serializer().unserialize(src);
		let _g = 0;
		let _g1 = this.data.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.initVarId(v);
		}
		this.data = hxsl.SharedShader.compactMem(this.data);
		this.initialize();
	}
	initialize() {
		let _g = 0;
		let _g1 = this.data.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	getInstance(constBits) {
		let i = this.instanceCache.h[constBits];
		if(i == null) {
			return this.makeInstance(constBits);
		} else {
			return i;
		}
	}
	makeInstance(constBits) {
		let $eval = new hxsl.Eval();
		let c = this.consts;
		while(c != null) {
			let c1 = c.v;
			let _g = c.v.type;
			let tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl.Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl.Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				let _g1 = _g.size;
				tmp = hxsl.Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl.SharedShader.UNROLL_LOOPS;
		let edata = $eval.eval(this.data);
		edata = hxsl.SharedShader.compactMem(edata);
		let i = new hxsl.ShaderInstance(edata);
		this.paramsCount = 0;
		let _g = 0;
		let _g1 = this.data.vars;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	addSelfParam(i,v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				this.addSelfParam(i,v);
			}
		} else if(v.kind == hxsl.VarKind.Param) {
			i.params.h[v.id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	addParam($eval,i,v) {
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				this.addParam($eval,i,v);
			}
		} else if(v.kind == hxsl.VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	initVarId(v) {
		v.id = hxsl.Tools.allocVarId();
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let v = vl[_g1];
				++_g1;
				this.initVarId(v);
			}
		}
	}
	browseVar(v,path) {
		if(path == null) {
			path = hxsl.Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		let _g = v.type;
		if(_g._hx_index == 13) {
			let vl = _g.vl;
			let _g1 = 0;
			while(_g1 < vl.length) {
				let vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			let globalId = 0;
			if(v.kind == hxsl.VarKind.Global) {
				globalId = hxsl.Globals.allocID(path);
				this.globals.push(new hxsl.ShaderGlobal(v,globalId));
			}
			if(!hxsl.Tools.isConst(v)) {
				return;
			}
			let bits = hxsl.Tools.getConstBits(v);
			if(bits > 0) {
				let pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				let c = new hxsl.ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	static compactMem(mem) {
		return mem;
	}
}
$hxClasses["hxsl.SharedShader"] = hxsl.SharedShader;
hxsl.SharedShader.__name__ = "hxsl.SharedShader";
Object.assign(hxsl.SharedShader.prototype, {
	__class__: hxsl.SharedShader
});
hxsl._Splitter = {};
hxsl._Splitter.VarProps = class hxsl__$Splitter_VarProps {
	constructor(v) {
		this.v = v;
		this.read = 0;
		this.write = 0;
	}
}
$hxClasses["hxsl._Splitter.VarProps"] = hxsl._Splitter.VarProps;
hxsl._Splitter.VarProps.__name__ = "hxsl._Splitter.VarProps";
Object.assign(hxsl._Splitter.VarProps.prototype, {
	__class__: hxsl._Splitter.VarProps
});
hxsl.Splitter = class hxsl_Splitter {
	constructor() {
	}
	split(s) {
		let vfun = null;
		let vvars = new haxe.ds.IntMap();
		let ffun = null;
		let fvars = new haxe.ds.IntMap();
		let isCompute = false;
		this.varNames = new haxe.ds.StringMap();
		this.varMap = new haxe.ds.ObjectMap();
		let _g = 0;
		let _g1 = s.funs;
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			case 0:case 4:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				if(f.kind == hxsl.FunctionKind.Main) {
					isCompute = true;
				}
				break;
			default:
				throw haxe.Exception.thrown("assert");
			}
		}
		let vafterMap = [];
		let _gthis = this;
		let _g2 = 0;
		let _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			let inf = _g3[_g2];
			++_g2;
			let v = inf.v;
			if(inf.local) {
				continue;
			}
			switch(v.kind._hx_index) {
			case 3:case 4:
				let fv = fvars.h[inf.origin.id];
				v.kind = fv != null && fv.read > 0 ? hxsl.VarKind.Var : hxsl.VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					let nv = { id : hxsl.Tools.allocVarId(), name : v.name, kind : hxsl.VarKind.Local, type : v.type};
					this.uniqueName(nv);
					this.varMap.set(inf.origin,nv);
					let ninf = new hxsl._Splitter.VarProps(nv);
					ninf.read++;
					vvars.h[nv.id] = ninf;
					let p = vfun.expr.p;
					let e = { e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssign,{ e : hxsl.TExprDef.TVar(v), t : nv.type, p : p},{ e : hxsl.TExprDef.TVar(nv), t : v.type, p : p}), t : nv.type, p : p};
					vafterMap.push(function() {
						_gthis.addExpr(vfun,e);
					});
					if(v.kind == hxsl.VarKind.Var) {
						vafterMap.push(function() {
							_gthis.varMap.set(inf.origin,v);
						});
					}
				}
				break;
			default:
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		let _g4 = 0;
		while(_g4 < vafterMap.length) {
			let f = vafterMap[_g4];
			++_g4;
			f();
		}
		let finits = [];
		let inf = fvars.iterator();
		while(inf.hasNext()) {
			let inf1 = inf.next();
			let v = inf1.v;
			switch(v.kind._hx_index) {
			case 1:
				let nv = { id : hxsl.Tools.allocVarId(), name : v.name, kind : hxsl.VarKind.Var, type : v.type};
				this.uniqueName(nv);
				let i = vvars.h[inf1.origin.id];
				if(i == null) {
					i = new hxsl._Splitter.VarProps(v);
					vvars.h[inf1.origin.id] = i;
				}
				i.read++;
				this.varMap.set(inf1.origin,nv);
				let ninf = new hxsl._Splitter.VarProps(nv);
				ninf.origin = inf1.origin;
				fvars.h[inf1.origin.id] = ninf;
				vvars.h[nv.id] = ninf;
				this.addExpr(vfun,{ e : hxsl.TExprDef.TBinop(haxe.macro.Binop.OpAssign,{ e : hxsl.TExprDef.TVar(nv), t : v.type, p : vfun.expr.p},{ e : hxsl.TExprDef.TVar(v), t : v.type, p : vfun.expr.p}), t : v.type, p : vfun.expr.p});
				break;
			case 3:
				if(inf1.write > 0) {
					let nv = { id : hxsl.Tools.allocVarId(), name : v.name, kind : hxsl.VarKind.Local, type : v.type};
					this.uniqueName(nv);
					finits.push({ e : hxsl.TExprDef.TVarDecl(nv,{ e : hxsl.TExprDef.TVar(v), t : v.type, p : ffun.expr.p}), t : hxsl.Type.TVoid, p : ffun.expr.p});
					this.varMap.set(inf1.origin,nv);
				}
				break;
			default:
			}
		}
		let v = vvars.iterator();
		while(v.hasNext()) {
			let v1 = v.next();
			this.checkVar(v1,true,vvars,vfun.expr.p);
		}
		let v1 = fvars.iterator();
		while(v1.hasNext()) {
			let v = v1.next();
			this.checkVar(v,false,vvars,ffun.expr.p);
		}
		if(ffun != null) {
			ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
			let _g = ffun.expr.e;
			if(_g._hx_index == 4) {
				let el = _g.el;
				let _g1 = 0;
				while(_g1 < finits.length) {
					let e = finits[_g1];
					++_g1;
					el.unshift(e);
				}
			} else {
				finits.push(ffun.expr);
				ffun.expr = { e : hxsl.TExprDef.TBlock(finits), t : hxsl.Type.TVoid, p : ffun.expr.p};
			}
		}
		let _g5 = [];
		let v2 = vvars.iterator();
		while(v2.hasNext()) {
			let v = v2.next();
			if(!v.local) {
				_g5.push(v);
			}
		}
		let vvars1 = _g5;
		let _g6 = [];
		let v3 = fvars.iterator();
		while(v3.hasNext()) {
			let v = v3.next();
			if(!v.local) {
				_g6.push(v);
			}
		}
		let fvars1 = _g6;
		vvars1.sort(function(v1,v2) {
			return (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
		});
		fvars1.sort(function(v1,v2) {
			return (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
		});
		if(isCompute) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < vvars1.length) {
				let v = vvars1[_g1];
				++_g1;
				_g.push(v.v);
			}
			return [{ name : "main", vars : _g, funs : [vfun]}];
		} else {
			let _g = [];
			let _g1 = 0;
			while(_g1 < vvars1.length) {
				let v = vvars1[_g1];
				++_g1;
				_g.push(v.v);
			}
			let tmp = { name : "vertex", vars : _g, funs : [vfun]};
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < fvars1.length) {
				let v = fvars1[_g3];
				++_g3;
				_g2.push(v.v);
			}
			return [tmp,{ name : "fragment", vars : _g2, funs : [ffun]}];
		}
	}
	addExpr(f,e) {
		let _g = f.expr.e;
		if(_g._hx_index == 4) {
			let el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl.TExprDef.TBlock([f.expr,e]), t : hxsl.Type.TVoid, p : f.expr.p};
		}
	}
	checkVar(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				let i = vvars.h[v.origin.id];
				if(i != null && i.v.kind == hxsl.VarKind.Input) {
					return;
				}
				if(i == null || i.write == 0) {
					throw haxe.Exception.thrown(new hxsl.Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe.Exception.thrown(new hxsl.Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	mapVars(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			let v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl.TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			let v1 = _g.v;
			let init = _g.init;
			let v21 = this.varMap.h[v1.__id__];
			if(v21 == null) {
				return hxsl.Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl.TExprDef.TVarDecl(v21,init == null ? null : this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			let v3 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			let v22 = this.varMap.h[v3.__id__];
			if(v22 == null) {
				return hxsl.Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl.TExprDef.TFor(v22,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl.Tools.map(e,$bind(this,this.mapVars));
		}
	}
	get(v) {
		let i = this.vars.h[v.id];
		if(i == null) {
			let nv = this.varMap.h[v.__id__];
			if(nv == null) {
				if(v.kind == hxsl.VarKind.Global || v.kind == hxsl.VarKind.Output || v.kind == hxsl.VarKind.Input) {
					nv = v;
				} else {
					nv = { id : hxsl.Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.uniqueName(nv);
				}
				this.varMap.set(v,nv);
			}
			i = new hxsl._Splitter.VarProps(nv);
			i.origin = v;
			this.vars.h[v.id] = i;
		}
		return i;
	}
	uniqueName(v) {
		if(v.kind == hxsl.VarKind.Global || v.kind == hxsl.VarKind.Output || v.kind == hxsl.VarKind.Input) {
			return;
		}
		let n = this.varNames.h[v.name];
		if(n != null && n != v) {
			let prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			let k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	checkExpr(e) {
		let _g = e.e;
		switch(_g._hx_index) {
		case 1:
			let v = _g.v;
			let inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			let _g1 = _g.op;
			let _g2 = _g.e1;
			let _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				let _g4 = _g2.e;
				let _g5 = _g2.p;
				let _g6 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					let v1 = _g4.v;
					let e1 = _g3;
					let inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					let _g7 = _g4.e;
					let _g8 = _g4.regs;
					let _g9 = _g7.e;
					let _g10 = _g7.p;
					let _g11 = _g7.t;
					if(_g9._hx_index == 1) {
						let v = _g9.v;
						let e = _g3;
						let inf = this.get(v);
						inf.write++;
						this.checkExpr(e);
					} else {
						hxsl.Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl.Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				let _g12 = _g1.op;
				let _g13 = _g2.e;
				let _g14 = _g2.p;
				let _g15 = _g2.t;
				switch(_g13._hx_index) {
				case 1:
					let v2 = _g13.v;
					let e2 = _g3;
					let inf2 = this.get(v2);
					if(inf2.write == 0) {
						inf2.requireInit = true;
					}
					inf2.read++;
					inf2.write++;
					this.checkExpr(e2);
					break;
				case 9:
					let _g16 = _g13.e;
					let _g17 = _g13.regs;
					let _g18 = _g16.e;
					let _g19 = _g16.p;
					let _g20 = _g16.t;
					if(_g18._hx_index == 1) {
						let v = _g18.v;
						let e = _g3;
						let inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e);
					} else {
						hxsl.Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl.Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl.Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			let v3 = _g.v;
			let init = _g.init;
			let inf3 = this.get(v3);
			inf3.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf3.write++;
			}
			break;
		case 13:
			let v4 = _g.v;
			let it = _g.it;
			let loop = _g.loop;
			this.checkExpr(it);
			let inf4 = this.get(v4);
			inf4.local = true;
			inf4.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl.Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
}
$hxClasses["hxsl.Splitter"] = hxsl.Splitter;
hxsl.Splitter.__name__ = "hxsl.Splitter";
Object.assign(hxsl.Splitter.prototype, {
	__class__: hxsl.Splitter
});
hxsl.ChannelTools = class hxsl_ChannelTools {
	static isPackedFormat(c) {
		return c.format == h3d.mat.Texture.nativeFormat;
	}
}
$hxClasses["hxsl.ChannelTools"] = hxsl.ChannelTools;
hxsl.ChannelTools.__name__ = "hxsl.ChannelTools";
js.html = {};
js.html._CanvasElement = {};
js.html._CanvasElement.CanvasUtil = class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		let name = "webgl";
		let ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
		let name1 = "experimental-webgl";
		let ctx1 = canvas.getContext(name1,attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js.html._CanvasElement.CanvasUtil;
js.html._CanvasElement.CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
Math.__name__ = "Math";
function $getIterator(o) { if( o instanceof Array ) return new haxe.iterators.ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
	String.__name__ = "String";
	$hxClasses["Array"] = Array;
	Array.__name__ = "Array";
	Date.prototype.__class__ = $hxClasses["Date"] = Date;
	Date.__name__ = "Date";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
haxe.MainLoop.add(hxd.System.updateCursor,-1);
{
	var hx__registerFont;
	hx__registerFont = function(name,data) {
		let s = window.document.createElement("style");
		s.type = "text/css";
		s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
		window.document.getElementsByTagName("head")[0].appendChild(s);
		let div = window.document.createElement("div");
		div.style.fontFamily = name;
		div.style.opacity = 0;
		div.style.width = "1px";
		div.style.height = "1px";
		div.style.position = "fixed";
		div.style.bottom = "0px";
		div.style.right = "0px";
		div.innerHTML = ".";
		div.className = "hx__loadFont";
		window.document.body.appendChild(div);
	};
}
js.Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
format.gif.Tools.LN2 = Math.log(2);
format.mp3.MPEG.V1 = 3;
format.mp3.MPEG.V2 = 2;
format.mp3.MPEG.V25 = 0;
format.mp3.MPEG.Reserved = 1;
format.mp3.MPEG.V1_Bitrates = [[format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_40,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_320,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_320,format.mp3.Bitrate.BR_384,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_288,format.mp3.Bitrate.BR_320,format.mp3.Bitrate.BR_352,format.mp3.Bitrate.BR_384,format.mp3.Bitrate.BR_416,format.mp3.Bitrate.BR_448,format.mp3.Bitrate.BR_Bad]];
format.mp3.MPEG.V2_Bitrates = [[format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_8,format.mp3.Bitrate.BR_16,format.mp3.Bitrate.BR_24,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_40,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_144,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_8,format.mp3.Bitrate.BR_16,format.mp3.Bitrate.BR_24,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_40,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_144,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_Bad],[format.mp3.Bitrate.BR_Free,format.mp3.Bitrate.BR_32,format.mp3.Bitrate.BR_48,format.mp3.Bitrate.BR_56,format.mp3.Bitrate.BR_64,format.mp3.Bitrate.BR_80,format.mp3.Bitrate.BR_96,format.mp3.Bitrate.BR_112,format.mp3.Bitrate.BR_128,format.mp3.Bitrate.BR_144,format.mp3.Bitrate.BR_160,format.mp3.Bitrate.BR_176,format.mp3.Bitrate.BR_192,format.mp3.Bitrate.BR_224,format.mp3.Bitrate.BR_256,format.mp3.Bitrate.BR_Bad]];
format.mp3.MPEG.SamplingRates = [[format.mp3.SamplingRate.SR_11025,format.mp3.SamplingRate.SR_12000,format.mp3.SamplingRate.SR_8000,format.mp3.SamplingRate.SR_Bad],[format.mp3.SamplingRate.SR_Bad,format.mp3.SamplingRate.SR_Bad,format.mp3.SamplingRate.SR_Bad,format.mp3.SamplingRate.SR_Bad],[format.mp3.SamplingRate.SR_22050,format.mp3.SamplingRate.SR_24000,format.mp3.SamplingRate.SR_12000,format.mp3.SamplingRate.SR_Bad],[format.mp3.SamplingRate.SR_44100,format.mp3.SamplingRate.SR_48000,format.mp3.SamplingRate.SR_32000,format.mp3.SamplingRate.SR_Bad]];
format.mp3.CLayer.LReserved = 0;
format.mp3.CLayer.LLayer3 = 1;
format.mp3.CLayer.LLayer2 = 2;
format.mp3.CLayer.LLayer1 = 3;
format.mp3.CChannelMode.CStereo = 0;
format.mp3.CChannelMode.CJointStereo = 1;
format.mp3.CChannelMode.CDualChannel = 2;
format.mp3.CChannelMode.CMono = 3;
format.mp3.CEmphasis.ENone = 0;
format.mp3.CEmphasis.EMs50_15 = 1;
format.mp3.CEmphasis.EReserved = 2;
format.mp3.CEmphasis.ECCIT_J17 = 3;
h2d.Object._hx_skip_constructor = false;
h2d.Object.tmpPoint = new h2d.col.PointImpl(0.,0.);
h3d.impl.RenderContext._hx_skip_constructor = false;
h3d.impl.RenderContext.STRICT = true;
h2d.RenderContext.BUFFERING = false;
h3d.prim.Primitive._hx_skip_constructor = false;
h2d.col.Matrix.tmp = new h2d.col.Matrix();
h2d.filter.Filter.defaultUseScreenResolution = false;
h3d.Buffer.GUID = 0;
h3d.Engine.SOFTWARE_DRIVER = false;
h3d.Engine.ANTIALIASING = 0;
h3d.MatrixImpl.tmp = new h3d.MatrixImpl();
h3d.MatrixImpl.lumR = 0.212671;
h3d.MatrixImpl.lumG = 0.71516;
h3d.MatrixImpl.lumB = 0.072169;
h3d.MatrixImpl.SQ13 = 0.57735026918962576450914878050196;
h3d.anim.AnimatedObject._hx_skip_constructor = false;
h3d.anim.Animation.EPSILON = 0.000001;
h3d.col.ObjectCollider.TMP_RAY = new h3d.col.Ray();
h3d.col.ObjectCollider.TMP_MAT = new h3d.MatrixImpl();
h3d.scene.Object._hx_skip_constructor = false;
h3d.scene.Object.ROT2RAD = -0.017453292519943295769236907684886;
h3d.scene.Object.tmpMat = new h3d.MatrixImpl();
h3d.impl.Driver._hx_skip_constructor = false;
h3d.impl.GlDriver.UID = 0;
h3d.impl.GlDriver.ALLOW_WEBGL2 = true;
h3d.impl.GlDriver.BLACK = (function($this) {
	var $r;
	let x = 0;
	let y = 0;
	let z = 0;
	let w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	$r = new h3d.Vector4Impl(x,y,z,w);
	return $r;
}(this));
h3d.impl.GlDriver.outOfMemoryCheck = false;
h3d.impl.GlDriver.STREAM_POS = 1;
h3d.impl.GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d.impl.GlDriver.TWRAP = [33071,10497];
h3d.impl.GlDriver.FACES = [0,1028,1029,1032];
h3d.impl.GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d.impl.GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d.impl.GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d.impl.GlDriver.OP = [32774,32778,32779,32775,32776];
h3d.impl.GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d.impl.GlDriver.CBUFFERS = (function($this) {
	var $r;
	let _g = [];
	{
		let _g1 = 0;
		while(_g1 < 32) {
			let i = _g1++;
			let _g2 = [];
			let _g3 = 0;
			let _g4 = i;
			while(_g3 < _g4) {
				let k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d.impl.MemoryManager.MAX_MEMORY = 4294967296.;
h3d.impl.MemoryManager.SIZE = 65532;
h3d.impl.MemoryManager.ALL_FLAGS = h3d.BufferFlag.__empty_constructs__.slice();
h3d.mat.BaseMaterial._hx_skip_constructor = false;
h3d.mat.Defaults.defaultKillAlphaThreshold = 0.5;
h3d.mat.Defaults.loadingTextureColor = -65281;
h3d.mat.MaterialSetup.current = new h3d.mat.MaterialSetup("Default");
h3d.mat.Pass.enableLights_bits = 1;
h3d.mat.Pass.enableLights_offset = 0;
h3d.mat.Pass.enableLights_mask = 1;
h3d.mat.Pass.dynamicParameters_bits = 1;
h3d.mat.Pass.dynamicParameters_offset = 1;
h3d.mat.Pass.dynamicParameters_mask = 2;
h3d.mat.Pass.isStatic_bits = 1;
h3d.mat.Pass.isStatic_offset = 2;
h3d.mat.Pass.isStatic_mask = 4;
h3d.mat.Pass.batchMode_bits = 1;
h3d.mat.Pass.batchMode_offset = 3;
h3d.mat.Pass.batchMode_mask = 8;
h3d.mat.Pass.culling_bits = 2;
h3d.mat.Pass.culling_offset = 0;
h3d.mat.Pass.culling_mask = 3;
h3d.mat.Pass.depthWrite_bits = 1;
h3d.mat.Pass.depthWrite_offset = 2;
h3d.mat.Pass.depthWrite_mask = 4;
h3d.mat.Pass.depthTest_bits = 3;
h3d.mat.Pass.depthTest_offset = 3;
h3d.mat.Pass.depthTest_mask = 56;
h3d.mat.Pass.blendSrc_bits = 4;
h3d.mat.Pass.blendSrc_offset = 6;
h3d.mat.Pass.blendSrc_mask = 960;
h3d.mat.Pass.blendDst_bits = 4;
h3d.mat.Pass.blendDst_offset = 10;
h3d.mat.Pass.blendDst_mask = 15360;
h3d.mat.Pass.blendAlphaSrc_bits = 4;
h3d.mat.Pass.blendAlphaSrc_offset = 14;
h3d.mat.Pass.blendAlphaSrc_mask = 245760;
h3d.mat.Pass.blendAlphaDst_bits = 4;
h3d.mat.Pass.blendAlphaDst_offset = 18;
h3d.mat.Pass.blendAlphaDst_mask = 3932160;
h3d.mat.Pass.blendOp_bits = 3;
h3d.mat.Pass.blendOp_offset = 22;
h3d.mat.Pass.blendOp_mask = 29360128;
h3d.mat.Pass.blendAlphaOp_bits = 3;
h3d.mat.Pass.blendAlphaOp_offset = 25;
h3d.mat.Pass.blendAlphaOp_mask = 234881024;
h3d.mat.Pass.wireframe_bits = 1;
h3d.mat.Pass.wireframe_offset = 28;
h3d.mat.Pass.wireframe_mask = 268435456;
h3d.mat.Pass.reserved_bits = 1;
h3d.mat.Pass.reserved_offset = 29;
h3d.mat.Pass.reserved_mask = 536870912;
h3d.mat.Stencil.readMask_bits = 8;
h3d.mat.Stencil.readMask_offset = 0;
h3d.mat.Stencil.readMask_mask = 255;
h3d.mat.Stencil.writeMask_bits = 8;
h3d.mat.Stencil.writeMask_offset = 8;
h3d.mat.Stencil.writeMask_mask = 65280;
h3d.mat.Stencil.reference_bits = 8;
h3d.mat.Stencil.reference_offset = 16;
h3d.mat.Stencil.reference_mask = 16711680;
h3d.mat.Stencil.frontTest_bits = 3;
h3d.mat.Stencil.frontTest_offset = 0;
h3d.mat.Stencil.frontTest_mask = 7;
h3d.mat.Stencil.frontPass_bits = 3;
h3d.mat.Stencil.frontPass_offset = 3;
h3d.mat.Stencil.frontPass_mask = 56;
h3d.mat.Stencil.frontSTfail_bits = 3;
h3d.mat.Stencil.frontSTfail_offset = 6;
h3d.mat.Stencil.frontSTfail_mask = 448;
h3d.mat.Stencil.frontDPfail_bits = 3;
h3d.mat.Stencil.frontDPfail_offset = 9;
h3d.mat.Stencil.frontDPfail_mask = 3584;
h3d.mat.Stencil.backTest_bits = 3;
h3d.mat.Stencil.backTest_offset = 12;
h3d.mat.Stencil.backTest_mask = 28672;
h3d.mat.Stencil.backPass_bits = 3;
h3d.mat.Stencil.backPass_offset = 15;
h3d.mat.Stencil.backPass_mask = 229376;
h3d.mat.Stencil.backSTfail_bits = 3;
h3d.mat.Stencil.backSTfail_offset = 18;
h3d.mat.Stencil.backSTfail_mask = 1835008;
h3d.mat.Stencil.backDPfail_bits = 3;
h3d.mat.Stencil.backDPfail_offset = 21;
h3d.mat.Stencil.backDPfail_mask = 14680064;
h3d.mat.Texture._hx_skip_constructor = false;
h3d.mat.Texture.UID = 0;
h3d.mat.Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d.mat.Texture.PREVENT_FORCED_DISPOSE = -1;
h3d.mat.Texture.nativeFormat = hxd.PixelFormat.RGBA;
h3d.mat.Texture.TRILINEAR_FILTERING_ENABLED = true;
h3d.mat.Texture.DEFAULT_WRAP = h3d.mat.Wrap.Clamp;
h3d.mat.Texture.checkerTextureKeys = new haxe.ds.IntMap();
h3d.mat.Texture.noiseTextureKeys = new haxe.ds.IntMap();
h3d.mat.Texture.genTextureKeys = new haxe.ds.StringMap();
h3d.pass.ScreenFx._hx_skip_constructor = false;
h3d.pass.Blur.__meta__ = { obj : { ignore : ["shader"]}};
hxsl.Shader._hx_skip_constructor = false;
h3d.shader.ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d.pass._Border.BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d.pass._Copy.ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d.pass._Copy.CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d.pass._CubeCopy.CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d.pass.Output._hx_skip_constructor = false;
h3d.scene.Mesh.tmpMat = new h3d.MatrixImpl();
h3d.scene.LightSystem._hx_skip_constructor = false;
h3d.scene.ObjectFlags.FPosChanged = 1;
h3d.scene.ObjectFlags.FVisible = 2;
h3d.scene.ObjectFlags.FCulled = 4;
h3d.scene.ObjectFlags.FFollowPositionOnly = 8;
h3d.scene.ObjectFlags.FLightCameraCenter = 16;
h3d.scene.ObjectFlags.FAllocated = 32;
h3d.scene.ObjectFlags.FAlwaysSyncAnimation = 64;
h3d.scene.ObjectFlags.FInheritCulled = 128;
h3d.scene.ObjectFlags.FModelRoot = 256;
h3d.scene.ObjectFlags.FIgnoreBounds = 512;
h3d.scene.ObjectFlags.FIgnoreCollide = 1024;
h3d.scene.ObjectFlags.FIgnoreParentTransform = 2048;
h3d.scene.ObjectFlags.FCullingColliderInherited = 4096;
h3d.scene.ObjectFlags.FFixedPosition = 8192;
h3d.scene.ObjectFlags.FFixedPositionSynced = 16384;
h3d.scene.ObjectFlags.FAlwaysSync = 32768;
h3d.scene.RenderContext.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d.scene.Renderer._hx_skip_constructor = false;
h3d.scene.Skin.TMP_MAT = new h3d.MatrixImpl();
h3d.shader.AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d.shader.Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA";
h3d.shader.BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d.shader.Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d.shader.ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d.shader.ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d.shader.ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgEAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADB2VuYWJsZWQCAgABAAAAAAAECGZyYWdtZW50DgYAAAEBBAAABQELAgMCBgQCAQUMCQMqDgIKBAYBCQMqDgIKAgEFDJIABQsBAwAAAAAAAPA/AwUMAgIHBQwFDJIABQsKBAYBAgEFDAICBwUMBQwMAAMFDAUMAAAA";
h3d.shader.DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EAEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFC1BDRl9TQU1QTEVTAQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvaggCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANCWRpclNoYWRvdwMEAAAOC3BvaXNzb25EaXNrDwUMBQIAAA8EcmFuZA4GAAAQCGZyYWdtZW50DgYAAAIDDwERAXYDBAAAAwUCCBICZHADBAAACQMdDgIJAyoOAQIRAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhIDAwEDUPwYc9Fd5UADAwMAAAEQAAAFAgsCAQIFAQsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBMJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgUCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBUIc2hhZG93VXYFCgQAAAkDOg4BCgIUBQsRAAUKBQoACBYEek1heAMEAAAJAzUOAQoCFAULCAADAwAIFwNyb3QDBAAABgEGAQkCDw4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIGARjb3NSAwQAAAkDAw4BAhcDAwAIGQRzaW5SAwQAAAkDAg4BAhcDAwAIGg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMmDgECBQEDAwAIGwhvZmZTY2FsZQUKBAAABgECEwUKAgYDBQoADhwBaQEEAAAGFQECAAAAAAECBQEPAQAABQQIHQZvZmZzZXQFCgQAAAYBChECDg8FDAUCHAEFDBEABQoCGwUKBQoABgQCHQUKCQMoDgIGAwYBAhgDCgIdBQoAAAMDBgECGQMKAh0FCgQAAwMDBgAGAQIYAwoCHQUKBAADAwYBAhkDCgIdBQoAAAMDAwUKBQoIHgVkZXB0aAMEAAAJA0AOAwIIEQEGAAIVBQoCHQUKBQoBAwAAAAAAAAAAAwMABoMCDAMLBAYHBgMCFgMCCgMDAh4DAgICGgMBAwAAAAAAAAAAAwMDAAAACwICAgUFCB8Jc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIIAVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCHwULEQAFCgUKAwAIIQR6TWF4AwQAAAkDNQ4BCgIfBQsIAAMDAAgiBWRlbHRhAwQAAAYDCQMVDgIEBgACIAMCCgMDAwIhAwMCIQMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAiIDAwMDAwAFBAgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQIc2hhZG93VXYFCgQAAAkDOg4BCgIjBQsRAAUKBQoACCUFZGVwdGgDBAAACQM/DgICCBEBCgIkBQoRAAUKAwAGBAIMAwsGBwYDCQM1DgEKAiMFCwgAAwMCCgMDAiUDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d.shader.GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d.shader.LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d.shader.MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d.shader.CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d.shader.NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d.shader.Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d.shader.SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA8BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEA1hdXRvU21vb3RoaW5nAgIAAQAAAAAAEQthbHBoYUN1dG9mZgMCAAASCXNtb290aGluZwMCAAATBm1lZGlhbg4GAAAUCGZyYWdtZW50DgYAAAIDEwMVAXIDBAAAFgFnAwQAABcBYgMEAAADBQENCQMWDgIJAxUOAgIVAwIWAwMJAxUOAgkDFg4CAhUDAhYDAwIXAwMDAAABFAAABQUIGA10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgZCGRpc3RhbmNlAwQAAAAABgQCGQMLBgUCDwEBAgAAAAABAgoCGAUMAAADCwYFAg8BAQIBAAAAAQIKAhgFDAQAAwsGBQIPAQECAgAAAAECCgIYBQwIAAMLBgUCDwEBAgMAAAABAgoCGAUMDAADCQITDgMKAhgFDAAAAwoCGAUMBAADCgIYBQwIAAMDAwMDAwMIGglzbW9vdGhWYWwDBAAACwIQAgkDDw4BBgEJAz4OAQIZAwMBAwAAAAAAAOA/AwMDAhIDAwAGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEQMCGgMDBgACEQMCGgMDAhkDAwUMBQwA";
h3d.shader.SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UGARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAA";
h3d.shader.Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbgkBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAURZm91ckJvbmVzQnlWZXJ0ZXgCAgABAAAAAAAGDWJvbmVzTWF0cml4ZXMPCAQCAAEIBwVpbnB1dA0BBAgIcG9zaXRpb24FCwEHAAkGbm9ybWFsBQsBBwAKB3dlaWdodHMFCwEHAAsHaW5kZXhlcwkEAAAAAQcAAQAADBJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA0GdmVydGV4DgYAAAEADQAABQQGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBQsFCwoCCgULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCCwkEAAAABAADAQgFCwULCgIKBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBQsFCwoCCgULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBgULBQsKAgoFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCCwkEAAAABAADAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBgULBQsKAgoFCwgAAwULBQsFCwsCBQIFAwgOAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCgULAAADCgIKBQsEAAMDCgIKBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAwAAwEIBQsFCwIOAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgILCQQAAAAIAAMBCAYFCwULAg4DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsA";
h3d.shader.SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQJARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAcFaW5wdXQNAQUICHBvc2l0aW9uBQsBBwAJBm5vcm1hbAULAQcACgd0YW5nZW50BQsBBwALB3dlaWdodHMFCwEHAAwHaW5kZXhlcwkEAAAAAQcAAQAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA4GdmVydGV4DgYAAAEADgAABQYGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBQsFCwoCCwULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCDAkEAAAABAADAQgFCwULCgILBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBQsFCwoCCwULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBgULBQsKAgsFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAABAADAQgGBQsFCwoCCwULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwYECgINBQySAAULBgAGAAYBBAYBCgIKBQuSAAULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAAAAADAQgGBQsFCwoCCwULAAADBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAQAAwEIBgULBQsKAgsFCwQAAwULBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwsCBQIFBAgPAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAwAAwEIBQsFCwIPAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAIAAMBCAYFCwULAg8DBQsFCwaACgINBQySAAULBgEEBgEKAgoFC5IABQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAMAAMBCAYFCwULAg8DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsGBAoCDQUMkgAFCwkDHw4BCgINBQySAAULBQsFCwA";
h3d.shader.SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d.shader.Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d.shader.UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d.shader.VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d.shader.VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe.EntryPoint.pending = [];
haxe.EntryPoint.threadCount = 0;
haxe.Unserializer.DEFAULT_RESOLVER = new haxe._Unserializer.DefaultResolver();
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.http.HttpBase._hx_skip_constructor = false;
haxe.io.FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	let h = new haxe.ds.StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe.zip.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hscript.Parser.p1 = 0;
hscript.Parser.tokenMin = 0;
hscript.Parser.tokenMax = 0;
hxd.Precision.F32 = 0;
hxd.Precision.F16 = 1;
hxd.Precision.U8 = 2;
hxd.Precision.S8 = 3;
hxd.Precision.SIZES = [4,2,1,1];
hxd.InputFormat.DFloat = 1;
hxd.InputFormat.DVec2 = 2;
hxd.InputFormat.DVec3 = 3;
hxd.InputFormat.DVec4 = 4;
hxd.InputFormat.DBytes4 = 9;
hxd.BufferFormat._UID = 0;
hxd.BufferFormat.ALL_FORMATS = new haxe.ds.StringMap();
hxd.MultiFormat.UID = 0;
hxd.MultiFormat.CACHE = new haxe.ds.IntMap();
hxd.MultiFormat._UID = 0;
hxd.MultiFormat.MAX_FORMATS = 16;
hxd.Charset.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
hxd.Charset.LATIN1 = "¡¢£¤¥¦§¨©ª«¬-®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿœæŒÆ€";
hxd.Charset.CYRILLIC = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя—";
hxd.Charset.POLISH = "ĄĆĘŁŃÓŚŹŻąćęłńóśźż";
hxd.Charset.TURKISH = "ÂÇĞIİÎÖŞÜÛâçğıİîöşüû";
hxd.Charset.JP_KANA = "　あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわゐゑをんがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽゃゅょアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヰヱヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴャぇっッュョァィゥェォ・ー「」、。『』“”！：？％＆（）－０１２３４５６７８９";
hxd.Charset.UNICODE_SPECIALS = "�□";
hxd.Charset.DEFAULT_CHARS = hxd.Charset.ASCII + hxd.Charset.LATIN1;
hxd.Charset.complementChars = (function($this) {
	var $r;
	let str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻。，";
	let _g = new haxe.ds.IntMap();
	{
		let _g1 = 0;
		let _g2 = str.length;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd.Key.BACKSPACE = 8;
hxd.Key.TAB = 9;
hxd.Key.ENTER = 13;
hxd.Key.SHIFT = 16;
hxd.Key.CTRL = 17;
hxd.Key.ALT = 18;
hxd.Key.ESCAPE = 27;
hxd.Key.SPACE = 32;
hxd.Key.PGUP = 33;
hxd.Key.PGDOWN = 34;
hxd.Key.END = 35;
hxd.Key.HOME = 36;
hxd.Key.LEFT = 37;
hxd.Key.UP = 38;
hxd.Key.RIGHT = 39;
hxd.Key.DOWN = 40;
hxd.Key.INSERT = 45;
hxd.Key.DELETE = 46;
hxd.Key.QWERTY_EQUALS = 187;
hxd.Key.QWERTY_MINUS = 189;
hxd.Key.QWERTY_TILDE = 192;
hxd.Key.QWERTY_BRACKET_LEFT = 219;
hxd.Key.QWERTY_BRACKET_RIGHT = 221;
hxd.Key.QWERTY_SEMICOLON = 186;
hxd.Key.QWERTY_QUOTE = 222;
hxd.Key.QWERTY_BACKSLASH = 220;
hxd.Key.QWERTY_COMMA = 188;
hxd.Key.QWERTY_PERIOD = 190;
hxd.Key.QWERTY_SLASH = 191;
hxd.Key.INTL_BACKSLASH = 226;
hxd.Key.LEFT_WINDOW_KEY = 91;
hxd.Key.RIGHT_WINDOW_KEY = 92;
hxd.Key.CONTEXT_MENU = 93;
hxd.Key.PAUSE_BREAK = 19;
hxd.Key.CAPS_LOCK = 20;
hxd.Key.NUM_LOCK = 144;
hxd.Key.SCROLL_LOCK = 145;
hxd.Key.NUMBER_0 = 48;
hxd.Key.NUMBER_1 = 49;
hxd.Key.NUMBER_2 = 50;
hxd.Key.NUMBER_3 = 51;
hxd.Key.NUMBER_4 = 52;
hxd.Key.NUMBER_5 = 53;
hxd.Key.NUMBER_6 = 54;
hxd.Key.NUMBER_7 = 55;
hxd.Key.NUMBER_8 = 56;
hxd.Key.NUMBER_9 = 57;
hxd.Key.NUMPAD_0 = 96;
hxd.Key.NUMPAD_1 = 97;
hxd.Key.NUMPAD_2 = 98;
hxd.Key.NUMPAD_3 = 99;
hxd.Key.NUMPAD_4 = 100;
hxd.Key.NUMPAD_5 = 101;
hxd.Key.NUMPAD_6 = 102;
hxd.Key.NUMPAD_7 = 103;
hxd.Key.NUMPAD_8 = 104;
hxd.Key.NUMPAD_9 = 105;
hxd.Key.A = 65;
hxd.Key.B = 66;
hxd.Key.C = 67;
hxd.Key.D = 68;
hxd.Key.E = 69;
hxd.Key.F = 70;
hxd.Key.G = 71;
hxd.Key.H = 72;
hxd.Key.I = 73;
hxd.Key.J = 74;
hxd.Key.K = 75;
hxd.Key.L = 76;
hxd.Key.M = 77;
hxd.Key.N = 78;
hxd.Key.O = 79;
hxd.Key.P = 80;
hxd.Key.Q = 81;
hxd.Key.R = 82;
hxd.Key.S = 83;
hxd.Key.T = 84;
hxd.Key.U = 85;
hxd.Key.V = 86;
hxd.Key.W = 87;
hxd.Key.X = 88;
hxd.Key.Y = 89;
hxd.Key.Z = 90;
hxd.Key.F1 = 112;
hxd.Key.F2 = 113;
hxd.Key.F3 = 114;
hxd.Key.F4 = 115;
hxd.Key.F5 = 116;
hxd.Key.F6 = 117;
hxd.Key.F7 = 118;
hxd.Key.F8 = 119;
hxd.Key.F9 = 120;
hxd.Key.F10 = 121;
hxd.Key.F11 = 122;
hxd.Key.F12 = 123;
hxd.Key.F13 = 124;
hxd.Key.F14 = 125;
hxd.Key.F15 = 126;
hxd.Key.F16 = 127;
hxd.Key.F17 = 128;
hxd.Key.F18 = 129;
hxd.Key.F19 = 130;
hxd.Key.F20 = 131;
hxd.Key.F21 = 132;
hxd.Key.F22 = 133;
hxd.Key.F23 = 134;
hxd.Key.F24 = 135;
hxd.Key.NUMPAD_MULT = 106;
hxd.Key.NUMPAD_ADD = 107;
hxd.Key.NUMPAD_ENTER = 108;
hxd.Key.NUMPAD_SUB = 109;
hxd.Key.NUMPAD_DOT = 110;
hxd.Key.NUMPAD_DIV = 111;
hxd.Key.MOUSE_LEFT = 0;
hxd.Key.MOUSE_RIGHT = 1;
hxd.Key.MOUSE_MIDDLE = 2;
hxd.Key.MOUSE_BACK = 3;
hxd.Key.MOUSE_FORWARD = 4;
hxd.Key.MOUSE_WHEEL_UP = 5;
hxd.Key.MOUSE_WHEEL_DOWN = 6;
hxd.Key.LOC_LEFT = 256;
hxd.Key.LOC_RIGHT = 512;
hxd.Key.LSHIFT = 272;
hxd.Key.RSHIFT = 528;
hxd.Key.LCTRL = 273;
hxd.Key.RCTRL = 529;
hxd.Key.LALT = 274;
hxd.Key.RALT = 530;
hxd.Key.initDone = false;
hxd.Key.keyPressed = [];
hxd.Key.ALLOW_KEY_REPEAT = false;
hxd.Math.PI = 3.14159265358979323;
hxd.Math.EPSILON = 1e-10;
hxd.Math.EPSILON2 = 1e-20;
hxd.Channel.R = 0;
hxd.Channel.G = 1;
hxd.Channel.B = 2;
hxd.Channel.A = 3;
hxd.Timer.wantedFPS = 60.;
hxd.Timer.maxDeltaTime = 0.5;
hxd.Timer.smoothFactor = 0.95;
hxd.Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd.Timer.elapsedTime = 0.;
hxd.Timer.frameCount = 0;
hxd.Timer.dt = 1 / hxd.Timer.wantedFPS;
hxd.Timer.currentDT = 1 / hxd.Timer.wantedFPS;
hxd.System.setCursor = hxd.System.setNativeCursor;
hxd.System.loopInit = false;
hxd.System.fpsLimit = -1;
hxd.clipper._Clipper.ClipperBase.HORIZONTAL = -9007199254740992.;
hxd.clipper._Clipper.ClipperBase.TOLERANCE = 1E-20;
hxd.clipper._Clipper.ClipperBase.SKIP = -2;
hxd.clipper._Clipper.ClipperBase.UNASSIGNED = -1;
hxd.fmt.hmd.Position.QTMP = new h3d.Quat();
hxd.fmt.hmd.Data.CURRENT_VERSION = 3;
hxd.fmt.hmd.Reader.BLEND = h2d.BlendMode.__empty_constructs__.slice();
hxd.fmt.hmd.Reader.CULLING = h3d.mat.Face.__empty_constructs__.slice();
hxd.impl.BufferFlags.Dynamic = 0;
hxd.impl.BufferFlags.Static = 1;
hxd.impl.BufferFlags.UniformDynamic = 2;
hxd.res.Resource._hx_skip_constructor = false;
hxd.res.Resource.LIVE_UPDATE = false;
hxd.res.ImageFormat.Jpg = 0;
hxd.res.ImageFormat.Png = 1;
hxd.res.ImageFormat.Gif = 2;
hxd.res.ImageFormat.Tga = 3;
hxd.res.ImageFormat.Dds = 4;
hxd.res.ImageFormat.Raw = 5;
hxd.res.ImageFormat.Hdr = 6;
hxd.res.Image.DEFAULT_FILTER = h3d.mat.Filter.Linear;
hxd.res.Image.MIPMAP_MAX_SIZE = 0;
hxd.res.Image.ENABLE_AUTO_WATCH = true;
hxd.res.Image.BLACK_1x1 = hxd.Pixels.alloc(1,1,hxd.PixelFormat.RGBA);
hxd.res.Image.LOG_TEXTURE_LOAD = false;
hxd.res.NanoJpeg.BLOCKSIZE = 64;
hxd.res.NanoJpeg.W1 = 2841;
hxd.res.NanoJpeg.W2 = 2676;
hxd.res.NanoJpeg.W3 = 2408;
hxd.res.NanoJpeg.W5 = 1609;
hxd.res.NanoJpeg.W6 = 1108;
hxd.res.NanoJpeg.W7 = 565;
hxd.res.NanoJpeg.CF4A = -9;
hxd.res.NanoJpeg.CF4B = 111;
hxd.res.NanoJpeg.CF4C = 29;
hxd.res.NanoJpeg.CF4D = -3;
hxd.res.NanoJpeg.CF3A = 28;
hxd.res.NanoJpeg.CF3B = 109;
hxd.res.NanoJpeg.CF3C = -9;
hxd.res.NanoJpeg.CF3X = 104;
hxd.res.NanoJpeg.CF3Y = 27;
hxd.res.NanoJpeg.CF3Z = -3;
hxd.res.NanoJpeg.CF2A = 139;
hxd.res.NanoJpeg.CF2B = -11;
hxd.res.Sound.ENABLE_AUTO_WATCH = true;
hxd.snd.ChannelBase._hx_skip_constructor = false;
hxd.snd.Channel.ID = 0;
hxd.snd.EffectDriver._hx_skip_constructor = false;
hxd.snd.Source.ID = 0;
hxd.snd.Manager.STREAM_DURATION = 5.;
hxd.snd.Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd.snd.Manager.BUFFER_QUEUE_LENGTH = 2;
hxd.snd.Manager.MAX_SOURCES = 16;
hxd.snd.Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd.snd.Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd.snd.Manager.BUFFER_STREAM_SPLIT = 16;
hxd.snd.webaudio.BufferPlayback.FADE_SAMPLES = 10;
hxsl.Tools.UID = 0;
hxsl.Tools.SWIZ = hxsl.Component.__empty_constructs__.slice();
hxsl.Tools.MAX_CHANNELS_BITS = 3;
hxsl.BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXIDAQ9CYXRjaF9IYXNPZmZzZXQCAgABAAAAAAACC0JhdGNoX0NvdW50AQIAAQAAAAEAAwxCYXRjaF9CdWZmZXIQBQwCAgAAAA";
hxsl.GlslOut.KWD_LIST = ["input","output","discard","sample","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl.GlslOut.KWDS = (function($this) {
	var $r;
	let _g = new haxe.ds.StringMap();
	{
		let _g1 = 0;
		let _g2 = hxsl.GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			let k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl.GlslOut.GLOBALS = (function($this) {
	var $r;
	let gl = [];
	{
		let _g = 0;
		let _g1 = hxsl.TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			let g = _g1[_g];
			++_g;
			let n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			gl[g._hx_index] = n;
		}
	}
	gl[hxsl.TGlobal.ToInt._hx_index] = "int";
	gl[hxsl.TGlobal.ToFloat._hx_index] = "float";
	gl[hxsl.TGlobal.ToBool._hx_index] = "bool";
	gl[hxsl.TGlobal.LReflect._hx_index] = "reflect";
	gl[hxsl.TGlobal.Mat3x4._hx_index] = "_mat3x4";
	gl[hxsl.TGlobal.VertexID._hx_index] = "gl_VertexID";
	gl[hxsl.TGlobal.InstanceID._hx_index] = "gl_InstanceID";
	gl[hxsl.TGlobal.IVec2._hx_index] = "ivec2";
	gl[hxsl.TGlobal.IVec3._hx_index] = "ivec3";
	gl[hxsl.TGlobal.IVec4._hx_index] = "ivec4";
	gl[hxsl.TGlobal.BVec2._hx_index] = "bvec2";
	gl[hxsl.TGlobal.BVec3._hx_index] = "bvec3";
	gl[hxsl.TGlobal.BVec4._hx_index] = "bvec4";
	gl[hxsl.TGlobal.FragCoord._hx_index] = "gl_FragCoord";
	gl[hxsl.TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl.TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl.TGlobal.FloatBitsToUint._hx_index] = "_floatBitsToUint";
	gl[hxsl.TGlobal.UintBitsToFloat._hx_index] = "_uintBitsToFloat";
	{
		let _g2 = 0;
		while(_g2 < gl.length) {
			let g = gl[_g2];
			++_g2;
			hxsl.GlslOut.KWDS.h[g] = true;
		}
	}
	$r = gl;
	return $r;
}(this));
hxsl.GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl._Linker.ShaderInfos.UID = 0;
hxsl.Printer.SWIZ = ["x","y","z","w"];
hxsl.RuntimeShader.UID = 0;
hxsl.Serializer.TVECS = new haxe.ds.IntMap();
hxsl.Serializer.BOPS = (function($this) {
	var $r;
	let ops = haxe.macro.Binop.__empty_constructs__.slice();
	ops.splice(haxe.macro.Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl.Serializer.UNOPS = haxe.macro.Unop.__empty_constructs__.slice();
hxsl.Serializer.TGLOBALS = hxsl.TGlobal.__empty_constructs__.slice();
hxsl.Serializer.TSWIZ = new haxe.ds.IntMap();
hxsl.Serializer.REGS = [hxsl.Component.X,hxsl.Component.Y,hxsl.Component.Z,hxsl.Component.W];
hxsl.Serializer.VKINDS = hxsl.VarKind.__empty_constructs__.slice();
hxsl.Serializer.PRECS = hxsl.Prec.__empty_constructs__.slice();
hxsl.Serializer.FKIND = hxsl.FunctionKind.__empty_constructs__.slice();
hxsl.Serializer.SIGN = 9139229;
hxsl.ShaderList.MAX_LIST_SIZE = 0;
hxsl.ShaderList.ALLOW_DUPLICATES = true;
hxsl.ShaderInstance.UID = 0;
hxsl.SharedShader.UNROLL_LOOPS = false;
{
	Main.main();
	haxe.EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
